
labProject_BinaryMathGame.elf:     file format elf32-littlenios2
labProject_BinaryMathGame.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00027c50 memsz 0x00027c50 flags r-x
    LOAD off    0x00028c70 vaddr 0x00027c70 paddr 0x00029a74 align 2**12
         filesz 0x00001e04 memsz 0x00001e04 flags rw-
    LOAD off    0x0002b878 vaddr 0x0002b878 paddr 0x0002b878 align 2**12
         filesz 0x00000000 memsz 0x00029848 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000272a4  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000784  000274ec  000274ec  000284ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e04  00027c70  00029a74  00028c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00029848  0002b878  0002b878  0002b878  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000550c0  000550c0  0002aa74  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  0002aa74  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0002aa74  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001208  00000000  00000000  0002aa98  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000335da  00000000  00000000  0002bca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bf5e  00000000  00000000  0005f27a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010f36  00000000  00000000  0006b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000453c  00000000  00000000  0007c110  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005e48  00000000  00000000  0008064c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001c81c  00000000  00000000  00086494  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000a2cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001af0  00000000  00000000  000a2cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000aae3a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000aae40  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000aae45  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000aae46  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000aae47  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000aae4b  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000aae4f  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000aae53  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000aae5c  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000aae65  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000aae6e  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000004d  00000000  00000000  000aae79  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abe3  00000000  00000000  000aaec6  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001bd175  00000000  00000000  000b5aa9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
000274ec l    d  .rodata	00000000 .rodata
00027c70 l    d  .rwdata	00000000 .rwdata
0002b878 l    d  .bss	00000000 .bss
000550c0 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ucosii_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 de2_keys.c
00000000 l    df *ABS*	00000000 de2_lcd.c
00000000 l    df *ABS*	00000000 de2_led.c
00000000 l    df *ABS*	00000000 de2_seven_segment_hex.c
00000000 l    df *ABS*	00000000 de2_spencerAnimations.c
00000000 l    df *ABS*	00000000 de2_sw.c
00000000 l    df *ABS*	00000000 de2_vga.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00008b3c l     F .text	000002c4 populateLevels
00009360 l     F .text	000001ac createGeneralTasks
0000950c l     F .text	000001a8 createOnBoardTasks
000096b4 l     F .text	000001e8 createVGATasks
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00027856 l     O .rodata	00000010 zeroes.4389
00027866 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
00027876 l     O .rodata	00000010 zeroes.4404
0000fb3c l     F .text	000000bc __sbprintf
00027886 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000fd4c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0001187c l     F .text	00000008 __fp_unlock
00011890 l     F .text	0000019c __sinit.part.1
00011a2c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00027c70 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000280b4 l     O .rwdata	00000020 lc_ctype_charset
00028094 l     O .rwdata	00000020 lc_message_charset
000280d4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000278b8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000279ec l     O .rodata	00000010 blanks.4332
000279dc l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
00015608 l     F .text	000000fc __sprint_r.part.0
00027a0c l     O .rodata	00000010 blanks.4348
000279fc l     O .rodata	00000010 zeroes.4349
00016b94 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0001b28c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001b398 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001b3c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0001b4b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001b590 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001b67c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0001b848 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000299e8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001ba94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
000299ec l     O .rwdata	00000004 lockid
0002b8fc l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
000299f0 l     O .rwdata	00000004 lockid
0002b904 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0001d4c4 l     F .text	00000048 OS_InitMisc
0001d50c l     F .text	0000006c OS_InitRdyList
0001d678 l     F .text	000000e4 OS_InitTCBList
0001d3e4 l     F .text	000000e0 OS_InitEventList
0001d578 l     F .text	00000080 OS_InitTaskIdle
0001d5f8 l     F .text	00000080 OS_InitTaskStat
0001d8e8 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0001f608 l     F .text	000000f4 OS_FlagTaskRdy
0001f3c8 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00024180 l     F .text	00000034 alt_dev_reg
000286bc l     O .rwdata	0000106c JTAG_UART
00029728 l     O .rwdata	00000030 Audio_Subsystem_Audio
00029758 l     O .rwdata	0000002c Char_LCD_16x2
00029784 l     O .rwdata	0000002c Expansion_JP5
000297b0 l     O .rwdata	0000002c Green_LEDs
000297dc l     O .rwdata	0000002c HEX3_HEX0
00029808 l     O .rwdata	0000002c HEX7_HEX4
00029834 l     O .rwdata	0000002c Pushbuttons
00029860 l     O .rwdata	0000002c Red_LEDs
0002988c l     O .rwdata	0000002c Slider_Switches
000298b8 l     O .rwdata	00000038 PS2_Port
000298f0 l     O .rwdata	00000038 PS2_Port_Dual
00029928 l     O .rwdata	0000002c Serial_Port
00029954 l     O .rwdata	00000034 USB
00029988 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000245bc l     F .text	000002a8 altera_avalon_jtag_uart_irq
00024864 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00025040 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000261b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00026414 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000266d4 l     F .text	0000003c alt_get_errno
00026710 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0002b968 g     O .bss	00000004 alt_instruction_exception_handler
00008940 g     F .text	0000004c get_hex_value_from_switches
0000a090 g     F .text	00000168 TaskDisplayEndOfLevelLCD
00013d0c g     F .text	00000074 _mprec_log10
00029a3e g     O .rwdata	00000002 OSTaskNameSize
0002b994 g     O .bss	00002000 TaskUpdateQuestionNumberLCD_stk
00013df8 g     F .text	0000008c __any_on
000175ec g     F .text	00000054 _isatty_r
000278c4 g     O .rodata	00000028 __mprec_tinytens
0001b78c g     F .text	000000bc alt_main
00054fc0 g     O .bss	00000100 alt_irq
00025870 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
0000ac00 g     F .text	00000160 TaskDisplayTimerVGA
00017640 g     F .text	00000060 _lseek_r
0002b880 g     O .bss	00000004 HEXDisplaySem
00006f54 g     F .text	00000c5c spencerTimeRunningOutPose2
0002b87c g     O .bss	00000004 QuestionsCorrect
000208f0 g     F .text	000000cc OS_MemInit
00029a74 g       *ABS*	00000000 __flash_rwdata_start
00024120 g     F .text	00000060 OSTimeSet
00009198 g     F .text	00000040 getReadyGoForwardLevel
000251a4 g     F .text	00000040 alt_up_character_lcd_send_cmd
00019ef8 g     F .text	00000088 .hidden __eqdf2
0002b884 g     O .bss	00000004 LCDDisplaySem
0001c138 g     F .text	00000610 OSEventPendMulti
000550c0 g       *ABS*	00000000 __alt_heap_start
00026d1c g     F .text	00000024 OSTaskCreateHook
0000a770 g     F .text	00000074 TaskUpdateQuestionNumberLCD
00009290 g     F .text	000000d0 updateLevel
0000b5d8 g     F .text	0000003c printf
00029a16 g     O .rwdata	00000002 OSMboxEn
0000056c g     F .text	00000038 LCD_clear
0001c7a0 g     F .text	0000004c OSIntEnter
00017f18 g     F .text	0000009c _wcrtomb_r
00000394 g     F .text	00000038 edgecapture_key_is_pressed
00014024 g     F .text	0000005c __sseek
00011bcc g     F .text	00000010 __sinit
00017dc0 g     F .text	00000140 __swbuf_r
00025688 g     F .text	00000034 read_CE_bit
00029a26 g     O .rwdata	00000002 OSQEn
000121d8 g     F .text	0000007c _setlocale_r
00011a34 g     F .text	00000068 __sfmoreglue
0001be0c g     F .text	000000cc __malloc_unlock
00026d84 g     F .text	00000020 OSTaskStatHook
00025a10 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
00025f04 g     F .text	00000090 alt_up_rs232_read_fd
0002b90c g     O .bss	00000001 OSLockNesting
000002bc g     F .text	00000044 wait_for_key_depress
0000045c g     F .text	0000006c LCD_cursor
00029a64 g     O .rwdata	00000002 OSDataSize
0002b90d g     O .bss	00000001 OSRunning
0000ad60 g     F .text	00000058 TaskDisplayLevelVGA
000176a0 g     F .text	0000015c memmove
00000770 g     F .text	00000054 toggle_ledr_bit
00026dc4 g     F .text	00000020 OSInitHookBegin
00029a5c g     O .rwdata	00000002 OSTmrSize
00000b94 g     F .text	0000010c get_display_from_hex
00011bb4 g     F .text	00000018 _cleanup
00012e88 g     F .text	000000a8 _Balloc
0002d994 g     O .bss	00002000 TaskScanKey_stk
0002b910 g     O .bss	00000004 OSIdleCtr
0002b888 g     O .bss	00000004 KeyPress3Sem
0000b210 g     F .text	000000dc .hidden __gtdf2
00026acc g     F .text	00000024 altera_nios2_gen2_irq_init
00026b9c g       .text	00000000 OSStartTsk
00025130 g     F .text	00000074 get_DDRAM_addr
0001dc28 g     F .text	000002d4 OS_TCBInit
00008f74 g     F .text	00000060 getOperationSymbol
00000000 g     F .entry	0000001c __reset
0002b88c g     O .bss	00000004 UpdateQuestionSem
00029a62 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00029a02 g     O .rwdata	00000002 OSEventSize
0002b914 g     O .bss	00000001 OSPrioHighRdy
000170d4 g     F .text	0000005c _fstat_r
00026d40 g     F .text	00000024 OSTaskDelHook
0002b8e8 g     O .bss	00000004 errno
00013fa0 g     F .text	00000008 __seofread
00026b7c g       .text	00000000 OSStartHighRdy
000003cc g     F .text	00000064 edgecapture_any_key_is_pressed
00022bbc g     F .text	000001e4 OSTaskCreateExt
000143cc g     F .text	0000123c ___svfiprintf_internal_r
0001ef10 g     F .text	00000060 OSFlagPendGetFlagsRdy
00029a42 g     O .rwdata	00000002 OSTaskStatStkSize
000006b8 g     F .text	00000058 clear_ledr_bit
0001e08c g     F .text	00000308 OSFlagAccept
00020f28 g     F .text	000000b8 OSQFlush
000209bc g     F .text	00000140 OSQAccept
0002b8f4 g     O .bss	00000004 alt_argv
000319b4 g       *ABS*	00000000 _gp
00022a10 g     F .text	000001ac OSTaskCreate
00022520 g     F .text	000004f0 OSTaskChangePrio
0002b908 g     O .bss	00000004 alt_heapsem
0001defc g     F .text	00000190 OSDebugInit
00022da0 g     F .text	00000344 OSTaskDel
0002f994 g     O .bss	00002000 TaskSubmit_stk
00004fe0 g     F .text	000009f8 spencerLosePose2
00031994 g     O .bss	00002000 TaskStartup_stk
0002853c g     O .rwdata	00000180 alt_fd_list
00051a3c g     O .bss	00000370 OSFlagTbl
00000284 g     F .text	00000038 key_is_pressed
0001d1c4 g     F .text	000000b8 OS_EventTaskRemove
00026350 g     F .text	00000090 alt_find_dev
0000b460 g     F .text	00000148 memcpy
00029a2c g     O .rwdata	00000002 OSRdyTblSize
0002534c g     F .text	00000050 alt_up_character_lcd_write_fd
00011884 g     F .text	0000000c _cleanup_r
0000a318 g     F .text	00000250 TaskUpdateQuestion
0001b108 g     F .text	000000dc .hidden __floatsidf
000264d8 g     F .text	0000007c alt_io_redirect
00019f80 g     F .text	000000f4 .hidden __ltdf2
0002b890 g     O .bss	00000004 QuestionPosedMbox
000274ec g       *ABS*	00000000 __DTOR_END__
00025e90 g     F .text	00000074 alt_up_rs232_read_data
000270bc g     F .text	0000009c alt_exception_cause_generated_bad_addr
0001bed8 g     F .text	00000120 OSEventNameGet
00029a10 g     O .rwdata	00000002 OSFlagMax
00013e84 g     F .text	00000074 __fpclassifyd
00013c68 g     F .text	000000a4 __ratio
0001c7ec g     F .text	000000f8 OSIntExit
00016b78 g     F .text	0000001c __vfiprintf_internal
00000820 g     F .text	0000004c is_ledr_set
00029a4a g     O .rwdata	00000002 OSTCBSize
0002b915 g     O .bss	00000001 OSPrioCur
00024ac0 g     F .text	000002bc altera_avalon_jtag_uart_read
0000b5a8 g     F .text	00000030 _printf_r
000004c8 g     F .text	0000006c LCD_text
00018ca8 g     F .text	00000064 .hidden __udivsi3
0001b4ec g     F .text	000000a4 isatty
00029a30 g     O .rwdata	00000002 OSStkWidth
00027914 g     O .rodata	000000c8 __mprec_tens
00029a24 g     O .rwdata	00000002 OSPtrSize
0000909c g     F .text	0000003c inHexMode
00012254 g     F .text	0000000c __locale_charset
00029a04 g     O .rwdata	00000002 OSEventTblSize
00000368 g     F .text	0000002c clear_key_interrupt
00026af0 g       .text	00000000 OSCtxSw
0002702c g     F .text	00000090 alt_icache_flush
0002b894 g     O .bss	00000004 TimeRemaining
0002b8e4 g     O .bss	00000004 __malloc_top_pad
0002b918 g     O .bss	00000004 OSTCBList
0002b8ec g     O .bss	00000004 alt_fd_list_lock
00000330 g     F .text	00000038 interrupt_key_is_pressed
000299c0 g     O .rwdata	00000004 __mb_cur_max
0002b898 g     O .bss	00000004 LevelDisplaySem
00012284 g     F .text	0000000c _localeconv_r
00017130 g     F .text	000004bc __sfvwrite_r
00013294 g     F .text	0000003c __i2b
00000ce0 g     F .text	000005bc display_a_decimal_number_starting_on_any_seven_segment
00051dac g     O .bss	00000c30 OSMemTbl
0002b91c g     O .bss	00000001 OSTickStepState
00013ef8 g     F .text	00000054 _sbrk_r
00029a28 g     O .rwdata	00000002 OSQMax
000529dc g     O .bss	00000800 OSTaskStatStk
0002052c g     F .text	000000f0 OSMemNameGet
00029a08 g     O .rwdata	00000002 OSFlagEn
000177fc g     F .text	00000060 _read_r
00029a4e g     O .rwdata	00000002 OSTimeTickHookEn
000213d8 g     F .text	00000168 OSQPost
0001f6fc g     F .text	000000a4 OS_FlagUnlink
000299e0 g     O .rwdata	00000004 alt_max_fd
00025e0c g     F .text	00000044 alt_up_rs232_check_parity
0001d7b0 g     F .text	00000068 OS_MemCopy
0001d818 g     F .text	000000d0 OS_Sched
00016dc8 g     F .text	000000f0 _fclose_r
0000129c g     F .text	00000038 explode_seven_segment
0002043c g     F .text	000000f0 OSMemGet
00020158 g     F .text	00000110 OSMboxQuery
00009118 g     F .text	00000040 getReadyDisplayResult
000233cc g     F .text	000001b4 OSTaskNameSet
000256bc g     F .text	00000030 read_num_bytes_available
0001184c g     F .text	00000030 fflush
0002b8e0 g     O .bss	00000004 __malloc_max_sbrked_mem
0002b920 g     O .bss	00000004 OSCtxSwCtr
00026da4 g     F .text	00000020 OSTimeTickHook
00026554 g     F .text	00000180 alt_irq_register
00029a12 g     O .rwdata	00000002 OSFlagNameSize
00025624 g     F .text	00000034 read_RI_bit
0000b2ec g     F .text	00000110 .hidden __extendsfdf2
00033994 g     O .bss	00002000 TaskDisplayEndOfLevelLCD_stk
00000ca0 g     F .text	00000040 display_a_decimal_number_on_seven_segment
0001d27c g     F .text	00000100 OS_EventTaskRemoveMulti
00018d64 g     F .text	000008ac .hidden __adddf3
0000adb8 g     F .text	0000008c TaskUpdateQuestionPosedVGA
0001d074 g     F .text	00000150 OS_EventTaskWaitMulti
00013a10 g     F .text	0000010c __b2d
00029a2a g     O .rwdata	00000002 OSQSize
00018678 g     F .text	00000538 .hidden __umoddi3
0001b6b8 g     F .text	000000d4 lseek
00021e88 g     F .text	0000020c OSSemPend
000299b8 g     O .rwdata	00000004 _global_impure_ptr
0001785c g     F .text	00000564 _realloc_r
00002fec g     F .text	00000b60 spencerWinPose2
00029a14 g     O .rwdata	00000002 OSLowestPrio
000550c0 g       *ABS*	00000000 __bss_end
00026e24 g     F .text	00000024 OSTCBInitHook
00029a5a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
000269c4 g     F .text	00000108 alt_tick
0001feec g     F .text	00000110 OSMboxPost
00018100 g     F .text	00000578 .hidden __udivdi3
00009f20 g     F .text	0000008c TaskScanKey
00017030 g     F .text	00000024 _fputwc_r
000299fc g     O .rwdata	00000002 OSEventEn
000278ec g     O .rodata	00000028 __mprec_bigtens
00013078 g     F .text	00000104 __s2b
00029a56 g     O .rwdata	00000002 OSTmrCfgNameSize
0001b1e4 g     F .text	000000a8 .hidden __floatunsidf
00013750 g     F .text	00000060 __mcmp
00025720 g     F .text	0000002c read_data_byte
0002b89c g     O .bss	00000004 VGAAnimationCuesFlags
000089c0 g     F .text	00000030 get_value_of_all_switches
00011bec g     F .text	00000018 __fp_lock_all
0001f528 g     F .text	000000e0 OS_FlagInit
00035994 g     O .bss	00002000 TaskDisplayTimerVGA_stk
00026928 g     F .text	0000009c alt_alarm_stop
00025658 g     F .text	00000030 read_RE_bit
00029a38 g     O .rwdata	00000002 OSTaskIdleStkSize
0002b95c g     O .bss	00000004 alt_irq_active
00021ac0 g     F .text	000000b0 OSSemAccept
00008aa8 g     F .text	00000094 VGA_text
00020730 g     F .text	000000d8 OSMemPut
00003b4c g     F .text	00000b60 spencerWinPose3
00020268 g     F .text	000001d4 OSMemCreate
0002b924 g     O .bss	00000004 OSIdleCtrMax
000000fc g     F .exceptions	000000d8 alt_irq_handler
00028514 g     O .rwdata	00000028 alt_dev_null
00029a4c g     O .rwdata	00000002 OSTicksPerSec
000255ec g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
00026af0 g       .text	00000000 OSIntCtxSw
00009060 g     F .text	0000003c inVGAMode
000258d0 g     F .text	00000074 alt_up_ps2_write_data_byte
00026190 g     F .text	00000020 alt_dcache_flush_all
0001317c g     F .text	00000068 __hi0bits
0002b8a0 g     O .bss	00000004 SwitchValueSem
00008fd4 g     F .text	0000008c getAns
0001b088 g     F .text	00000080 .hidden __fixdfsi
0000a6e4 g     F .text	0000008c TaskUpdateQuestionPosedLCD
000005a4 g     F .text	00000030 set_ledr
0002b928 g     O .bss	00000004 OSTCBFreeList
00029a74 g       *ABS*	00000000 __ram_rwdata_end
00022094 g     F .text	0000016c OSSemPendAbort
0000086c g     F .text	00000050 is_ledg_set
000299d8 g     O .rwdata	00000008 alt_dev_list
0001bad0 g     F .text	000000f8 write
00029a50 g     O .rwdata	00000002 OSVersionNbr
0002b8a4 g     O .bss	00000004 ProgramStateFlags
00027c70 g       *ABS*	00000000 __ram_rodata_end
0001b400 g     F .text	000000b0 fstat
00025f94 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00019f80 g     F .text	000000f4 .hidden __ledf2
000299f8 g     O .rwdata	00000004 OSEndiannessTest
000134c8 g     F .text	00000140 __pow5mult
0001571c g     F .text	0000145c ___vfiprintf_internal_r
0002b8d8 g     O .bss	00000004 __nlocale_changed
00018d0c g     F .text	00000058 .hidden __umodsi3
00001318 g     F .text	00000918 spencerNeutralPose1
00029a0a g     O .rwdata	00000002 OSFlagGrpSize
000550c0 g       *ABS*	00000000 end
00000710 g     F .text	00000060 clear_ledg_bit
00025c00 g     F .text	00000098 alt_up_ps2_write_fd
00024480 g     F .text	0000013c altera_avalon_jtag_uart_init
0001da80 g     F .text	000000dc OS_TaskStat
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0000a68c g     F .text	00000058 TaskDisplayLevel
000012d4 g     F .text	00000044 spencerBGReset
000274ec g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
000250bc g     F .text	00000074 alt_avalon_timer_sc_init
0000b3fc g     F .text	00000064 .hidden __clzsi2
00024d7c g     F .text	000002c4 altera_avalon_jtag_uart_write
00011bdc g     F .text	00000004 __sfp_lock_acquire
00012c7c g     F .text	000000e4 memchr
0001d75c g     F .text	00000054 OS_MemClr
00025258 g     F .text	0000007c alt_up_character_lcd_write
0000d928 g     F .text	000021f8 ___vfprintf_internal_r
00026bc0 g     F .text	0000015c OSTaskStkInit
0000b68c g     F .text	00000058 _sprintf_r
0002b8a8 g     O .bss	00000004 KeyPress2Sem
00037994 g     O .bss	00002000 TaskDisplayResultLCD_stk
00011d40 g     F .text	00000310 _free_r
0002b8ac g     O .bss	00000004 VGADisplaySem
00012260 g     F .text	00000010 __locale_mb_cur_max
0001cdcc g     F .text	00000198 OS_EventTaskRdy
00027338 g     F .text	00000180 __call_exitprocs
0002b92c g     O .bss	00000001 OSCPUUsage
0002b8d4 g     O .bss	00000004 __mlocale_changed
000299c4 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
0002b960 g     O .bss	00000004 _alt_tick_rate
00020fe0 g     F .text	0000028c OSQPend
000007c4 g     F .text	0000005c toggle_ledg_bit
0000990c g     F .text	0000051c explodeBinaryMathGame
0000065c g     F .text	0000005c set_ledg_bit
00023c8c g     F .text	00000104 OSTimeDly
0000b62c g     F .text	00000060 rand
00013608 g     F .text	00000148 __lshift
0002b964 g     O .bss	00000004 _alt_nticks
0001b884 g     F .text	000000fc read
000241ec g     F .text	00000130 alt_sys_init
0002549c g     F .text	0000008c alt_up_character_lcd_shift_display
0000b0ec g     F .text	00000124 .hidden __floatsisf
000141fc g     F .text	000001d0 __ssprint_r
000090d8 g     F .text	00000040 getReadyNewQuestion
00027220 g     F .text	00000118 __register_exitproc
0002b92d g     O .bss	00000001 OSTaskCtr
00007bb0 g     F .text	00000d90 spencerTimeRunningOutPose3
00025b1c g     F .text	00000058 alt_up_ps2_clear_fifo
00025dd0 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000089f0 g     F .text	000000b8 VGA_box
0000aacc g     F .text	00000134 TaskDisplayResultVGA
00023d90 g     F .text	00000160 OSTimeDlyHMSM
000132d0 g     F .text	000001f8 __multiply
00025528 g     F .text	0000008c alt_up_character_lcd_erase_pos
00024968 g     F .text	00000068 altera_avalon_jtag_uart_close
00009ff4 g     F .text	0000009c TaskSubmit
00008e00 g     F .text	00000064 getNumber
00027c70 g       *ABS*	00000000 __ram_rwdata_start
000274ec g       *ABS*	00000000 __ram_rodata_start
0002b96c g     O .bss	00000028 __malloc_current_mallinfo
000299fe g     O .rwdata	00000002 OSEventMax
00013b1c g     F .text	0000014c __d2b
00022200 g     F .text	00000110 OSSemPost
0001c970 g     F .text	000000dc OSSchedUnlock
000059d8 g     F .text	000009f8 spencerLosePose3
0002431c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00026f50 g     F .text	000000dc alt_get_fd
0002b930 g     O .bss	00000004 OSMemFreeList
0001cabc g     F .text	000000b0 OSStatInit
0001f304 g     F .text	000000c4 OSFlagQuery
000091d8 g     F .text	00000040 getReadyGoBackwardLevel
00029a34 g     O .rwdata	00000002 OSTaskCreateExtEn
00016cb0 g     F .text	00000054 _close_r
000271a4 g     F .text	0000007c memcmp
0001cdac g     F .text	00000020 OS_Dummy
000243dc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000550c0 g       *ABS*	00000000 __alt_stack_base
0002442c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000fbf8 g     F .text	00000154 __swsetup_r
000531dc g     O .bss	000001e0 OSQTbl
00019610 g     F .text	000008e8 .hidden __divdf3
00011a9c g     F .text	00000118 __sfp
000005d4 g     F .text	00000034 set_ledg
00013d80 g     F .text	00000078 __copybits
00039994 g     O .bss	00002000 TaskUpdateQuestionNumberVGA_stk
0002810c g     O .rwdata	00000408 __malloc_av_
00011be8 g     F .text	00000004 __sinit_lock_release
0002b934 g     O .bss	00000004 OSTCBHighRdy
0001a074 g     F .text	00000718 .hidden __muldf3
00013f4c g     F .text	00000054 __sread
0003b994 g     O .bss	00002000 TaskDrawAnimationsVGA_stk
0002b938 g     O .bss	00000004 OSQFreeList
00025d30 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
00026e48 g     F .text	00000108 alt_find_file
000261ec g     F .text	000000a4 alt_dev_llist_insert
0001bcec g     F .text	00000120 __malloc_lock
0001b9e4 g     F .text	000000b0 sbrk
0000b750 g     F .text	000021d8 ___svfprintf_internal_r
0003d994 g     O .bss	00002000 TaskDisplayLevel_stk
0001bff8 g     F .text	00000140 OSEventNameSet
000117f0 g     F .text	0000005c _fflush_r
00008ec8 g     F .text	000000ac getOperation
00016d04 g     F .text	000000c4 _calloc_r
0002b93c g     O .bss	00000001 OSRdyGrp
0002b8b0 g     O .bss	00000004 KeyPress1Sem
0002b8b4 g     O .bss	00000004 CurrentCorrectAnswer
0002b8b8 g     O .bss	00000004 CurrentLevelNumber
000299b4 g     O .rwdata	00000004 AnimationState
0002b878 g       *ABS*	00000000 __bss_start
00012d60 g     F .text	00000128 memset
0000a5e0 g     F .text	000000ac TaskDisplayTimer
0000aeb4 g     F .text	00000238 main
0002b8f8 g     O .bss	00000004 alt_envp
0002b8dc g     O .bss	00000004 __malloc_max_total_mem
0002437c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00017f00 g     F .text	00000018 __swbuf
0000b614 g     F .text	00000018 srand
0002b878 g     O .bss	00000004 OnQuestionNum
00027a38 g     O .rodata	00000100 OSUnMapTbl
00029a2e g     O .rwdata	00000002 OSSemEn
00000534 g     F .text	00000038 LCD_cursor_off
00025410 g     F .text	0000008c alt_up_character_lcd_shift_cursor
0001ef70 g     F .text	00000394 OSFlagPost
00014080 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00016eb8 g     F .text	00000014 fclose
0001cf64 g     F .text	00000110 OS_EventTaskWait
00025aac g     F .text	00000070 alt_up_ps2_read_data_byte
00002548 g     F .text	00000aa4 spencerWinPose1
0001db5c g     F .text	000000cc OS_TaskStatStkChk
000230e4 g     F .text	00000150 OSTaskDelReq
0000ff4c g     F .text	00001688 _dtoa_r
00012470 g     F .text	0000080c _malloc_r
00018074 g     F .text	00000030 __ascii_wctomb
000299e4 g     O .rwdata	00000004 alt_errno
0001ca4c g     F .text	00000070 OSStart
0001bc8c g     F .text	00000060 __env_unlock
00012050 g     F .text	000000c4 _fwalk
00023580 g     F .text	000001d4 OSTaskResume
00020808 g     F .text	000000e8 OSMemQuery
00029a40 g     O .rwdata	00000002 OSTaskStatEn
00029a1a g     O .rwdata	00000002 OSMemMax
00021540 g     F .text	00000170 OSQPostFront
00025c98 g     F .text	0000003c alt_up_ps2_open_dev
00018bb0 g     F .text	00000084 .hidden __divsi3
0002b93d g     O .bss	00000003 OSRdyTbl
000299f4 g     O .rwdata	00000002 OSDebugEn
0002521c g     F .text	0000003c alt_up_character_lcd_open_dev
00011c1c g     F .text	00000124 _malloc_trim_r
00025814 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
000274ec g       *ABS*	00000000 __CTOR_END__
00029a0c g     O .rwdata	00000002 OSFlagNodeSize
000063d0 g     F .text	00000b84 spencerTimeRunningOutPose1
00029a54 g     O .rwdata	00000002 OSTmrCfgMax
000251e4 g     F .text	00000038 alt_up_character_lcd_init
00014088 g     F .text	000000dc strcmp
0003f994 g     O .bss	00002000 TaskDisplayEndOfLevelVGA_stk
00020afc g     F .text	000001ac OSQCreate
00023234 g     F .text	00000198 OSTaskNameGet
000274ec g       *ABS*	00000000 __flash_rodata_start
000216b0 g     F .text	0000020c OSQPostOpt
0001cb6c g     F .text	00000220 OSTimeTick
00029a3c g     O .rwdata	00000002 OSTaskMax
000274ec g       *ABS*	00000000 __DTOR_LIST__
00021b70 g     F .text	000000d8 OSSemCreate
00029a60 g     O .rwdata	00000002 OSTmrWheelSize
00009fac g     F .text	00000048 TaskScanSwitch
00026028 g     F .text	0000003c alt_up_rs232_open_dev
00019ef8 g     F .text	00000088 .hidden __nedf2
00029a36 g     O .rwdata	00000002 OSTaskDelEn
00022310 g     F .text	00000110 OSSemQuery
00020ca8 g     F .text	00000280 OSQDel
0002126c g     F .text	0000016c OSQPendAbort
000241b4 g     F .text	00000038 alt_irq_init
0001b980 g     F .text	00000064 alt_release_fd
000256ec g     F .text	00000034 read_data_valid
0000b6e4 g     F .text	0000006c sprintf
000255b4 g     F .text	00000038 alt_up_character_lcd_cursor_off
00027713 g     O .rodata	00000100 .hidden __clz_tab
0002b8d0 g     O .bss	00000004 _PathLocale
00008e64 g     F .text	00000064 getNumberMult
000259ac g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00027158 g     F .text	00000014 atexit
00016c50 g     F .text	00000060 _write_r
0001c8e4 g     F .text	0000008c OSSchedLock
00012290 g     F .text	00000018 setlocale
0001e394 g     F .text	00000108 OSFlagCreate
0000a7e4 g     F .text	00000140 TaskDrawAnimationsVGA
000299bc g     O .rwdata	00000004 _impure_ptr
0002b8bc g     O .bss	00000004 ResetStateFlags
0002b8f0 g     O .bss	00000004 alt_argc
000115d4 g     F .text	0000021c __sflush_r
000262f0 g     F .text	00000060 _do_dtors
0001227c g     F .text	00000008 __locale_cjk_lang
00029a06 g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
000046ac g     F .text	00000934 spencerLosePose1
0001e49c g     F .text	00000248 OSFlagDel
0002b940 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0001fd80 g     F .text	0000016c OSMboxPendAbort
000139ac g     F .text	00000064 __ulp
0001e958 g     F .text	000005b8 OSFlagPend
00029a52 g     O .rwdata	00000002 OSTmrEn
00011c04 g     F .text	00000018 __fp_unlock_all
0000a1f8 g     F .text	00000120 TaskDisplayResultLCD
000299d0 g     O .rwdata	00000008 alt_fs_list
00041994 g     O .bss	00002000 TaskDisplayResultVGA_stk
0001d95c g     F .text	00000074 OS_StrCopy
00025cd4 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0002b8c0 g     O .bss	00000004 LevelGoFlags
00000430 g     F .text	0000002c clear_edgecapture_register
00025e50 g     F .text	00000040 alt_up_rs232_write_data
00000300 g     F .text	00000030 enable_key_interrupts
00029a1c g     O .rwdata	00000002 OSMemNameSize
00000608 g     F .text	00000054 set_ledr_bit
00026de4 g     F .text	00000020 OSInitHookEnd
00043994 g     O .bss	00002000 TaskUpdateTimer_stk
00009218 g     F .text	00000078 clearLevel
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000898c g     F .text	00000034 get_value_of_switch
00029a48 g     O .rwdata	00000002 OSTCBPrioTblMax
000122a8 g     F .text	0000000c localeconv
00029a44 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001f838 g     F .text	000000d4 OSMboxCreate
00029a18 g     O .rwdata	00000002 OSMemEn
00001c30 g     F .text	00000918 spencerNeutralPose2
00029a22 g     O .rwdata	00000002 OSMutexEn
00029a74 g       *ABS*	00000000 _edata
00045994 g     O .bss	00002000 TaskUpdateQuestion_stk
000550c0 g       *ABS*	00000000 _end
0002b944 g     O .bss	00000001 OSIntNesting
00016ecc g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
000249d0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00023ef0 g     F .text	000001d4 OSTimeDlyResume
0001e80c g     F .text	0000014c OSFlagNameSet
0001fb4c g     F .text	00000234 OSMboxPend
00023754 g     F .text	000001c0 OSTaskStkChk
00029a1e g     O .rwdata	00000002 OSMemSize
00013fa8 g     F .text	0000007c __swrite
000299c8 g     O .rwdata	00000004 __malloc_trim_threshold
00012270 g     F .text	0000000c __locale_msgcharset
0002b948 g     O .bss	00000004 OSTCBCur
0002716c g     F .text	00000038 exit
00029a20 g     O .rwdata	00000002 OSMemTblSize
00012114 g     F .text	000000c4 _fwalk_reent
0002574c g     F .text	000000c8 alt_up_ps2_init
000137b0 g     F .text	000001fc __mdiff
00018c34 g     F .text	00000074 .hidden __modsi3
0001f7a0 g     F .text	00000098 OSMboxAccept
00009158 g     F .text	00000040 getReadyEndOfLevel
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00011be0 g     F .text	00000004 __sfp_lock_release
0001c748 g     F .text	00000058 OSInit
00023af8 g     F .text	00000124 OSTaskQuery
00047994 g     O .bss	00000018 CurrentLevel
000252d4 g     F .text	00000078 alt_up_character_lcd_string
00021a18 g     F .text	000000a8 OS_QInit
0001d9d0 g     F .text	00000054 OS_StrLen
000479ac g     O .bss	00002000 TaskDisplayTimer_stk
0002061c g     F .text	00000114 OSMemNameSet
0002b8c4 g     O .bss	00000004 QuestionNumberMbox
00029a3a g     O .rwdata	00000002 OSTaskProfileEn
0002b94c g     O .bss	00000004 OSTime
000499ac g     O .bss	00000090 Levels
000533bc g     O .bss	00000800 OSTaskIdleStk
0002b8c8 g     O .bss	00000004 DisplayResultSem
000274b8 g     F .text	00000034 _exit
0001fffc g     F .text	0000015c OSMboxPostOpt
0000a568 g     F .text	00000078 TaskUpdateTimer
00026064 g     F .text	0000012c alt_alarm_start
0001e6e4 g     F .text	00000128 OSFlagNameGet
00049a3c g     O .bss	00002000 TaskUpdateQuestionPosedLCD_stk
000240c4 g     F .text	0000005c OSTimeGet
000122b4 g     F .text	000001bc __smakebuf_r
0004ba3c g     O .bss	00002000 TaskUpdateQuestionPosedVGA_stk
00025944 g     F .text	00000068 alt_up_ps2_wait_for_ack
00014164 g     F .text	00000098 strlen
00026d64 g     F .text	00000020 OSTaskSwHook
000267d4 g     F .text	00000154 open
00053bbc g     O .bss	00000b40 OSEventTbl
0000b210 g     F .text	000000dc .hidden __gedf2
0000a924 g     F .text	000001a8 TaskDisplayEndOfLevelVGA
000546fc g     O .bss	00000870 OSTCBTbl
00022420 g     F .text	00000100 OSSemSet
0004da3c g     O .bss	00002000 TaskDisplayLevelVGA_stk
0000989c g     F .text	00000070 explodeVGAAnimationCuesFlags
000299cc g     O .rwdata	00000004 __wctomb
000008bc g     F .text	000002d8 display_hex_on_seven_segment
0002b8cc g     O .bss	00000004 SwitchValue
00015704 g     F .text	00000018 __sprint_r
000263e0 g     F .text	00000034 alt_icache_flush_all
0002539c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00029a68 g     O .rwdata	00000004 alt_priority_mask
00021c48 g     F .text	00000240 OSSemDel
0002b950 g     O .bss	00000004 OSFlagFreeList
00029a00 g     O .rwdata	00000002 OSEventNameSize
0000fb20 g     F .text	0000001c __vfprintf_internal
0001f90c g     F .text	00000240 OSMboxDel
0002b954 g     O .bss	00000001 OSStatRdy
00054f6c g     O .bss	00000054 OSTCBPrioTbl
000180a4 g     F .text	0000005c _wctomb_r
0001bbc8 g     F .text	000000c4 __env_lock
00025b74 g     F .text	0000008c alt_up_ps2_read_fd
00029a46 g     O .rwdata	00000002 OSTaskSwHookEn
00009e28 g     F .text	000000f8 TaskStartup
0001a78c g     F .text	000008fc .hidden __subdf3
000131e4 g     F .text	000000b0 __lo0bits
00029a6c g     O .rwdata	00000008 alt_alarm_list
00029a0e g     O .rwdata	00000002 OSFlagWidth
00026290 g     F .text	00000060 _do_ctors
0004fa3c g     O .bss	00002000 TaskScanSwitch_stk
00025d90 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00017fb4 g     F .text	000000c0 wcrtomb
0001b2c8 g     F .text	000000d0 close
0002b900 g     O .bss	00000004 alt_envsem
0002b958 g     O .bss	00000004 OSIdleCtrRun
0001cd8c g     F .text	00000020 OSVersion
00029a58 g     O .rwdata	00000002 OSTmrCfgWheelSize
0001b5f8 g     F .text	00000084 alt_load
00023c1c g     F .text	00000070 OS_TaskStkClr
00029a32 g     O .rwdata	00000002 OSTaskCreateEn
0001d37c g     F .text	00000068 OS_EventWaitListInit
00017054 g     F .text	00000080 fputwc
00026e04 g     F .text	00000020 OSTaskIdleHook
00011be4 g     F .text	00000004 __sinit_lock_acquire
00012f58 g     F .text	00000120 __multadd
00023914 g     F .text	000001e4 OSTaskSuspend
00012f30 g     F .text	00000028 _Bfree
0000ae44 g     F .text	00000070 TaskUpdateQuestionNumberVGA
0001da24 g     F .text	0000005c OS_TaskIdle
00029a5e g     O .rwdata	00000002 OSTmrTblSize
000218bc g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	001c7a00 	call	1c7a0 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800174 	movhi	r2,5
 140:	1093f004 	addi	r2,r2,20416
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800174 	movhi	r2,5
 158:	1093f004 	addi	r2,r2,20416
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	001c7ec0 	call	1c7ec <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a7ed17 	ldw	r2,-24652(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a7ed17 	ldw	r2,-24652(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     254:	d6866d14 	ori	gp,gp,6580
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     25c:	10ae1e14 	ori	r2,r2,47224

    movhi r3, %hi(__bss_end)
     260:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
     264:	18d43014 	ori	r3,r3,20672

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	001b5f80 	call	1b5f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	001b78c0 	call	1b78c <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <alt_after_alt_main>

00000284 <key_is_pressed>:

#include "nios2_ctrl_reg_macros.h"
#include "de2_keys.h"

// Detects whether a key has been pressed. Returns int cast boolean.
int key_is_pressed (de2key_t key) {
     284:	defffe04 	addi	sp,sp,-8
     288:	df000115 	stw	fp,4(sp)
     28c:	df000104 	addi	fp,sp,4
     290:	e13fff15 	stw	r4,-4(fp)
	return KEYS&key;
     294:	00840034 	movhi	r2,4096
     298:	10801404 	addi	r2,r2,80
     29c:	10800017 	ldw	r2,0(r2)
     2a0:	1007883a 	mov	r3,r2
     2a4:	e0bfff17 	ldw	r2,-4(fp)
     2a8:	1884703a 	and	r2,r3,r2
}
     2ac:	e037883a 	mov	sp,fp
     2b0:	df000017 	ldw	fp,0(sp)
     2b4:	dec00104 	addi	sp,sp,4
     2b8:	f800283a 	ret

000002bc <wait_for_key_depress>:

void wait_for_key_depress (de2key_t key) {
     2bc:	defffe04 	addi	sp,sp,-8
     2c0:	df000115 	stw	fp,4(sp)
     2c4:	df000104 	addi	fp,sp,4
     2c8:	e13fff15 	stw	r4,-4(fp)
	while (KEYS&key);
     2cc:	0001883a 	nop
     2d0:	00840034 	movhi	r2,4096
     2d4:	10801404 	addi	r2,r2,80
     2d8:	10800017 	ldw	r2,0(r2)
     2dc:	1007883a 	mov	r3,r2
     2e0:	e0bfff17 	ldw	r2,-4(fp)
     2e4:	1884703a 	and	r2,r3,r2
     2e8:	103ff91e 	bne	r2,zero,2d0 <wait_for_key_depress+0x14>
}
     2ec:	0001883a 	nop
     2f0:	e037883a 	mov	sp,fp
     2f4:	df000017 	ldw	fp,0(sp)
     2f8:	dec00104 	addi	sp,sp,4
     2fc:	f800283a 	ret

00000300 <enable_key_interrupts>:

void enable_key_interrupts (void) {
     300:	deffff04 	addi	sp,sp,-4
     304:	df000015 	stw	fp,0(sp)
     308:	d839883a 	mov	fp,sp
	// write to the pushbutton interrupt mask register,
	// and set 3 mask bits to 1 (bit 0 is Nios II reset) 
	*(KEY_PTR+2) = 0xE; 
     30c:	00840034 	movhi	r2,4096
     310:	10801604 	addi	r2,r2,88
     314:	00c00384 	movi	r3,14
     318:	10c00015 	stw	r3,0(r2)
	// set interrupt mask bits for level 2 (pushbuttons)
	//NIOS2_WRITE_IENABLE( 0x2 );
}
     31c:	0001883a 	nop
     320:	e037883a 	mov	sp,fp
     324:	df000017 	ldw	fp,0(sp)
     328:	dec00104 	addi	sp,sp,4
     32c:	f800283a 	ret

00000330 <interrupt_key_is_pressed>:

int interrupt_key_is_pressed (de2key_t key) {
     330:	defffe04 	addi	sp,sp,-8
     334:	df000115 	stw	fp,4(sp)
     338:	df000104 	addi	fp,sp,4
     33c:	e13fff15 	stw	r4,-4(fp)
	return *(KEY_PTR + 3) & key;
     340:	00840034 	movhi	r2,4096
     344:	10801704 	addi	r2,r2,92
     348:	10800017 	ldw	r2,0(r2)
     34c:	1007883a 	mov	r3,r2
     350:	e0bfff17 	ldw	r2,-4(fp)
     354:	1884703a 	and	r2,r3,r2
}
     358:	e037883a 	mov	sp,fp
     35c:	df000017 	ldw	fp,0(sp)
     360:	dec00104 	addi	sp,sp,4
     364:	f800283a 	ret

00000368 <clear_key_interrupt>:

void clear_key_interrupt (void) {
     368:	deffff04 	addi	sp,sp,-4
     36c:	df000015 	stw	fp,0(sp)
     370:	d839883a 	mov	fp,sp
	*(KEY_PTR + 3) = 0;
     374:	00840034 	movhi	r2,4096
     378:	10801704 	addi	r2,r2,92
     37c:	10000015 	stw	zero,0(r2)
}
     380:	0001883a 	nop
     384:	e037883a 	mov	sp,fp
     388:	df000017 	ldw	fp,0(sp)
     38c:	dec00104 	addi	sp,sp,4
     390:	f800283a 	ret

00000394 <edgecapture_key_is_pressed>:
// Pre: key = key_t to determine whether it has
// been pressed according to the edgecapture register
// Return: int-cast boolean over whether 
// particular key in edgecapture register has
// been pressed
int edgecapture_key_is_pressed (de2key_t key) {
     394:	defffe04 	addi	sp,sp,-8
     398:	df000115 	stw	fp,4(sp)
     39c:	df000104 	addi	fp,sp,4
     3a0:	e13fff15 	stw	r4,-4(fp)
	return KEYS_EDGECAPTURE&key;
     3a4:	00840034 	movhi	r2,4096
     3a8:	10801704 	addi	r2,r2,92
     3ac:	10800017 	ldw	r2,0(r2)
     3b0:	1007883a 	mov	r3,r2
     3b4:	e0bfff17 	ldw	r2,-4(fp)
     3b8:	1884703a 	and	r2,r3,r2
}
     3bc:	e037883a 	mov	sp,fp
     3c0:	df000017 	ldw	fp,0(sp)
     3c4:	dec00104 	addi	sp,sp,4
     3c8:	f800283a 	ret

000003cc <edgecapture_any_key_is_pressed>:

// Return: int-cast boolean over whether 
// any key in edgecapture register has
// been pressed
int edgecapture_any_key_is_pressed (void) {
     3cc:	deffff04 	addi	sp,sp,-4
     3d0:	df000015 	stw	fp,0(sp)
     3d4:	d839883a 	mov	fp,sp
	return (KEYS_EDGECAPTURE&KEY1) || (KEYS_EDGECAPTURE&KEY2) || (KEYS_EDGECAPTURE&KEY3);
     3d8:	00840034 	movhi	r2,4096
     3dc:	10801704 	addi	r2,r2,92
     3e0:	10800017 	ldw	r2,0(r2)
     3e4:	1080008c 	andi	r2,r2,2
     3e8:	10000a1e 	bne	r2,zero,414 <edgecapture_any_key_is_pressed+0x48>
     3ec:	00840034 	movhi	r2,4096
     3f0:	10801704 	addi	r2,r2,92
     3f4:	10800017 	ldw	r2,0(r2)
     3f8:	1080010c 	andi	r2,r2,4
     3fc:	1000051e 	bne	r2,zero,414 <edgecapture_any_key_is_pressed+0x48>
     400:	00840034 	movhi	r2,4096
     404:	10801704 	addi	r2,r2,92
     408:	10800017 	ldw	r2,0(r2)
     40c:	1080020c 	andi	r2,r2,8
     410:	10000226 	beq	r2,zero,41c <edgecapture_any_key_is_pressed+0x50>
     414:	00800044 	movi	r2,1
     418:	00000106 	br	420 <edgecapture_any_key_is_pressed+0x54>
     41c:	0005883a 	mov	r2,zero
}
     420:	e037883a 	mov	sp,fp
     424:	df000017 	ldw	fp,0(sp)
     428:	dec00104 	addi	sp,sp,4
     42c:	f800283a 	ret

00000430 <clear_edgecapture_register>:

// Clear edgecapture register
void clear_edgecapture_register (void) {
     430:	deffff04 	addi	sp,sp,-4
     434:	df000015 	stw	fp,0(sp)
     438:	d839883a 	mov	fp,sp
	*(KEYS_EDGECAPTURE_PTR) = 0;
     43c:	00840034 	movhi	r2,4096
     440:	10801704 	addi	r2,r2,92
     444:	10000015 	stw	zero,0(r2)
}
     448:	0001883a 	nop
     44c:	e037883a 	mov	sp,fp
     450:	df000017 	ldw	fp,0(sp)
     454:	dec00104 	addi	sp,sp,4
     458:	f800283a 	ret

0000045c <LCD_cursor>:

/****************************************************************************************
 * Subroutine to move the LCD cursor
****************************************************************************************/
void LCD_cursor(int x, int y)
{
     45c:	defffb04 	addi	sp,sp,-20
     460:	df000415 	stw	fp,16(sp)
     464:	df000404 	addi	fp,sp,16
     468:	e13ffe15 	stw	r4,-8(fp)
     46c:	e17fff15 	stw	r5,-4(fp)
  	volatile char * LCD_display_ptr = (char *) 0x10003050;	// 16x2 character display
     470:	00840034 	movhi	r2,4096
     474:	108c1404 	addi	r2,r2,12368
     478:	e0bffd15 	stw	r2,-12(fp)
	char instruction;

	instruction = x;
     47c:	e0bffe17 	ldw	r2,-8(fp)
     480:	e0bffc05 	stb	r2,-16(fp)
	if (y != 0) instruction |= 0x40;				// set bit 6 for bottom row
     484:	e0bfff17 	ldw	r2,-4(fp)
     488:	10000326 	beq	r2,zero,498 <LCD_cursor+0x3c>
     48c:	e0bffc03 	ldbu	r2,-16(fp)
     490:	10801014 	ori	r2,r2,64
     494:	e0bffc05 	stb	r2,-16(fp)
	instruction |= 0x80;								// need to set bit 7 to set the cursor location
     498:	e0fffc03 	ldbu	r3,-16(fp)
     49c:	00bfe004 	movi	r2,-128
     4a0:	1884b03a 	or	r2,r3,r2
     4a4:	e0bffc05 	stb	r2,-16(fp)
	*(LCD_display_ptr) = instruction;			// write to the LCD instruction register
     4a8:	e0bffd17 	ldw	r2,-12(fp)
     4ac:	e0fffc03 	ldbu	r3,-16(fp)
     4b0:	10c00005 	stb	r3,0(r2)
}
     4b4:	0001883a 	nop
     4b8:	e037883a 	mov	sp,fp
     4bc:	df000017 	ldw	fp,0(sp)
     4c0:	dec00104 	addi	sp,sp,4
     4c4:	f800283a 	ret

000004c8 <LCD_text>:

/****************************************************************************************
 * Subroutine to send a string of text to the LCD
****************************************************************************************/
void LCD_text(char * text_ptr)
{
     4c8:	defffd04 	addi	sp,sp,-12
     4cc:	df000215 	stw	fp,8(sp)
     4d0:	df000204 	addi	fp,sp,8
     4d4:	e13fff15 	stw	r4,-4(fp)
  	volatile char * LCD_display_ptr = (char *) 0x10003050;	// 16x2 character display
     4d8:	00840034 	movhi	r2,4096
     4dc:	108c1404 	addi	r2,r2,12368
     4e0:	e0bffe15 	stw	r2,-8(fp)

  	while ( *(text_ptr) )
     4e4:	00000806 	br	508 <LCD_text+0x40>
  	{

  		*(LCD_display_ptr + 1) = *(text_ptr);	// write to the LCD data register
     4e8:	e0bffe17 	ldw	r2,-8(fp)
     4ec:	10800044 	addi	r2,r2,1
     4f0:	e0ffff17 	ldw	r3,-4(fp)
     4f4:	18c00003 	ldbu	r3,0(r3)
     4f8:	10c00005 	stb	r3,0(r2)
  		++text_ptr;
     4fc:	e0bfff17 	ldw	r2,-4(fp)
     500:	10800044 	addi	r2,r2,1
     504:	e0bfff15 	stw	r2,-4(fp)
****************************************************************************************/
void LCD_text(char * text_ptr)
{
  	volatile char * LCD_display_ptr = (char *) 0x10003050;	// 16x2 character display

  	while ( *(text_ptr) )
     508:	e0bfff17 	ldw	r2,-4(fp)
     50c:	10800003 	ldbu	r2,0(r2)
     510:	10803fcc 	andi	r2,r2,255
     514:	1080201c 	xori	r2,r2,128
     518:	10bfe004 	addi	r2,r2,-128
     51c:	103ff21e 	bne	r2,zero,4e8 <LCD_text+0x20>

  		*(LCD_display_ptr + 1) = *(text_ptr);	// write to the LCD data register
  		++text_ptr;

  	}
}
     520:	0001883a 	nop
     524:	e037883a 	mov	sp,fp
     528:	df000017 	ldw	fp,0(sp)
     52c:	dec00104 	addi	sp,sp,4
     530:	f800283a 	ret

00000534 <LCD_cursor_off>:

/****************************************************************************************
 * Subroutine to turn off the LCD cursor
****************************************************************************************/
void LCD_cursor_off(void)
{
     534:	defffe04 	addi	sp,sp,-8
     538:	df000115 	stw	fp,4(sp)
     53c:	df000104 	addi	fp,sp,4
  	volatile char * LCD_display_ptr = (char *) 0x10003050;	// 16x2 character display
     540:	00840034 	movhi	r2,4096
     544:	108c1404 	addi	r2,r2,12368
     548:	e0bfff15 	stw	r2,-4(fp)
	*(LCD_display_ptr) = 0x0C;		// instruction: 0 000100									// turn off the LCD cursor
     54c:	e0bfff17 	ldw	r2,-4(fp)
     550:	00c00304 	movi	r3,12
     554:	10c00005 	stb	r3,0(r2)
}
     558:	0001883a 	nop
     55c:	e037883a 	mov	sp,fp
     560:	df000017 	ldw	fp,0(sp)
     564:	dec00104 	addi	sp,sp,4
     568:	f800283a 	ret

0000056c <LCD_clear>:

/****************************************************************************************
 * Subroutine to clear the LCD cursor
****************************************************************************************/
void LCD_clear(void)
{
     56c:	defffe04 	addi	sp,sp,-8
     570:	df000115 	stw	fp,4(sp)
     574:	df000104 	addi	fp,sp,4
  	volatile char * LCD_display_ptr = (char *) 0x10003050;	// 16x2 character display
     578:	00840034 	movhi	r2,4096
     57c:	108c1404 	addi	r2,r2,12368
     580:	e0bfff15 	stw	r2,-4(fp)
	*(LCD_display_ptr) = 0x01;											// clear the LCD
     584:	e0bfff17 	ldw	r2,-4(fp)
     588:	00c00044 	movi	r3,1
     58c:	10c00005 	stb	r3,0(r2)
}
     590:	0001883a 	nop
     594:	e037883a 	mov	sp,fp
     598:	df000017 	ldw	fp,0(sp)
     59c:	dec00104 	addi	sp,sp,4
     5a0:	f800283a 	ret

000005a4 <set_ledr>:

#include "de2_led.h"

// Pre: set_value = int (preferrably hex) value to set the
//      red LEDs to (in a hex boolean-esque fashion)
void set_ledr (int set_value) {
     5a4:	defffe04 	addi	sp,sp,-8
     5a8:	df000115 	stw	fp,4(sp)
     5ac:	df000104 	addi	fp,sp,4
     5b0:	e13fff15 	stw	r4,-4(fp)
	*(LEDR_PTR) = set_value;
     5b4:	00840034 	movhi	r2,4096
     5b8:	e0ffff17 	ldw	r3,-4(fp)
     5bc:	10c00015 	stw	r3,0(r2)
}
     5c0:	0001883a 	nop
     5c4:	e037883a 	mov	sp,fp
     5c8:	df000017 	ldw	fp,0(sp)
     5cc:	dec00104 	addi	sp,sp,4
     5d0:	f800283a 	ret

000005d4 <set_ledg>:

// Pre: set_value = int (preferrably hex) value to set the
//      green LEDs to (in a hex boolean-esque fashion)
void set_ledg (int set_value) {
     5d4:	defffe04 	addi	sp,sp,-8
     5d8:	df000115 	stw	fp,4(sp)
     5dc:	df000104 	addi	fp,sp,4
     5e0:	e13fff15 	stw	r4,-4(fp)
	*(LEDG_PTR) = set_value;
     5e4:	00840034 	movhi	r2,4096
     5e8:	10800404 	addi	r2,r2,16
     5ec:	e0ffff17 	ldw	r3,-4(fp)
     5f0:	10c00015 	stw	r3,0(r2)
}
     5f4:	0001883a 	nop
     5f8:	e037883a 	mov	sp,fp
     5fc:	df000017 	ldw	fp,0(sp)
     600:	dec00104 	addi	sp,sp,4
     604:	f800283a 	ret

00000608 <set_ledr_bit>:

// Pre: bit = int bit (valid [17:0]) to set
//      in the LEDR
void set_ledr_bit (int bit) {
     608:	defffe04 	addi	sp,sp,-8
     60c:	df000115 	stw	fp,4(sp)
     610:	df000104 	addi	fp,sp,4
     614:	e13fff15 	stw	r4,-4(fp)
	if (bit > 17) return;
     618:	e0bfff17 	ldw	r2,-4(fp)
     61c:	10800490 	cmplti	r2,r2,18
     620:	10000926 	beq	r2,zero,648 <set_ledr_bit+0x40>
	*(LEDR_PTR) |= (0x1 << bit);
     624:	00840034 	movhi	r2,4096
     628:	00c40034 	movhi	r3,4096
     62c:	19000017 	ldw	r4,0(r3)
     630:	01400044 	movi	r5,1
     634:	e0ffff17 	ldw	r3,-4(fp)
     638:	28c6983a 	sll	r3,r5,r3
     63c:	20c6b03a 	or	r3,r4,r3
     640:	10c00015 	stw	r3,0(r2)
     644:	00000106 	br	64c <set_ledr_bit+0x44>
}

// Pre: bit = int bit (valid [17:0]) to set
//      in the LEDR
void set_ledr_bit (int bit) {
	if (bit > 17) return;
     648:	0001883a 	nop
	*(LEDR_PTR) |= (0x1 << bit);
}
     64c:	e037883a 	mov	sp,fp
     650:	df000017 	ldw	fp,0(sp)
     654:	dec00104 	addi	sp,sp,4
     658:	f800283a 	ret

0000065c <set_ledg_bit>:

// Pre: bit = int bit (valid [8:0]) to set
//      in the LEDG
void set_ledg_bit (int bit) {
     65c:	defffe04 	addi	sp,sp,-8
     660:	df000115 	stw	fp,4(sp)
     664:	df000104 	addi	fp,sp,4
     668:	e13fff15 	stw	r4,-4(fp)
	if (bit > 8) return;
     66c:	e0bfff17 	ldw	r2,-4(fp)
     670:	10800250 	cmplti	r2,r2,9
     674:	10000b26 	beq	r2,zero,6a4 <set_ledg_bit+0x48>
	*(LEDG_PTR) |= (0x1 << bit);
     678:	00840034 	movhi	r2,4096
     67c:	10800404 	addi	r2,r2,16
     680:	00c40034 	movhi	r3,4096
     684:	18c00404 	addi	r3,r3,16
     688:	19000017 	ldw	r4,0(r3)
     68c:	01400044 	movi	r5,1
     690:	e0ffff17 	ldw	r3,-4(fp)
     694:	28c6983a 	sll	r3,r5,r3
     698:	20c6b03a 	or	r3,r4,r3
     69c:	10c00015 	stw	r3,0(r2)
     6a0:	00000106 	br	6a8 <set_ledg_bit+0x4c>
}

// Pre: bit = int bit (valid [8:0]) to set
//      in the LEDG
void set_ledg_bit (int bit) {
	if (bit > 8) return;
     6a4:	0001883a 	nop
	*(LEDG_PTR) |= (0x1 << bit);
}
     6a8:	e037883a 	mov	sp,fp
     6ac:	df000017 	ldw	fp,0(sp)
     6b0:	dec00104 	addi	sp,sp,4
     6b4:	f800283a 	ret

000006b8 <clear_ledr_bit>:

// Pre: bit = int bit (valid [17:0]) to clear
//      in the LEDR
void clear_ledr_bit (int bit) {
     6b8:	defffe04 	addi	sp,sp,-8
     6bc:	df000115 	stw	fp,4(sp)
     6c0:	df000104 	addi	fp,sp,4
     6c4:	e13fff15 	stw	r4,-4(fp)
	if (bit > 17) return;
     6c8:	e0bfff17 	ldw	r2,-4(fp)
     6cc:	10800490 	cmplti	r2,r2,18
     6d0:	10000a26 	beq	r2,zero,6fc <clear_ledr_bit+0x44>
	*(LEDR_PTR) &= ~(0x1 << bit);
     6d4:	00840034 	movhi	r2,4096
     6d8:	00c40034 	movhi	r3,4096
     6dc:	19000017 	ldw	r4,0(r3)
     6e0:	01400044 	movi	r5,1
     6e4:	e0ffff17 	ldw	r3,-4(fp)
     6e8:	28c6983a 	sll	r3,r5,r3
     6ec:	00c6303a 	nor	r3,zero,r3
     6f0:	20c6703a 	and	r3,r4,r3
     6f4:	10c00015 	stw	r3,0(r2)
     6f8:	00000106 	br	700 <clear_ledr_bit+0x48>
}

// Pre: bit = int bit (valid [17:0]) to clear
//      in the LEDR
void clear_ledr_bit (int bit) {
	if (bit > 17) return;
     6fc:	0001883a 	nop
	*(LEDR_PTR) &= ~(0x1 << bit);
}
     700:	e037883a 	mov	sp,fp
     704:	df000017 	ldw	fp,0(sp)
     708:	dec00104 	addi	sp,sp,4
     70c:	f800283a 	ret

00000710 <clear_ledg_bit>:

// Pre: bit = int bit (valid [8:0]) to clear
//      on in the LEDG
void clear_ledg_bit (int bit) {
     710:	defffe04 	addi	sp,sp,-8
     714:	df000115 	stw	fp,4(sp)
     718:	df000104 	addi	fp,sp,4
     71c:	e13fff15 	stw	r4,-4(fp)
	if (bit > 8) return;
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	10800250 	cmplti	r2,r2,9
     728:	10000c26 	beq	r2,zero,75c <clear_ledg_bit+0x4c>
	*(LEDG_PTR) &= ~(0x1 << bit);
     72c:	00840034 	movhi	r2,4096
     730:	10800404 	addi	r2,r2,16
     734:	00c40034 	movhi	r3,4096
     738:	18c00404 	addi	r3,r3,16
     73c:	19000017 	ldw	r4,0(r3)
     740:	01400044 	movi	r5,1
     744:	e0ffff17 	ldw	r3,-4(fp)
     748:	28c6983a 	sll	r3,r5,r3
     74c:	00c6303a 	nor	r3,zero,r3
     750:	20c6703a 	and	r3,r4,r3
     754:	10c00015 	stw	r3,0(r2)
     758:	00000106 	br	760 <clear_ledg_bit+0x50>
}

// Pre: bit = int bit (valid [8:0]) to clear
//      on in the LEDG
void clear_ledg_bit (int bit) {
	if (bit > 8) return;
     75c:	0001883a 	nop
	*(LEDG_PTR) &= ~(0x1 << bit);
}
     760:	e037883a 	mov	sp,fp
     764:	df000017 	ldw	fp,0(sp)
     768:	dec00104 	addi	sp,sp,4
     76c:	f800283a 	ret

00000770 <toggle_ledr_bit>:

// Pre: bit = int bit (valid [17:0]) to toggle
//      in the LEDR
void toggle_ledr_bit (int bit) {
     770:	defffe04 	addi	sp,sp,-8
     774:	df000115 	stw	fp,4(sp)
     778:	df000104 	addi	fp,sp,4
     77c:	e13fff15 	stw	r4,-4(fp)
	if (bit > 17) return;
     780:	e0bfff17 	ldw	r2,-4(fp)
     784:	10800490 	cmplti	r2,r2,18
     788:	10000926 	beq	r2,zero,7b0 <toggle_ledr_bit+0x40>
	*(LEDR_PTR) ^= (0x1 << bit);
     78c:	00840034 	movhi	r2,4096
     790:	00c40034 	movhi	r3,4096
     794:	19000017 	ldw	r4,0(r3)
     798:	01400044 	movi	r5,1
     79c:	e0ffff17 	ldw	r3,-4(fp)
     7a0:	28c6983a 	sll	r3,r5,r3
     7a4:	20c6f03a 	xor	r3,r4,r3
     7a8:	10c00015 	stw	r3,0(r2)
     7ac:	00000106 	br	7b4 <toggle_ledr_bit+0x44>
}

// Pre: bit = int bit (valid [17:0]) to toggle
//      in the LEDR
void toggle_ledr_bit (int bit) {
	if (bit > 17) return;
     7b0:	0001883a 	nop
	*(LEDR_PTR) ^= (0x1 << bit);
}
     7b4:	e037883a 	mov	sp,fp
     7b8:	df000017 	ldw	fp,0(sp)
     7bc:	dec00104 	addi	sp,sp,4
     7c0:	f800283a 	ret

000007c4 <toggle_ledg_bit>:

// Pre: bit = int bit (valid [8:0]) to toggle
//      on in the LEDG
void toggle_ledg_bit (int bit) {
     7c4:	defffe04 	addi	sp,sp,-8
     7c8:	df000115 	stw	fp,4(sp)
     7cc:	df000104 	addi	fp,sp,4
     7d0:	e13fff15 	stw	r4,-4(fp)
	if (bit > 8) return;
     7d4:	e0bfff17 	ldw	r2,-4(fp)
     7d8:	10800250 	cmplti	r2,r2,9
     7dc:	10000b26 	beq	r2,zero,80c <toggle_ledg_bit+0x48>
	*(LEDG_PTR) ^= (0x1 << bit);
     7e0:	00840034 	movhi	r2,4096
     7e4:	10800404 	addi	r2,r2,16
     7e8:	00c40034 	movhi	r3,4096
     7ec:	18c00404 	addi	r3,r3,16
     7f0:	19000017 	ldw	r4,0(r3)
     7f4:	01400044 	movi	r5,1
     7f8:	e0ffff17 	ldw	r3,-4(fp)
     7fc:	28c6983a 	sll	r3,r5,r3
     800:	20c6f03a 	xor	r3,r4,r3
     804:	10c00015 	stw	r3,0(r2)
     808:	00000106 	br	810 <toggle_ledg_bit+0x4c>
}

// Pre: bit = int bit (valid [8:0]) to toggle
//      on in the LEDG
void toggle_ledg_bit (int bit) {
	if (bit > 8) return;
     80c:	0001883a 	nop
	*(LEDG_PTR) ^= (0x1 << bit);
}
     810:	e037883a 	mov	sp,fp
     814:	df000017 	ldw	fp,0(sp)
     818:	dec00104 	addi	sp,sp,4
     81c:	f800283a 	ret

00000820 <is_ledr_set>:
// Pre: bit = int bit (valid [17:0]) to test whether it is
//      on in the LEDR
// Return: int-cast bool regarding whether the particular
// LEDR is set; iff it is, returns >0; returns -1 if bit is
// invalid
int is_ledr_set (int bit) {
     820:	defffe04 	addi	sp,sp,-8
     824:	df000115 	stw	fp,4(sp)
     828:	df000104 	addi	fp,sp,4
     82c:	e13fff15 	stw	r4,-4(fp)
	if (bit > 17) return 0;
     830:	e0bfff17 	ldw	r2,-4(fp)
     834:	10800490 	cmplti	r2,r2,18
     838:	1000021e 	bne	r2,zero,844 <is_ledr_set+0x24>
     83c:	0005883a 	mov	r2,zero
     840:	00000606 	br	85c <is_ledr_set+0x3c>
	return LEDR&(0x1 << bit);
     844:	00840034 	movhi	r2,4096
     848:	10c00017 	ldw	r3,0(r2)
     84c:	01000044 	movi	r4,1
     850:	e0bfff17 	ldw	r2,-4(fp)
     854:	2084983a 	sll	r2,r4,r2
     858:	1884703a 	and	r2,r3,r2
}
     85c:	e037883a 	mov	sp,fp
     860:	df000017 	ldw	fp,0(sp)
     864:	dec00104 	addi	sp,sp,4
     868:	f800283a 	ret

0000086c <is_ledg_set>:
// Pre: bit = int bit (valid [8:0]) to test whether it is
//      on in the LEDG
// Return: int-cast bool regarding whether the particular
// LEDG is set; iff it is, returns >0; returns -1 if bit is
// invalid
int is_ledg_set (int bit) {
     86c:	defffe04 	addi	sp,sp,-8
     870:	df000115 	stw	fp,4(sp)
     874:	df000104 	addi	fp,sp,4
     878:	e13fff15 	stw	r4,-4(fp)
	if (bit > 8) return 0;
     87c:	e0bfff17 	ldw	r2,-4(fp)
     880:	10800250 	cmplti	r2,r2,9
     884:	1000021e 	bne	r2,zero,890 <is_ledg_set+0x24>
     888:	0005883a 	mov	r2,zero
     88c:	00000706 	br	8ac <is_ledg_set+0x40>
	return LEDG&(0x1 << bit);
     890:	00840034 	movhi	r2,4096
     894:	10800404 	addi	r2,r2,16
     898:	10c00017 	ldw	r3,0(r2)
     89c:	01000044 	movi	r4,1
     8a0:	e0bfff17 	ldw	r2,-4(fp)
     8a4:	2084983a 	sll	r2,r4,r2
     8a8:	1884703a 	and	r2,r3,r2
}
     8ac:	e037883a 	mov	sp,fp
     8b0:	df000017 	ldw	fp,0(sp)
     8b4:	dec00104 	addi	sp,sp,4
     8b8:	f800283a 	ret

000008bc <display_hex_on_seven_segment>:
// Display a hex value on one of the seven segment displays
// Pre: hex_to_display=hex_val_t to display between 0 and F
//      seven_segment=display on FPGA from 0 to 7 to display hex_to_display
// Post: hex_to_display displayed on seven_segment on FPGA
// Return: Nothing
void display_hex_on_seven_segment (hex_val_t hex, int seven_segment) {
     8bc:	defffd04 	addi	sp,sp,-12
     8c0:	df000215 	stw	fp,8(sp)
     8c4:	df000204 	addi	fp,sp,8
     8c8:	e13ffe15 	stw	r4,-8(fp)
     8cc:	e17fff15 	stw	r5,-4(fp)
  switch (seven_segment) {
     8d0:	e0bfff17 	ldw	r2,-4(fp)
     8d4:	10800228 	cmpgeui	r2,r2,8
     8d8:	1000a91e 	bne	r2,zero,b80 <display_hex_on_seven_segment+0x2c4>
     8dc:	e0bfff17 	ldw	r2,-4(fp)
     8e0:	100690ba 	slli	r3,r2,2
     8e4:	00800034 	movhi	r2,0
     8e8:	10823e04 	addi	r2,r2,2296
     8ec:	1885883a 	add	r2,r3,r2
     8f0:	10800017 	ldw	r2,0(r2)
     8f4:	1000683a 	jmp	r2
     8f8:	00000918 	cmpnei	zero,zero,36
     8fc:	00000960 	cmpeqi	zero,zero,37
     900:	000009ac 	andhi	zero,zero,38
     904:	000009fc 	xorhi	zero,zero,39
     908:	00000a4c 	andi	zero,zero,41
     90c:	00000a94 	movui	zero,42
     910:	00000ae0 	cmpeqi	zero,zero,43
     914:	00000b30 	cmpltui	zero,zero,44
    case 0:
      HEX3_HEX0 &= ~0x7F;
     918:	00840034 	movhi	r2,4096
     91c:	10800804 	addi	r2,r2,32
     920:	00c40034 	movhi	r3,4096
     924:	18c00804 	addi	r3,r3,32
     928:	19000017 	ldw	r4,0(r3)
     92c:	00ffe004 	movi	r3,-128
     930:	20c6703a 	and	r3,r4,r3
     934:	10c00015 	stw	r3,0(r2)
      HEX3_HEX0 |= (hex << 0);
     938:	00840034 	movhi	r2,4096
     93c:	10800804 	addi	r2,r2,32
     940:	00c40034 	movhi	r3,4096
     944:	18c00804 	addi	r3,r3,32
     948:	18c00017 	ldw	r3,0(r3)
     94c:	1809883a 	mov	r4,r3
     950:	e0fffe17 	ldw	r3,-8(fp)
     954:	20c6b03a 	or	r3,r4,r3
     958:	10c00015 	stw	r3,0(r2)
      break;
     95c:	00008906 	br	b84 <display_hex_on_seven_segment+0x2c8>
     case 1:
      HEX3_HEX0 &= ~0x7F00;
     960:	00840034 	movhi	r2,4096
     964:	10800804 	addi	r2,r2,32
     968:	00c40034 	movhi	r3,4096
     96c:	18c00804 	addi	r3,r3,32
     970:	19000017 	ldw	r4,0(r3)
     974:	00e03fc4 	movi	r3,-32513
     978:	20c6703a 	and	r3,r4,r3
     97c:	10c00015 	stw	r3,0(r2)
      HEX3_HEX0 |= (hex << 8);
     980:	00840034 	movhi	r2,4096
     984:	10800804 	addi	r2,r2,32
     988:	00c40034 	movhi	r3,4096
     98c:	18c00804 	addi	r3,r3,32
     990:	18c00017 	ldw	r3,0(r3)
     994:	1809883a 	mov	r4,r3
     998:	e0fffe17 	ldw	r3,-8(fp)
     99c:	1806923a 	slli	r3,r3,8
     9a0:	20c6b03a 	or	r3,r4,r3
     9a4:	10c00015 	stw	r3,0(r2)
      break;
     9a8:	00007606 	br	b84 <display_hex_on_seven_segment+0x2c8>
     case 2:
      HEX3_HEX0 &= ~0x7F0000;
     9ac:	00840034 	movhi	r2,4096
     9b0:	10800804 	addi	r2,r2,32
     9b4:	00c40034 	movhi	r3,4096
     9b8:	18c00804 	addi	r3,r3,32
     9bc:	19000017 	ldw	r4,0(r3)
     9c0:	00ffe074 	movhi	r3,65409
     9c4:	18ffffc4 	addi	r3,r3,-1
     9c8:	20c6703a 	and	r3,r4,r3
     9cc:	10c00015 	stw	r3,0(r2)
      HEX3_HEX0 |= (hex << 16);
     9d0:	00840034 	movhi	r2,4096
     9d4:	10800804 	addi	r2,r2,32
     9d8:	00c40034 	movhi	r3,4096
     9dc:	18c00804 	addi	r3,r3,32
     9e0:	18c00017 	ldw	r3,0(r3)
     9e4:	1809883a 	mov	r4,r3
     9e8:	e0fffe17 	ldw	r3,-8(fp)
     9ec:	1806943a 	slli	r3,r3,16
     9f0:	20c6b03a 	or	r3,r4,r3
     9f4:	10c00015 	stw	r3,0(r2)
      break;
     9f8:	00006206 	br	b84 <display_hex_on_seven_segment+0x2c8>
     case 3:
      HEX3_HEX0 &= ~0x7F000000;
     9fc:	00840034 	movhi	r2,4096
     a00:	10800804 	addi	r2,r2,32
     a04:	00c40034 	movhi	r3,4096
     a08:	18c00804 	addi	r3,r3,32
     a0c:	19000017 	ldw	r4,0(r3)
     a10:	00e04034 	movhi	r3,33024
     a14:	18ffffc4 	addi	r3,r3,-1
     a18:	20c6703a 	and	r3,r4,r3
     a1c:	10c00015 	stw	r3,0(r2)
      HEX3_HEX0 |= (hex << 24);
     a20:	00840034 	movhi	r2,4096
     a24:	10800804 	addi	r2,r2,32
     a28:	00c40034 	movhi	r3,4096
     a2c:	18c00804 	addi	r3,r3,32
     a30:	18c00017 	ldw	r3,0(r3)
     a34:	1809883a 	mov	r4,r3
     a38:	e0fffe17 	ldw	r3,-8(fp)
     a3c:	1806963a 	slli	r3,r3,24
     a40:	20c6b03a 	or	r3,r4,r3
     a44:	10c00015 	stw	r3,0(r2)
      break;
     a48:	00004e06 	br	b84 <display_hex_on_seven_segment+0x2c8>
     case 4:
      HEX7_HEX4 &= ~0x7F;
     a4c:	00840034 	movhi	r2,4096
     a50:	10800c04 	addi	r2,r2,48
     a54:	00c40034 	movhi	r3,4096
     a58:	18c00c04 	addi	r3,r3,48
     a5c:	19000017 	ldw	r4,0(r3)
     a60:	00ffe004 	movi	r3,-128
     a64:	20c6703a 	and	r3,r4,r3
     a68:	10c00015 	stw	r3,0(r2)
      HEX7_HEX4 |= (hex << 0);
     a6c:	00840034 	movhi	r2,4096
     a70:	10800c04 	addi	r2,r2,48
     a74:	00c40034 	movhi	r3,4096
     a78:	18c00c04 	addi	r3,r3,48
     a7c:	18c00017 	ldw	r3,0(r3)
     a80:	1809883a 	mov	r4,r3
     a84:	e0fffe17 	ldw	r3,-8(fp)
     a88:	20c6b03a 	or	r3,r4,r3
     a8c:	10c00015 	stw	r3,0(r2)
      break;
     a90:	00003c06 	br	b84 <display_hex_on_seven_segment+0x2c8>
    case 5:
      HEX7_HEX4 &= ~0x7F00;
     a94:	00840034 	movhi	r2,4096
     a98:	10800c04 	addi	r2,r2,48
     a9c:	00c40034 	movhi	r3,4096
     aa0:	18c00c04 	addi	r3,r3,48
     aa4:	19000017 	ldw	r4,0(r3)
     aa8:	00e03fc4 	movi	r3,-32513
     aac:	20c6703a 	and	r3,r4,r3
     ab0:	10c00015 	stw	r3,0(r2)
      HEX7_HEX4 |= (hex << 8);
     ab4:	00840034 	movhi	r2,4096
     ab8:	10800c04 	addi	r2,r2,48
     abc:	00c40034 	movhi	r3,4096
     ac0:	18c00c04 	addi	r3,r3,48
     ac4:	18c00017 	ldw	r3,0(r3)
     ac8:	1809883a 	mov	r4,r3
     acc:	e0fffe17 	ldw	r3,-8(fp)
     ad0:	1806923a 	slli	r3,r3,8
     ad4:	20c6b03a 	or	r3,r4,r3
     ad8:	10c00015 	stw	r3,0(r2)
      break;
     adc:	00002906 	br	b84 <display_hex_on_seven_segment+0x2c8>
     case 6:
      HEX7_HEX4 &= ~0x7F0000;
     ae0:	00840034 	movhi	r2,4096
     ae4:	10800c04 	addi	r2,r2,48
     ae8:	00c40034 	movhi	r3,4096
     aec:	18c00c04 	addi	r3,r3,48
     af0:	19000017 	ldw	r4,0(r3)
     af4:	00ffe074 	movhi	r3,65409
     af8:	18ffffc4 	addi	r3,r3,-1
     afc:	20c6703a 	and	r3,r4,r3
     b00:	10c00015 	stw	r3,0(r2)
      HEX7_HEX4 |= (hex << 16);
     b04:	00840034 	movhi	r2,4096
     b08:	10800c04 	addi	r2,r2,48
     b0c:	00c40034 	movhi	r3,4096
     b10:	18c00c04 	addi	r3,r3,48
     b14:	18c00017 	ldw	r3,0(r3)
     b18:	1809883a 	mov	r4,r3
     b1c:	e0fffe17 	ldw	r3,-8(fp)
     b20:	1806943a 	slli	r3,r3,16
     b24:	20c6b03a 	or	r3,r4,r3
     b28:	10c00015 	stw	r3,0(r2)
      break;
     b2c:	00001506 	br	b84 <display_hex_on_seven_segment+0x2c8>
     case 7:
      HEX7_HEX4 &= ~0x7F000000;
     b30:	00840034 	movhi	r2,4096
     b34:	10800c04 	addi	r2,r2,48
     b38:	00c40034 	movhi	r3,4096
     b3c:	18c00c04 	addi	r3,r3,48
     b40:	19000017 	ldw	r4,0(r3)
     b44:	00e04034 	movhi	r3,33024
     b48:	18ffffc4 	addi	r3,r3,-1
     b4c:	20c6703a 	and	r3,r4,r3
     b50:	10c00015 	stw	r3,0(r2)
      HEX7_HEX4 |= (hex << 24);
     b54:	00840034 	movhi	r2,4096
     b58:	10800c04 	addi	r2,r2,48
     b5c:	00c40034 	movhi	r3,4096
     b60:	18c00c04 	addi	r3,r3,48
     b64:	18c00017 	ldw	r3,0(r3)
     b68:	1809883a 	mov	r4,r3
     b6c:	e0fffe17 	ldw	r3,-8(fp)
     b70:	1806963a 	slli	r3,r3,24
     b74:	20c6b03a 	or	r3,r4,r3
     b78:	10c00015 	stw	r3,0(r2)
      break;    
     b7c:	00000106 	br	b84 <display_hex_on_seven_segment+0x2c8>
    default: return;
     b80:	0001883a 	nop
  }
}
     b84:	e037883a 	mov	sp,fp
     b88:	df000017 	ldw	fp,0(sp)
     b8c:	dec00104 	addi	sp,sp,4
     b90:	f800283a 	ret

00000b94 <get_display_from_hex>:

hex_val_t get_display_from_hex (int hex) {
     b94:	defffe04 	addi	sp,sp,-8
     b98:	df000115 	stw	fp,4(sp)
     b9c:	df000104 	addi	fp,sp,4
     ba0:	e13fff15 	stw	r4,-4(fp)
  switch (hex) {
     ba4:	e0bfff17 	ldw	r2,-4(fp)
     ba8:	10800428 	cmpgeui	r2,r2,16
     bac:	1000371e 	bne	r2,zero,c8c <get_display_from_hex+0xf8>
     bb0:	e0bfff17 	ldw	r2,-4(fp)
     bb4:	100690ba 	slli	r3,r2,2
     bb8:	00800034 	movhi	r2,0
     bbc:	1082f304 	addi	r2,r2,3020
     bc0:	1885883a 	add	r2,r3,r2
     bc4:	10800017 	ldw	r2,0(r2)
     bc8:	1000683a 	jmp	r2
     bcc:	00000c0c 	andi	zero,zero,48
     bd0:	00000c14 	movui	zero,48
     bd4:	00000c1c 	xori	zero,zero,48
     bd8:	00000c24 	muli	zero,zero,48
     bdc:	00000c2c 	andhi	zero,zero,48
     be0:	00000c34 	movhi	zero,48
     be4:	00000c3c 	xorhi	zero,zero,48
     be8:	00000c44 	movi	zero,49
     bec:	00000c4c 	andi	zero,zero,49
     bf0:	00000c54 	movui	zero,49
     bf4:	00000c5c 	xori	zero,zero,49
     bf8:	00000c64 	muli	zero,zero,49
     bfc:	00000c6c 	andhi	zero,zero,49
     c00:	00000c74 	movhi	zero,49
     c04:	00000c7c 	xorhi	zero,zero,49
     c08:	00000c84 	movi	zero,50
    case 0x0: return HEX_0;
     c0c:	00800fc4 	movi	r2,63
     c10:	00001f06 	br	c90 <get_display_from_hex+0xfc>
    case 0x1: return HEX_1;
     c14:	00800184 	movi	r2,6
     c18:	00001d06 	br	c90 <get_display_from_hex+0xfc>
    case 0x2: return HEX_2;
     c1c:	008016c4 	movi	r2,91
     c20:	00001b06 	br	c90 <get_display_from_hex+0xfc>
    case 0x3: return HEX_3;
     c24:	008013c4 	movi	r2,79
     c28:	00001906 	br	c90 <get_display_from_hex+0xfc>
    case 0x4: return HEX_4;
     c2c:	00801984 	movi	r2,102
     c30:	00001706 	br	c90 <get_display_from_hex+0xfc>
    case 0x5: return HEX_5;
     c34:	00801b44 	movi	r2,109
     c38:	00001506 	br	c90 <get_display_from_hex+0xfc>
    case 0x6: return HEX_6;
     c3c:	00801f44 	movi	r2,125
     c40:	00001306 	br	c90 <get_display_from_hex+0xfc>
    case 0x7: return HEX_7;
     c44:	008001c4 	movi	r2,7
     c48:	00001106 	br	c90 <get_display_from_hex+0xfc>
    case 0x8: return HEX_8;
     c4c:	00801fc4 	movi	r2,127
     c50:	00000f06 	br	c90 <get_display_from_hex+0xfc>
    case 0x9: return HEX_9;
     c54:	00801bc4 	movi	r2,111
     c58:	00000d06 	br	c90 <get_display_from_hex+0xfc>
    case 0xA: return HEX_A;
     c5c:	00801dc4 	movi	r2,119
     c60:	00000b06 	br	c90 <get_display_from_hex+0xfc>
    case 0xB: return HEX_B;
     c64:	00801f04 	movi	r2,124
     c68:	00000906 	br	c90 <get_display_from_hex+0xfc>
    case 0xC: return HEX_C;
     c6c:	00800e44 	movi	r2,57
     c70:	00000706 	br	c90 <get_display_from_hex+0xfc>
    case 0xD: return HEX_D;
     c74:	00801784 	movi	r2,94
     c78:	00000506 	br	c90 <get_display_from_hex+0xfc>
    case 0xE: return HEX_E;
     c7c:	00801e44 	movi	r2,121
     c80:	00000306 	br	c90 <get_display_from_hex+0xfc>
    case 0xF: return HEX_F;
     c84:	00801c44 	movi	r2,113
     c88:	00000106 	br	c90 <get_display_from_hex+0xfc>
    default: return 0x0;
     c8c:	0005883a 	mov	r2,zero
  }
}
     c90:	e037883a 	mov	sp,fp
     c94:	df000017 	ldw	fp,0(sp)
     c98:	dec00104 	addi	sp,sp,4
     c9c:	f800283a 	ret

00000ca0 <display_a_decimal_number_on_seven_segment>:
// If overflow (number > 99999999), number displays 99999999
// Pre: number = number to display as a decimal
//      fill_zeros = bool cast integer whether to fill unused displays with zeroes
// Post: number is displayed on the seven segment displays
// Return: Nothing
void display_a_decimal_number_on_seven_segment (int number, int fill_zeros) {
     ca0:	defffc04 	addi	sp,sp,-16
     ca4:	dfc00315 	stw	ra,12(sp)
     ca8:	df000215 	stw	fp,8(sp)
     cac:	df000204 	addi	fp,sp,8
     cb0:	e13ffe15 	stw	r4,-8(fp)
     cb4:	e17fff15 	stw	r5,-4(fp)
	display_a_decimal_number_starting_on_any_seven_segment(number, fill_zeros, 0);
     cb8:	000d883a 	mov	r6,zero
     cbc:	e17fff17 	ldw	r5,-4(fp)
     cc0:	e13ffe17 	ldw	r4,-8(fp)
     cc4:	0000ce00 	call	ce0 <display_a_decimal_number_starting_on_any_seven_segment>
}
     cc8:	0001883a 	nop
     ccc:	e037883a 	mov	sp,fp
     cd0:	dfc00117 	ldw	ra,4(sp)
     cd4:	df000017 	ldw	fp,0(sp)
     cd8:	dec00204 	addi	sp,sp,8
     cdc:	f800283a 	ret

00000ce0 <display_a_decimal_number_starting_on_any_seven_segment>:
// Pre: number = number to display as a decimal
//      fill_zeros = bool cast integer whether to fill unused displays with zeroes
//      display_to_start_on = int representing which HEX display to start on (valid range is 0-7 inclusive)
// Post: number is displayed on the seven segment displays
// Return: Nothing
void display_a_decimal_number_starting_on_any_seven_segment (int number, int fill_zeros, int display_to_start_on) {
     ce0:	deffec04 	addi	sp,sp,-80
     ce4:	dfc01315 	stw	ra,76(sp)
     ce8:	df001215 	stw	fp,72(sp)
     cec:	df001204 	addi	fp,sp,72
     cf0:	e13ffd15 	stw	r4,-12(fp)
     cf4:	e17ffe15 	stw	r5,-8(fp)
     cf8:	e1bfff15 	stw	r6,-4(fp)
	//printf("number=%d\n", number);
	// Temp ints
	int temp_higher = number, temp_lower = 0;
     cfc:	e0bffd17 	ldw	r2,-12(fp)
     d00:	e0bfee15 	stw	r2,-72(fp)
     d04:	e03fef15 	stw	zero,-68(fp)
	//printf("temp_higher=%d\n", temp_higher);
	// For for loop
	int i = 0;
     d08:	e03ff015 	stw	zero,-64(fp)
	// Int cast boolean for whether it has seen a non-zero value before
	int has_seen_non_zero = 0; // assume false
     d0c:	e03ff115 	stw	zero,-60(fp)
	// Int for current hex display to write to
	int display_to = 0;
     d10:	e03ff315 	stw	zero,-52(fp)
	// Int for current value to write to HEX display_to
	int display_val = 0;
     d14:	e03ff415 	stw	zero,-48(fp)
	// Int place to start in for loop
	int start_val = 0;
     d18:	e03ff215 	stw	zero,-56(fp)
	// 10s array
	int array_of_temp_higher[] = {10000000, 1000000, 100000, 10000, 1000, 100, 10, 1};
     d1c:	00802674 	movhi	r2,153
     d20:	10a5a004 	addi	r2,r2,-27008
     d24:	e0bff515 	stw	r2,-44(fp)
     d28:	008003f4 	movhi	r2,15
     d2c:	10909004 	addi	r2,r2,16960
     d30:	e0bff615 	stw	r2,-40(fp)
     d34:	008000b4 	movhi	r2,2
     d38:	10a1a804 	addi	r2,r2,-31072
     d3c:	e0bff715 	stw	r2,-36(fp)
     d40:	0089c404 	movi	r2,10000
     d44:	e0bff815 	stw	r2,-32(fp)
     d48:	0080fa04 	movi	r2,1000
     d4c:	e0bff915 	stw	r2,-28(fp)
     d50:	00801904 	movi	r2,100
     d54:	e0bffa15 	stw	r2,-24(fp)
     d58:	00800284 	movi	r2,10
     d5c:	e0bffb15 	stw	r2,-20(fp)
     d60:	00800044 	movi	r2,1
     d64:	e0bffc15 	stw	r2,-16(fp)
	// If number is 0, print 0 to HEX0 and return
	if (0 == number) {
     d68:	e0bffd17 	ldw	r2,-12(fp)
     d6c:	1000061e 	bne	r2,zero,d88 <display_a_decimal_number_starting_on_any_seven_segment+0xa8>
		display_hex_on_seven_segment(get_display_from_hex(0),0);
     d70:	0009883a 	mov	r4,zero
     d74:	0000b940 	call	b94 <get_display_from_hex>
     d78:	000b883a 	mov	r5,zero
     d7c:	1009883a 	mov	r4,r2
     d80:	00008bc0 	call	8bc <display_hex_on_seven_segment>
     d84:	00014006 	br	1288 <display_a_decimal_number_starting_on_any_seven_segment+0x5a8>
		return;
	}
	else if (number > 10000000 || fill_zeros) start_val = 0;
     d88:	e0fffd17 	ldw	r3,-12(fp)
     d8c:	00802674 	movhi	r2,153
     d90:	10a5a004 	addi	r2,r2,-27008
     d94:	10c00216 	blt	r2,r3,da0 <display_a_decimal_number_starting_on_any_seven_segment+0xc0>
     d98:	e0bffe17 	ldw	r2,-8(fp)
     d9c:	10000226 	beq	r2,zero,da8 <display_a_decimal_number_starting_on_any_seven_segment+0xc8>
     da0:	e03ff215 	stw	zero,-56(fp)
     da4:	00002206 	br	e30 <display_a_decimal_number_starting_on_any_seven_segment+0x150>
	else if (number > 1000000) start_val = 1;
     da8:	e0fffd17 	ldw	r3,-12(fp)
     dac:	008003f4 	movhi	r2,15
     db0:	10909004 	addi	r2,r2,16960
     db4:	10c0030e 	bge	r2,r3,dc4 <display_a_decimal_number_starting_on_any_seven_segment+0xe4>
     db8:	00800044 	movi	r2,1
     dbc:	e0bff215 	stw	r2,-56(fp)
     dc0:	00001b06 	br	e30 <display_a_decimal_number_starting_on_any_seven_segment+0x150>
	else if (number > 100000) start_val = 2;
     dc4:	e0fffd17 	ldw	r3,-12(fp)
     dc8:	008000b4 	movhi	r2,2
     dcc:	10a1a804 	addi	r2,r2,-31072
     dd0:	10c0030e 	bge	r2,r3,de0 <display_a_decimal_number_starting_on_any_seven_segment+0x100>
     dd4:	00800084 	movi	r2,2
     dd8:	e0bff215 	stw	r2,-56(fp)
     ddc:	00001406 	br	e30 <display_a_decimal_number_starting_on_any_seven_segment+0x150>
	else if (number > 10000) start_val = 3;
     de0:	e0bffd17 	ldw	r2,-12(fp)
     de4:	1089c450 	cmplti	r2,r2,10001
     de8:	1000031e 	bne	r2,zero,df8 <display_a_decimal_number_starting_on_any_seven_segment+0x118>
     dec:	008000c4 	movi	r2,3
     df0:	e0bff215 	stw	r2,-56(fp)
     df4:	00000e06 	br	e30 <display_a_decimal_number_starting_on_any_seven_segment+0x150>
	else if (number > 1000) start_val = 4;
     df8:	e0bffd17 	ldw	r2,-12(fp)
     dfc:	1080fa50 	cmplti	r2,r2,1001
     e00:	1000031e 	bne	r2,zero,e10 <display_a_decimal_number_starting_on_any_seven_segment+0x130>
     e04:	00800104 	movi	r2,4
     e08:	e0bff215 	stw	r2,-56(fp)
     e0c:	00000806 	br	e30 <display_a_decimal_number_starting_on_any_seven_segment+0x150>
	else if (number > 100) start_val = 5;
     e10:	e0bffd17 	ldw	r2,-12(fp)
     e14:	10801950 	cmplti	r2,r2,101
     e18:	1000031e 	bne	r2,zero,e28 <display_a_decimal_number_starting_on_any_seven_segment+0x148>
     e1c:	00800144 	movi	r2,5
     e20:	e0bff215 	stw	r2,-56(fp)
     e24:	00000206 	br	e30 <display_a_decimal_number_starting_on_any_seven_segment+0x150>
	else start_val = 6; 
     e28:	00800184 	movi	r2,6
     e2c:	e0bff215 	stw	r2,-56(fp)
	// Normal program execution
	for (i = start_val; i < NUMBER_OF_SEVEN_SEGMENT_DISPLAYS; i++) {
     e30:	e0bff217 	ldw	r2,-56(fp)
     e34:	e0bff015 	stw	r2,-64(fp)
     e38:	00011006 	br	127c <display_a_decimal_number_starting_on_any_seven_segment+0x59c>
		if (temp_higher >= 9*array_of_temp_higher[i]) {
     e3c:	e0bff017 	ldw	r2,-64(fp)
     e40:	1085883a 	add	r2,r2,r2
     e44:	1085883a 	add	r2,r2,r2
     e48:	e0ffee04 	addi	r3,fp,-72
     e4c:	1885883a 	add	r2,r3,r2
     e50:	10800704 	addi	r2,r2,28
     e54:	10800017 	ldw	r2,0(r2)
     e58:	10800264 	muli	r2,r2,9
     e5c:	e0ffee17 	ldw	r3,-72(fp)
     e60:	18801016 	blt	r3,r2,ea4 <display_a_decimal_number_starting_on_any_seven_segment+0x1c4>
			temp_lower = temp_higher - 9*array_of_temp_higher[i];
     e64:	e0bff017 	ldw	r2,-64(fp)
     e68:	1085883a 	add	r2,r2,r2
     e6c:	1085883a 	add	r2,r2,r2
     e70:	e0ffee04 	addi	r3,fp,-72
     e74:	1885883a 	add	r2,r3,r2
     e78:	10800704 	addi	r2,r2,28
     e7c:	10800017 	ldw	r2,0(r2)
     e80:	10fffde4 	muli	r3,r2,-9
     e84:	e0bfee17 	ldw	r2,-72(fp)
     e88:	1885883a 	add	r2,r3,r2
     e8c:	e0bfef15 	stw	r2,-68(fp)
			temp_higher = 9;
     e90:	00800244 	movi	r2,9
     e94:	e0bfee15 	stw	r2,-72(fp)
			has_seen_non_zero = 1;
     e98:	00800044 	movi	r2,1
     e9c:	e0bff115 	stw	r2,-60(fp)
     ea0:	0000d906 	br	1208 <display_a_decimal_number_starting_on_any_seven_segment+0x528>
		} else if (temp_higher >= 8*array_of_temp_higher[i]) {
     ea4:	e0bff017 	ldw	r2,-64(fp)
     ea8:	1085883a 	add	r2,r2,r2
     eac:	1085883a 	add	r2,r2,r2
     eb0:	e0ffee04 	addi	r3,fp,-72
     eb4:	1885883a 	add	r2,r3,r2
     eb8:	10800704 	addi	r2,r2,28
     ebc:	10800017 	ldw	r2,0(r2)
     ec0:	100490fa 	slli	r2,r2,3
     ec4:	e0ffee17 	ldw	r3,-72(fp)
     ec8:	18801016 	blt	r3,r2,f0c <display_a_decimal_number_starting_on_any_seven_segment+0x22c>
			temp_lower = temp_higher - 8*array_of_temp_higher[i];
     ecc:	e0bff017 	ldw	r2,-64(fp)
     ed0:	1085883a 	add	r2,r2,r2
     ed4:	1085883a 	add	r2,r2,r2
     ed8:	e0ffee04 	addi	r3,fp,-72
     edc:	1885883a 	add	r2,r3,r2
     ee0:	10800704 	addi	r2,r2,28
     ee4:	10800017 	ldw	r2,0(r2)
     ee8:	100490fa 	slli	r2,r2,3
     eec:	e0ffee17 	ldw	r3,-72(fp)
     ef0:	1885c83a 	sub	r2,r3,r2
     ef4:	e0bfef15 	stw	r2,-68(fp)
			temp_higher = 8;
     ef8:	00800204 	movi	r2,8
     efc:	e0bfee15 	stw	r2,-72(fp)
			has_seen_non_zero = 1;
     f00:	00800044 	movi	r2,1
     f04:	e0bff115 	stw	r2,-60(fp)
     f08:	0000bf06 	br	1208 <display_a_decimal_number_starting_on_any_seven_segment+0x528>
		} else if (temp_higher >= 7*array_of_temp_higher[i]) {
     f0c:	e0bff017 	ldw	r2,-64(fp)
     f10:	1085883a 	add	r2,r2,r2
     f14:	1085883a 	add	r2,r2,r2
     f18:	e0ffee04 	addi	r3,fp,-72
     f1c:	1885883a 	add	r2,r3,r2
     f20:	10800704 	addi	r2,r2,28
     f24:	10800017 	ldw	r2,0(r2)
     f28:	108001e4 	muli	r2,r2,7
     f2c:	e0ffee17 	ldw	r3,-72(fp)
     f30:	18801016 	blt	r3,r2,f74 <display_a_decimal_number_starting_on_any_seven_segment+0x294>
			temp_lower = temp_higher - 7*array_of_temp_higher[i];
     f34:	e0bff017 	ldw	r2,-64(fp)
     f38:	1085883a 	add	r2,r2,r2
     f3c:	1085883a 	add	r2,r2,r2
     f40:	e0ffee04 	addi	r3,fp,-72
     f44:	1885883a 	add	r2,r3,r2
     f48:	10800704 	addi	r2,r2,28
     f4c:	10800017 	ldw	r2,0(r2)
     f50:	10fffe64 	muli	r3,r2,-7
     f54:	e0bfee17 	ldw	r2,-72(fp)
     f58:	1885883a 	add	r2,r3,r2
     f5c:	e0bfef15 	stw	r2,-68(fp)
			temp_higher = 7;
     f60:	008001c4 	movi	r2,7
     f64:	e0bfee15 	stw	r2,-72(fp)
			has_seen_non_zero = 1;
     f68:	00800044 	movi	r2,1
     f6c:	e0bff115 	stw	r2,-60(fp)
     f70:	0000a506 	br	1208 <display_a_decimal_number_starting_on_any_seven_segment+0x528>
		} else if (temp_higher >= 6*array_of_temp_higher[i]) {
     f74:	e0bff017 	ldw	r2,-64(fp)
     f78:	1085883a 	add	r2,r2,r2
     f7c:	1085883a 	add	r2,r2,r2
     f80:	e0ffee04 	addi	r3,fp,-72
     f84:	1885883a 	add	r2,r3,r2
     f88:	10800704 	addi	r2,r2,28
     f8c:	10800017 	ldw	r2,0(r2)
     f90:	108001a4 	muli	r2,r2,6
     f94:	e0ffee17 	ldw	r3,-72(fp)
     f98:	18801016 	blt	r3,r2,fdc <display_a_decimal_number_starting_on_any_seven_segment+0x2fc>
			temp_lower = temp_higher - 6*array_of_temp_higher[i];
     f9c:	e0bff017 	ldw	r2,-64(fp)
     fa0:	1085883a 	add	r2,r2,r2
     fa4:	1085883a 	add	r2,r2,r2
     fa8:	e0ffee04 	addi	r3,fp,-72
     fac:	1885883a 	add	r2,r3,r2
     fb0:	10800704 	addi	r2,r2,28
     fb4:	10800017 	ldw	r2,0(r2)
     fb8:	10fffea4 	muli	r3,r2,-6
     fbc:	e0bfee17 	ldw	r2,-72(fp)
     fc0:	1885883a 	add	r2,r3,r2
     fc4:	e0bfef15 	stw	r2,-68(fp)
			temp_higher = 6;
     fc8:	00800184 	movi	r2,6
     fcc:	e0bfee15 	stw	r2,-72(fp)
			has_seen_non_zero = 1;
     fd0:	00800044 	movi	r2,1
     fd4:	e0bff115 	stw	r2,-60(fp)
     fd8:	00008b06 	br	1208 <display_a_decimal_number_starting_on_any_seven_segment+0x528>
		} else if (temp_higher >= 5*array_of_temp_higher[i]) {
     fdc:	e0bff017 	ldw	r2,-64(fp)
     fe0:	1085883a 	add	r2,r2,r2
     fe4:	1085883a 	add	r2,r2,r2
     fe8:	e0ffee04 	addi	r3,fp,-72
     fec:	1885883a 	add	r2,r3,r2
     ff0:	10800704 	addi	r2,r2,28
     ff4:	10800017 	ldw	r2,0(r2)
     ff8:	10800164 	muli	r2,r2,5
     ffc:	e0ffee17 	ldw	r3,-72(fp)
    1000:	18801016 	blt	r3,r2,1044 <display_a_decimal_number_starting_on_any_seven_segment+0x364>
			temp_lower = temp_higher - 5*array_of_temp_higher[i];
    1004:	e0bff017 	ldw	r2,-64(fp)
    1008:	1085883a 	add	r2,r2,r2
    100c:	1085883a 	add	r2,r2,r2
    1010:	e0ffee04 	addi	r3,fp,-72
    1014:	1885883a 	add	r2,r3,r2
    1018:	10800704 	addi	r2,r2,28
    101c:	10800017 	ldw	r2,0(r2)
    1020:	10fffee4 	muli	r3,r2,-5
    1024:	e0bfee17 	ldw	r2,-72(fp)
    1028:	1885883a 	add	r2,r3,r2
    102c:	e0bfef15 	stw	r2,-68(fp)
			temp_higher = 5;
    1030:	00800144 	movi	r2,5
    1034:	e0bfee15 	stw	r2,-72(fp)
			has_seen_non_zero = 1;
    1038:	00800044 	movi	r2,1
    103c:	e0bff115 	stw	r2,-60(fp)
    1040:	00007106 	br	1208 <display_a_decimal_number_starting_on_any_seven_segment+0x528>
		} else if (temp_higher >= 4*array_of_temp_higher[i]) {
    1044:	e0bff017 	ldw	r2,-64(fp)
    1048:	1085883a 	add	r2,r2,r2
    104c:	1085883a 	add	r2,r2,r2
    1050:	e0ffee04 	addi	r3,fp,-72
    1054:	1885883a 	add	r2,r3,r2
    1058:	10800704 	addi	r2,r2,28
    105c:	10800017 	ldw	r2,0(r2)
    1060:	1085883a 	add	r2,r2,r2
    1064:	1085883a 	add	r2,r2,r2
    1068:	1007883a 	mov	r3,r2
    106c:	e0bfee17 	ldw	r2,-72(fp)
    1070:	10c01216 	blt	r2,r3,10bc <display_a_decimal_number_starting_on_any_seven_segment+0x3dc>
			temp_lower = temp_higher - 4*array_of_temp_higher[i];
    1074:	e0bff017 	ldw	r2,-64(fp)
    1078:	1085883a 	add	r2,r2,r2
    107c:	1085883a 	add	r2,r2,r2
    1080:	e0ffee04 	addi	r3,fp,-72
    1084:	1885883a 	add	r2,r3,r2
    1088:	10800704 	addi	r2,r2,28
    108c:	10800017 	ldw	r2,0(r2)
    1090:	1085883a 	add	r2,r2,r2
    1094:	1085883a 	add	r2,r2,r2
    1098:	1007883a 	mov	r3,r2
    109c:	e0bfee17 	ldw	r2,-72(fp)
    10a0:	10c5c83a 	sub	r2,r2,r3
    10a4:	e0bfef15 	stw	r2,-68(fp)
			temp_higher = 4;
    10a8:	00800104 	movi	r2,4
    10ac:	e0bfee15 	stw	r2,-72(fp)
			has_seen_non_zero = 1;
    10b0:	00800044 	movi	r2,1
    10b4:	e0bff115 	stw	r2,-60(fp)
    10b8:	00005306 	br	1208 <display_a_decimal_number_starting_on_any_seven_segment+0x528>
		} else if (temp_higher >= 3*array_of_temp_higher[i]) {
    10bc:	e0bff017 	ldw	r2,-64(fp)
    10c0:	1085883a 	add	r2,r2,r2
    10c4:	1085883a 	add	r2,r2,r2
    10c8:	e0ffee04 	addi	r3,fp,-72
    10cc:	1885883a 	add	r2,r3,r2
    10d0:	10800704 	addi	r2,r2,28
    10d4:	10c00017 	ldw	r3,0(r2)
    10d8:	1805883a 	mov	r2,r3
    10dc:	1085883a 	add	r2,r2,r2
    10e0:	10c5883a 	add	r2,r2,r3
    10e4:	e0ffee17 	ldw	r3,-72(fp)
    10e8:	18801016 	blt	r3,r2,112c <display_a_decimal_number_starting_on_any_seven_segment+0x44c>
			temp_lower = temp_higher - 3*array_of_temp_higher[i];
    10ec:	e0bff017 	ldw	r2,-64(fp)
    10f0:	1085883a 	add	r2,r2,r2
    10f4:	1085883a 	add	r2,r2,r2
    10f8:	e0ffee04 	addi	r3,fp,-72
    10fc:	1885883a 	add	r2,r3,r2
    1100:	10800704 	addi	r2,r2,28
    1104:	10800017 	ldw	r2,0(r2)
    1108:	10ffff64 	muli	r3,r2,-3
    110c:	e0bfee17 	ldw	r2,-72(fp)
    1110:	1885883a 	add	r2,r3,r2
    1114:	e0bfef15 	stw	r2,-68(fp)
			temp_higher = 3;
    1118:	008000c4 	movi	r2,3
    111c:	e0bfee15 	stw	r2,-72(fp)
			has_seen_non_zero = 1;
    1120:	00800044 	movi	r2,1
    1124:	e0bff115 	stw	r2,-60(fp)
    1128:	00003706 	br	1208 <display_a_decimal_number_starting_on_any_seven_segment+0x528>
		} else if (temp_higher >= 2*array_of_temp_higher[i]) {
    112c:	e0bff017 	ldw	r2,-64(fp)
    1130:	1085883a 	add	r2,r2,r2
    1134:	1085883a 	add	r2,r2,r2
    1138:	e0ffee04 	addi	r3,fp,-72
    113c:	1885883a 	add	r2,r3,r2
    1140:	10800704 	addi	r2,r2,28
    1144:	10800017 	ldw	r2,0(r2)
    1148:	1085883a 	add	r2,r2,r2
    114c:	1007883a 	mov	r3,r2
    1150:	e0bfee17 	ldw	r2,-72(fp)
    1154:	10c01116 	blt	r2,r3,119c <display_a_decimal_number_starting_on_any_seven_segment+0x4bc>
			temp_lower = temp_higher - 2*array_of_temp_higher[i];
    1158:	e0bff017 	ldw	r2,-64(fp)
    115c:	1085883a 	add	r2,r2,r2
    1160:	1085883a 	add	r2,r2,r2
    1164:	e0ffee04 	addi	r3,fp,-72
    1168:	1885883a 	add	r2,r3,r2
    116c:	10800704 	addi	r2,r2,28
    1170:	10800017 	ldw	r2,0(r2)
    1174:	1085883a 	add	r2,r2,r2
    1178:	1007883a 	mov	r3,r2
    117c:	e0bfee17 	ldw	r2,-72(fp)
    1180:	10c5c83a 	sub	r2,r2,r3
    1184:	e0bfef15 	stw	r2,-68(fp)
			temp_higher = 2;
    1188:	00800084 	movi	r2,2
    118c:	e0bfee15 	stw	r2,-72(fp)
			has_seen_non_zero = 1;
    1190:	00800044 	movi	r2,1
    1194:	e0bff115 	stw	r2,-60(fp)
    1198:	00001b06 	br	1208 <display_a_decimal_number_starting_on_any_seven_segment+0x528>
		} else if (temp_higher >= 1*array_of_temp_higher[i]) {
    119c:	e0bff017 	ldw	r2,-64(fp)
    11a0:	1085883a 	add	r2,r2,r2
    11a4:	1085883a 	add	r2,r2,r2
    11a8:	e0ffee04 	addi	r3,fp,-72
    11ac:	1885883a 	add	r2,r3,r2
    11b0:	10800704 	addi	r2,r2,28
    11b4:	10800017 	ldw	r2,0(r2)
    11b8:	e0ffee17 	ldw	r3,-72(fp)
    11bc:	18800f16 	blt	r3,r2,11fc <display_a_decimal_number_starting_on_any_seven_segment+0x51c>
			temp_lower = temp_higher - 1*array_of_temp_higher[i];
    11c0:	e0bff017 	ldw	r2,-64(fp)
    11c4:	1085883a 	add	r2,r2,r2
    11c8:	1085883a 	add	r2,r2,r2
    11cc:	e0ffee04 	addi	r3,fp,-72
    11d0:	1885883a 	add	r2,r3,r2
    11d4:	10800704 	addi	r2,r2,28
    11d8:	10800017 	ldw	r2,0(r2)
    11dc:	e0ffee17 	ldw	r3,-72(fp)
    11e0:	1885c83a 	sub	r2,r3,r2
    11e4:	e0bfef15 	stw	r2,-68(fp)
			temp_higher = 1;
    11e8:	00800044 	movi	r2,1
    11ec:	e0bfee15 	stw	r2,-72(fp)
			has_seen_non_zero = 1;
    11f0:	00800044 	movi	r2,1
    11f4:	e0bff115 	stw	r2,-60(fp)
    11f8:	00000306 	br	1208 <display_a_decimal_number_starting_on_any_seven_segment+0x528>
		} else {
			temp_lower = temp_higher;
    11fc:	e0bfee17 	ldw	r2,-72(fp)
    1200:	e0bfef15 	stw	r2,-68(fp)
			temp_higher = 0;
    1204:	e03fee15 	stw	zero,-72(fp)
		}
		// Calculate where to display to
		display_to = NUMBER_OF_SEVEN_SEGMENT_DISPLAYS-1-i+display_to_start_on;
    1208:	00c001c4 	movi	r3,7
    120c:	e0bff017 	ldw	r2,-64(fp)
    1210:	1887c83a 	sub	r3,r3,r2
    1214:	e0bfff17 	ldw	r2,-4(fp)
    1218:	1885883a 	add	r2,r3,r2
    121c:	e0bff315 	stw	r2,-52(fp)
		//printf("display %u on HEX display %u\n", temp_higher, display_to);
		if (display_to < NUMBER_OF_SEVEN_SEGMENT_DISPLAYS) {
    1220:	e0bff317 	ldw	r2,-52(fp)
    1224:	10800208 	cmpgei	r2,r2,8
    1228:	10000f1e 	bne	r2,zero,1268 <display_a_decimal_number_starting_on_any_seven_segment+0x588>
			// Display there if it's a valid display!
			//if (display_to < NUMBER_OF_SEVEN_SEGMENT_DISPLAYS)
			//	printf("***display %u on HEX display %u\n", temp_higher, display_to);
			// If you want to fill with zeroes, fill it with whatever value it has	
			if (fill_zeros || 0 != temp_higher || has_seen_non_zero)
    122c:	e0bffe17 	ldw	r2,-8(fp)
    1230:	1000041e 	bne	r2,zero,1244 <display_a_decimal_number_starting_on_any_seven_segment+0x564>
    1234:	e0bfee17 	ldw	r2,-72(fp)
    1238:	1000021e 	bne	r2,zero,1244 <display_a_decimal_number_starting_on_any_seven_segment+0x564>
    123c:	e0bff117 	ldw	r2,-60(fp)
    1240:	10000626 	beq	r2,zero,125c <display_a_decimal_number_starting_on_any_seven_segment+0x57c>
				display_hex_on_seven_segment(get_display_from_hex(temp_higher), display_to);
    1244:	e13fee17 	ldw	r4,-72(fp)
    1248:	0000b940 	call	b94 <get_display_from_hex>
    124c:	e17ff317 	ldw	r5,-52(fp)
    1250:	1009883a 	mov	r4,r2
    1254:	00008bc0 	call	8bc <display_hex_on_seven_segment>
    1258:	00000306 	br	1268 <display_a_decimal_number_starting_on_any_seven_segment+0x588>
			// Else, if temp_higher is 0 and you don't want to fill with zeroes, fill with nothing
			else display_hex_on_seven_segment(0x0, display_to); //
    125c:	e17ff317 	ldw	r5,-52(fp)
    1260:	0009883a 	mov	r4,zero
    1264:	00008bc0 	call	8bc <display_hex_on_seven_segment>
		}
		// At the end, assign temp_lower to temp_higher and repeat the process with the next 10^n
		temp_higher = temp_lower;
    1268:	e0bfef17 	ldw	r2,-68(fp)
    126c:	e0bfee15 	stw	r2,-72(fp)
	else if (number > 10000) start_val = 3;
	else if (number > 1000) start_val = 4;
	else if (number > 100) start_val = 5;
	else start_val = 6; 
	// Normal program execution
	for (i = start_val; i < NUMBER_OF_SEVEN_SEGMENT_DISPLAYS; i++) {
    1270:	e0bff017 	ldw	r2,-64(fp)
    1274:	10800044 	addi	r2,r2,1
    1278:	e0bff015 	stw	r2,-64(fp)
    127c:	e0bff017 	ldw	r2,-64(fp)
    1280:	10800210 	cmplti	r2,r2,8
    1284:	103eed1e 	bne	r2,zero,e3c <display_a_decimal_number_starting_on_any_seven_segment+0x15c>
			else display_hex_on_seven_segment(0x0, display_to); //
		}
		// At the end, assign temp_lower to temp_higher and repeat the process with the next 10^n
		temp_higher = temp_lower;
	}
}
    1288:	e037883a 	mov	sp,fp
    128c:	dfc00117 	ldw	ra,4(sp)
    1290:	df000017 	ldw	fp,0(sp)
    1294:	dec00204 	addi	sp,sp,8
    1298:	f800283a 	ret

0000129c <explode_seven_segment>:

// Writes nothhing to all displays starting at a certain hex display
// Post: nothing is displayed on the seven segment displays
// Return: Nothing
void explode_seven_segment (void) {
    129c:	deffff04 	addi	sp,sp,-4
    12a0:	df000015 	stw	fp,0(sp)
    12a4:	d839883a 	mov	fp,sp
	/*int i;
	for (i = display_to_start_on; i < NUMBER_OF_SEVEN_SEGMENT_DISPLAYS; i++)
		display_hex_on_seven_segment(0x0, i); // Write nothings!*/
	HEX3_HEX0 = 0;
    12a8:	00840034 	movhi	r2,4096
    12ac:	10800804 	addi	r2,r2,32
    12b0:	10000015 	stw	zero,0(r2)
	HEX7_HEX4 = 0;
    12b4:	00840034 	movhi	r2,4096
    12b8:	10800c04 	addi	r2,r2,48
    12bc:	10000015 	stw	zero,0(r2)
}
    12c0:	0001883a 	nop
    12c4:	e037883a 	mov	sp,fp
    12c8:	df000017 	ldw	fp,0(sp)
    12cc:	dec00104 	addi	sp,sp,4
    12d0:	f800283a 	ret

000012d4 <spencerBGReset>:
// Blue ! color RGB888: 0xEF48CC
// Blue ! color RGB565: 0x3A59
// Tear color RGB888: 0x99D9EA
// Tear color RGB565: 0x9EDD

void spencerBGReset(void) {
    12d4:	defffd04 	addi	sp,sp,-12
    12d8:	dfc00215 	stw	ra,8(sp)
    12dc:	df000115 	stw	fp,4(sp)
    12e0:	df000104 	addi	fp,sp,4
	VGA_box(SXCoord, SYCoord, SXCoord + 31, SYCoord + 52, 0xFFFF);
    12e4:	00bfffc4 	movi	r2,-1
    12e8:	d8800015 	stw	r2,0(sp)
    12ec:	01c00d04 	movi	r7,52
    12f0:	018007c4 	movi	r6,31
    12f4:	000b883a 	mov	r5,zero
    12f8:	0009883a 	mov	r4,zero
    12fc:	00089f00 	call	89f0 <VGA_box>
}
    1300:	0001883a 	nop
    1304:	e037883a 	mov	sp,fp
    1308:	dfc00117 	ldw	ra,4(sp)
    130c:	df000017 	ldw	fp,0(sp)
    1310:	dec00204 	addi	sp,sp,8
    1314:	f800283a 	ret

00001318 <spencerNeutralPose1>:

void spencerNeutralPose1(void)
{
    1318:	defffd04 	addi	sp,sp,-12
    131c:	dfc00215 	stw	ra,8(sp)
    1320:	df000115 	stw	fp,4(sp)
    1324:	df000104 	addi	fp,sp,4
  // Rendering Start – Spencer Neutral Pose (S1.png)

  // Render Hair
  VGA_box(SXCoord, SYCoord + 13, SXCoord + 3, SYCoord + 22, 0x59E4);
    1328:	00967904 	movi	r2,23012
    132c:	d8800015 	stw	r2,0(sp)
    1330:	01c00584 	movi	r7,22
    1334:	018000c4 	movi	r6,3
    1338:	01400344 	movi	r5,13
    133c:	0009883a 	mov	r4,zero
    1340:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 25, SXCoord, SYCoord + 25, 0x59E4);
    1344:	00967904 	movi	r2,23012
    1348:	d8800015 	stw	r2,0(sp)
    134c:	01c00644 	movi	r7,25
    1350:	000d883a 	mov	r6,zero
    1354:	01400644 	movi	r5,25
    1358:	0009883a 	mov	r4,zero
    135c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 26, SXCoord + 2, SYCoord + 28, 0x59E4);
    1360:	00967904 	movi	r2,23012
    1364:	d8800015 	stw	r2,0(sp)
    1368:	01c00704 	movi	r7,28
    136c:	01800084 	movi	r6,2
    1370:	01400684 	movi	r5,26
    1374:	0009883a 	mov	r4,zero
    1378:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 29, SXCoord + 5, SYCoord + 29, 0x59E4);
    137c:	00967904 	movi	r2,23012
    1380:	d8800015 	stw	r2,0(sp)
    1384:	01c00744 	movi	r7,29
    1388:	01800144 	movi	r6,5
    138c:	01400744 	movi	r5,29
    1390:	01000104 	movi	r4,4
    1394:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 31, SXCoord + 6, SYCoord + 36, 0x59E4);
    1398:	00967904 	movi	r2,23012
    139c:	d8800015 	stw	r2,0(sp)
    13a0:	01c00904 	movi	r7,36
    13a4:	01800184 	movi	r6,6
    13a8:	014007c4 	movi	r5,31
    13ac:	01000104 	movi	r4,4
    13b0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 34, SXCoord + 7, SYCoord + 36, 0x59E4);
    13b4:	00967904 	movi	r2,23012
    13b8:	d8800015 	stw	r2,0(sp)
    13bc:	01c00904 	movi	r7,36
    13c0:	018001c4 	movi	r6,7
    13c4:	01400884 	movi	r5,34
    13c8:	010001c4 	movi	r4,7
    13cc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 9, SXCoord + 4, SYCoord + 18, 0x59E4);
    13d0:	00967904 	movi	r2,23012
    13d4:	d8800015 	stw	r2,0(sp)
    13d8:	01c00484 	movi	r7,18
    13dc:	01800104 	movi	r6,4
    13e0:	01400244 	movi	r5,9
    13e4:	01000104 	movi	r4,4
    13e8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 9, SXCoord + 5, SYCoord + 17, 0x59E4);
    13ec:	00967904 	movi	r2,23012
    13f0:	d8800015 	stw	r2,0(sp)
    13f4:	01c00444 	movi	r7,17
    13f8:	01800144 	movi	r6,5
    13fc:	01400244 	movi	r5,9
    1400:	01000144 	movi	r4,5
    1404:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 9, SXCoord + 25, SYCoord + 16, 0x59E4);
    1408:	00967904 	movi	r2,23012
    140c:	d8800015 	stw	r2,0(sp)
    1410:	01c00404 	movi	r7,16
    1414:	01800644 	movi	r6,25
    1418:	01400244 	movi	r5,9
    141c:	01000184 	movi	r4,6
    1420:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 9, SXCoord + 26, SYCoord + 17, 0x59E4);
    1424:	00967904 	movi	r2,23012
    1428:	d8800015 	stw	r2,0(sp)
    142c:	01c00444 	movi	r7,17
    1430:	01800684 	movi	r6,26
    1434:	01400244 	movi	r5,9
    1438:	01000684 	movi	r4,26
    143c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 27, SYCoord + 9, SXCoord + 27, SYCoord + 18, 0x59E4);
    1440:	00967904 	movi	r2,23012
    1444:	d8800015 	stw	r2,0(sp)
    1448:	01c00484 	movi	r7,18
    144c:	018006c4 	movi	r6,27
    1450:	01400244 	movi	r5,9
    1454:	010006c4 	movi	r4,27
    1458:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 13, SXCoord + 31, SYCoord + 22, 0x59E4);
    145c:	00967904 	movi	r2,23012
    1460:	d8800015 	stw	r2,0(sp)
    1464:	01c00584 	movi	r7,22
    1468:	018007c4 	movi	r6,31
    146c:	01400344 	movi	r5,13
    1470:	01000704 	movi	r4,28
    1474:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 31, SYCoord + 25, SXCoord + 31, SYCoord + 25, 0x59E4);
    1478:	00967904 	movi	r2,23012
    147c:	d8800015 	stw	r2,0(sp)
    1480:	01c00644 	movi	r7,25
    1484:	018007c4 	movi	r6,31
    1488:	01400644 	movi	r5,25
    148c:	010007c4 	movi	r4,31
    1490:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 29, SYCoord + 26, SXCoord + 31, SYCoord + 28, 0x59E4);
    1494:	00967904 	movi	r2,23012
    1498:	d8800015 	stw	r2,0(sp)
    149c:	01c00704 	movi	r7,28
    14a0:	018007c4 	movi	r6,31
    14a4:	01400684 	movi	r5,26
    14a8:	01000744 	movi	r4,29
    14ac:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 29, SXCoord + 27, SYCoord + 29, 0x59E4);
    14b0:	00967904 	movi	r2,23012
    14b4:	d8800015 	stw	r2,0(sp)
    14b8:	01c00744 	movi	r7,29
    14bc:	018006c4 	movi	r6,27
    14c0:	01400744 	movi	r5,29
    14c4:	01000684 	movi	r4,26
    14c8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 31, SXCoord + 27, SYCoord + 36, 0x59E4);
    14cc:	00967904 	movi	r2,23012
    14d0:	d8800015 	stw	r2,0(sp)
    14d4:	01c00904 	movi	r7,36
    14d8:	018006c4 	movi	r6,27
    14dc:	014007c4 	movi	r5,31
    14e0:	01000644 	movi	r4,25
    14e4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 34, SXCoord + 24, SYCoord + 36, 0x59E4);
    14e8:	00967904 	movi	r2,23012
    14ec:	d8800015 	stw	r2,0(sp)
    14f0:	01c00904 	movi	r7,36
    14f4:	01800604 	movi	r6,24
    14f8:	01400884 	movi	r5,34
    14fc:	01000604 	movi	r4,24
    1500:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 5, SXCoord + 23, SYCoord + 8, 0x59E4);
    1504:	00967904 	movi	r2,23012
    1508:	d8800015 	stw	r2,0(sp)
    150c:	01c00204 	movi	r7,8
    1510:	018005c4 	movi	r6,23
    1514:	01400144 	movi	r5,5
    1518:	01000304 	movi	r4,12
    151c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 1, SXCoord + 19, SYCoord + 4, 0x59E4);
    1520:	00967904 	movi	r2,23012
    1524:	d8800015 	stw	r2,0(sp)
    1528:	01c00104 	movi	r7,4
    152c:	018004c4 	movi	r6,19
    1530:	01400044 	movi	r5,1
    1534:	01000304 	movi	r4,12
    1538:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord, SXCoord + 16, SYCoord, 0x59E4);
    153c:	00967904 	movi	r2,23012
    1540:	d8800015 	stw	r2,0(sp)
    1544:	000f883a 	mov	r7,zero
    1548:	01800404 	movi	r6,16
    154c:	000b883a 	mov	r5,zero
    1550:	010002c4 	movi	r4,11
    1554:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 1, SXCoord + 11, SYCoord + 1, 0x59E4);
    1558:	00967904 	movi	r2,23012
    155c:	d8800015 	stw	r2,0(sp)
    1560:	01c00044 	movi	r7,1
    1564:	018002c4 	movi	r6,11
    1568:	01400044 	movi	r5,1
    156c:	01000284 	movi	r4,10
    1570:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 20, SXCoord + 8, SYCoord + 20, 0x59E4);
    1574:	00967904 	movi	r2,23012
    1578:	d8800015 	stw	r2,0(sp)
    157c:	01c00504 	movi	r7,20
    1580:	01800204 	movi	r6,8
    1584:	01400504 	movi	r5,20
    1588:	010001c4 	movi	r4,7
    158c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 20, SXCoord + 12, SYCoord + 20, 0x59E4);
    1590:	00967904 	movi	r2,23012
    1594:	d8800015 	stw	r2,0(sp)
    1598:	01c00504 	movi	r7,20
    159c:	01800304 	movi	r6,12
    15a0:	01400504 	movi	r5,20
    15a4:	010002c4 	movi	r4,11
    15a8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 22, SXCoord + 7, SYCoord + 22, 0x59E4);
    15ac:	00967904 	movi	r2,23012
    15b0:	d8800015 	stw	r2,0(sp)
    15b4:	01c00584 	movi	r7,22
    15b8:	018001c4 	movi	r6,7
    15bc:	01400584 	movi	r5,22
    15c0:	010001c4 	movi	r4,7
    15c4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 21, SXCoord + 12, SYCoord + 22, 0x59E4);
    15c8:	00967904 	movi	r2,23012
    15cc:	d8800015 	stw	r2,0(sp)
    15d0:	01c00584 	movi	r7,22
    15d4:	01800304 	movi	r6,12
    15d8:	01400544 	movi	r5,21
    15dc:	01000204 	movi	r4,8
    15e0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 21, SXCoord + 23, SYCoord + 22, 0x59E4);
    15e4:	00967904 	movi	r2,23012
    15e8:	d8800015 	stw	r2,0(sp)
    15ec:	01c00584 	movi	r7,22
    15f0:	018005c4 	movi	r6,23
    15f4:	01400544 	movi	r5,21
    15f8:	010004c4 	movi	r4,19
    15fc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 22, SXCoord + 24, SYCoord + 22, 0x59E4);
    1600:	00967904 	movi	r2,23012
    1604:	d8800015 	stw	r2,0(sp)
    1608:	01c00584 	movi	r7,22
    160c:	01800604 	movi	r6,24
    1610:	01400584 	movi	r5,22
    1614:	01000604 	movi	r4,24
    1618:	00089f00 	call	89f0 <VGA_box>

  // Render Glasses
  VGA_box(SXCoord, SYCoord + 23, SXCoord + 13, SYCoord + 23, 0x0000);
    161c:	d8000015 	stw	zero,0(sp)
    1620:	01c005c4 	movi	r7,23
    1624:	01800344 	movi	r6,13
    1628:	014005c4 	movi	r5,23
    162c:	0009883a 	mov	r4,zero
    1630:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 24, SXCoord + 3, SYCoord + 24, 0x0000);
    1634:	d8000015 	stw	zero,0(sp)
    1638:	01c00604 	movi	r7,24
    163c:	018000c4 	movi	r6,3
    1640:	01400604 	movi	r5,24
    1644:	0009883a 	mov	r4,zero
    1648:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 25, SXCoord + 3, SYCoord + 25, 0x0000);
    164c:	d8000015 	stw	zero,0(sp)
    1650:	01c00644 	movi	r7,25
    1654:	018000c4 	movi	r6,3
    1658:	01400644 	movi	r5,25
    165c:	01000044 	movi	r4,1
    1660:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 3, SYCoord + 26, SXCoord + 3, SYCoord + 29, 0x0000);
    1664:	d8000015 	stw	zero,0(sp)
    1668:	01c00744 	movi	r7,29
    166c:	018000c4 	movi	r6,3
    1670:	01400684 	movi	r5,26
    1674:	010000c4 	movi	r4,3
    1678:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 30, SXCoord + 12, SYCoord + 30, 0x0000);
    167c:	d8000015 	stw	zero,0(sp)
    1680:	01c00784 	movi	r7,30
    1684:	01800304 	movi	r6,12
    1688:	01400784 	movi	r5,30
    168c:	01000104 	movi	r4,4
    1690:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 26, SXCoord + 13, SYCoord + 29, 0x0000);
    1694:	d8000015 	stw	zero,0(sp)
    1698:	01c00744 	movi	r7,29
    169c:	01800344 	movi	r6,13
    16a0:	01400684 	movi	r5,26
    16a4:	01000344 	movi	r4,13
    16a8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 24, SXCoord + 17, SYCoord + 25, 0x0000);
    16ac:	d8000015 	stw	zero,0(sp)
    16b0:	01c00644 	movi	r7,25
    16b4:	01800444 	movi	r6,17
    16b8:	01400604 	movi	r5,24
    16bc:	01000384 	movi	r4,14
    16c0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 23, SXCoord + 31, SYCoord + 23, 0x0000);
    16c4:	d8000015 	stw	zero,0(sp)
    16c8:	01c005c4 	movi	r7,23
    16cc:	018007c4 	movi	r6,31
    16d0:	014005c4 	movi	r5,23
    16d4:	01000484 	movi	r4,18
    16d8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 24, SXCoord + 31, SYCoord + 24, 0x0000);
    16dc:	d8000015 	stw	zero,0(sp)
    16e0:	01c00604 	movi	r7,24
    16e4:	018007c4 	movi	r6,31
    16e8:	01400604 	movi	r5,24
    16ec:	01000704 	movi	r4,28
    16f0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 25, SXCoord + 30, SYCoord + 25, 0x0000);
    16f4:	d8000015 	stw	zero,0(sp)
    16f8:	01c00644 	movi	r7,25
    16fc:	01800784 	movi	r6,30
    1700:	01400644 	movi	r5,25
    1704:	01000704 	movi	r4,28
    1708:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 26, SXCoord + 28, SYCoord + 29, 0x0000);
    170c:	d8000015 	stw	zero,0(sp)
    1710:	01c00744 	movi	r7,29
    1714:	01800704 	movi	r6,28
    1718:	01400684 	movi	r5,26
    171c:	01000704 	movi	r4,28
    1720:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 30, SXCoord + 27, SYCoord + 30, 0x0000);
    1724:	d8000015 	stw	zero,0(sp)
    1728:	01c00784 	movi	r7,30
    172c:	018006c4 	movi	r6,27
    1730:	01400784 	movi	r5,30
    1734:	010004c4 	movi	r4,19
    1738:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 26, SXCoord + 18, SYCoord + 29, 0x0000);
    173c:	d8000015 	stw	zero,0(sp)
    1740:	01c00744 	movi	r7,29
    1744:	01800484 	movi	r6,18
    1748:	01400684 	movi	r5,26
    174c:	01000484 	movi	r4,18
    1750:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 25, SXCoord + 11, SYCoord + 28, 0x0000);
    1754:	d8000015 	stw	zero,0(sp)
    1758:	01c00704 	movi	r7,28
    175c:	018002c4 	movi	r6,11
    1760:	01400644 	movi	r5,25
    1764:	01000204 	movi	r4,8
    1768:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 25, SXCoord + 23, SYCoord + 28, 0x0000);
    176c:	d8000015 	stw	zero,0(sp)
    1770:	01c00704 	movi	r7,28
    1774:	018005c4 	movi	r6,23
    1778:	01400644 	movi	r5,25
    177c:	01000504 	movi	r4,20
    1780:	00089f00 	call	89f0 <VGA_box>

  // Render Mouth
  VGA_box(SXCoord + 9, SYCoord + 32, SXCoord + 22, SYCoord + 32, 0x0000);
    1784:	d8000015 	stw	zero,0(sp)
    1788:	01c00804 	movi	r7,32
    178c:	01800584 	movi	r6,22
    1790:	01400804 	movi	r5,32
    1794:	01000244 	movi	r4,9
    1798:	00089f00 	call	89f0 <VGA_box>

  // Render Skin
  VGA_box(SXCoord + 6, SYCoord + 17, SXCoord + 25, SYCoord + 17, 0xF6DA);
    179c:	00bdb684 	movi	r2,-2342
    17a0:	d8800015 	stw	r2,0(sp)
    17a4:	01c00444 	movi	r7,17
    17a8:	01800644 	movi	r6,25
    17ac:	01400444 	movi	r5,17
    17b0:	01000184 	movi	r4,6
    17b4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 18, SXCoord + 26, SYCoord + 18, 0xF6DA);
    17b8:	00bdb684 	movi	r2,-2342
    17bc:	d8800015 	stw	r2,0(sp)
    17c0:	01c00484 	movi	r7,18
    17c4:	01800684 	movi	r6,26
    17c8:	01400484 	movi	r5,18
    17cc:	01000144 	movi	r4,5
    17d0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 19, SXCoord + 27, SYCoord + 19, 0xF6DA);
    17d4:	00bdb684 	movi	r2,-2342
    17d8:	d8800015 	stw	r2,0(sp)
    17dc:	01c004c4 	movi	r7,19
    17e0:	018006c4 	movi	r6,27
    17e4:	014004c4 	movi	r5,19
    17e8:	01000104 	movi	r4,4
    17ec:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 20, SXCoord + 27, SYCoord + 20, 0xF6DA);
    17f0:	00bdb684 	movi	r2,-2342
    17f4:	d8800015 	stw	r2,0(sp)
    17f8:	01c00504 	movi	r7,20
    17fc:	018006c4 	movi	r6,27
    1800:	01400504 	movi	r5,20
    1804:	01000104 	movi	r4,4
    1808:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 21, SXCoord + 7, SYCoord + 21, 0xF6DA);
    180c:	00bdb684 	movi	r2,-2342
    1810:	d8800015 	stw	r2,0(sp)
    1814:	01c00544 	movi	r7,21
    1818:	018001c4 	movi	r6,7
    181c:	01400544 	movi	r5,21
    1820:	01000104 	movi	r4,4
    1824:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 21, SXCoord + 18, SYCoord + 21, 0xF6DA);
    1828:	00bdb684 	movi	r2,-2342
    182c:	d8800015 	stw	r2,0(sp)
    1830:	01c00544 	movi	r7,21
    1834:	01800484 	movi	r6,18
    1838:	01400544 	movi	r5,21
    183c:	01000344 	movi	r4,13
    1840:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 21, SXCoord + 27, SYCoord + 21, 0xF6DA);
    1844:	00bdb684 	movi	r2,-2342
    1848:	d8800015 	stw	r2,0(sp)
    184c:	01c00544 	movi	r7,21
    1850:	018006c4 	movi	r6,27
    1854:	01400544 	movi	r5,21
    1858:	01000604 	movi	r4,24
    185c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 22, SXCoord + 6, SYCoord + 22, 0xF6DA);
    1860:	00bdb684 	movi	r2,-2342
    1864:	d8800015 	stw	r2,0(sp)
    1868:	01c00584 	movi	r7,22
    186c:	01800184 	movi	r6,6
    1870:	01400584 	movi	r5,22
    1874:	01000104 	movi	r4,4
    1878:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 22, SXCoord + 18, SYCoord + 22, 0xF6DA);
    187c:	00bdb684 	movi	r2,-2342
    1880:	d8800015 	stw	r2,0(sp)
    1884:	01c00584 	movi	r7,22
    1888:	01800484 	movi	r6,18
    188c:	01400584 	movi	r5,22
    1890:	01000344 	movi	r4,13
    1894:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 22, SXCoord + 27, SYCoord + 22, 0xF6DA);
    1898:	00bdb684 	movi	r2,-2342
    189c:	d8800015 	stw	r2,0(sp)
    18a0:	01c00584 	movi	r7,22
    18a4:	018006c4 	movi	r6,27
    18a8:	01400584 	movi	r5,22
    18ac:	01000644 	movi	r4,25
    18b0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 23, SXCoord + 17, SYCoord + 23, 0xF6DA);
    18b4:	00bdb684 	movi	r2,-2342
    18b8:	d8800015 	stw	r2,0(sp)
    18bc:	01c005c4 	movi	r7,23
    18c0:	01800444 	movi	r6,17
    18c4:	014005c4 	movi	r5,23
    18c8:	01000384 	movi	r4,14
    18cc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 24, SXCoord + 13, SYCoord + 24, 0xF6DA);
    18d0:	00bdb684 	movi	r2,-2342
    18d4:	d8800015 	stw	r2,0(sp)
    18d8:	01c00604 	movi	r7,24
    18dc:	01800344 	movi	r6,13
    18e0:	01400604 	movi	r5,24
    18e4:	01000104 	movi	r4,4
    18e8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 25, SXCoord + 7, SYCoord + 28, 0xF6DA);
    18ec:	00bdb684 	movi	r2,-2342
    18f0:	d8800015 	stw	r2,0(sp)
    18f4:	01c00704 	movi	r7,28
    18f8:	018001c4 	movi	r6,7
    18fc:	01400644 	movi	r5,25
    1900:	01000104 	movi	r4,4
    1904:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 29, SXCoord + 12, SYCoord + 29, 0xF6DA);
    1908:	00bdb684 	movi	r2,-2342
    190c:	d8800015 	stw	r2,0(sp)
    1910:	01c00744 	movi	r7,29
    1914:	01800304 	movi	r6,12
    1918:	01400744 	movi	r5,29
    191c:	01000184 	movi	r4,6
    1920:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 25, SXCoord + 13, SYCoord + 25, 0xF6DA);
    1924:	00bdb684 	movi	r2,-2342
    1928:	d8800015 	stw	r2,0(sp)
    192c:	01c00644 	movi	r7,25
    1930:	01800344 	movi	r6,13
    1934:	01400644 	movi	r5,25
    1938:	01000304 	movi	r4,12
    193c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 26, SXCoord + 12, SYCoord + 28, 0xF6DA);
    1940:	00bdb684 	movi	r2,-2342
    1944:	d8800015 	stw	r2,0(sp)
    1948:	01c00704 	movi	r7,28
    194c:	01800304 	movi	r6,12
    1950:	01400684 	movi	r5,26
    1954:	01000304 	movi	r4,12
    1958:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 24, SXCoord + 27, SYCoord + 24, 0xF6DA);
    195c:	00bdb684 	movi	r2,-2342
    1960:	d8800015 	stw	r2,0(sp)
    1964:	01c00604 	movi	r7,24
    1968:	018006c4 	movi	r6,27
    196c:	01400604 	movi	r5,24
    1970:	01000484 	movi	r4,18
    1974:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 25, SXCoord + 19, SYCoord + 25, 0xF6DA);
    1978:	00bdb684 	movi	r2,-2342
    197c:	d8800015 	stw	r2,0(sp)
    1980:	01c00644 	movi	r7,25
    1984:	018004c4 	movi	r6,19
    1988:	01400644 	movi	r5,25
    198c:	01000484 	movi	r4,18
    1990:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 26, SXCoord + 19, SYCoord + 28, 0xF6DA);
    1994:	00bdb684 	movi	r2,-2342
    1998:	d8800015 	stw	r2,0(sp)
    199c:	01c00704 	movi	r7,28
    19a0:	018004c4 	movi	r6,19
    19a4:	01400684 	movi	r5,26
    19a8:	010004c4 	movi	r4,19
    19ac:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 29, SXCoord + 25, SYCoord + 29, 0xF6DA);
    19b0:	00bdb684 	movi	r2,-2342
    19b4:	d8800015 	stw	r2,0(sp)
    19b8:	01c00744 	movi	r7,29
    19bc:	01800644 	movi	r6,25
    19c0:	01400744 	movi	r5,29
    19c4:	010004c4 	movi	r4,19
    19c8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 25, SXCoord + 27, SYCoord + 28, 0xF6DA);
    19cc:	00bdb684 	movi	r2,-2342
    19d0:	d8800015 	stw	r2,0(sp)
    19d4:	01c00704 	movi	r7,28
    19d8:	018006c4 	movi	r6,27
    19dc:	01400644 	movi	r5,25
    19e0:	01000604 	movi	r4,24
    19e4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 26, SXCoord + 17, SYCoord + 29, 0xF6DA);
    19e8:	00bdb684 	movi	r2,-2342
    19ec:	d8800015 	stw	r2,0(sp)
    19f0:	01c00744 	movi	r7,29
    19f4:	01800444 	movi	r6,17
    19f8:	01400684 	movi	r5,26
    19fc:	01000384 	movi	r4,14
    1a00:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 30, SXCoord + 18, SYCoord + 30, 0xF6DA);
    1a04:	00bdb684 	movi	r2,-2342
    1a08:	d8800015 	stw	r2,0(sp)
    1a0c:	01c00784 	movi	r7,30
    1a10:	01800484 	movi	r6,18
    1a14:	01400784 	movi	r5,30
    1a18:	01000344 	movi	r4,13
    1a1c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 31, SXCoord + 24, SYCoord + 31, 0xF6DA);
    1a20:	00bdb684 	movi	r2,-2342
    1a24:	d8800015 	stw	r2,0(sp)
    1a28:	01c007c4 	movi	r7,31
    1a2c:	01800604 	movi	r6,24
    1a30:	014007c4 	movi	r5,31
    1a34:	010001c4 	movi	r4,7
    1a38:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 32, SXCoord + 8, SYCoord + 32, 0xF6DA);
    1a3c:	00bdb684 	movi	r2,-2342
    1a40:	d8800015 	stw	r2,0(sp)
    1a44:	01c00804 	movi	r7,32
    1a48:	01800204 	movi	r6,8
    1a4c:	01400804 	movi	r5,32
    1a50:	010001c4 	movi	r4,7
    1a54:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 23, SYCoord + 32, SXCoord + 24, SYCoord + 32, 0xF6DA);
    1a58:	00bdb684 	movi	r2,-2342
    1a5c:	d8800015 	stw	r2,0(sp)
    1a60:	01c00804 	movi	r7,32
    1a64:	01800604 	movi	r6,24
    1a68:	01400804 	movi	r5,32
    1a6c:	010005c4 	movi	r4,23
    1a70:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 33, SXCoord + 24, SYCoord + 33, 0xF6DA);
    1a74:	00bdb684 	movi	r2,-2342
    1a78:	d8800015 	stw	r2,0(sp)
    1a7c:	01c00844 	movi	r7,33
    1a80:	01800604 	movi	r6,24
    1a84:	01400844 	movi	r5,33
    1a88:	010001c4 	movi	r4,7
    1a8c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 34, SXCoord + 23, SYCoord + 36, 0xF6DA);
    1a90:	00bdb684 	movi	r2,-2342
    1a94:	d8800015 	stw	r2,0(sp)
    1a98:	01c00904 	movi	r7,36
    1a9c:	018005c4 	movi	r6,23
    1aa0:	01400884 	movi	r5,34
    1aa4:	01000204 	movi	r4,8
    1aa8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 37, SXCoord + 25, SYCoord + 37, 0xF6DA);
    1aac:	00bdb684 	movi	r2,-2342
    1ab0:	d8800015 	stw	r2,0(sp)
    1ab4:	01c00944 	movi	r7,37
    1ab8:	01800644 	movi	r6,25
    1abc:	01400944 	movi	r5,37
    1ac0:	01000184 	movi	r4,6
    1ac4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 38, SXCoord + 24, SYCoord + 38, 0xF6DA);
    1ac8:	00bdb684 	movi	r2,-2342
    1acc:	d8800015 	stw	r2,0(sp)
    1ad0:	01c00984 	movi	r7,38
    1ad4:	01800604 	movi	r6,24
    1ad8:	01400984 	movi	r5,38
    1adc:	010001c4 	movi	r4,7
    1ae0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 39, SXCoord + 23, SYCoord + 39, 0xF6DA);
    1ae4:	00bdb684 	movi	r2,-2342
    1ae8:	d8800015 	stw	r2,0(sp)
    1aec:	01c009c4 	movi	r7,39
    1af0:	018005c4 	movi	r6,23
    1af4:	014009c4 	movi	r5,39
    1af8:	01000204 	movi	r4,8
    1afc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 40, SXCoord + 21, SYCoord + 40, 0xF6DA);
    1b00:	00bdb684 	movi	r2,-2342
    1b04:	d8800015 	stw	r2,0(sp)
    1b08:	01c00a04 	movi	r7,40
    1b0c:	01800544 	movi	r6,21
    1b10:	01400a04 	movi	r5,40
    1b14:	01000284 	movi	r4,10
    1b18:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 41, SXCoord + 17, SYCoord + 44, 0xF6DA);
    1b1c:	00bdb684 	movi	r2,-2342
    1b20:	d8800015 	stw	r2,0(sp)
    1b24:	01c00b04 	movi	r7,44
    1b28:	01800444 	movi	r6,17
    1b2c:	01400a44 	movi	r5,41
    1b30:	01000384 	movi	r4,14
    1b34:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 45, SXCoord + 19, SYCoord + 46, 0xF6DA);
    1b38:	00bdb684 	movi	r2,-2342
    1b3c:	d8800015 	stw	r2,0(sp)
    1b40:	01c00b84 	movi	r7,46
    1b44:	018004c4 	movi	r6,19
    1b48:	01400b44 	movi	r5,45
    1b4c:	01000304 	movi	r4,12
    1b50:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 47, SXCoord + 17, SYCoord + 48, 0xF6DA);
    1b54:	00bdb684 	movi	r2,-2342
    1b58:	d8800015 	stw	r2,0(sp)
    1b5c:	01c00c04 	movi	r7,48
    1b60:	01800444 	movi	r6,17
    1b64:	01400bc4 	movi	r5,47
    1b68:	01000384 	movi	r4,14
    1b6c:	00089f00 	call	89f0 <VGA_box>

  // Render Shirt
  VGA_box(SXCoord + 10, SYCoord + 45, SXCoord + 11, SYCoord + 46, 0x2589);
    1b70:	00896244 	movi	r2,9609
    1b74:	d8800015 	stw	r2,0(sp)
    1b78:	01c00b84 	movi	r7,46
    1b7c:	018002c4 	movi	r6,11
    1b80:	01400b44 	movi	r5,45
    1b84:	01000284 	movi	r4,10
    1b88:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 45, SXCoord + 21, SYCoord + 46, 0x2589);
    1b8c:	00896244 	movi	r2,9609
    1b90:	d8800015 	stw	r2,0(sp)
    1b94:	01c00b84 	movi	r7,46
    1b98:	01800544 	movi	r6,21
    1b9c:	01400b44 	movi	r5,45
    1ba0:	01000504 	movi	r4,20
    1ba4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 47, SXCoord + 13, SYCoord + 48, 0x2589);
    1ba8:	00896244 	movi	r2,9609
    1bac:	d8800015 	stw	r2,0(sp)
    1bb0:	01c00c04 	movi	r7,48
    1bb4:	01800344 	movi	r6,13
    1bb8:	01400bc4 	movi	r5,47
    1bbc:	01000204 	movi	r4,8
    1bc0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 47, SXCoord + 23, SYCoord + 48, 0x2589);
    1bc4:	00896244 	movi	r2,9609
    1bc8:	d8800015 	stw	r2,0(sp)
    1bcc:	01c00c04 	movi	r7,48
    1bd0:	018005c4 	movi	r6,23
    1bd4:	01400bc4 	movi	r5,47
    1bd8:	01000484 	movi	r4,18
    1bdc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 49, SXCoord + 21, SYCoord + 50, 0x2589);
    1be0:	00896244 	movi	r2,9609
    1be4:	d8800015 	stw	r2,0(sp)
    1be8:	01c00c84 	movi	r7,50
    1bec:	01800544 	movi	r6,21
    1bf0:	01400c44 	movi	r5,49
    1bf4:	01000284 	movi	r4,10
    1bf8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 51, SXCoord + 17, SYCoord + 52, 0x2589);
    1bfc:	00896244 	movi	r2,9609
    1c00:	d8800015 	stw	r2,0(sp)
    1c04:	01c00d04 	movi	r7,52
    1c08:	01800444 	movi	r6,17
    1c0c:	01400cc4 	movi	r5,51
    1c10:	01000384 	movi	r4,14
    1c14:	00089f00 	call	89f0 <VGA_box>
}
    1c18:	0001883a 	nop
    1c1c:	e037883a 	mov	sp,fp
    1c20:	dfc00117 	ldw	ra,4(sp)
    1c24:	df000017 	ldw	fp,0(sp)
    1c28:	dec00204 	addi	sp,sp,8
    1c2c:	f800283a 	ret

00001c30 <spencerNeutralPose2>:


void spencerNeutralPose2(void)
{
    1c30:	defffd04 	addi	sp,sp,-12
    1c34:	dfc00215 	stw	ra,8(sp)
    1c38:	df000115 	stw	fp,4(sp)
    1c3c:	df000104 	addi	fp,sp,4
  // Rendering Start – Spencer Neutral Pose (S2.png)

  // Render Hair
  VGA_box(SXCoord, SYCoord + 14, SXCoord + 3, SYCoord + 23, 0x59E4);
    1c40:	00967904 	movi	r2,23012
    1c44:	d8800015 	stw	r2,0(sp)
    1c48:	01c005c4 	movi	r7,23
    1c4c:	018000c4 	movi	r6,3
    1c50:	01400384 	movi	r5,14
    1c54:	0009883a 	mov	r4,zero
    1c58:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 26, SXCoord, SYCoord + 26, 0x59E4);
    1c5c:	00967904 	movi	r2,23012
    1c60:	d8800015 	stw	r2,0(sp)
    1c64:	01c00684 	movi	r7,26
    1c68:	000d883a 	mov	r6,zero
    1c6c:	01400684 	movi	r5,26
    1c70:	0009883a 	mov	r4,zero
    1c74:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 27, SXCoord + 2, SYCoord + 29, 0x59E4);
    1c78:	00967904 	movi	r2,23012
    1c7c:	d8800015 	stw	r2,0(sp)
    1c80:	01c00744 	movi	r7,29
    1c84:	01800084 	movi	r6,2
    1c88:	014006c4 	movi	r5,27
    1c8c:	0009883a 	mov	r4,zero
    1c90:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 30, SXCoord + 5, SYCoord + 30, 0x59E4);
    1c94:	00967904 	movi	r2,23012
    1c98:	d8800015 	stw	r2,0(sp)
    1c9c:	01c00784 	movi	r7,30
    1ca0:	01800144 	movi	r6,5
    1ca4:	01400784 	movi	r5,30
    1ca8:	01000104 	movi	r4,4
    1cac:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 32, SXCoord + 6, SYCoord + 37, 0x59E4);
    1cb0:	00967904 	movi	r2,23012
    1cb4:	d8800015 	stw	r2,0(sp)
    1cb8:	01c00944 	movi	r7,37
    1cbc:	01800184 	movi	r6,6
    1cc0:	01400804 	movi	r5,32
    1cc4:	01000104 	movi	r4,4
    1cc8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 35, SXCoord + 7, SYCoord + 37, 0x59E4);
    1ccc:	00967904 	movi	r2,23012
    1cd0:	d8800015 	stw	r2,0(sp)
    1cd4:	01c00944 	movi	r7,37
    1cd8:	018001c4 	movi	r6,7
    1cdc:	014008c4 	movi	r5,35
    1ce0:	010001c4 	movi	r4,7
    1ce4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 10, SXCoord + 4, SYCoord + 19, 0x59E4);
    1ce8:	00967904 	movi	r2,23012
    1cec:	d8800015 	stw	r2,0(sp)
    1cf0:	01c004c4 	movi	r7,19
    1cf4:	01800104 	movi	r6,4
    1cf8:	01400284 	movi	r5,10
    1cfc:	01000104 	movi	r4,4
    1d00:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 10, SXCoord + 5, SYCoord + 18, 0x59E4);
    1d04:	00967904 	movi	r2,23012
    1d08:	d8800015 	stw	r2,0(sp)
    1d0c:	01c00484 	movi	r7,18
    1d10:	01800144 	movi	r6,5
    1d14:	01400284 	movi	r5,10
    1d18:	01000144 	movi	r4,5
    1d1c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 10, SXCoord + 25, SYCoord + 17, 0x59E4);
    1d20:	00967904 	movi	r2,23012
    1d24:	d8800015 	stw	r2,0(sp)
    1d28:	01c00444 	movi	r7,17
    1d2c:	01800644 	movi	r6,25
    1d30:	01400284 	movi	r5,10
    1d34:	01000184 	movi	r4,6
    1d38:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 10, SXCoord + 26, SYCoord + 18, 0x59E4);
    1d3c:	00967904 	movi	r2,23012
    1d40:	d8800015 	stw	r2,0(sp)
    1d44:	01c00484 	movi	r7,18
    1d48:	01800684 	movi	r6,26
    1d4c:	01400284 	movi	r5,10
    1d50:	01000684 	movi	r4,26
    1d54:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 27, SYCoord + 10, SXCoord + 27, SYCoord + 19, 0x59E4);
    1d58:	00967904 	movi	r2,23012
    1d5c:	d8800015 	stw	r2,0(sp)
    1d60:	01c004c4 	movi	r7,19
    1d64:	018006c4 	movi	r6,27
    1d68:	01400284 	movi	r5,10
    1d6c:	010006c4 	movi	r4,27
    1d70:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 14, SXCoord + 31, SYCoord + 23, 0x59E4);
    1d74:	00967904 	movi	r2,23012
    1d78:	d8800015 	stw	r2,0(sp)
    1d7c:	01c005c4 	movi	r7,23
    1d80:	018007c4 	movi	r6,31
    1d84:	01400384 	movi	r5,14
    1d88:	01000704 	movi	r4,28
    1d8c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 31, SYCoord + 26, SXCoord + 31, SYCoord + 26, 0x59E4);
    1d90:	00967904 	movi	r2,23012
    1d94:	d8800015 	stw	r2,0(sp)
    1d98:	01c00684 	movi	r7,26
    1d9c:	018007c4 	movi	r6,31
    1da0:	01400684 	movi	r5,26
    1da4:	010007c4 	movi	r4,31
    1da8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 29, SYCoord + 27, SXCoord + 31, SYCoord + 29, 0x59E4);
    1dac:	00967904 	movi	r2,23012
    1db0:	d8800015 	stw	r2,0(sp)
    1db4:	01c00744 	movi	r7,29
    1db8:	018007c4 	movi	r6,31
    1dbc:	014006c4 	movi	r5,27
    1dc0:	01000744 	movi	r4,29
    1dc4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 30, SXCoord + 27, SYCoord + 30, 0x59E4);
    1dc8:	00967904 	movi	r2,23012
    1dcc:	d8800015 	stw	r2,0(sp)
    1dd0:	01c00784 	movi	r7,30
    1dd4:	018006c4 	movi	r6,27
    1dd8:	01400784 	movi	r5,30
    1ddc:	01000684 	movi	r4,26
    1de0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 32, SXCoord + 27, SYCoord + 37, 0x59E4);
    1de4:	00967904 	movi	r2,23012
    1de8:	d8800015 	stw	r2,0(sp)
    1dec:	01c00944 	movi	r7,37
    1df0:	018006c4 	movi	r6,27
    1df4:	01400804 	movi	r5,32
    1df8:	01000644 	movi	r4,25
    1dfc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 35, SXCoord + 24, SYCoord + 37, 0x59E4);
    1e00:	00967904 	movi	r2,23012
    1e04:	d8800015 	stw	r2,0(sp)
    1e08:	01c00944 	movi	r7,37
    1e0c:	01800604 	movi	r6,24
    1e10:	014008c4 	movi	r5,35
    1e14:	01000604 	movi	r4,24
    1e18:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 6, SXCoord + 23, SYCoord + 9, 0x59E4);
    1e1c:	00967904 	movi	r2,23012
    1e20:	d8800015 	stw	r2,0(sp)
    1e24:	01c00244 	movi	r7,9
    1e28:	018005c4 	movi	r6,23
    1e2c:	01400184 	movi	r5,6
    1e30:	01000304 	movi	r4,12
    1e34:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 2, SXCoord + 19, SYCoord + 5, 0x59E4);
    1e38:	00967904 	movi	r2,23012
    1e3c:	d8800015 	stw	r2,0(sp)
    1e40:	01c00144 	movi	r7,5
    1e44:	018004c4 	movi	r6,19
    1e48:	01400084 	movi	r5,2
    1e4c:	01000304 	movi	r4,12
    1e50:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 1, SXCoord + 16, SYCoord + 1, 0x59E4);
    1e54:	00967904 	movi	r2,23012
    1e58:	d8800015 	stw	r2,0(sp)
    1e5c:	01c00044 	movi	r7,1
    1e60:	01800404 	movi	r6,16
    1e64:	01400044 	movi	r5,1
    1e68:	010002c4 	movi	r4,11
    1e6c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 2, SXCoord + 11, SYCoord + 2, 0x59E4);
    1e70:	00967904 	movi	r2,23012
    1e74:	d8800015 	stw	r2,0(sp)
    1e78:	01c00084 	movi	r7,2
    1e7c:	018002c4 	movi	r6,11
    1e80:	01400084 	movi	r5,2
    1e84:	01000284 	movi	r4,10
    1e88:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 21, SXCoord + 8, SYCoord + 21, 0x59E4);
    1e8c:	00967904 	movi	r2,23012
    1e90:	d8800015 	stw	r2,0(sp)
    1e94:	01c00544 	movi	r7,21
    1e98:	01800204 	movi	r6,8
    1e9c:	01400544 	movi	r5,21
    1ea0:	010001c4 	movi	r4,7
    1ea4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 21, SXCoord + 12, SYCoord + 21, 0x59E4);
    1ea8:	00967904 	movi	r2,23012
    1eac:	d8800015 	stw	r2,0(sp)
    1eb0:	01c00544 	movi	r7,21
    1eb4:	01800304 	movi	r6,12
    1eb8:	01400544 	movi	r5,21
    1ebc:	010002c4 	movi	r4,11
    1ec0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 23, SXCoord + 7, SYCoord + 23, 0x59E4);
    1ec4:	00967904 	movi	r2,23012
    1ec8:	d8800015 	stw	r2,0(sp)
    1ecc:	01c005c4 	movi	r7,23
    1ed0:	018001c4 	movi	r6,7
    1ed4:	014005c4 	movi	r5,23
    1ed8:	010001c4 	movi	r4,7
    1edc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 22, SXCoord + 12, SYCoord + 23, 0x59E4);
    1ee0:	00967904 	movi	r2,23012
    1ee4:	d8800015 	stw	r2,0(sp)
    1ee8:	01c005c4 	movi	r7,23
    1eec:	01800304 	movi	r6,12
    1ef0:	01400584 	movi	r5,22
    1ef4:	01000204 	movi	r4,8
    1ef8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 22, SXCoord + 23, SYCoord + 23, 0x59E4);
    1efc:	00967904 	movi	r2,23012
    1f00:	d8800015 	stw	r2,0(sp)
    1f04:	01c005c4 	movi	r7,23
    1f08:	018005c4 	movi	r6,23
    1f0c:	01400584 	movi	r5,22
    1f10:	010004c4 	movi	r4,19
    1f14:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 23, SXCoord + 24, SYCoord + 23, 0x59E4);
    1f18:	00967904 	movi	r2,23012
    1f1c:	d8800015 	stw	r2,0(sp)
    1f20:	01c005c4 	movi	r7,23
    1f24:	01800604 	movi	r6,24
    1f28:	014005c4 	movi	r5,23
    1f2c:	01000604 	movi	r4,24
    1f30:	00089f00 	call	89f0 <VGA_box>

  // Render Glasses
  VGA_box(SXCoord, SYCoord + 24, SXCoord + 13, SYCoord + 24, 0x0000);
    1f34:	d8000015 	stw	zero,0(sp)
    1f38:	01c00604 	movi	r7,24
    1f3c:	01800344 	movi	r6,13
    1f40:	01400604 	movi	r5,24
    1f44:	0009883a 	mov	r4,zero
    1f48:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 25, SXCoord + 3, SYCoord + 25, 0x0000);
    1f4c:	d8000015 	stw	zero,0(sp)
    1f50:	01c00644 	movi	r7,25
    1f54:	018000c4 	movi	r6,3
    1f58:	01400644 	movi	r5,25
    1f5c:	0009883a 	mov	r4,zero
    1f60:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 26, SXCoord + 3, SYCoord + 26, 0x0000);
    1f64:	d8000015 	stw	zero,0(sp)
    1f68:	01c00684 	movi	r7,26
    1f6c:	018000c4 	movi	r6,3
    1f70:	01400684 	movi	r5,26
    1f74:	01000044 	movi	r4,1
    1f78:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 3, SYCoord + 27, SXCoord + 3, SYCoord + 30, 0x0000);
    1f7c:	d8000015 	stw	zero,0(sp)
    1f80:	01c00784 	movi	r7,30
    1f84:	018000c4 	movi	r6,3
    1f88:	014006c4 	movi	r5,27
    1f8c:	010000c4 	movi	r4,3
    1f90:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 31, SXCoord + 12, SYCoord + 31, 0x0000);
    1f94:	d8000015 	stw	zero,0(sp)
    1f98:	01c007c4 	movi	r7,31
    1f9c:	01800304 	movi	r6,12
    1fa0:	014007c4 	movi	r5,31
    1fa4:	01000104 	movi	r4,4
    1fa8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 27, SXCoord + 13, SYCoord + 30, 0x0000);
    1fac:	d8000015 	stw	zero,0(sp)
    1fb0:	01c00784 	movi	r7,30
    1fb4:	01800344 	movi	r6,13
    1fb8:	014006c4 	movi	r5,27
    1fbc:	01000344 	movi	r4,13
    1fc0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 25, SXCoord + 17, SYCoord + 26, 0x0000);
    1fc4:	d8000015 	stw	zero,0(sp)
    1fc8:	01c00684 	movi	r7,26
    1fcc:	01800444 	movi	r6,17
    1fd0:	01400644 	movi	r5,25
    1fd4:	01000384 	movi	r4,14
    1fd8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 24, SXCoord + 31, SYCoord + 24, 0x0000);
    1fdc:	d8000015 	stw	zero,0(sp)
    1fe0:	01c00604 	movi	r7,24
    1fe4:	018007c4 	movi	r6,31
    1fe8:	01400604 	movi	r5,24
    1fec:	01000484 	movi	r4,18
    1ff0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 25, SXCoord + 31, SYCoord + 25, 0x0000);
    1ff4:	d8000015 	stw	zero,0(sp)
    1ff8:	01c00644 	movi	r7,25
    1ffc:	018007c4 	movi	r6,31
    2000:	01400644 	movi	r5,25
    2004:	01000704 	movi	r4,28
    2008:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 26, SXCoord + 30, SYCoord + 26, 0x0000);
    200c:	d8000015 	stw	zero,0(sp)
    2010:	01c00684 	movi	r7,26
    2014:	01800784 	movi	r6,30
    2018:	01400684 	movi	r5,26
    201c:	01000704 	movi	r4,28
    2020:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 27, SXCoord + 28, SYCoord + 30, 0x0000);
    2024:	d8000015 	stw	zero,0(sp)
    2028:	01c00784 	movi	r7,30
    202c:	01800704 	movi	r6,28
    2030:	014006c4 	movi	r5,27
    2034:	01000704 	movi	r4,28
    2038:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 31, SXCoord + 27, SYCoord + 31, 0x0000);
    203c:	d8000015 	stw	zero,0(sp)
    2040:	01c007c4 	movi	r7,31
    2044:	018006c4 	movi	r6,27
    2048:	014007c4 	movi	r5,31
    204c:	010004c4 	movi	r4,19
    2050:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 27, SXCoord + 18, SYCoord + 30, 0x0000);
    2054:	d8000015 	stw	zero,0(sp)
    2058:	01c00784 	movi	r7,30
    205c:	01800484 	movi	r6,18
    2060:	014006c4 	movi	r5,27
    2064:	01000484 	movi	r4,18
    2068:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 26, SXCoord + 11, SYCoord + 29, 0x0000);
    206c:	d8000015 	stw	zero,0(sp)
    2070:	01c00744 	movi	r7,29
    2074:	018002c4 	movi	r6,11
    2078:	01400684 	movi	r5,26
    207c:	01000204 	movi	r4,8
    2080:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 26, SXCoord + 23, SYCoord + 29, 0x0000);
    2084:	d8000015 	stw	zero,0(sp)
    2088:	01c00744 	movi	r7,29
    208c:	018005c4 	movi	r6,23
    2090:	01400684 	movi	r5,26
    2094:	01000504 	movi	r4,20
    2098:	00089f00 	call	89f0 <VGA_box>

  // Render Mouth
  VGA_box(SXCoord + 9, SYCoord + 33, SXCoord + 22, SYCoord + 33, 0x0000);
    209c:	d8000015 	stw	zero,0(sp)
    20a0:	01c00844 	movi	r7,33
    20a4:	01800584 	movi	r6,22
    20a8:	01400844 	movi	r5,33
    20ac:	01000244 	movi	r4,9
    20b0:	00089f00 	call	89f0 <VGA_box>

  // Render Skin
  VGA_box(SXCoord + 6, SYCoord + 18, SXCoord + 25, SYCoord + 18, 0xF6DA);
    20b4:	00bdb684 	movi	r2,-2342
    20b8:	d8800015 	stw	r2,0(sp)
    20bc:	01c00484 	movi	r7,18
    20c0:	01800644 	movi	r6,25
    20c4:	01400484 	movi	r5,18
    20c8:	01000184 	movi	r4,6
    20cc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 19, SXCoord + 26, SYCoord + 19, 0xF6DA);
    20d0:	00bdb684 	movi	r2,-2342
    20d4:	d8800015 	stw	r2,0(sp)
    20d8:	01c004c4 	movi	r7,19
    20dc:	01800684 	movi	r6,26
    20e0:	014004c4 	movi	r5,19
    20e4:	01000144 	movi	r4,5
    20e8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 20, SXCoord + 27, SYCoord + 20, 0xF6DA);
    20ec:	00bdb684 	movi	r2,-2342
    20f0:	d8800015 	stw	r2,0(sp)
    20f4:	01c00504 	movi	r7,20
    20f8:	018006c4 	movi	r6,27
    20fc:	01400504 	movi	r5,20
    2100:	01000104 	movi	r4,4
    2104:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 21, SXCoord + 27, SYCoord + 21, 0xF6DA);
    2108:	00bdb684 	movi	r2,-2342
    210c:	d8800015 	stw	r2,0(sp)
    2110:	01c00544 	movi	r7,21
    2114:	018006c4 	movi	r6,27
    2118:	01400544 	movi	r5,21
    211c:	01000104 	movi	r4,4
    2120:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 22, SXCoord + 7, SYCoord + 22, 0xF6DA);
    2124:	00bdb684 	movi	r2,-2342
    2128:	d8800015 	stw	r2,0(sp)
    212c:	01c00584 	movi	r7,22
    2130:	018001c4 	movi	r6,7
    2134:	01400584 	movi	r5,22
    2138:	01000104 	movi	r4,4
    213c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 22, SXCoord + 18, SYCoord + 22, 0xF6DA);
    2140:	00bdb684 	movi	r2,-2342
    2144:	d8800015 	stw	r2,0(sp)
    2148:	01c00584 	movi	r7,22
    214c:	01800484 	movi	r6,18
    2150:	01400584 	movi	r5,22
    2154:	01000344 	movi	r4,13
    2158:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 22, SXCoord + 27, SYCoord + 22, 0xF6DA);
    215c:	00bdb684 	movi	r2,-2342
    2160:	d8800015 	stw	r2,0(sp)
    2164:	01c00584 	movi	r7,22
    2168:	018006c4 	movi	r6,27
    216c:	01400584 	movi	r5,22
    2170:	01000604 	movi	r4,24
    2174:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 23, SXCoord + 6, SYCoord + 23, 0xF6DA);
    2178:	00bdb684 	movi	r2,-2342
    217c:	d8800015 	stw	r2,0(sp)
    2180:	01c005c4 	movi	r7,23
    2184:	01800184 	movi	r6,6
    2188:	014005c4 	movi	r5,23
    218c:	01000104 	movi	r4,4
    2190:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 23, SXCoord + 18, SYCoord + 23, 0xF6DA);
    2194:	00bdb684 	movi	r2,-2342
    2198:	d8800015 	stw	r2,0(sp)
    219c:	01c005c4 	movi	r7,23
    21a0:	01800484 	movi	r6,18
    21a4:	014005c4 	movi	r5,23
    21a8:	01000344 	movi	r4,13
    21ac:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 23, SXCoord + 27, SYCoord + 23, 0xF6DA);
    21b0:	00bdb684 	movi	r2,-2342
    21b4:	d8800015 	stw	r2,0(sp)
    21b8:	01c005c4 	movi	r7,23
    21bc:	018006c4 	movi	r6,27
    21c0:	014005c4 	movi	r5,23
    21c4:	01000644 	movi	r4,25
    21c8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 24, SXCoord + 17, SYCoord + 24, 0xF6DA);
    21cc:	00bdb684 	movi	r2,-2342
    21d0:	d8800015 	stw	r2,0(sp)
    21d4:	01c00604 	movi	r7,24
    21d8:	01800444 	movi	r6,17
    21dc:	01400604 	movi	r5,24
    21e0:	01000384 	movi	r4,14
    21e4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 25, SXCoord + 13, SYCoord + 25, 0xF6DA);
    21e8:	00bdb684 	movi	r2,-2342
    21ec:	d8800015 	stw	r2,0(sp)
    21f0:	01c00644 	movi	r7,25
    21f4:	01800344 	movi	r6,13
    21f8:	01400644 	movi	r5,25
    21fc:	01000104 	movi	r4,4
    2200:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 26, SXCoord + 7, SYCoord + 29, 0xF6DA);
    2204:	00bdb684 	movi	r2,-2342
    2208:	d8800015 	stw	r2,0(sp)
    220c:	01c00744 	movi	r7,29
    2210:	018001c4 	movi	r6,7
    2214:	01400684 	movi	r5,26
    2218:	01000104 	movi	r4,4
    221c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 30, SXCoord + 12, SYCoord + 30, 0xF6DA);
    2220:	00bdb684 	movi	r2,-2342
    2224:	d8800015 	stw	r2,0(sp)
    2228:	01c00784 	movi	r7,30
    222c:	01800304 	movi	r6,12
    2230:	01400784 	movi	r5,30
    2234:	01000184 	movi	r4,6
    2238:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 26, SXCoord + 13, SYCoord + 26, 0xF6DA);
    223c:	00bdb684 	movi	r2,-2342
    2240:	d8800015 	stw	r2,0(sp)
    2244:	01c00684 	movi	r7,26
    2248:	01800344 	movi	r6,13
    224c:	01400684 	movi	r5,26
    2250:	01000304 	movi	r4,12
    2254:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 27, SXCoord + 12, SYCoord + 29, 0xF6DA);
    2258:	00bdb684 	movi	r2,-2342
    225c:	d8800015 	stw	r2,0(sp)
    2260:	01c00744 	movi	r7,29
    2264:	01800304 	movi	r6,12
    2268:	014006c4 	movi	r5,27
    226c:	01000304 	movi	r4,12
    2270:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 25, SXCoord + 27, SYCoord + 25, 0xF6DA);
    2274:	00bdb684 	movi	r2,-2342
    2278:	d8800015 	stw	r2,0(sp)
    227c:	01c00644 	movi	r7,25
    2280:	018006c4 	movi	r6,27
    2284:	01400644 	movi	r5,25
    2288:	01000484 	movi	r4,18
    228c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 26, SXCoord + 19, SYCoord + 26, 0xF6DA);
    2290:	00bdb684 	movi	r2,-2342
    2294:	d8800015 	stw	r2,0(sp)
    2298:	01c00684 	movi	r7,26
    229c:	018004c4 	movi	r6,19
    22a0:	01400684 	movi	r5,26
    22a4:	01000484 	movi	r4,18
    22a8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 27, SXCoord + 19, SYCoord + 29, 0xF6DA);
    22ac:	00bdb684 	movi	r2,-2342
    22b0:	d8800015 	stw	r2,0(sp)
    22b4:	01c00744 	movi	r7,29
    22b8:	018004c4 	movi	r6,19
    22bc:	014006c4 	movi	r5,27
    22c0:	010004c4 	movi	r4,19
    22c4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 30, SXCoord + 25, SYCoord + 30, 0xF6DA);
    22c8:	00bdb684 	movi	r2,-2342
    22cc:	d8800015 	stw	r2,0(sp)
    22d0:	01c00784 	movi	r7,30
    22d4:	01800644 	movi	r6,25
    22d8:	01400784 	movi	r5,30
    22dc:	010004c4 	movi	r4,19
    22e0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 26, SXCoord + 27, SYCoord + 29, 0xF6DA);
    22e4:	00bdb684 	movi	r2,-2342
    22e8:	d8800015 	stw	r2,0(sp)
    22ec:	01c00744 	movi	r7,29
    22f0:	018006c4 	movi	r6,27
    22f4:	01400684 	movi	r5,26
    22f8:	01000604 	movi	r4,24
    22fc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 27, SXCoord + 17, SYCoord + 30, 0xF6DA);
    2300:	00bdb684 	movi	r2,-2342
    2304:	d8800015 	stw	r2,0(sp)
    2308:	01c00784 	movi	r7,30
    230c:	01800444 	movi	r6,17
    2310:	014006c4 	movi	r5,27
    2314:	01000384 	movi	r4,14
    2318:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 31, SXCoord + 18, SYCoord + 31, 0xF6DA);
    231c:	00bdb684 	movi	r2,-2342
    2320:	d8800015 	stw	r2,0(sp)
    2324:	01c007c4 	movi	r7,31
    2328:	01800484 	movi	r6,18
    232c:	014007c4 	movi	r5,31
    2330:	01000344 	movi	r4,13
    2334:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 32, SXCoord + 24, SYCoord + 32, 0xF6DA);
    2338:	00bdb684 	movi	r2,-2342
    233c:	d8800015 	stw	r2,0(sp)
    2340:	01c00804 	movi	r7,32
    2344:	01800604 	movi	r6,24
    2348:	01400804 	movi	r5,32
    234c:	010001c4 	movi	r4,7
    2350:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 33, SXCoord + 8, SYCoord + 33, 0xF6DA);
    2354:	00bdb684 	movi	r2,-2342
    2358:	d8800015 	stw	r2,0(sp)
    235c:	01c00844 	movi	r7,33
    2360:	01800204 	movi	r6,8
    2364:	01400844 	movi	r5,33
    2368:	010001c4 	movi	r4,7
    236c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 23, SYCoord + 33, SXCoord + 24, SYCoord + 33, 0xF6DA);
    2370:	00bdb684 	movi	r2,-2342
    2374:	d8800015 	stw	r2,0(sp)
    2378:	01c00844 	movi	r7,33
    237c:	01800604 	movi	r6,24
    2380:	01400844 	movi	r5,33
    2384:	010005c4 	movi	r4,23
    2388:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 34, SXCoord + 24, SYCoord + 34, 0xF6DA);
    238c:	00bdb684 	movi	r2,-2342
    2390:	d8800015 	stw	r2,0(sp)
    2394:	01c00884 	movi	r7,34
    2398:	01800604 	movi	r6,24
    239c:	01400884 	movi	r5,34
    23a0:	010001c4 	movi	r4,7
    23a4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 35, SXCoord + 23, SYCoord + 37, 0xF6DA);
    23a8:	00bdb684 	movi	r2,-2342
    23ac:	d8800015 	stw	r2,0(sp)
    23b0:	01c00944 	movi	r7,37
    23b4:	018005c4 	movi	r6,23
    23b8:	014008c4 	movi	r5,35
    23bc:	01000204 	movi	r4,8
    23c0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 38, SXCoord + 25, SYCoord + 38, 0xF6DA);
    23c4:	00bdb684 	movi	r2,-2342
    23c8:	d8800015 	stw	r2,0(sp)
    23cc:	01c00984 	movi	r7,38
    23d0:	01800644 	movi	r6,25
    23d4:	01400984 	movi	r5,38
    23d8:	01000184 	movi	r4,6
    23dc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 39, SXCoord + 24, SYCoord + 39, 0xF6DA);
    23e0:	00bdb684 	movi	r2,-2342
    23e4:	d8800015 	stw	r2,0(sp)
    23e8:	01c009c4 	movi	r7,39
    23ec:	01800604 	movi	r6,24
    23f0:	014009c4 	movi	r5,39
    23f4:	010001c4 	movi	r4,7
    23f8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 40, SXCoord + 23, SYCoord + 40, 0xF6DA);
    23fc:	00bdb684 	movi	r2,-2342
    2400:	d8800015 	stw	r2,0(sp)
    2404:	01c00a04 	movi	r7,40
    2408:	018005c4 	movi	r6,23
    240c:	01400a04 	movi	r5,40
    2410:	01000204 	movi	r4,8
    2414:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 41, SXCoord + 21, SYCoord + 41, 0xF6DA);
    2418:	00bdb684 	movi	r2,-2342
    241c:	d8800015 	stw	r2,0(sp)
    2420:	01c00a44 	movi	r7,41
    2424:	01800544 	movi	r6,21
    2428:	01400a44 	movi	r5,41
    242c:	01000284 	movi	r4,10
    2430:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 42, SXCoord + 17, SYCoord + 44, 0xF6DA);
    2434:	00bdb684 	movi	r2,-2342
    2438:	d8800015 	stw	r2,0(sp)
    243c:	01c00b04 	movi	r7,44
    2440:	01800444 	movi	r6,17
    2444:	01400a84 	movi	r5,42
    2448:	01000384 	movi	r4,14
    244c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 45, SXCoord + 19, SYCoord + 46, 0xF6DA);
    2450:	00bdb684 	movi	r2,-2342
    2454:	d8800015 	stw	r2,0(sp)
    2458:	01c00b84 	movi	r7,46
    245c:	018004c4 	movi	r6,19
    2460:	01400b44 	movi	r5,45
    2464:	01000304 	movi	r4,12
    2468:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 47, SXCoord + 17, SYCoord + 48, 0xF6DA);
    246c:	00bdb684 	movi	r2,-2342
    2470:	d8800015 	stw	r2,0(sp)
    2474:	01c00c04 	movi	r7,48
    2478:	01800444 	movi	r6,17
    247c:	01400bc4 	movi	r5,47
    2480:	01000384 	movi	r4,14
    2484:	00089f00 	call	89f0 <VGA_box>

  // Render Shirt
  VGA_box(SXCoord + 10, SYCoord + 45, SXCoord + 11, SYCoord + 46, 0x2589);
    2488:	00896244 	movi	r2,9609
    248c:	d8800015 	stw	r2,0(sp)
    2490:	01c00b84 	movi	r7,46
    2494:	018002c4 	movi	r6,11
    2498:	01400b44 	movi	r5,45
    249c:	01000284 	movi	r4,10
    24a0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 45, SXCoord + 21, SYCoord + 46, 0x2589);
    24a4:	00896244 	movi	r2,9609
    24a8:	d8800015 	stw	r2,0(sp)
    24ac:	01c00b84 	movi	r7,46
    24b0:	01800544 	movi	r6,21
    24b4:	01400b44 	movi	r5,45
    24b8:	01000504 	movi	r4,20
    24bc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 47, SXCoord + 13, SYCoord + 48, 0x2589);
    24c0:	00896244 	movi	r2,9609
    24c4:	d8800015 	stw	r2,0(sp)
    24c8:	01c00c04 	movi	r7,48
    24cc:	01800344 	movi	r6,13
    24d0:	01400bc4 	movi	r5,47
    24d4:	01000204 	movi	r4,8
    24d8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 47, SXCoord + 23, SYCoord + 48, 0x2589);
    24dc:	00896244 	movi	r2,9609
    24e0:	d8800015 	stw	r2,0(sp)
    24e4:	01c00c04 	movi	r7,48
    24e8:	018005c4 	movi	r6,23
    24ec:	01400bc4 	movi	r5,47
    24f0:	01000484 	movi	r4,18
    24f4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 49, SXCoord + 21, SYCoord + 50, 0x2589);
    24f8:	00896244 	movi	r2,9609
    24fc:	d8800015 	stw	r2,0(sp)
    2500:	01c00c84 	movi	r7,50
    2504:	01800544 	movi	r6,21
    2508:	01400c44 	movi	r5,49
    250c:	01000284 	movi	r4,10
    2510:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 51, SXCoord + 17, SYCoord + 52, 0x2589);
    2514:	00896244 	movi	r2,9609
    2518:	d8800015 	stw	r2,0(sp)
    251c:	01c00d04 	movi	r7,52
    2520:	01800444 	movi	r6,17
    2524:	01400cc4 	movi	r5,51
    2528:	01000384 	movi	r4,14
    252c:	00089f00 	call	89f0 <VGA_box>
}
    2530:	0001883a 	nop
    2534:	e037883a 	mov	sp,fp
    2538:	dfc00117 	ldw	ra,4(sp)
    253c:	df000017 	ldw	fp,0(sp)
    2540:	dec00204 	addi	sp,sp,8
    2544:	f800283a 	ret

00002548 <spencerWinPose1>:


void spencerWinPose1(void)
{
    2548:	defffd04 	addi	sp,sp,-12
    254c:	dfc00215 	stw	ra,8(sp)
    2550:	df000115 	stw	fp,4(sp)
    2554:	df000104 	addi	fp,sp,4
  // Rendering Start – Spencer Win Pose (S3.png)

  // Render Star
  VGA_box(SXCoord + 1, SYCoord + 2, SXCoord + 1, SYCoord + 3, 0xFF80);
    2558:	00bfe004 	movi	r2,-128
    255c:	d8800015 	stw	r2,0(sp)
    2560:	01c000c4 	movi	r7,3
    2564:	01800044 	movi	r6,1
    2568:	01400084 	movi	r5,2
    256c:	01000044 	movi	r4,1
    2570:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 2, SYCoord + 1, SXCoord + 2, SYCoord + 4, 0xFF80);
    2574:	00bfe004 	movi	r2,-128
    2578:	d8800015 	stw	r2,0(sp)
    257c:	01c00104 	movi	r7,4
    2580:	01800084 	movi	r6,2
    2584:	01400044 	movi	r5,1
    2588:	01000084 	movi	r4,2
    258c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 3, SYCoord + 2, SXCoord + 3, SYCoord + 3, 0xFF80);
    2590:	00bfe004 	movi	r2,-128
    2594:	d8800015 	stw	r2,0(sp)
    2598:	01c000c4 	movi	r7,3
    259c:	018000c4 	movi	r6,3
    25a0:	01400084 	movi	r5,2
    25a4:	010000c4 	movi	r4,3
    25a8:	00089f00 	call	89f0 <VGA_box>

  // Render Hair
  VGA_box(SXCoord, SYCoord + 13, SXCoord + 3, SYCoord + 22, 0x59E4);
    25ac:	00967904 	movi	r2,23012
    25b0:	d8800015 	stw	r2,0(sp)
    25b4:	01c00584 	movi	r7,22
    25b8:	018000c4 	movi	r6,3
    25bc:	01400344 	movi	r5,13
    25c0:	0009883a 	mov	r4,zero
    25c4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 25, SXCoord, SYCoord + 25, 0x59E4);
    25c8:	00967904 	movi	r2,23012
    25cc:	d8800015 	stw	r2,0(sp)
    25d0:	01c00644 	movi	r7,25
    25d4:	000d883a 	mov	r6,zero
    25d8:	01400644 	movi	r5,25
    25dc:	0009883a 	mov	r4,zero
    25e0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 26, SXCoord + 2, SYCoord + 28, 0x59E4);
    25e4:	00967904 	movi	r2,23012
    25e8:	d8800015 	stw	r2,0(sp)
    25ec:	01c00704 	movi	r7,28
    25f0:	01800084 	movi	r6,2
    25f4:	01400684 	movi	r5,26
    25f8:	0009883a 	mov	r4,zero
    25fc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 29, SXCoord + 5, SYCoord + 29, 0x59E4);
    2600:	00967904 	movi	r2,23012
    2604:	d8800015 	stw	r2,0(sp)
    2608:	01c00744 	movi	r7,29
    260c:	01800144 	movi	r6,5
    2610:	01400744 	movi	r5,29
    2614:	01000104 	movi	r4,4
    2618:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 31, SXCoord + 6, SYCoord + 36, 0x59E4);
    261c:	00967904 	movi	r2,23012
    2620:	d8800015 	stw	r2,0(sp)
    2624:	01c00904 	movi	r7,36
    2628:	01800184 	movi	r6,6
    262c:	014007c4 	movi	r5,31
    2630:	01000104 	movi	r4,4
    2634:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 34, SXCoord + 7, SYCoord + 36, 0x59E4);
    2638:	00967904 	movi	r2,23012
    263c:	d8800015 	stw	r2,0(sp)
    2640:	01c00904 	movi	r7,36
    2644:	018001c4 	movi	r6,7
    2648:	01400884 	movi	r5,34
    264c:	010001c4 	movi	r4,7
    2650:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 9, SXCoord + 4, SYCoord + 18, 0x59E4);
    2654:	00967904 	movi	r2,23012
    2658:	d8800015 	stw	r2,0(sp)
    265c:	01c00484 	movi	r7,18
    2660:	01800104 	movi	r6,4
    2664:	01400244 	movi	r5,9
    2668:	01000104 	movi	r4,4
    266c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 9, SXCoord + 5, SYCoord + 17, 0x59E4);
    2670:	00967904 	movi	r2,23012
    2674:	d8800015 	stw	r2,0(sp)
    2678:	01c00444 	movi	r7,17
    267c:	01800144 	movi	r6,5
    2680:	01400244 	movi	r5,9
    2684:	01000144 	movi	r4,5
    2688:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 9, SXCoord + 25, SYCoord + 16, 0x59E4);
    268c:	00967904 	movi	r2,23012
    2690:	d8800015 	stw	r2,0(sp)
    2694:	01c00404 	movi	r7,16
    2698:	01800644 	movi	r6,25
    269c:	01400244 	movi	r5,9
    26a0:	01000184 	movi	r4,6
    26a4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 9, SXCoord + 26, SYCoord + 17, 0x59E4);
    26a8:	00967904 	movi	r2,23012
    26ac:	d8800015 	stw	r2,0(sp)
    26b0:	01c00444 	movi	r7,17
    26b4:	01800684 	movi	r6,26
    26b8:	01400244 	movi	r5,9
    26bc:	01000684 	movi	r4,26
    26c0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 27, SYCoord + 9, SXCoord + 27, SYCoord + 18, 0x59E4);
    26c4:	00967904 	movi	r2,23012
    26c8:	d8800015 	stw	r2,0(sp)
    26cc:	01c00484 	movi	r7,18
    26d0:	018006c4 	movi	r6,27
    26d4:	01400244 	movi	r5,9
    26d8:	010006c4 	movi	r4,27
    26dc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 13, SXCoord + 31, SYCoord + 22, 0x59E4);
    26e0:	00967904 	movi	r2,23012
    26e4:	d8800015 	stw	r2,0(sp)
    26e8:	01c00584 	movi	r7,22
    26ec:	018007c4 	movi	r6,31
    26f0:	01400344 	movi	r5,13
    26f4:	01000704 	movi	r4,28
    26f8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 31, SYCoord + 25, SXCoord + 31, SYCoord + 25, 0x59E4);
    26fc:	00967904 	movi	r2,23012
    2700:	d8800015 	stw	r2,0(sp)
    2704:	01c00644 	movi	r7,25
    2708:	018007c4 	movi	r6,31
    270c:	01400644 	movi	r5,25
    2710:	010007c4 	movi	r4,31
    2714:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 29, SYCoord + 26, SXCoord + 31, SYCoord + 28, 0x59E4);
    2718:	00967904 	movi	r2,23012
    271c:	d8800015 	stw	r2,0(sp)
    2720:	01c00704 	movi	r7,28
    2724:	018007c4 	movi	r6,31
    2728:	01400684 	movi	r5,26
    272c:	01000744 	movi	r4,29
    2730:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 29, SXCoord + 27, SYCoord + 29, 0x59E4);
    2734:	00967904 	movi	r2,23012
    2738:	d8800015 	stw	r2,0(sp)
    273c:	01c00744 	movi	r7,29
    2740:	018006c4 	movi	r6,27
    2744:	01400744 	movi	r5,29
    2748:	01000684 	movi	r4,26
    274c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 31, SXCoord + 27, SYCoord + 36, 0x59E4);
    2750:	00967904 	movi	r2,23012
    2754:	d8800015 	stw	r2,0(sp)
    2758:	01c00904 	movi	r7,36
    275c:	018006c4 	movi	r6,27
    2760:	014007c4 	movi	r5,31
    2764:	01000644 	movi	r4,25
    2768:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 34, SXCoord + 24, SYCoord + 36, 0x59E4);
    276c:	00967904 	movi	r2,23012
    2770:	d8800015 	stw	r2,0(sp)
    2774:	01c00904 	movi	r7,36
    2778:	01800604 	movi	r6,24
    277c:	01400884 	movi	r5,34
    2780:	01000604 	movi	r4,24
    2784:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 5, SXCoord + 23, SYCoord + 8, 0x59E4);
    2788:	00967904 	movi	r2,23012
    278c:	d8800015 	stw	r2,0(sp)
    2790:	01c00204 	movi	r7,8
    2794:	018005c4 	movi	r6,23
    2798:	01400144 	movi	r5,5
    279c:	01000304 	movi	r4,12
    27a0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 1, SXCoord + 19, SYCoord + 4, 0x59E4);
    27a4:	00967904 	movi	r2,23012
    27a8:	d8800015 	stw	r2,0(sp)
    27ac:	01c00104 	movi	r7,4
    27b0:	018004c4 	movi	r6,19
    27b4:	01400044 	movi	r5,1
    27b8:	01000304 	movi	r4,12
    27bc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord, SXCoord + 16, SYCoord, 0x59E4);
    27c0:	00967904 	movi	r2,23012
    27c4:	d8800015 	stw	r2,0(sp)
    27c8:	000f883a 	mov	r7,zero
    27cc:	01800404 	movi	r6,16
    27d0:	000b883a 	mov	r5,zero
    27d4:	010002c4 	movi	r4,11
    27d8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 1, SXCoord + 11, SYCoord + 1, 0x59E4);
    27dc:	00967904 	movi	r2,23012
    27e0:	d8800015 	stw	r2,0(sp)
    27e4:	01c00044 	movi	r7,1
    27e8:	018002c4 	movi	r6,11
    27ec:	01400044 	movi	r5,1
    27f0:	01000284 	movi	r4,10
    27f4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 21, SXCoord + 12, SYCoord + 21, 0x59E4);
    27f8:	00967904 	movi	r2,23012
    27fc:	d8800015 	stw	r2,0(sp)
    2800:	01c00544 	movi	r7,21
    2804:	01800304 	movi	r6,12
    2808:	01400544 	movi	r5,21
    280c:	010001c4 	movi	r4,7
    2810:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 20, SXCoord + 12, SYCoord + 20, 0x59E4);
    2814:	00967904 	movi	r2,23012
    2818:	d8800015 	stw	r2,0(sp)
    281c:	01c00504 	movi	r7,20
    2820:	01800304 	movi	r6,12
    2824:	01400504 	movi	r5,20
    2828:	01000204 	movi	r4,8
    282c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 21, SXCoord + 23, SYCoord + 22, 0x59E4);
    2830:	00967904 	movi	r2,23012
    2834:	d8800015 	stw	r2,0(sp)
    2838:	01c00584 	movi	r7,22
    283c:	018005c4 	movi	r6,23
    2840:	01400544 	movi	r5,21
    2844:	010004c4 	movi	r4,19
    2848:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 22, SXCoord + 24, SYCoord + 22, 0x59E4);
    284c:	00967904 	movi	r2,23012
    2850:	d8800015 	stw	r2,0(sp)
    2854:	01c00584 	movi	r7,22
    2858:	01800604 	movi	r6,24
    285c:	01400584 	movi	r5,22
    2860:	01000604 	movi	r4,24
    2864:	00089f00 	call	89f0 <VGA_box>

  // Render Glasses
  VGA_box(SXCoord, SYCoord + 23, SXCoord + 13, SYCoord + 23, 0x0000);
    2868:	d8000015 	stw	zero,0(sp)
    286c:	01c005c4 	movi	r7,23
    2870:	01800344 	movi	r6,13
    2874:	014005c4 	movi	r5,23
    2878:	0009883a 	mov	r4,zero
    287c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 24, SXCoord + 3, SYCoord + 24, 0x0000);
    2880:	d8000015 	stw	zero,0(sp)
    2884:	01c00604 	movi	r7,24
    2888:	018000c4 	movi	r6,3
    288c:	01400604 	movi	r5,24
    2890:	0009883a 	mov	r4,zero
    2894:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 25, SXCoord + 3, SYCoord + 25, 0x0000);
    2898:	d8000015 	stw	zero,0(sp)
    289c:	01c00644 	movi	r7,25
    28a0:	018000c4 	movi	r6,3
    28a4:	01400644 	movi	r5,25
    28a8:	01000044 	movi	r4,1
    28ac:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 3, SYCoord + 26, SXCoord + 3, SYCoord + 29, 0x0000);
    28b0:	d8000015 	stw	zero,0(sp)
    28b4:	01c00744 	movi	r7,29
    28b8:	018000c4 	movi	r6,3
    28bc:	01400684 	movi	r5,26
    28c0:	010000c4 	movi	r4,3
    28c4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 30, SXCoord + 12, SYCoord + 30, 0x0000);
    28c8:	d8000015 	stw	zero,0(sp)
    28cc:	01c00784 	movi	r7,30
    28d0:	01800304 	movi	r6,12
    28d4:	01400784 	movi	r5,30
    28d8:	01000104 	movi	r4,4
    28dc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 26, SXCoord + 13, SYCoord + 29, 0x0000);
    28e0:	d8000015 	stw	zero,0(sp)
    28e4:	01c00744 	movi	r7,29
    28e8:	01800344 	movi	r6,13
    28ec:	01400684 	movi	r5,26
    28f0:	01000344 	movi	r4,13
    28f4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 24, SXCoord + 17, SYCoord + 25, 0x0000);
    28f8:	d8000015 	stw	zero,0(sp)
    28fc:	01c00644 	movi	r7,25
    2900:	01800444 	movi	r6,17
    2904:	01400604 	movi	r5,24
    2908:	01000384 	movi	r4,14
    290c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 23, SXCoord + 31, SYCoord + 23, 0x0000);
    2910:	d8000015 	stw	zero,0(sp)
    2914:	01c005c4 	movi	r7,23
    2918:	018007c4 	movi	r6,31
    291c:	014005c4 	movi	r5,23
    2920:	01000484 	movi	r4,18
    2924:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 24, SXCoord + 31, SYCoord + 24, 0x0000);
    2928:	d8000015 	stw	zero,0(sp)
    292c:	01c00604 	movi	r7,24
    2930:	018007c4 	movi	r6,31
    2934:	01400604 	movi	r5,24
    2938:	01000704 	movi	r4,28
    293c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 25, SXCoord + 30, SYCoord + 25, 0x0000);
    2940:	d8000015 	stw	zero,0(sp)
    2944:	01c00644 	movi	r7,25
    2948:	01800784 	movi	r6,30
    294c:	01400644 	movi	r5,25
    2950:	01000704 	movi	r4,28
    2954:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 26, SXCoord + 28, SYCoord + 29, 0x0000);
    2958:	d8000015 	stw	zero,0(sp)
    295c:	01c00744 	movi	r7,29
    2960:	01800704 	movi	r6,28
    2964:	01400684 	movi	r5,26
    2968:	01000704 	movi	r4,28
    296c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 30, SXCoord + 27, SYCoord + 30, 0x0000);
    2970:	d8000015 	stw	zero,0(sp)
    2974:	01c00784 	movi	r7,30
    2978:	018006c4 	movi	r6,27
    297c:	01400784 	movi	r5,30
    2980:	010004c4 	movi	r4,19
    2984:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 26, SXCoord + 18, SYCoord + 29, 0x0000);
    2988:	d8000015 	stw	zero,0(sp)
    298c:	01c00744 	movi	r7,29
    2990:	01800484 	movi	r6,18
    2994:	01400684 	movi	r5,26
    2998:	01000484 	movi	r4,18
    299c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 25, SXCoord + 11, SYCoord + 28, 0x0000);
    29a0:	d8000015 	stw	zero,0(sp)
    29a4:	01c00704 	movi	r7,28
    29a8:	018002c4 	movi	r6,11
    29ac:	01400644 	movi	r5,25
    29b0:	01000204 	movi	r4,8
    29b4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 25, SXCoord + 23, SYCoord + 28, 0x0000);
    29b8:	d8000015 	stw	zero,0(sp)
    29bc:	01c00704 	movi	r7,28
    29c0:	018005c4 	movi	r6,23
    29c4:	01400644 	movi	r5,25
    29c8:	01000504 	movi	r4,20
    29cc:	00089f00 	call	89f0 <VGA_box>

  // Render Mouth
  VGA_box(SXCoord + 9, SYCoord + 32, SXCoord + 22, SYCoord + 32, 0x0000);
    29d0:	d8000015 	stw	zero,0(sp)
    29d4:	01c00804 	movi	r7,32
    29d8:	01800584 	movi	r6,22
    29dc:	01400804 	movi	r5,32
    29e0:	01000244 	movi	r4,9
    29e4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 33, SXCoord + 11, SYCoord + 33, 0x0000);
    29e8:	d8000015 	stw	zero,0(sp)
    29ec:	01c00844 	movi	r7,33
    29f0:	018002c4 	movi	r6,11
    29f4:	01400844 	movi	r5,33
    29f8:	01000284 	movi	r4,10
    29fc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 33, SXCoord + 21, SYCoord + 33, 0x0000);
    2a00:	d8000015 	stw	zero,0(sp)
    2a04:	01c00844 	movi	r7,33
    2a08:	01800544 	movi	r6,21
    2a0c:	01400844 	movi	r5,33
    2a10:	01000504 	movi	r4,20
    2a14:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 34, SXCoord + 20, SYCoord + 34, 0x0000);
    2a18:	d8000015 	stw	zero,0(sp)
    2a1c:	01c00884 	movi	r7,34
    2a20:	01800504 	movi	r6,20
    2a24:	01400884 	movi	r5,34
    2a28:	010002c4 	movi	r4,11
    2a2c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 35, SXCoord + 13, SYCoord + 35, 0x0000);
    2a30:	d8000015 	stw	zero,0(sp)
    2a34:	01c008c4 	movi	r7,35
    2a38:	01800344 	movi	r6,13
    2a3c:	014008c4 	movi	r5,35
    2a40:	01000304 	movi	r4,12
    2a44:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 35, SXCoord + 19, SYCoord + 35, 0x0000);
    2a48:	d8000015 	stw	zero,0(sp)
    2a4c:	01c008c4 	movi	r7,35
    2a50:	018004c4 	movi	r6,19
    2a54:	014008c4 	movi	r5,35
    2a58:	01000484 	movi	r4,18
    2a5c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 36, SXCoord + 18, SYCoord + 36, 0x0000);
    2a60:	d8000015 	stw	zero,0(sp)
    2a64:	01c00904 	movi	r7,36
    2a68:	01800484 	movi	r6,18
    2a6c:	01400904 	movi	r5,36
    2a70:	01000344 	movi	r4,13
    2a74:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 33, SXCoord + 19, SYCoord + 33, 0xFFFF);
    2a78:	00bfffc4 	movi	r2,-1
    2a7c:	d8800015 	stw	r2,0(sp)
    2a80:	01c00844 	movi	r7,33
    2a84:	018004c4 	movi	r6,19
    2a88:	01400844 	movi	r5,33
    2a8c:	01000304 	movi	r4,12
    2a90:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 35, SXCoord + 17, SYCoord + 35, 0xFD79);
    2a94:	00bf5e44 	movi	r2,-647
    2a98:	d8800015 	stw	r2,0(sp)
    2a9c:	01c008c4 	movi	r7,35
    2aa0:	01800444 	movi	r6,17
    2aa4:	014008c4 	movi	r5,35
    2aa8:	01000384 	movi	r4,14
    2aac:	00089f00 	call	89f0 <VGA_box>

  // Render Skin
  VGA_box(SXCoord + 6, SYCoord + 17, SXCoord + 25, SYCoord + 17, 0xF6DA);
    2ab0:	00bdb684 	movi	r2,-2342
    2ab4:	d8800015 	stw	r2,0(sp)
    2ab8:	01c00444 	movi	r7,17
    2abc:	01800644 	movi	r6,25
    2ac0:	01400444 	movi	r5,17
    2ac4:	01000184 	movi	r4,6
    2ac8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 18, SXCoord + 26, SYCoord + 18, 0xF6DA);
    2acc:	00bdb684 	movi	r2,-2342
    2ad0:	d8800015 	stw	r2,0(sp)
    2ad4:	01c00484 	movi	r7,18
    2ad8:	01800684 	movi	r6,26
    2adc:	01400484 	movi	r5,18
    2ae0:	01000144 	movi	r4,5
    2ae4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 19, SXCoord + 27, SYCoord + 19, 0xF6DA);
    2ae8:	00bdb684 	movi	r2,-2342
    2aec:	d8800015 	stw	r2,0(sp)
    2af0:	01c004c4 	movi	r7,19
    2af4:	018006c4 	movi	r6,27
    2af8:	014004c4 	movi	r5,19
    2afc:	01000104 	movi	r4,4
    2b00:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 20, SXCoord + 7, SYCoord + 20, 0xF6DA);
    2b04:	00bdb684 	movi	r2,-2342
    2b08:	d8800015 	stw	r2,0(sp)
    2b0c:	01c00504 	movi	r7,20
    2b10:	018001c4 	movi	r6,7
    2b14:	01400504 	movi	r5,20
    2b18:	01000104 	movi	r4,4
    2b1c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 20, SXCoord + 27, SYCoord + 20, 0xF6DA);
    2b20:	00bdb684 	movi	r2,-2342
    2b24:	d8800015 	stw	r2,0(sp)
    2b28:	01c00504 	movi	r7,20
    2b2c:	018006c4 	movi	r6,27
    2b30:	01400504 	movi	r5,20
    2b34:	01000344 	movi	r4,13
    2b38:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 21, SXCoord + 6, SYCoord + 21, 0xF6DA);
    2b3c:	00bdb684 	movi	r2,-2342
    2b40:	d8800015 	stw	r2,0(sp)
    2b44:	01c00544 	movi	r7,21
    2b48:	01800184 	movi	r6,6
    2b4c:	01400544 	movi	r5,21
    2b50:	01000104 	movi	r4,4
    2b54:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 21, SXCoord + 18, SYCoord + 21, 0xF6DA);
    2b58:	00bdb684 	movi	r2,-2342
    2b5c:	d8800015 	stw	r2,0(sp)
    2b60:	01c00544 	movi	r7,21
    2b64:	01800484 	movi	r6,18
    2b68:	01400544 	movi	r5,21
    2b6c:	01000344 	movi	r4,13
    2b70:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 21, SXCoord + 27, SYCoord + 21, 0xF6DA);
    2b74:	00bdb684 	movi	r2,-2342
    2b78:	d8800015 	stw	r2,0(sp)
    2b7c:	01c00544 	movi	r7,21
    2b80:	018006c4 	movi	r6,27
    2b84:	01400544 	movi	r5,21
    2b88:	01000604 	movi	r4,24
    2b8c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 22, SXCoord + 18, SYCoord + 22, 0xF6DA);
    2b90:	00bdb684 	movi	r2,-2342
    2b94:	d8800015 	stw	r2,0(sp)
    2b98:	01c00584 	movi	r7,22
    2b9c:	01800484 	movi	r6,18
    2ba0:	01400584 	movi	r5,22
    2ba4:	01000104 	movi	r4,4
    2ba8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 22, SXCoord + 27, SYCoord + 22, 0xF6DA);
    2bac:	00bdb684 	movi	r2,-2342
    2bb0:	d8800015 	stw	r2,0(sp)
    2bb4:	01c00584 	movi	r7,22
    2bb8:	018006c4 	movi	r6,27
    2bbc:	01400584 	movi	r5,22
    2bc0:	01000644 	movi	r4,25
    2bc4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 23, SXCoord + 17, SYCoord + 23, 0xF6DA);
    2bc8:	00bdb684 	movi	r2,-2342
    2bcc:	d8800015 	stw	r2,0(sp)
    2bd0:	01c005c4 	movi	r7,23
    2bd4:	01800444 	movi	r6,17
    2bd8:	014005c4 	movi	r5,23
    2bdc:	01000384 	movi	r4,14
    2be0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 24, SXCoord + 13, SYCoord + 24, 0xF6DA);
    2be4:	00bdb684 	movi	r2,-2342
    2be8:	d8800015 	stw	r2,0(sp)
    2bec:	01c00604 	movi	r7,24
    2bf0:	01800344 	movi	r6,13
    2bf4:	01400604 	movi	r5,24
    2bf8:	01000104 	movi	r4,4
    2bfc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 25, SXCoord + 7, SYCoord + 28, 0xF6DA);
    2c00:	00bdb684 	movi	r2,-2342
    2c04:	d8800015 	stw	r2,0(sp)
    2c08:	01c00704 	movi	r7,28
    2c0c:	018001c4 	movi	r6,7
    2c10:	01400644 	movi	r5,25
    2c14:	01000104 	movi	r4,4
    2c18:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 29, SXCoord + 12, SYCoord + 29, 0xF6DA);
    2c1c:	00bdb684 	movi	r2,-2342
    2c20:	d8800015 	stw	r2,0(sp)
    2c24:	01c00744 	movi	r7,29
    2c28:	01800304 	movi	r6,12
    2c2c:	01400744 	movi	r5,29
    2c30:	01000184 	movi	r4,6
    2c34:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 25, SXCoord + 13, SYCoord + 25, 0xF6DA);
    2c38:	00bdb684 	movi	r2,-2342
    2c3c:	d8800015 	stw	r2,0(sp)
    2c40:	01c00644 	movi	r7,25
    2c44:	01800344 	movi	r6,13
    2c48:	01400644 	movi	r5,25
    2c4c:	01000304 	movi	r4,12
    2c50:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 26, SXCoord + 12, SYCoord + 28, 0xF6DA);
    2c54:	00bdb684 	movi	r2,-2342
    2c58:	d8800015 	stw	r2,0(sp)
    2c5c:	01c00704 	movi	r7,28
    2c60:	01800304 	movi	r6,12
    2c64:	01400684 	movi	r5,26
    2c68:	01000304 	movi	r4,12
    2c6c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 24, SXCoord + 27, SYCoord + 24, 0xF6DA);
    2c70:	00bdb684 	movi	r2,-2342
    2c74:	d8800015 	stw	r2,0(sp)
    2c78:	01c00604 	movi	r7,24
    2c7c:	018006c4 	movi	r6,27
    2c80:	01400604 	movi	r5,24
    2c84:	01000484 	movi	r4,18
    2c88:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 25, SXCoord + 19, SYCoord + 25, 0xF6DA);
    2c8c:	00bdb684 	movi	r2,-2342
    2c90:	d8800015 	stw	r2,0(sp)
    2c94:	01c00644 	movi	r7,25
    2c98:	018004c4 	movi	r6,19
    2c9c:	01400644 	movi	r5,25
    2ca0:	01000484 	movi	r4,18
    2ca4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 26, SXCoord + 19, SYCoord + 28, 0xF6DA);
    2ca8:	00bdb684 	movi	r2,-2342
    2cac:	d8800015 	stw	r2,0(sp)
    2cb0:	01c00704 	movi	r7,28
    2cb4:	018004c4 	movi	r6,19
    2cb8:	01400684 	movi	r5,26
    2cbc:	010004c4 	movi	r4,19
    2cc0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 29, SXCoord + 25, SYCoord + 29, 0xF6DA);
    2cc4:	00bdb684 	movi	r2,-2342
    2cc8:	d8800015 	stw	r2,0(sp)
    2ccc:	01c00744 	movi	r7,29
    2cd0:	01800644 	movi	r6,25
    2cd4:	01400744 	movi	r5,29
    2cd8:	010004c4 	movi	r4,19
    2cdc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 25, SXCoord + 27, SYCoord + 28, 0xF6DA);
    2ce0:	00bdb684 	movi	r2,-2342
    2ce4:	d8800015 	stw	r2,0(sp)
    2ce8:	01c00704 	movi	r7,28
    2cec:	018006c4 	movi	r6,27
    2cf0:	01400644 	movi	r5,25
    2cf4:	01000604 	movi	r4,24
    2cf8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 26, SXCoord + 17, SYCoord + 29, 0xF6DA);
    2cfc:	00bdb684 	movi	r2,-2342
    2d00:	d8800015 	stw	r2,0(sp)
    2d04:	01c00744 	movi	r7,29
    2d08:	01800444 	movi	r6,17
    2d0c:	01400684 	movi	r5,26
    2d10:	01000384 	movi	r4,14
    2d14:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 30, SXCoord + 18, SYCoord + 30, 0xF6DA);
    2d18:	00bdb684 	movi	r2,-2342
    2d1c:	d8800015 	stw	r2,0(sp)
    2d20:	01c00784 	movi	r7,30
    2d24:	01800484 	movi	r6,18
    2d28:	01400784 	movi	r5,30
    2d2c:	01000344 	movi	r4,13
    2d30:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 31, SXCoord + 24, SYCoord + 31, 0xF6DA);
    2d34:	00bdb684 	movi	r2,-2342
    2d38:	d8800015 	stw	r2,0(sp)
    2d3c:	01c007c4 	movi	r7,31
    2d40:	01800604 	movi	r6,24
    2d44:	014007c4 	movi	r5,31
    2d48:	010001c4 	movi	r4,7
    2d4c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 32, SXCoord + 8, SYCoord + 32, 0xF6DA);
    2d50:	00bdb684 	movi	r2,-2342
    2d54:	d8800015 	stw	r2,0(sp)
    2d58:	01c00804 	movi	r7,32
    2d5c:	01800204 	movi	r6,8
    2d60:	01400804 	movi	r5,32
    2d64:	010001c4 	movi	r4,7
    2d68:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 23, SYCoord + 32, SXCoord + 24, SYCoord + 32, 0xF6DA);
    2d6c:	00bdb684 	movi	r2,-2342
    2d70:	d8800015 	stw	r2,0(sp)
    2d74:	01c00804 	movi	r7,32
    2d78:	01800604 	movi	r6,24
    2d7c:	01400804 	movi	r5,32
    2d80:	010005c4 	movi	r4,23
    2d84:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 33, SXCoord + 9, SYCoord + 33, 0xF6DA);
    2d88:	00bdb684 	movi	r2,-2342
    2d8c:	d8800015 	stw	r2,0(sp)
    2d90:	01c00844 	movi	r7,33
    2d94:	01800244 	movi	r6,9
    2d98:	01400844 	movi	r5,33
    2d9c:	010001c4 	movi	r4,7
    2da0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 22, SYCoord + 33, SXCoord + 24, SYCoord + 33, 0xF6DA);
    2da4:	00bdb684 	movi	r2,-2342
    2da8:	d8800015 	stw	r2,0(sp)
    2dac:	01c00844 	movi	r7,33
    2db0:	01800604 	movi	r6,24
    2db4:	01400844 	movi	r5,33
    2db8:	01000584 	movi	r4,22
    2dbc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 34, SXCoord + 10, SYCoord + 34, 0xF6DA);
    2dc0:	00bdb684 	movi	r2,-2342
    2dc4:	d8800015 	stw	r2,0(sp)
    2dc8:	01c00884 	movi	r7,34
    2dcc:	01800284 	movi	r6,10
    2dd0:	01400884 	movi	r5,34
    2dd4:	01000204 	movi	r4,8
    2dd8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 34, SXCoord + 23, SYCoord + 34, 0xF6DA);
    2ddc:	00bdb684 	movi	r2,-2342
    2de0:	d8800015 	stw	r2,0(sp)
    2de4:	01c00884 	movi	r7,34
    2de8:	018005c4 	movi	r6,23
    2dec:	01400884 	movi	r5,34
    2df0:	01000544 	movi	r4,21
    2df4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 35, SXCoord + 11, SYCoord + 35, 0xF6DA);
    2df8:	00bdb684 	movi	r2,-2342
    2dfc:	d8800015 	stw	r2,0(sp)
    2e00:	01c008c4 	movi	r7,35
    2e04:	018002c4 	movi	r6,11
    2e08:	014008c4 	movi	r5,35
    2e0c:	01000204 	movi	r4,8
    2e10:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 35, SXCoord + 23, SYCoord + 35, 0xF6DA);
    2e14:	00bdb684 	movi	r2,-2342
    2e18:	d8800015 	stw	r2,0(sp)
    2e1c:	01c008c4 	movi	r7,35
    2e20:	018005c4 	movi	r6,23
    2e24:	014008c4 	movi	r5,35
    2e28:	01000504 	movi	r4,20
    2e2c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 36, SXCoord + 12, SYCoord + 36, 0xF6DA);
    2e30:	00bdb684 	movi	r2,-2342
    2e34:	d8800015 	stw	r2,0(sp)
    2e38:	01c00904 	movi	r7,36
    2e3c:	01800304 	movi	r6,12
    2e40:	01400904 	movi	r5,36
    2e44:	01000204 	movi	r4,8
    2e48:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 36, SXCoord + 23, SYCoord + 36, 0xF6DA);
    2e4c:	00bdb684 	movi	r2,-2342
    2e50:	d8800015 	stw	r2,0(sp)
    2e54:	01c00904 	movi	r7,36
    2e58:	018005c4 	movi	r6,23
    2e5c:	01400904 	movi	r5,36
    2e60:	010004c4 	movi	r4,19
    2e64:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 37, SXCoord + 25, SYCoord + 37, 0xF6DA);
    2e68:	00bdb684 	movi	r2,-2342
    2e6c:	d8800015 	stw	r2,0(sp)
    2e70:	01c00944 	movi	r7,37
    2e74:	01800644 	movi	r6,25
    2e78:	01400944 	movi	r5,37
    2e7c:	01000184 	movi	r4,6
    2e80:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 38, SXCoord + 24, SYCoord + 38, 0xF6DA);
    2e84:	00bdb684 	movi	r2,-2342
    2e88:	d8800015 	stw	r2,0(sp)
    2e8c:	01c00984 	movi	r7,38
    2e90:	01800604 	movi	r6,24
    2e94:	01400984 	movi	r5,38
    2e98:	010001c4 	movi	r4,7
    2e9c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 39, SXCoord + 23, SYCoord + 40, 0xF6DA);
    2ea0:	00bdb684 	movi	r2,-2342
    2ea4:	d8800015 	stw	r2,0(sp)
    2ea8:	01c00a04 	movi	r7,40
    2eac:	018005c4 	movi	r6,23
    2eb0:	014009c4 	movi	r5,39
    2eb4:	01000204 	movi	r4,8
    2eb8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 41, SXCoord + 21, SYCoord + 41, 0xF6DA);
    2ebc:	00bdb684 	movi	r2,-2342
    2ec0:	d8800015 	stw	r2,0(sp)
    2ec4:	01c00a44 	movi	r7,41
    2ec8:	01800544 	movi	r6,21
    2ecc:	01400a44 	movi	r5,41
    2ed0:	01000284 	movi	r4,10
    2ed4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 42, SXCoord + 17, SYCoord + 44, 0xF6DA);
    2ed8:	00bdb684 	movi	r2,-2342
    2edc:	d8800015 	stw	r2,0(sp)
    2ee0:	01c00b04 	movi	r7,44
    2ee4:	01800444 	movi	r6,17
    2ee8:	01400a84 	movi	r5,42
    2eec:	01000384 	movi	r4,14
    2ef0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 45, SXCoord + 19, SYCoord + 46, 0xF6DA);
    2ef4:	00bdb684 	movi	r2,-2342
    2ef8:	d8800015 	stw	r2,0(sp)
    2efc:	01c00b84 	movi	r7,46
    2f00:	018004c4 	movi	r6,19
    2f04:	01400b44 	movi	r5,45
    2f08:	01000304 	movi	r4,12
    2f0c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 47, SXCoord + 17, SYCoord + 48, 0xF6DA);
    2f10:	00bdb684 	movi	r2,-2342
    2f14:	d8800015 	stw	r2,0(sp)
    2f18:	01c00c04 	movi	r7,48
    2f1c:	01800444 	movi	r6,17
    2f20:	01400bc4 	movi	r5,47
    2f24:	01000384 	movi	r4,14
    2f28:	00089f00 	call	89f0 <VGA_box>

  // Render Shirt
  VGA_box(SXCoord + 10, SYCoord + 45, SXCoord + 11, SYCoord + 46, 0x2589);
    2f2c:	00896244 	movi	r2,9609
    2f30:	d8800015 	stw	r2,0(sp)
    2f34:	01c00b84 	movi	r7,46
    2f38:	018002c4 	movi	r6,11
    2f3c:	01400b44 	movi	r5,45
    2f40:	01000284 	movi	r4,10
    2f44:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 45, SXCoord + 21, SYCoord + 46, 0x2589);
    2f48:	00896244 	movi	r2,9609
    2f4c:	d8800015 	stw	r2,0(sp)
    2f50:	01c00b84 	movi	r7,46
    2f54:	01800544 	movi	r6,21
    2f58:	01400b44 	movi	r5,45
    2f5c:	01000504 	movi	r4,20
    2f60:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 47, SXCoord + 13, SYCoord + 48, 0x2589);
    2f64:	00896244 	movi	r2,9609
    2f68:	d8800015 	stw	r2,0(sp)
    2f6c:	01c00c04 	movi	r7,48
    2f70:	01800344 	movi	r6,13
    2f74:	01400bc4 	movi	r5,47
    2f78:	01000204 	movi	r4,8
    2f7c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 47, SXCoord + 23, SYCoord + 48, 0x2589);
    2f80:	00896244 	movi	r2,9609
    2f84:	d8800015 	stw	r2,0(sp)
    2f88:	01c00c04 	movi	r7,48
    2f8c:	018005c4 	movi	r6,23
    2f90:	01400bc4 	movi	r5,47
    2f94:	01000484 	movi	r4,18
    2f98:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 49, SXCoord + 21, SYCoord + 50, 0x2589);
    2f9c:	00896244 	movi	r2,9609
    2fa0:	d8800015 	stw	r2,0(sp)
    2fa4:	01c00c84 	movi	r7,50
    2fa8:	01800544 	movi	r6,21
    2fac:	01400c44 	movi	r5,49
    2fb0:	01000284 	movi	r4,10
    2fb4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 51, SXCoord + 17, SYCoord + 52, 0x2589);
    2fb8:	00896244 	movi	r2,9609
    2fbc:	d8800015 	stw	r2,0(sp)
    2fc0:	01c00d04 	movi	r7,52
    2fc4:	01800444 	movi	r6,17
    2fc8:	01400cc4 	movi	r5,51
    2fcc:	01000384 	movi	r4,14
    2fd0:	00089f00 	call	89f0 <VGA_box>
}
    2fd4:	0001883a 	nop
    2fd8:	e037883a 	mov	sp,fp
    2fdc:	dfc00117 	ldw	ra,4(sp)
    2fe0:	df000017 	ldw	fp,0(sp)
    2fe4:	dec00204 	addi	sp,sp,8
    2fe8:	f800283a 	ret

00002fec <spencerWinPose2>:


void spencerWinPose2(void)
{
    2fec:	defffd04 	addi	sp,sp,-12
    2ff0:	dfc00215 	stw	ra,8(sp)
    2ff4:	df000115 	stw	fp,4(sp)
    2ff8:	df000104 	addi	fp,sp,4
  // Rendering Start – Spencer Win Pose (S4.png)

  // Render Star
  VGA_box(SXCoord, SYCoord + 2, SXCoord, SYCoord + 2, 0xFF80);
    2ffc:	00bfe004 	movi	r2,-128
    3000:	d8800015 	stw	r2,0(sp)
    3004:	01c00084 	movi	r7,2
    3008:	000d883a 	mov	r6,zero
    300c:	01400084 	movi	r5,2
    3010:	0009883a 	mov	r4,zero
    3014:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 2, SXCoord + 1, SYCoord + 5, 0xFF80);
    3018:	00bfe004 	movi	r2,-128
    301c:	d8800015 	stw	r2,0(sp)
    3020:	01c00144 	movi	r7,5
    3024:	01800044 	movi	r6,1
    3028:	01400084 	movi	r5,2
    302c:	01000044 	movi	r4,1
    3030:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 2, SYCoord, SXCoord + 2, SYCoord + 4, 0xFF80);
    3034:	00bfe004 	movi	r2,-128
    3038:	d8800015 	stw	r2,0(sp)
    303c:	01c00104 	movi	r7,4
    3040:	01800084 	movi	r6,2
    3044:	000b883a 	mov	r5,zero
    3048:	01000084 	movi	r4,2
    304c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 3, SYCoord + 2, SXCoord + 3, SYCoord + 5, 0xFF80);
    3050:	00bfe004 	movi	r2,-128
    3054:	d8800015 	stw	r2,0(sp)
    3058:	01c00144 	movi	r7,5
    305c:	018000c4 	movi	r6,3
    3060:	01400084 	movi	r5,2
    3064:	010000c4 	movi	r4,3
    3068:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 2, SXCoord + 4, SYCoord + 2, 0xFF80);
    306c:	00bfe004 	movi	r2,-128
    3070:	d8800015 	stw	r2,0(sp)
    3074:	01c00084 	movi	r7,2
    3078:	01800104 	movi	r6,4
    307c:	01400084 	movi	r5,2
    3080:	01000104 	movi	r4,4
    3084:	00089f00 	call	89f0 <VGA_box>

  // Render Hair
  VGA_box(SXCoord, SYCoord + 13, SXCoord + 3, SYCoord + 22, 0x59E4);
    3088:	00967904 	movi	r2,23012
    308c:	d8800015 	stw	r2,0(sp)
    3090:	01c00584 	movi	r7,22
    3094:	018000c4 	movi	r6,3
    3098:	01400344 	movi	r5,13
    309c:	0009883a 	mov	r4,zero
    30a0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 25, SXCoord, SYCoord + 25, 0x59E4);
    30a4:	00967904 	movi	r2,23012
    30a8:	d8800015 	stw	r2,0(sp)
    30ac:	01c00644 	movi	r7,25
    30b0:	000d883a 	mov	r6,zero
    30b4:	01400644 	movi	r5,25
    30b8:	0009883a 	mov	r4,zero
    30bc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 26, SXCoord + 2, SYCoord + 28, 0x59E4);
    30c0:	00967904 	movi	r2,23012
    30c4:	d8800015 	stw	r2,0(sp)
    30c8:	01c00704 	movi	r7,28
    30cc:	01800084 	movi	r6,2
    30d0:	01400684 	movi	r5,26
    30d4:	0009883a 	mov	r4,zero
    30d8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 29, SXCoord + 5, SYCoord + 29, 0x59E4);
    30dc:	00967904 	movi	r2,23012
    30e0:	d8800015 	stw	r2,0(sp)
    30e4:	01c00744 	movi	r7,29
    30e8:	01800144 	movi	r6,5
    30ec:	01400744 	movi	r5,29
    30f0:	01000104 	movi	r4,4
    30f4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 31, SXCoord + 6, SYCoord + 36, 0x59E4);
    30f8:	00967904 	movi	r2,23012
    30fc:	d8800015 	stw	r2,0(sp)
    3100:	01c00904 	movi	r7,36
    3104:	01800184 	movi	r6,6
    3108:	014007c4 	movi	r5,31
    310c:	01000104 	movi	r4,4
    3110:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 34, SXCoord + 7, SYCoord + 36, 0x59E4);
    3114:	00967904 	movi	r2,23012
    3118:	d8800015 	stw	r2,0(sp)
    311c:	01c00904 	movi	r7,36
    3120:	018001c4 	movi	r6,7
    3124:	01400884 	movi	r5,34
    3128:	010001c4 	movi	r4,7
    312c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 9, SXCoord + 4, SYCoord + 18, 0x59E4);
    3130:	00967904 	movi	r2,23012
    3134:	d8800015 	stw	r2,0(sp)
    3138:	01c00484 	movi	r7,18
    313c:	01800104 	movi	r6,4
    3140:	01400244 	movi	r5,9
    3144:	01000104 	movi	r4,4
    3148:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 9, SXCoord + 5, SYCoord + 17, 0x59E4);
    314c:	00967904 	movi	r2,23012
    3150:	d8800015 	stw	r2,0(sp)
    3154:	01c00444 	movi	r7,17
    3158:	01800144 	movi	r6,5
    315c:	01400244 	movi	r5,9
    3160:	01000144 	movi	r4,5
    3164:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 9, SXCoord + 25, SYCoord + 16, 0x59E4);
    3168:	00967904 	movi	r2,23012
    316c:	d8800015 	stw	r2,0(sp)
    3170:	01c00404 	movi	r7,16
    3174:	01800644 	movi	r6,25
    3178:	01400244 	movi	r5,9
    317c:	01000184 	movi	r4,6
    3180:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 9, SXCoord + 26, SYCoord + 17, 0x59E4);
    3184:	00967904 	movi	r2,23012
    3188:	d8800015 	stw	r2,0(sp)
    318c:	01c00444 	movi	r7,17
    3190:	01800684 	movi	r6,26
    3194:	01400244 	movi	r5,9
    3198:	01000684 	movi	r4,26
    319c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 27, SYCoord + 9, SXCoord + 27, SYCoord + 18, 0x59E4);
    31a0:	00967904 	movi	r2,23012
    31a4:	d8800015 	stw	r2,0(sp)
    31a8:	01c00484 	movi	r7,18
    31ac:	018006c4 	movi	r6,27
    31b0:	01400244 	movi	r5,9
    31b4:	010006c4 	movi	r4,27
    31b8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 13, SXCoord + 31, SYCoord + 22, 0x59E4);
    31bc:	00967904 	movi	r2,23012
    31c0:	d8800015 	stw	r2,0(sp)
    31c4:	01c00584 	movi	r7,22
    31c8:	018007c4 	movi	r6,31
    31cc:	01400344 	movi	r5,13
    31d0:	01000704 	movi	r4,28
    31d4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 31, SYCoord + 25, SXCoord + 31, SYCoord + 25, 0x59E4);
    31d8:	00967904 	movi	r2,23012
    31dc:	d8800015 	stw	r2,0(sp)
    31e0:	01c00644 	movi	r7,25
    31e4:	018007c4 	movi	r6,31
    31e8:	01400644 	movi	r5,25
    31ec:	010007c4 	movi	r4,31
    31f0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 29, SYCoord + 26, SXCoord + 31, SYCoord + 28, 0x59E4);
    31f4:	00967904 	movi	r2,23012
    31f8:	d8800015 	stw	r2,0(sp)
    31fc:	01c00704 	movi	r7,28
    3200:	018007c4 	movi	r6,31
    3204:	01400684 	movi	r5,26
    3208:	01000744 	movi	r4,29
    320c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 29, SXCoord + 27, SYCoord + 29, 0x59E4);
    3210:	00967904 	movi	r2,23012
    3214:	d8800015 	stw	r2,0(sp)
    3218:	01c00744 	movi	r7,29
    321c:	018006c4 	movi	r6,27
    3220:	01400744 	movi	r5,29
    3224:	01000684 	movi	r4,26
    3228:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 31, SXCoord + 27, SYCoord + 36, 0x59E4);
    322c:	00967904 	movi	r2,23012
    3230:	d8800015 	stw	r2,0(sp)
    3234:	01c00904 	movi	r7,36
    3238:	018006c4 	movi	r6,27
    323c:	014007c4 	movi	r5,31
    3240:	01000644 	movi	r4,25
    3244:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 34, SXCoord + 24, SYCoord + 36, 0x59E4);
    3248:	00967904 	movi	r2,23012
    324c:	d8800015 	stw	r2,0(sp)
    3250:	01c00904 	movi	r7,36
    3254:	01800604 	movi	r6,24
    3258:	01400884 	movi	r5,34
    325c:	01000604 	movi	r4,24
    3260:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 5, SXCoord + 23, SYCoord + 8, 0x59E4);
    3264:	00967904 	movi	r2,23012
    3268:	d8800015 	stw	r2,0(sp)
    326c:	01c00204 	movi	r7,8
    3270:	018005c4 	movi	r6,23
    3274:	01400144 	movi	r5,5
    3278:	01000304 	movi	r4,12
    327c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 1, SXCoord + 19, SYCoord + 4, 0x59E4);
    3280:	00967904 	movi	r2,23012
    3284:	d8800015 	stw	r2,0(sp)
    3288:	01c00104 	movi	r7,4
    328c:	018004c4 	movi	r6,19
    3290:	01400044 	movi	r5,1
    3294:	01000304 	movi	r4,12
    3298:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord, SXCoord + 16, SYCoord, 0x59E4);
    329c:	00967904 	movi	r2,23012
    32a0:	d8800015 	stw	r2,0(sp)
    32a4:	000f883a 	mov	r7,zero
    32a8:	01800404 	movi	r6,16
    32ac:	000b883a 	mov	r5,zero
    32b0:	010002c4 	movi	r4,11
    32b4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 1, SXCoord + 11, SYCoord + 1, 0x59E4);
    32b8:	00967904 	movi	r2,23012
    32bc:	d8800015 	stw	r2,0(sp)
    32c0:	01c00044 	movi	r7,1
    32c4:	018002c4 	movi	r6,11
    32c8:	01400044 	movi	r5,1
    32cc:	01000284 	movi	r4,10
    32d0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 20, SXCoord + 8, SYCoord + 20, 0x59E4);
    32d4:	00967904 	movi	r2,23012
    32d8:	d8800015 	stw	r2,0(sp)
    32dc:	01c00504 	movi	r7,20
    32e0:	01800204 	movi	r6,8
    32e4:	01400504 	movi	r5,20
    32e8:	010001c4 	movi	r4,7
    32ec:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 20, SXCoord + 12, SYCoord + 20, 0x59E4);
    32f0:	00967904 	movi	r2,23012
    32f4:	d8800015 	stw	r2,0(sp)
    32f8:	01c00504 	movi	r7,20
    32fc:	01800304 	movi	r6,12
    3300:	01400504 	movi	r5,20
    3304:	010002c4 	movi	r4,11
    3308:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 19, SXCoord + 12, SYCoord + 19, 0x59E4);
    330c:	00967904 	movi	r2,23012
    3310:	d8800015 	stw	r2,0(sp)
    3314:	01c004c4 	movi	r7,19
    3318:	01800304 	movi	r6,12
    331c:	014004c4 	movi	r5,19
    3320:	01000204 	movi	r4,8
    3324:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 9, SYCoord + 18, SXCoord + 11, SYCoord + 18, 0x59E4);
    3328:	00967904 	movi	r2,23012
    332c:	d8800015 	stw	r2,0(sp)
    3330:	01c00484 	movi	r7,18
    3334:	018002c4 	movi	r6,11
    3338:	01400484 	movi	r5,18
    333c:	01000244 	movi	r4,9
    3340:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 21, SXCoord + 23, SYCoord + 22, 0x59E4);
    3344:	00967904 	movi	r2,23012
    3348:	d8800015 	stw	r2,0(sp)
    334c:	01c00584 	movi	r7,22
    3350:	018005c4 	movi	r6,23
    3354:	01400544 	movi	r5,21
    3358:	010004c4 	movi	r4,19
    335c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 22, SXCoord + 24, SYCoord + 22, 0x59E4);
    3360:	00967904 	movi	r2,23012
    3364:	d8800015 	stw	r2,0(sp)
    3368:	01c00584 	movi	r7,22
    336c:	01800604 	movi	r6,24
    3370:	01400584 	movi	r5,22
    3374:	01000604 	movi	r4,24
    3378:	00089f00 	call	89f0 <VGA_box>

  // Render Glasses
  VGA_box(SXCoord, SYCoord + 23, SXCoord + 13, SYCoord + 23, 0x0000);
    337c:	d8000015 	stw	zero,0(sp)
    3380:	01c005c4 	movi	r7,23
    3384:	01800344 	movi	r6,13
    3388:	014005c4 	movi	r5,23
    338c:	0009883a 	mov	r4,zero
    3390:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 24, SXCoord + 3, SYCoord + 24, 0x0000);
    3394:	d8000015 	stw	zero,0(sp)
    3398:	01c00604 	movi	r7,24
    339c:	018000c4 	movi	r6,3
    33a0:	01400604 	movi	r5,24
    33a4:	0009883a 	mov	r4,zero
    33a8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 25, SXCoord + 3, SYCoord + 25, 0x0000);
    33ac:	d8000015 	stw	zero,0(sp)
    33b0:	01c00644 	movi	r7,25
    33b4:	018000c4 	movi	r6,3
    33b8:	01400644 	movi	r5,25
    33bc:	01000044 	movi	r4,1
    33c0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 3, SYCoord + 26, SXCoord + 3, SYCoord + 29, 0x0000);
    33c4:	d8000015 	stw	zero,0(sp)
    33c8:	01c00744 	movi	r7,29
    33cc:	018000c4 	movi	r6,3
    33d0:	01400684 	movi	r5,26
    33d4:	010000c4 	movi	r4,3
    33d8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 30, SXCoord + 12, SYCoord + 30, 0x0000);
    33dc:	d8000015 	stw	zero,0(sp)
    33e0:	01c00784 	movi	r7,30
    33e4:	01800304 	movi	r6,12
    33e8:	01400784 	movi	r5,30
    33ec:	01000104 	movi	r4,4
    33f0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 26, SXCoord + 13, SYCoord + 29, 0x0000);
    33f4:	d8000015 	stw	zero,0(sp)
    33f8:	01c00744 	movi	r7,29
    33fc:	01800344 	movi	r6,13
    3400:	01400684 	movi	r5,26
    3404:	01000344 	movi	r4,13
    3408:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 24, SXCoord + 17, SYCoord + 25, 0x0000);
    340c:	d8000015 	stw	zero,0(sp)
    3410:	01c00644 	movi	r7,25
    3414:	01800444 	movi	r6,17
    3418:	01400604 	movi	r5,24
    341c:	01000384 	movi	r4,14
    3420:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 23, SXCoord + 31, SYCoord + 23, 0x0000);
    3424:	d8000015 	stw	zero,0(sp)
    3428:	01c005c4 	movi	r7,23
    342c:	018007c4 	movi	r6,31
    3430:	014005c4 	movi	r5,23
    3434:	01000484 	movi	r4,18
    3438:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 24, SXCoord + 31, SYCoord + 24, 0x0000);
    343c:	d8000015 	stw	zero,0(sp)
    3440:	01c00604 	movi	r7,24
    3444:	018007c4 	movi	r6,31
    3448:	01400604 	movi	r5,24
    344c:	01000704 	movi	r4,28
    3450:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 25, SXCoord + 30, SYCoord + 25, 0x0000);
    3454:	d8000015 	stw	zero,0(sp)
    3458:	01c00644 	movi	r7,25
    345c:	01800784 	movi	r6,30
    3460:	01400644 	movi	r5,25
    3464:	01000704 	movi	r4,28
    3468:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 26, SXCoord + 28, SYCoord + 29, 0x0000);
    346c:	d8000015 	stw	zero,0(sp)
    3470:	01c00744 	movi	r7,29
    3474:	01800704 	movi	r6,28
    3478:	01400684 	movi	r5,26
    347c:	01000704 	movi	r4,28
    3480:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 30, SXCoord + 27, SYCoord + 30, 0x0000);
    3484:	d8000015 	stw	zero,0(sp)
    3488:	01c00784 	movi	r7,30
    348c:	018006c4 	movi	r6,27
    3490:	01400784 	movi	r5,30
    3494:	010004c4 	movi	r4,19
    3498:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 26, SXCoord + 18, SYCoord + 29, 0x0000);
    349c:	d8000015 	stw	zero,0(sp)
    34a0:	01c00744 	movi	r7,29
    34a4:	01800484 	movi	r6,18
    34a8:	01400684 	movi	r5,26
    34ac:	01000484 	movi	r4,18
    34b0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 25, SXCoord + 11, SYCoord + 28, 0x0000);
    34b4:	d8000015 	stw	zero,0(sp)
    34b8:	01c00704 	movi	r7,28
    34bc:	018002c4 	movi	r6,11
    34c0:	01400644 	movi	r5,25
    34c4:	01000204 	movi	r4,8
    34c8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 25, SXCoord + 23, SYCoord + 28, 0x0000);
    34cc:	d8000015 	stw	zero,0(sp)
    34d0:	01c00704 	movi	r7,28
    34d4:	018005c4 	movi	r6,23
    34d8:	01400644 	movi	r5,25
    34dc:	01000504 	movi	r4,20
    34e0:	00089f00 	call	89f0 <VGA_box>

  // Render Mouth
  VGA_box(SXCoord + 9, SYCoord + 32, SXCoord + 22, SYCoord + 32, 0x0000);
    34e4:	d8000015 	stw	zero,0(sp)
    34e8:	01c00804 	movi	r7,32
    34ec:	01800584 	movi	r6,22
    34f0:	01400804 	movi	r5,32
    34f4:	01000244 	movi	r4,9
    34f8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 33, SXCoord + 11, SYCoord + 33, 0x0000);
    34fc:	d8000015 	stw	zero,0(sp)
    3500:	01c00844 	movi	r7,33
    3504:	018002c4 	movi	r6,11
    3508:	01400844 	movi	r5,33
    350c:	01000284 	movi	r4,10
    3510:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 33, SXCoord + 21, SYCoord + 33, 0x0000);
    3514:	d8000015 	stw	zero,0(sp)
    3518:	01c00844 	movi	r7,33
    351c:	01800544 	movi	r6,21
    3520:	01400844 	movi	r5,33
    3524:	01000504 	movi	r4,20
    3528:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 34, SXCoord + 20, SYCoord + 34, 0x0000);
    352c:	d8000015 	stw	zero,0(sp)
    3530:	01c00884 	movi	r7,34
    3534:	01800504 	movi	r6,20
    3538:	01400884 	movi	r5,34
    353c:	010002c4 	movi	r4,11
    3540:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 35, SXCoord + 14, SYCoord + 35, 0x0000);
    3544:	d8000015 	stw	zero,0(sp)
    3548:	01c008c4 	movi	r7,35
    354c:	01800384 	movi	r6,14
    3550:	014008c4 	movi	r5,35
    3554:	010002c4 	movi	r4,11
    3558:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 17, SYCoord + 35, SXCoord + 20, SYCoord + 35, 0x0000);
    355c:	d8000015 	stw	zero,0(sp)
    3560:	01c008c4 	movi	r7,35
    3564:	01800504 	movi	r6,20
    3568:	014008c4 	movi	r5,35
    356c:	01000444 	movi	r4,17
    3570:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 36, SXCoord + 13, SYCoord + 36, 0x0000);
    3574:	d8000015 	stw	zero,0(sp)
    3578:	01c00904 	movi	r7,36
    357c:	01800344 	movi	r6,13
    3580:	01400904 	movi	r5,36
    3584:	01000304 	movi	r4,12
    3588:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 36, SXCoord + 19, SYCoord + 36, 0x0000);
    358c:	d8000015 	stw	zero,0(sp)
    3590:	01c00904 	movi	r7,36
    3594:	018004c4 	movi	r6,19
    3598:	01400904 	movi	r5,36
    359c:	01000484 	movi	r4,18
    35a0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 37, SXCoord + 18, SYCoord + 37, 0x0000);
    35a4:	d8000015 	stw	zero,0(sp)
    35a8:	01c00944 	movi	r7,37
    35ac:	01800484 	movi	r6,18
    35b0:	01400944 	movi	r5,37
    35b4:	01000344 	movi	r4,13
    35b8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 33, SXCoord + 19, SYCoord + 33, 0xFFFF);
    35bc:	00bfffc4 	movi	r2,-1
    35c0:	d8800015 	stw	r2,0(sp)
    35c4:	01c00844 	movi	r7,33
    35c8:	018004c4 	movi	r6,19
    35cc:	01400844 	movi	r5,33
    35d0:	01000304 	movi	r4,12
    35d4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 36, SXCoord + 17, SYCoord + 36, 0xFD79);
    35d8:	00bf5e44 	movi	r2,-647
    35dc:	d8800015 	stw	r2,0(sp)
    35e0:	01c00904 	movi	r7,36
    35e4:	01800444 	movi	r6,17
    35e8:	01400904 	movi	r5,36
    35ec:	01000384 	movi	r4,14
    35f0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 15, SYCoord + 35, SXCoord + 16, SYCoord + 35, 0xFD79);
    35f4:	00bf5e44 	movi	r2,-647
    35f8:	d8800015 	stw	r2,0(sp)
    35fc:	01c008c4 	movi	r7,35
    3600:	01800404 	movi	r6,16
    3604:	014008c4 	movi	r5,35
    3608:	010003c4 	movi	r4,15
    360c:	00089f00 	call	89f0 <VGA_box>

  // Render Skin
  VGA_box(SXCoord + 6, SYCoord + 17, SXCoord + 25, SYCoord + 17, 0xF6DA);
    3610:	00bdb684 	movi	r2,-2342
    3614:	d8800015 	stw	r2,0(sp)
    3618:	01c00444 	movi	r7,17
    361c:	01800644 	movi	r6,25
    3620:	01400444 	movi	r5,17
    3624:	01000184 	movi	r4,6
    3628:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 18, SXCoord + 8, SYCoord + 18, 0xF6DA);
    362c:	00bdb684 	movi	r2,-2342
    3630:	d8800015 	stw	r2,0(sp)
    3634:	01c00484 	movi	r7,18
    3638:	01800204 	movi	r6,8
    363c:	01400484 	movi	r5,18
    3640:	01000144 	movi	r4,5
    3644:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 18, SXCoord + 26, SYCoord + 18, 0xF6DA);
    3648:	00bdb684 	movi	r2,-2342
    364c:	d8800015 	stw	r2,0(sp)
    3650:	01c00484 	movi	r7,18
    3654:	01800684 	movi	r6,26
    3658:	01400484 	movi	r5,18
    365c:	01000304 	movi	r4,12
    3660:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 19, SXCoord + 7, SYCoord + 19, 0xF6DA);
    3664:	00bdb684 	movi	r2,-2342
    3668:	d8800015 	stw	r2,0(sp)
    366c:	01c004c4 	movi	r7,19
    3670:	018001c4 	movi	r6,7
    3674:	014004c4 	movi	r5,19
    3678:	01000104 	movi	r4,4
    367c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 19, SXCoord + 27, SYCoord + 19, 0xF6DA);
    3680:	00bdb684 	movi	r2,-2342
    3684:	d8800015 	stw	r2,0(sp)
    3688:	01c004c4 	movi	r7,19
    368c:	018006c4 	movi	r6,27
    3690:	014004c4 	movi	r5,19
    3694:	01000344 	movi	r4,13
    3698:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 20, SXCoord + 6, SYCoord + 20, 0xF6DA);
    369c:	00bdb684 	movi	r2,-2342
    36a0:	d8800015 	stw	r2,0(sp)
    36a4:	01c00504 	movi	r7,20
    36a8:	01800184 	movi	r6,6
    36ac:	01400504 	movi	r5,20
    36b0:	01000104 	movi	r4,4
    36b4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 9, SYCoord + 20, SXCoord + 10, SYCoord + 20, 0xF6DA);
    36b8:	00bdb684 	movi	r2,-2342
    36bc:	d8800015 	stw	r2,0(sp)
    36c0:	01c00504 	movi	r7,20
    36c4:	01800284 	movi	r6,10
    36c8:	01400504 	movi	r5,20
    36cc:	01000244 	movi	r4,9
    36d0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 20, SXCoord + 27, SYCoord + 20, 0xF6DA);
    36d4:	00bdb684 	movi	r2,-2342
    36d8:	d8800015 	stw	r2,0(sp)
    36dc:	01c00504 	movi	r7,20
    36e0:	018006c4 	movi	r6,27
    36e4:	01400504 	movi	r5,20
    36e8:	01000344 	movi	r4,13
    36ec:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 21, SXCoord + 18, SYCoord + 22, 0xF6DA);
    36f0:	00bdb684 	movi	r2,-2342
    36f4:	d8800015 	stw	r2,0(sp)
    36f8:	01c00584 	movi	r7,22
    36fc:	01800484 	movi	r6,18
    3700:	01400544 	movi	r5,21
    3704:	01000104 	movi	r4,4
    3708:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 21, SXCoord + 27, SYCoord + 21, 0xF6DA);
    370c:	00bdb684 	movi	r2,-2342
    3710:	d8800015 	stw	r2,0(sp)
    3714:	01c00544 	movi	r7,21
    3718:	018006c4 	movi	r6,27
    371c:	01400544 	movi	r5,21
    3720:	01000604 	movi	r4,24
    3724:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 22, SXCoord + 27, SYCoord + 22, 0xF6DA);
    3728:	00bdb684 	movi	r2,-2342
    372c:	d8800015 	stw	r2,0(sp)
    3730:	01c00584 	movi	r7,22
    3734:	018006c4 	movi	r6,27
    3738:	01400584 	movi	r5,22
    373c:	01000644 	movi	r4,25
    3740:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 23, SXCoord + 17, SYCoord + 23, 0xF6DA);
    3744:	00bdb684 	movi	r2,-2342
    3748:	d8800015 	stw	r2,0(sp)
    374c:	01c005c4 	movi	r7,23
    3750:	01800444 	movi	r6,17
    3754:	014005c4 	movi	r5,23
    3758:	01000384 	movi	r4,14
    375c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 24, SXCoord + 13, SYCoord + 24, 0xF6DA);
    3760:	00bdb684 	movi	r2,-2342
    3764:	d8800015 	stw	r2,0(sp)
    3768:	01c00604 	movi	r7,24
    376c:	01800344 	movi	r6,13
    3770:	01400604 	movi	r5,24
    3774:	01000104 	movi	r4,4
    3778:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 25, SXCoord + 7, SYCoord + 28, 0xF6DA);
    377c:	00bdb684 	movi	r2,-2342
    3780:	d8800015 	stw	r2,0(sp)
    3784:	01c00704 	movi	r7,28
    3788:	018001c4 	movi	r6,7
    378c:	01400644 	movi	r5,25
    3790:	01000104 	movi	r4,4
    3794:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 29, SXCoord + 12, SYCoord + 29, 0xF6DA);
    3798:	00bdb684 	movi	r2,-2342
    379c:	d8800015 	stw	r2,0(sp)
    37a0:	01c00744 	movi	r7,29
    37a4:	01800304 	movi	r6,12
    37a8:	01400744 	movi	r5,29
    37ac:	01000184 	movi	r4,6
    37b0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 25, SXCoord + 13, SYCoord + 25, 0xF6DA);
    37b4:	00bdb684 	movi	r2,-2342
    37b8:	d8800015 	stw	r2,0(sp)
    37bc:	01c00644 	movi	r7,25
    37c0:	01800344 	movi	r6,13
    37c4:	01400644 	movi	r5,25
    37c8:	01000304 	movi	r4,12
    37cc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 26, SXCoord + 12, SYCoord + 28, 0xF6DA);
    37d0:	00bdb684 	movi	r2,-2342
    37d4:	d8800015 	stw	r2,0(sp)
    37d8:	01c00704 	movi	r7,28
    37dc:	01800304 	movi	r6,12
    37e0:	01400684 	movi	r5,26
    37e4:	01000304 	movi	r4,12
    37e8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 24, SXCoord + 27, SYCoord + 24, 0xF6DA);
    37ec:	00bdb684 	movi	r2,-2342
    37f0:	d8800015 	stw	r2,0(sp)
    37f4:	01c00604 	movi	r7,24
    37f8:	018006c4 	movi	r6,27
    37fc:	01400604 	movi	r5,24
    3800:	01000484 	movi	r4,18
    3804:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 25, SXCoord + 19, SYCoord + 25, 0xF6DA);
    3808:	00bdb684 	movi	r2,-2342
    380c:	d8800015 	stw	r2,0(sp)
    3810:	01c00644 	movi	r7,25
    3814:	018004c4 	movi	r6,19
    3818:	01400644 	movi	r5,25
    381c:	01000484 	movi	r4,18
    3820:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 26, SXCoord + 19, SYCoord + 28, 0xF6DA);
    3824:	00bdb684 	movi	r2,-2342
    3828:	d8800015 	stw	r2,0(sp)
    382c:	01c00704 	movi	r7,28
    3830:	018004c4 	movi	r6,19
    3834:	01400684 	movi	r5,26
    3838:	010004c4 	movi	r4,19
    383c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 29, SXCoord + 25, SYCoord + 29, 0xF6DA);
    3840:	00bdb684 	movi	r2,-2342
    3844:	d8800015 	stw	r2,0(sp)
    3848:	01c00744 	movi	r7,29
    384c:	01800644 	movi	r6,25
    3850:	01400744 	movi	r5,29
    3854:	010004c4 	movi	r4,19
    3858:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 25, SXCoord + 27, SYCoord + 28, 0xF6DA);
    385c:	00bdb684 	movi	r2,-2342
    3860:	d8800015 	stw	r2,0(sp)
    3864:	01c00704 	movi	r7,28
    3868:	018006c4 	movi	r6,27
    386c:	01400644 	movi	r5,25
    3870:	01000604 	movi	r4,24
    3874:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 26, SXCoord + 17, SYCoord + 29, 0xF6DA);
    3878:	00bdb684 	movi	r2,-2342
    387c:	d8800015 	stw	r2,0(sp)
    3880:	01c00744 	movi	r7,29
    3884:	01800444 	movi	r6,17
    3888:	01400684 	movi	r5,26
    388c:	01000384 	movi	r4,14
    3890:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 30, SXCoord + 18, SYCoord + 30, 0xF6DA);
    3894:	00bdb684 	movi	r2,-2342
    3898:	d8800015 	stw	r2,0(sp)
    389c:	01c00784 	movi	r7,30
    38a0:	01800484 	movi	r6,18
    38a4:	01400784 	movi	r5,30
    38a8:	01000344 	movi	r4,13
    38ac:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 31, SXCoord + 24, SYCoord + 31, 0xF6DA);
    38b0:	00bdb684 	movi	r2,-2342
    38b4:	d8800015 	stw	r2,0(sp)
    38b8:	01c007c4 	movi	r7,31
    38bc:	01800604 	movi	r6,24
    38c0:	014007c4 	movi	r5,31
    38c4:	010001c4 	movi	r4,7
    38c8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 32, SXCoord + 8, SYCoord + 32, 0xF6DA);
    38cc:	00bdb684 	movi	r2,-2342
    38d0:	d8800015 	stw	r2,0(sp)
    38d4:	01c00804 	movi	r7,32
    38d8:	01800204 	movi	r6,8
    38dc:	01400804 	movi	r5,32
    38e0:	010001c4 	movi	r4,7
    38e4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 23, SYCoord + 32, SXCoord + 24, SYCoord + 32, 0xF6DA);
    38e8:	00bdb684 	movi	r2,-2342
    38ec:	d8800015 	stw	r2,0(sp)
    38f0:	01c00804 	movi	r7,32
    38f4:	01800604 	movi	r6,24
    38f8:	01400804 	movi	r5,32
    38fc:	010005c4 	movi	r4,23
    3900:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 33, SXCoord + 9, SYCoord + 33, 0xF6DA);
    3904:	00bdb684 	movi	r2,-2342
    3908:	d8800015 	stw	r2,0(sp)
    390c:	01c00844 	movi	r7,33
    3910:	01800244 	movi	r6,9
    3914:	01400844 	movi	r5,33
    3918:	010001c4 	movi	r4,7
    391c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 22, SYCoord + 33, SXCoord + 24, SYCoord + 33, 0xF6DA);
    3920:	00bdb684 	movi	r2,-2342
    3924:	d8800015 	stw	r2,0(sp)
    3928:	01c00844 	movi	r7,33
    392c:	01800604 	movi	r6,24
    3930:	01400844 	movi	r5,33
    3934:	01000584 	movi	r4,22
    3938:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 34, SXCoord + 10, SYCoord + 35, 0xF6DA);
    393c:	00bdb684 	movi	r2,-2342
    3940:	d8800015 	stw	r2,0(sp)
    3944:	01c008c4 	movi	r7,35
    3948:	01800284 	movi	r6,10
    394c:	01400884 	movi	r5,34
    3950:	01000204 	movi	r4,8
    3954:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 34, SXCoord + 23, SYCoord + 35, 0xF6DA);
    3958:	00bdb684 	movi	r2,-2342
    395c:	d8800015 	stw	r2,0(sp)
    3960:	01c008c4 	movi	r7,35
    3964:	018005c4 	movi	r6,23
    3968:	01400884 	movi	r5,34
    396c:	01000544 	movi	r4,21
    3970:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 36, SXCoord + 11, SYCoord + 36, 0xF6DA);
    3974:	00bdb684 	movi	r2,-2342
    3978:	d8800015 	stw	r2,0(sp)
    397c:	01c00904 	movi	r7,36
    3980:	018002c4 	movi	r6,11
    3984:	01400904 	movi	r5,36
    3988:	01000204 	movi	r4,8
    398c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 36, SXCoord + 23, SYCoord + 36, 0xF6DA);
    3990:	00bdb684 	movi	r2,-2342
    3994:	d8800015 	stw	r2,0(sp)
    3998:	01c00904 	movi	r7,36
    399c:	018005c4 	movi	r6,23
    39a0:	01400904 	movi	r5,36
    39a4:	01000504 	movi	r4,20
    39a8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 37, SXCoord + 12, SYCoord + 37, 0xF6DA);
    39ac:	00bdb684 	movi	r2,-2342
    39b0:	d8800015 	stw	r2,0(sp)
    39b4:	01c00944 	movi	r7,37
    39b8:	01800304 	movi	r6,12
    39bc:	01400944 	movi	r5,37
    39c0:	01000184 	movi	r4,6
    39c4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 37, SXCoord + 25, SYCoord + 37, 0xF6DA);
    39c8:	00bdb684 	movi	r2,-2342
    39cc:	d8800015 	stw	r2,0(sp)
    39d0:	01c00944 	movi	r7,37
    39d4:	01800644 	movi	r6,25
    39d8:	01400944 	movi	r5,37
    39dc:	010004c4 	movi	r4,19
    39e0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 38, SXCoord + 24, SYCoord + 38, 0xF6DA);
    39e4:	00bdb684 	movi	r2,-2342
    39e8:	d8800015 	stw	r2,0(sp)
    39ec:	01c00984 	movi	r7,38
    39f0:	01800604 	movi	r6,24
    39f4:	01400984 	movi	r5,38
    39f8:	010001c4 	movi	r4,7
    39fc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 39, SXCoord + 23, SYCoord + 40, 0xF6DA);
    3a00:	00bdb684 	movi	r2,-2342
    3a04:	d8800015 	stw	r2,0(sp)
    3a08:	01c00a04 	movi	r7,40
    3a0c:	018005c4 	movi	r6,23
    3a10:	014009c4 	movi	r5,39
    3a14:	01000204 	movi	r4,8
    3a18:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 41, SXCoord + 21, SYCoord + 41, 0xF6DA);
    3a1c:	00bdb684 	movi	r2,-2342
    3a20:	d8800015 	stw	r2,0(sp)
    3a24:	01c00a44 	movi	r7,41
    3a28:	01800544 	movi	r6,21
    3a2c:	01400a44 	movi	r5,41
    3a30:	01000284 	movi	r4,10
    3a34:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 42, SXCoord + 17, SYCoord + 44, 0xF6DA);
    3a38:	00bdb684 	movi	r2,-2342
    3a3c:	d8800015 	stw	r2,0(sp)
    3a40:	01c00b04 	movi	r7,44
    3a44:	01800444 	movi	r6,17
    3a48:	01400a84 	movi	r5,42
    3a4c:	01000384 	movi	r4,14
    3a50:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 45, SXCoord + 19, SYCoord + 46, 0xF6DA);
    3a54:	00bdb684 	movi	r2,-2342
    3a58:	d8800015 	stw	r2,0(sp)
    3a5c:	01c00b84 	movi	r7,46
    3a60:	018004c4 	movi	r6,19
    3a64:	01400b44 	movi	r5,45
    3a68:	01000304 	movi	r4,12
    3a6c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 47, SXCoord + 17, SYCoord + 48, 0xF6DA);
    3a70:	00bdb684 	movi	r2,-2342
    3a74:	d8800015 	stw	r2,0(sp)
    3a78:	01c00c04 	movi	r7,48
    3a7c:	01800444 	movi	r6,17
    3a80:	01400bc4 	movi	r5,47
    3a84:	01000384 	movi	r4,14
    3a88:	00089f00 	call	89f0 <VGA_box>

  // Render Shirt
  VGA_box(SXCoord + 10, SYCoord + 45, SXCoord + 11, SYCoord + 46, 0x2589);
    3a8c:	00896244 	movi	r2,9609
    3a90:	d8800015 	stw	r2,0(sp)
    3a94:	01c00b84 	movi	r7,46
    3a98:	018002c4 	movi	r6,11
    3a9c:	01400b44 	movi	r5,45
    3aa0:	01000284 	movi	r4,10
    3aa4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 45, SXCoord + 21, SYCoord + 46, 0x2589);
    3aa8:	00896244 	movi	r2,9609
    3aac:	d8800015 	stw	r2,0(sp)
    3ab0:	01c00b84 	movi	r7,46
    3ab4:	01800544 	movi	r6,21
    3ab8:	01400b44 	movi	r5,45
    3abc:	01000504 	movi	r4,20
    3ac0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 47, SXCoord + 13, SYCoord + 48, 0x2589);
    3ac4:	00896244 	movi	r2,9609
    3ac8:	d8800015 	stw	r2,0(sp)
    3acc:	01c00c04 	movi	r7,48
    3ad0:	01800344 	movi	r6,13
    3ad4:	01400bc4 	movi	r5,47
    3ad8:	01000204 	movi	r4,8
    3adc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 47, SXCoord + 23, SYCoord + 48, 0x2589);
    3ae0:	00896244 	movi	r2,9609
    3ae4:	d8800015 	stw	r2,0(sp)
    3ae8:	01c00c04 	movi	r7,48
    3aec:	018005c4 	movi	r6,23
    3af0:	01400bc4 	movi	r5,47
    3af4:	01000484 	movi	r4,18
    3af8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 49, SXCoord + 21, SYCoord + 50, 0x2589);
    3afc:	00896244 	movi	r2,9609
    3b00:	d8800015 	stw	r2,0(sp)
    3b04:	01c00c84 	movi	r7,50
    3b08:	01800544 	movi	r6,21
    3b0c:	01400c44 	movi	r5,49
    3b10:	01000284 	movi	r4,10
    3b14:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 51, SXCoord + 17, SYCoord + 52, 0x2589);
    3b18:	00896244 	movi	r2,9609
    3b1c:	d8800015 	stw	r2,0(sp)
    3b20:	01c00d04 	movi	r7,52
    3b24:	01800444 	movi	r6,17
    3b28:	01400cc4 	movi	r5,51
    3b2c:	01000384 	movi	r4,14
    3b30:	00089f00 	call	89f0 <VGA_box>
}
    3b34:	0001883a 	nop
    3b38:	e037883a 	mov	sp,fp
    3b3c:	dfc00117 	ldw	ra,4(sp)
    3b40:	df000017 	ldw	fp,0(sp)
    3b44:	dec00204 	addi	sp,sp,8
    3b48:	f800283a 	ret

00003b4c <spencerWinPose3>:


void spencerWinPose3(void)
{
    3b4c:	defffd04 	addi	sp,sp,-12
    3b50:	dfc00215 	stw	ra,8(sp)
    3b54:	df000115 	stw	fp,4(sp)
    3b58:	df000104 	addi	fp,sp,4
  // Rendering Start – Spencer Win Pose (S5.png)

  // Render Star
  VGA_box(SXCoord, SYCoord + 2, SXCoord, SYCoord + 2, 0xFF80);
    3b5c:	00bfe004 	movi	r2,-128
    3b60:	d8800015 	stw	r2,0(sp)
    3b64:	01c00084 	movi	r7,2
    3b68:	000d883a 	mov	r6,zero
    3b6c:	01400084 	movi	r5,2
    3b70:	0009883a 	mov	r4,zero
    3b74:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 2, SXCoord + 1, SYCoord + 5, 0xFF80);
    3b78:	00bfe004 	movi	r2,-128
    3b7c:	d8800015 	stw	r2,0(sp)
    3b80:	01c00144 	movi	r7,5
    3b84:	01800044 	movi	r6,1
    3b88:	01400084 	movi	r5,2
    3b8c:	01000044 	movi	r4,1
    3b90:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 2, SYCoord, SXCoord + 2, SYCoord + 4, 0xFF80);
    3b94:	00bfe004 	movi	r2,-128
    3b98:	d8800015 	stw	r2,0(sp)
    3b9c:	01c00104 	movi	r7,4
    3ba0:	01800084 	movi	r6,2
    3ba4:	000b883a 	mov	r5,zero
    3ba8:	01000084 	movi	r4,2
    3bac:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 3, SYCoord + 2, SXCoord + 3, SYCoord + 5, 0xFF80);
    3bb0:	00bfe004 	movi	r2,-128
    3bb4:	d8800015 	stw	r2,0(sp)
    3bb8:	01c00144 	movi	r7,5
    3bbc:	018000c4 	movi	r6,3
    3bc0:	01400084 	movi	r5,2
    3bc4:	010000c4 	movi	r4,3
    3bc8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 2, SXCoord + 4, SYCoord + 2, 0xFF80);
    3bcc:	00bfe004 	movi	r2,-128
    3bd0:	d8800015 	stw	r2,0(sp)
    3bd4:	01c00084 	movi	r7,2
    3bd8:	01800104 	movi	r6,4
    3bdc:	01400084 	movi	r5,2
    3be0:	01000104 	movi	r4,4
    3be4:	00089f00 	call	89f0 <VGA_box>

  // Render Hair
  VGA_box(SXCoord, SYCoord + 14, SXCoord + 3, SYCoord + 23, 0x59E4);
    3be8:	00967904 	movi	r2,23012
    3bec:	d8800015 	stw	r2,0(sp)
    3bf0:	01c005c4 	movi	r7,23
    3bf4:	018000c4 	movi	r6,3
    3bf8:	01400384 	movi	r5,14
    3bfc:	0009883a 	mov	r4,zero
    3c00:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 26, SXCoord, SYCoord + 26, 0x59E4);
    3c04:	00967904 	movi	r2,23012
    3c08:	d8800015 	stw	r2,0(sp)
    3c0c:	01c00684 	movi	r7,26
    3c10:	000d883a 	mov	r6,zero
    3c14:	01400684 	movi	r5,26
    3c18:	0009883a 	mov	r4,zero
    3c1c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 27, SXCoord + 2, SYCoord + 29, 0x59E4);
    3c20:	00967904 	movi	r2,23012
    3c24:	d8800015 	stw	r2,0(sp)
    3c28:	01c00744 	movi	r7,29
    3c2c:	01800084 	movi	r6,2
    3c30:	014006c4 	movi	r5,27
    3c34:	0009883a 	mov	r4,zero
    3c38:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 30, SXCoord + 5, SYCoord + 30, 0x59E4);
    3c3c:	00967904 	movi	r2,23012
    3c40:	d8800015 	stw	r2,0(sp)
    3c44:	01c00784 	movi	r7,30
    3c48:	01800144 	movi	r6,5
    3c4c:	01400784 	movi	r5,30
    3c50:	01000104 	movi	r4,4
    3c54:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 32, SXCoord + 6, SYCoord + 37, 0x59E4);
    3c58:	00967904 	movi	r2,23012
    3c5c:	d8800015 	stw	r2,0(sp)
    3c60:	01c00944 	movi	r7,37
    3c64:	01800184 	movi	r6,6
    3c68:	01400804 	movi	r5,32
    3c6c:	01000104 	movi	r4,4
    3c70:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 35, SXCoord + 7, SYCoord + 37, 0x59E4);
    3c74:	00967904 	movi	r2,23012
    3c78:	d8800015 	stw	r2,0(sp)
    3c7c:	01c00944 	movi	r7,37
    3c80:	018001c4 	movi	r6,7
    3c84:	014008c4 	movi	r5,35
    3c88:	010001c4 	movi	r4,7
    3c8c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 10, SXCoord + 4, SYCoord + 19, 0x59E4);
    3c90:	00967904 	movi	r2,23012
    3c94:	d8800015 	stw	r2,0(sp)
    3c98:	01c004c4 	movi	r7,19
    3c9c:	01800104 	movi	r6,4
    3ca0:	01400284 	movi	r5,10
    3ca4:	01000104 	movi	r4,4
    3ca8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 10, SXCoord + 5, SYCoord + 18, 0x59E4);
    3cac:	00967904 	movi	r2,23012
    3cb0:	d8800015 	stw	r2,0(sp)
    3cb4:	01c00484 	movi	r7,18
    3cb8:	01800144 	movi	r6,5
    3cbc:	01400284 	movi	r5,10
    3cc0:	01000144 	movi	r4,5
    3cc4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 10, SXCoord + 25, SYCoord + 17, 0x59E4);
    3cc8:	00967904 	movi	r2,23012
    3ccc:	d8800015 	stw	r2,0(sp)
    3cd0:	01c00444 	movi	r7,17
    3cd4:	01800644 	movi	r6,25
    3cd8:	01400284 	movi	r5,10
    3cdc:	01000184 	movi	r4,6
    3ce0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 10, SXCoord + 26, SYCoord + 18, 0x59E4);
    3ce4:	00967904 	movi	r2,23012
    3ce8:	d8800015 	stw	r2,0(sp)
    3cec:	01c00484 	movi	r7,18
    3cf0:	01800684 	movi	r6,26
    3cf4:	01400284 	movi	r5,10
    3cf8:	01000684 	movi	r4,26
    3cfc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 27, SYCoord + 10, SXCoord + 27, SYCoord + 19, 0x59E4);
    3d00:	00967904 	movi	r2,23012
    3d04:	d8800015 	stw	r2,0(sp)
    3d08:	01c004c4 	movi	r7,19
    3d0c:	018006c4 	movi	r6,27
    3d10:	01400284 	movi	r5,10
    3d14:	010006c4 	movi	r4,27
    3d18:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 14, SXCoord + 31, SYCoord + 23, 0x59E4);
    3d1c:	00967904 	movi	r2,23012
    3d20:	d8800015 	stw	r2,0(sp)
    3d24:	01c005c4 	movi	r7,23
    3d28:	018007c4 	movi	r6,31
    3d2c:	01400384 	movi	r5,14
    3d30:	01000704 	movi	r4,28
    3d34:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 31, SYCoord + 26, SXCoord + 31, SYCoord + 26, 0x59E4);
    3d38:	00967904 	movi	r2,23012
    3d3c:	d8800015 	stw	r2,0(sp)
    3d40:	01c00684 	movi	r7,26
    3d44:	018007c4 	movi	r6,31
    3d48:	01400684 	movi	r5,26
    3d4c:	010007c4 	movi	r4,31
    3d50:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 29, SYCoord + 27, SXCoord + 31, SYCoord + 29, 0x59E4);
    3d54:	00967904 	movi	r2,23012
    3d58:	d8800015 	stw	r2,0(sp)
    3d5c:	01c00744 	movi	r7,29
    3d60:	018007c4 	movi	r6,31
    3d64:	014006c4 	movi	r5,27
    3d68:	01000744 	movi	r4,29
    3d6c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 30, SXCoord + 27, SYCoord + 30, 0x59E4);
    3d70:	00967904 	movi	r2,23012
    3d74:	d8800015 	stw	r2,0(sp)
    3d78:	01c00784 	movi	r7,30
    3d7c:	018006c4 	movi	r6,27
    3d80:	01400784 	movi	r5,30
    3d84:	01000684 	movi	r4,26
    3d88:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 32, SXCoord + 27, SYCoord + 37, 0x59E4);
    3d8c:	00967904 	movi	r2,23012
    3d90:	d8800015 	stw	r2,0(sp)
    3d94:	01c00944 	movi	r7,37
    3d98:	018006c4 	movi	r6,27
    3d9c:	01400804 	movi	r5,32
    3da0:	01000644 	movi	r4,25
    3da4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 35, SXCoord + 24, SYCoord + 37, 0x59E4);
    3da8:	00967904 	movi	r2,23012
    3dac:	d8800015 	stw	r2,0(sp)
    3db0:	01c00944 	movi	r7,37
    3db4:	01800604 	movi	r6,24
    3db8:	014008c4 	movi	r5,35
    3dbc:	01000604 	movi	r4,24
    3dc0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 6, SXCoord + 23, SYCoord + 9, 0x59E4);
    3dc4:	00967904 	movi	r2,23012
    3dc8:	d8800015 	stw	r2,0(sp)
    3dcc:	01c00244 	movi	r7,9
    3dd0:	018005c4 	movi	r6,23
    3dd4:	01400184 	movi	r5,6
    3dd8:	01000304 	movi	r4,12
    3ddc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 2, SXCoord + 19, SYCoord + 5, 0x59E4);
    3de0:	00967904 	movi	r2,23012
    3de4:	d8800015 	stw	r2,0(sp)
    3de8:	01c00144 	movi	r7,5
    3dec:	018004c4 	movi	r6,19
    3df0:	01400084 	movi	r5,2
    3df4:	01000304 	movi	r4,12
    3df8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 1, SXCoord + 16, SYCoord + 1, 0x59E4);
    3dfc:	00967904 	movi	r2,23012
    3e00:	d8800015 	stw	r2,0(sp)
    3e04:	01c00044 	movi	r7,1
    3e08:	01800404 	movi	r6,16
    3e0c:	01400044 	movi	r5,1
    3e10:	010002c4 	movi	r4,11
    3e14:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 2, SXCoord + 11, SYCoord + 2, 0x59E4);
    3e18:	00967904 	movi	r2,23012
    3e1c:	d8800015 	stw	r2,0(sp)
    3e20:	01c00084 	movi	r7,2
    3e24:	018002c4 	movi	r6,11
    3e28:	01400084 	movi	r5,2
    3e2c:	01000284 	movi	r4,10
    3e30:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 21, SXCoord + 8, SYCoord + 21, 0x59E4);
    3e34:	00967904 	movi	r2,23012
    3e38:	d8800015 	stw	r2,0(sp)
    3e3c:	01c00544 	movi	r7,21
    3e40:	01800204 	movi	r6,8
    3e44:	01400544 	movi	r5,21
    3e48:	010001c4 	movi	r4,7
    3e4c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 21, SXCoord + 12, SYCoord + 21, 0x59E4);
    3e50:	00967904 	movi	r2,23012
    3e54:	d8800015 	stw	r2,0(sp)
    3e58:	01c00544 	movi	r7,21
    3e5c:	01800304 	movi	r6,12
    3e60:	01400544 	movi	r5,21
    3e64:	010002c4 	movi	r4,11
    3e68:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 20, SXCoord + 12, SYCoord + 20, 0x59E4);
    3e6c:	00967904 	movi	r2,23012
    3e70:	d8800015 	stw	r2,0(sp)
    3e74:	01c00504 	movi	r7,20
    3e78:	01800304 	movi	r6,12
    3e7c:	01400504 	movi	r5,20
    3e80:	01000204 	movi	r4,8
    3e84:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 9, SYCoord + 19, SXCoord + 11, SYCoord + 19, 0x59E4);
    3e88:	00967904 	movi	r2,23012
    3e8c:	d8800015 	stw	r2,0(sp)
    3e90:	01c004c4 	movi	r7,19
    3e94:	018002c4 	movi	r6,11
    3e98:	014004c4 	movi	r5,19
    3e9c:	01000244 	movi	r4,9
    3ea0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 22, SXCoord + 23, SYCoord + 23, 0x59E4);
    3ea4:	00967904 	movi	r2,23012
    3ea8:	d8800015 	stw	r2,0(sp)
    3eac:	01c005c4 	movi	r7,23
    3eb0:	018005c4 	movi	r6,23
    3eb4:	01400584 	movi	r5,22
    3eb8:	010004c4 	movi	r4,19
    3ebc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 23, SXCoord + 24, SYCoord + 23, 0x59E4);
    3ec0:	00967904 	movi	r2,23012
    3ec4:	d8800015 	stw	r2,0(sp)
    3ec8:	01c005c4 	movi	r7,23
    3ecc:	01800604 	movi	r6,24
    3ed0:	014005c4 	movi	r5,23
    3ed4:	01000604 	movi	r4,24
    3ed8:	00089f00 	call	89f0 <VGA_box>

  // Render Glasses
  VGA_box(SXCoord, SYCoord + 24, SXCoord + 13, SYCoord + 24, 0x0000);
    3edc:	d8000015 	stw	zero,0(sp)
    3ee0:	01c00604 	movi	r7,24
    3ee4:	01800344 	movi	r6,13
    3ee8:	01400604 	movi	r5,24
    3eec:	0009883a 	mov	r4,zero
    3ef0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 25, SXCoord + 3, SYCoord + 25, 0x0000);
    3ef4:	d8000015 	stw	zero,0(sp)
    3ef8:	01c00644 	movi	r7,25
    3efc:	018000c4 	movi	r6,3
    3f00:	01400644 	movi	r5,25
    3f04:	0009883a 	mov	r4,zero
    3f08:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 26, SXCoord + 3, SYCoord + 26, 0x0000);
    3f0c:	d8000015 	stw	zero,0(sp)
    3f10:	01c00684 	movi	r7,26
    3f14:	018000c4 	movi	r6,3
    3f18:	01400684 	movi	r5,26
    3f1c:	01000044 	movi	r4,1
    3f20:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 3, SYCoord + 27, SXCoord + 3, SYCoord + 30, 0x0000);
    3f24:	d8000015 	stw	zero,0(sp)
    3f28:	01c00784 	movi	r7,30
    3f2c:	018000c4 	movi	r6,3
    3f30:	014006c4 	movi	r5,27
    3f34:	010000c4 	movi	r4,3
    3f38:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 31, SXCoord + 12, SYCoord + 31, 0x0000);
    3f3c:	d8000015 	stw	zero,0(sp)
    3f40:	01c007c4 	movi	r7,31
    3f44:	01800304 	movi	r6,12
    3f48:	014007c4 	movi	r5,31
    3f4c:	01000104 	movi	r4,4
    3f50:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 27, SXCoord + 13, SYCoord + 30, 0x0000);
    3f54:	d8000015 	stw	zero,0(sp)
    3f58:	01c00784 	movi	r7,30
    3f5c:	01800344 	movi	r6,13
    3f60:	014006c4 	movi	r5,27
    3f64:	01000344 	movi	r4,13
    3f68:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 25, SXCoord + 17, SYCoord + 26, 0x0000);
    3f6c:	d8000015 	stw	zero,0(sp)
    3f70:	01c00684 	movi	r7,26
    3f74:	01800444 	movi	r6,17
    3f78:	01400644 	movi	r5,25
    3f7c:	01000384 	movi	r4,14
    3f80:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 24, SXCoord + 31, SYCoord + 24, 0x0000);
    3f84:	d8000015 	stw	zero,0(sp)
    3f88:	01c00604 	movi	r7,24
    3f8c:	018007c4 	movi	r6,31
    3f90:	01400604 	movi	r5,24
    3f94:	01000484 	movi	r4,18
    3f98:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 25, SXCoord + 31, SYCoord + 25, 0x0000);
    3f9c:	d8000015 	stw	zero,0(sp)
    3fa0:	01c00644 	movi	r7,25
    3fa4:	018007c4 	movi	r6,31
    3fa8:	01400644 	movi	r5,25
    3fac:	01000704 	movi	r4,28
    3fb0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 26, SXCoord + 30, SYCoord + 26, 0x0000);
    3fb4:	d8000015 	stw	zero,0(sp)
    3fb8:	01c00684 	movi	r7,26
    3fbc:	01800784 	movi	r6,30
    3fc0:	01400684 	movi	r5,26
    3fc4:	01000704 	movi	r4,28
    3fc8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 27, SXCoord + 28, SYCoord + 30, 0x0000);
    3fcc:	d8000015 	stw	zero,0(sp)
    3fd0:	01c00784 	movi	r7,30
    3fd4:	01800704 	movi	r6,28
    3fd8:	014006c4 	movi	r5,27
    3fdc:	01000704 	movi	r4,28
    3fe0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 31, SXCoord + 27, SYCoord + 31, 0x0000);
    3fe4:	d8000015 	stw	zero,0(sp)
    3fe8:	01c007c4 	movi	r7,31
    3fec:	018006c4 	movi	r6,27
    3ff0:	014007c4 	movi	r5,31
    3ff4:	010004c4 	movi	r4,19
    3ff8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 27, SXCoord + 18, SYCoord + 30, 0x0000);
    3ffc:	d8000015 	stw	zero,0(sp)
    4000:	01c00784 	movi	r7,30
    4004:	01800484 	movi	r6,18
    4008:	014006c4 	movi	r5,27
    400c:	01000484 	movi	r4,18
    4010:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 26, SXCoord + 11, SYCoord + 29, 0x0000);
    4014:	d8000015 	stw	zero,0(sp)
    4018:	01c00744 	movi	r7,29
    401c:	018002c4 	movi	r6,11
    4020:	01400684 	movi	r5,26
    4024:	01000204 	movi	r4,8
    4028:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 26, SXCoord + 23, SYCoord + 29, 0x0000);
    402c:	d8000015 	stw	zero,0(sp)
    4030:	01c00744 	movi	r7,29
    4034:	018005c4 	movi	r6,23
    4038:	01400684 	movi	r5,26
    403c:	01000504 	movi	r4,20
    4040:	00089f00 	call	89f0 <VGA_box>

  // Render Mouth
  VGA_box(SXCoord + 9, SYCoord + 33, SXCoord + 22, SYCoord + 33, 0x0000);
    4044:	d8000015 	stw	zero,0(sp)
    4048:	01c00844 	movi	r7,33
    404c:	01800584 	movi	r6,22
    4050:	01400844 	movi	r5,33
    4054:	01000244 	movi	r4,9
    4058:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 34, SXCoord + 11, SYCoord + 34, 0x0000);
    405c:	d8000015 	stw	zero,0(sp)
    4060:	01c00884 	movi	r7,34
    4064:	018002c4 	movi	r6,11
    4068:	01400884 	movi	r5,34
    406c:	01000284 	movi	r4,10
    4070:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 34, SXCoord + 21, SYCoord + 34, 0x0000);
    4074:	d8000015 	stw	zero,0(sp)
    4078:	01c00884 	movi	r7,34
    407c:	01800544 	movi	r6,21
    4080:	01400884 	movi	r5,34
    4084:	01000504 	movi	r4,20
    4088:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 35, SXCoord + 20, SYCoord + 35, 0x0000);
    408c:	d8000015 	stw	zero,0(sp)
    4090:	01c008c4 	movi	r7,35
    4094:	01800504 	movi	r6,20
    4098:	014008c4 	movi	r5,35
    409c:	010002c4 	movi	r4,11
    40a0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 36, SXCoord + 14, SYCoord + 36, 0x0000);
    40a4:	d8000015 	stw	zero,0(sp)
    40a8:	01c00904 	movi	r7,36
    40ac:	01800384 	movi	r6,14
    40b0:	01400904 	movi	r5,36
    40b4:	010002c4 	movi	r4,11
    40b8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 17, SYCoord + 36, SXCoord + 20, SYCoord + 36, 0x0000);
    40bc:	d8000015 	stw	zero,0(sp)
    40c0:	01c00904 	movi	r7,36
    40c4:	01800504 	movi	r6,20
    40c8:	01400904 	movi	r5,36
    40cc:	01000444 	movi	r4,17
    40d0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 37, SXCoord + 13, SYCoord + 37, 0x0000);
    40d4:	d8000015 	stw	zero,0(sp)
    40d8:	01c00944 	movi	r7,37
    40dc:	01800344 	movi	r6,13
    40e0:	01400944 	movi	r5,37
    40e4:	01000304 	movi	r4,12
    40e8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 37, SXCoord + 19, SYCoord + 37, 0x0000);
    40ec:	d8000015 	stw	zero,0(sp)
    40f0:	01c00944 	movi	r7,37
    40f4:	018004c4 	movi	r6,19
    40f8:	01400944 	movi	r5,37
    40fc:	01000484 	movi	r4,18
    4100:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 38, SXCoord + 18, SYCoord + 38, 0x0000);
    4104:	d8000015 	stw	zero,0(sp)
    4108:	01c00984 	movi	r7,38
    410c:	01800484 	movi	r6,18
    4110:	01400984 	movi	r5,38
    4114:	01000344 	movi	r4,13
    4118:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 34, SXCoord + 19, SYCoord + 34, 0xFFFF);
    411c:	00bfffc4 	movi	r2,-1
    4120:	d8800015 	stw	r2,0(sp)
    4124:	01c00884 	movi	r7,34
    4128:	018004c4 	movi	r6,19
    412c:	01400884 	movi	r5,34
    4130:	01000304 	movi	r4,12
    4134:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 37, SXCoord + 17, SYCoord + 37, 0xFD79);
    4138:	00bf5e44 	movi	r2,-647
    413c:	d8800015 	stw	r2,0(sp)
    4140:	01c00944 	movi	r7,37
    4144:	01800444 	movi	r6,17
    4148:	01400944 	movi	r5,37
    414c:	01000384 	movi	r4,14
    4150:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 15, SYCoord + 36, SXCoord + 16, SYCoord + 36, 0xFD79);
    4154:	00bf5e44 	movi	r2,-647
    4158:	d8800015 	stw	r2,0(sp)
    415c:	01c00904 	movi	r7,36
    4160:	01800404 	movi	r6,16
    4164:	01400904 	movi	r5,36
    4168:	010003c4 	movi	r4,15
    416c:	00089f00 	call	89f0 <VGA_box>

  // Render Skin
  VGA_box(SXCoord + 6, SYCoord + 18, SXCoord + 25, SYCoord + 18, 0xF6DA);
    4170:	00bdb684 	movi	r2,-2342
    4174:	d8800015 	stw	r2,0(sp)
    4178:	01c00484 	movi	r7,18
    417c:	01800644 	movi	r6,25
    4180:	01400484 	movi	r5,18
    4184:	01000184 	movi	r4,6
    4188:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 19, SXCoord + 8, SYCoord + 19, 0xF6DA);
    418c:	00bdb684 	movi	r2,-2342
    4190:	d8800015 	stw	r2,0(sp)
    4194:	01c004c4 	movi	r7,19
    4198:	01800204 	movi	r6,8
    419c:	014004c4 	movi	r5,19
    41a0:	01000144 	movi	r4,5
    41a4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 19, SXCoord + 26, SYCoord + 19, 0xF6DA);
    41a8:	00bdb684 	movi	r2,-2342
    41ac:	d8800015 	stw	r2,0(sp)
    41b0:	01c004c4 	movi	r7,19
    41b4:	01800684 	movi	r6,26
    41b8:	014004c4 	movi	r5,19
    41bc:	01000304 	movi	r4,12
    41c0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 20, SXCoord + 7, SYCoord + 20, 0xF6DA);
    41c4:	00bdb684 	movi	r2,-2342
    41c8:	d8800015 	stw	r2,0(sp)
    41cc:	01c00504 	movi	r7,20
    41d0:	018001c4 	movi	r6,7
    41d4:	01400504 	movi	r5,20
    41d8:	01000104 	movi	r4,4
    41dc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 20, SXCoord + 27, SYCoord + 20, 0xF6DA);
    41e0:	00bdb684 	movi	r2,-2342
    41e4:	d8800015 	stw	r2,0(sp)
    41e8:	01c00504 	movi	r7,20
    41ec:	018006c4 	movi	r6,27
    41f0:	01400504 	movi	r5,20
    41f4:	01000344 	movi	r4,13
    41f8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 21, SXCoord + 6, SYCoord + 21, 0xF6DA);
    41fc:	00bdb684 	movi	r2,-2342
    4200:	d8800015 	stw	r2,0(sp)
    4204:	01c00544 	movi	r7,21
    4208:	01800184 	movi	r6,6
    420c:	01400544 	movi	r5,21
    4210:	01000104 	movi	r4,4
    4214:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 9, SYCoord + 21, SXCoord + 10, SYCoord + 21, 0xF6DA);
    4218:	00bdb684 	movi	r2,-2342
    421c:	d8800015 	stw	r2,0(sp)
    4220:	01c00544 	movi	r7,21
    4224:	01800284 	movi	r6,10
    4228:	01400544 	movi	r5,21
    422c:	01000244 	movi	r4,9
    4230:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 21, SXCoord + 27, SYCoord + 21, 0xF6DA);
    4234:	00bdb684 	movi	r2,-2342
    4238:	d8800015 	stw	r2,0(sp)
    423c:	01c00544 	movi	r7,21
    4240:	018006c4 	movi	r6,27
    4244:	01400544 	movi	r5,21
    4248:	01000344 	movi	r4,13
    424c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 22, SXCoord + 18, SYCoord + 23, 0xF6DA);
    4250:	00bdb684 	movi	r2,-2342
    4254:	d8800015 	stw	r2,0(sp)
    4258:	01c005c4 	movi	r7,23
    425c:	01800484 	movi	r6,18
    4260:	01400584 	movi	r5,22
    4264:	01000104 	movi	r4,4
    4268:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 22, SXCoord + 27, SYCoord + 22, 0xF6DA);
    426c:	00bdb684 	movi	r2,-2342
    4270:	d8800015 	stw	r2,0(sp)
    4274:	01c00584 	movi	r7,22
    4278:	018006c4 	movi	r6,27
    427c:	01400584 	movi	r5,22
    4280:	01000604 	movi	r4,24
    4284:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 23, SXCoord + 27, SYCoord + 23, 0xF6DA);
    4288:	00bdb684 	movi	r2,-2342
    428c:	d8800015 	stw	r2,0(sp)
    4290:	01c005c4 	movi	r7,23
    4294:	018006c4 	movi	r6,27
    4298:	014005c4 	movi	r5,23
    429c:	01000644 	movi	r4,25
    42a0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 24, SXCoord + 17, SYCoord + 24, 0xF6DA);
    42a4:	00bdb684 	movi	r2,-2342
    42a8:	d8800015 	stw	r2,0(sp)
    42ac:	01c00604 	movi	r7,24
    42b0:	01800444 	movi	r6,17
    42b4:	01400604 	movi	r5,24
    42b8:	01000384 	movi	r4,14
    42bc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 25, SXCoord + 13, SYCoord + 25, 0xF6DA);
    42c0:	00bdb684 	movi	r2,-2342
    42c4:	d8800015 	stw	r2,0(sp)
    42c8:	01c00644 	movi	r7,25
    42cc:	01800344 	movi	r6,13
    42d0:	01400644 	movi	r5,25
    42d4:	01000104 	movi	r4,4
    42d8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 26, SXCoord + 7, SYCoord + 29, 0xF6DA);
    42dc:	00bdb684 	movi	r2,-2342
    42e0:	d8800015 	stw	r2,0(sp)
    42e4:	01c00744 	movi	r7,29
    42e8:	018001c4 	movi	r6,7
    42ec:	01400684 	movi	r5,26
    42f0:	01000104 	movi	r4,4
    42f4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 30, SXCoord + 12, SYCoord + 30, 0xF6DA);
    42f8:	00bdb684 	movi	r2,-2342
    42fc:	d8800015 	stw	r2,0(sp)
    4300:	01c00784 	movi	r7,30
    4304:	01800304 	movi	r6,12
    4308:	01400784 	movi	r5,30
    430c:	01000184 	movi	r4,6
    4310:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 26, SXCoord + 13, SYCoord + 26, 0xF6DA);
    4314:	00bdb684 	movi	r2,-2342
    4318:	d8800015 	stw	r2,0(sp)
    431c:	01c00684 	movi	r7,26
    4320:	01800344 	movi	r6,13
    4324:	01400684 	movi	r5,26
    4328:	01000304 	movi	r4,12
    432c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 27, SXCoord + 12, SYCoord + 29, 0xF6DA);
    4330:	00bdb684 	movi	r2,-2342
    4334:	d8800015 	stw	r2,0(sp)
    4338:	01c00744 	movi	r7,29
    433c:	01800304 	movi	r6,12
    4340:	014006c4 	movi	r5,27
    4344:	01000304 	movi	r4,12
    4348:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 25, SXCoord + 27, SYCoord + 25, 0xF6DA);
    434c:	00bdb684 	movi	r2,-2342
    4350:	d8800015 	stw	r2,0(sp)
    4354:	01c00644 	movi	r7,25
    4358:	018006c4 	movi	r6,27
    435c:	01400644 	movi	r5,25
    4360:	01000484 	movi	r4,18
    4364:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 26, SXCoord + 19, SYCoord + 26, 0xF6DA);
    4368:	00bdb684 	movi	r2,-2342
    436c:	d8800015 	stw	r2,0(sp)
    4370:	01c00684 	movi	r7,26
    4374:	018004c4 	movi	r6,19
    4378:	01400684 	movi	r5,26
    437c:	01000484 	movi	r4,18
    4380:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 27, SXCoord + 19, SYCoord + 29, 0xF6DA);
    4384:	00bdb684 	movi	r2,-2342
    4388:	d8800015 	stw	r2,0(sp)
    438c:	01c00744 	movi	r7,29
    4390:	018004c4 	movi	r6,19
    4394:	014006c4 	movi	r5,27
    4398:	010004c4 	movi	r4,19
    439c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 30, SXCoord + 25, SYCoord + 30, 0xF6DA);
    43a0:	00bdb684 	movi	r2,-2342
    43a4:	d8800015 	stw	r2,0(sp)
    43a8:	01c00784 	movi	r7,30
    43ac:	01800644 	movi	r6,25
    43b0:	01400784 	movi	r5,30
    43b4:	010004c4 	movi	r4,19
    43b8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 26, SXCoord + 27, SYCoord + 29, 0xF6DA);
    43bc:	00bdb684 	movi	r2,-2342
    43c0:	d8800015 	stw	r2,0(sp)
    43c4:	01c00744 	movi	r7,29
    43c8:	018006c4 	movi	r6,27
    43cc:	01400684 	movi	r5,26
    43d0:	01000604 	movi	r4,24
    43d4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 27, SXCoord + 17, SYCoord + 30, 0xF6DA);
    43d8:	00bdb684 	movi	r2,-2342
    43dc:	d8800015 	stw	r2,0(sp)
    43e0:	01c00784 	movi	r7,30
    43e4:	01800444 	movi	r6,17
    43e8:	014006c4 	movi	r5,27
    43ec:	01000384 	movi	r4,14
    43f0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 31, SXCoord + 18, SYCoord + 31, 0xF6DA);
    43f4:	00bdb684 	movi	r2,-2342
    43f8:	d8800015 	stw	r2,0(sp)
    43fc:	01c007c4 	movi	r7,31
    4400:	01800484 	movi	r6,18
    4404:	014007c4 	movi	r5,31
    4408:	01000344 	movi	r4,13
    440c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 32, SXCoord + 24, SYCoord + 32, 0xF6DA);
    4410:	00bdb684 	movi	r2,-2342
    4414:	d8800015 	stw	r2,0(sp)
    4418:	01c00804 	movi	r7,32
    441c:	01800604 	movi	r6,24
    4420:	01400804 	movi	r5,32
    4424:	010001c4 	movi	r4,7
    4428:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 33, SXCoord + 8, SYCoord + 33, 0xF6DA);
    442c:	00bdb684 	movi	r2,-2342
    4430:	d8800015 	stw	r2,0(sp)
    4434:	01c00844 	movi	r7,33
    4438:	01800204 	movi	r6,8
    443c:	01400844 	movi	r5,33
    4440:	010001c4 	movi	r4,7
    4444:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 23, SYCoord + 33, SXCoord + 24, SYCoord + 33, 0xF6DA);
    4448:	00bdb684 	movi	r2,-2342
    444c:	d8800015 	stw	r2,0(sp)
    4450:	01c00844 	movi	r7,33
    4454:	01800604 	movi	r6,24
    4458:	01400844 	movi	r5,33
    445c:	010005c4 	movi	r4,23
    4460:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 34, SXCoord + 9, SYCoord + 34, 0xF6DA);
    4464:	00bdb684 	movi	r2,-2342
    4468:	d8800015 	stw	r2,0(sp)
    446c:	01c00884 	movi	r7,34
    4470:	01800244 	movi	r6,9
    4474:	01400884 	movi	r5,34
    4478:	010001c4 	movi	r4,7
    447c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 22, SYCoord + 34, SXCoord + 24, SYCoord + 34, 0xF6DA);
    4480:	00bdb684 	movi	r2,-2342
    4484:	d8800015 	stw	r2,0(sp)
    4488:	01c00884 	movi	r7,34
    448c:	01800604 	movi	r6,24
    4490:	01400884 	movi	r5,34
    4494:	01000584 	movi	r4,22
    4498:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 35, SXCoord + 10, SYCoord + 36, 0xF6DA);
    449c:	00bdb684 	movi	r2,-2342
    44a0:	d8800015 	stw	r2,0(sp)
    44a4:	01c00904 	movi	r7,36
    44a8:	01800284 	movi	r6,10
    44ac:	014008c4 	movi	r5,35
    44b0:	01000204 	movi	r4,8
    44b4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 35, SXCoord + 23, SYCoord + 36, 0xF6DA);
    44b8:	00bdb684 	movi	r2,-2342
    44bc:	d8800015 	stw	r2,0(sp)
    44c0:	01c00904 	movi	r7,36
    44c4:	018005c4 	movi	r6,23
    44c8:	014008c4 	movi	r5,35
    44cc:	01000544 	movi	r4,21
    44d0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 37, SXCoord + 11, SYCoord + 37, 0xF6DA);
    44d4:	00bdb684 	movi	r2,-2342
    44d8:	d8800015 	stw	r2,0(sp)
    44dc:	01c00944 	movi	r7,37
    44e0:	018002c4 	movi	r6,11
    44e4:	01400944 	movi	r5,37
    44e8:	01000204 	movi	r4,8
    44ec:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 37, SXCoord + 23, SYCoord + 37, 0xF6DA);
    44f0:	00bdb684 	movi	r2,-2342
    44f4:	d8800015 	stw	r2,0(sp)
    44f8:	01c00944 	movi	r7,37
    44fc:	018005c4 	movi	r6,23
    4500:	01400944 	movi	r5,37
    4504:	01000504 	movi	r4,20
    4508:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 38, SXCoord + 12, SYCoord + 38, 0xF6DA);
    450c:	00bdb684 	movi	r2,-2342
    4510:	d8800015 	stw	r2,0(sp)
    4514:	01c00984 	movi	r7,38
    4518:	01800304 	movi	r6,12
    451c:	01400984 	movi	r5,38
    4520:	01000184 	movi	r4,6
    4524:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 38, SXCoord + 25, SYCoord + 38, 0xF6DA);
    4528:	00bdb684 	movi	r2,-2342
    452c:	d8800015 	stw	r2,0(sp)
    4530:	01c00984 	movi	r7,38
    4534:	01800644 	movi	r6,25
    4538:	01400984 	movi	r5,38
    453c:	010004c4 	movi	r4,19
    4540:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 39, SXCoord + 24, SYCoord + 39, 0xF6DA);
    4544:	00bdb684 	movi	r2,-2342
    4548:	d8800015 	stw	r2,0(sp)
    454c:	01c009c4 	movi	r7,39
    4550:	01800604 	movi	r6,24
    4554:	014009c4 	movi	r5,39
    4558:	010001c4 	movi	r4,7
    455c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 40, SXCoord + 23, SYCoord + 41, 0xF6DA);
    4560:	00bdb684 	movi	r2,-2342
    4564:	d8800015 	stw	r2,0(sp)
    4568:	01c00a44 	movi	r7,41
    456c:	018005c4 	movi	r6,23
    4570:	01400a04 	movi	r5,40
    4574:	01000204 	movi	r4,8
    4578:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 42, SXCoord + 21, SYCoord + 42, 0xF6DA);
    457c:	00bdb684 	movi	r2,-2342
    4580:	d8800015 	stw	r2,0(sp)
    4584:	01c00a84 	movi	r7,42
    4588:	01800544 	movi	r6,21
    458c:	01400a84 	movi	r5,42
    4590:	01000284 	movi	r4,10
    4594:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 43, SXCoord + 17, SYCoord + 44, 0xF6DA);
    4598:	00bdb684 	movi	r2,-2342
    459c:	d8800015 	stw	r2,0(sp)
    45a0:	01c00b04 	movi	r7,44
    45a4:	01800444 	movi	r6,17
    45a8:	01400ac4 	movi	r5,43
    45ac:	01000384 	movi	r4,14
    45b0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 45, SXCoord + 19, SYCoord + 46, 0xF6DA);
    45b4:	00bdb684 	movi	r2,-2342
    45b8:	d8800015 	stw	r2,0(sp)
    45bc:	01c00b84 	movi	r7,46
    45c0:	018004c4 	movi	r6,19
    45c4:	01400b44 	movi	r5,45
    45c8:	01000304 	movi	r4,12
    45cc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 47, SXCoord + 17, SYCoord + 48, 0xF6DA);
    45d0:	00bdb684 	movi	r2,-2342
    45d4:	d8800015 	stw	r2,0(sp)
    45d8:	01c00c04 	movi	r7,48
    45dc:	01800444 	movi	r6,17
    45e0:	01400bc4 	movi	r5,47
    45e4:	01000384 	movi	r4,14
    45e8:	00089f00 	call	89f0 <VGA_box>

  // Render Shirt
  VGA_box(SXCoord + 10, SYCoord + 45, SXCoord + 11, SYCoord + 46, 0x2589);
    45ec:	00896244 	movi	r2,9609
    45f0:	d8800015 	stw	r2,0(sp)
    45f4:	01c00b84 	movi	r7,46
    45f8:	018002c4 	movi	r6,11
    45fc:	01400b44 	movi	r5,45
    4600:	01000284 	movi	r4,10
    4604:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 45, SXCoord + 21, SYCoord + 46, 0x2589);
    4608:	00896244 	movi	r2,9609
    460c:	d8800015 	stw	r2,0(sp)
    4610:	01c00b84 	movi	r7,46
    4614:	01800544 	movi	r6,21
    4618:	01400b44 	movi	r5,45
    461c:	01000504 	movi	r4,20
    4620:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 47, SXCoord + 13, SYCoord + 48, 0x2589);
    4624:	00896244 	movi	r2,9609
    4628:	d8800015 	stw	r2,0(sp)
    462c:	01c00c04 	movi	r7,48
    4630:	01800344 	movi	r6,13
    4634:	01400bc4 	movi	r5,47
    4638:	01000204 	movi	r4,8
    463c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 47, SXCoord + 23, SYCoord + 48, 0x2589);
    4640:	00896244 	movi	r2,9609
    4644:	d8800015 	stw	r2,0(sp)
    4648:	01c00c04 	movi	r7,48
    464c:	018005c4 	movi	r6,23
    4650:	01400bc4 	movi	r5,47
    4654:	01000484 	movi	r4,18
    4658:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 49, SXCoord + 21, SYCoord + 50, 0x2589);
    465c:	00896244 	movi	r2,9609
    4660:	d8800015 	stw	r2,0(sp)
    4664:	01c00c84 	movi	r7,50
    4668:	01800544 	movi	r6,21
    466c:	01400c44 	movi	r5,49
    4670:	01000284 	movi	r4,10
    4674:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 51, SXCoord + 17, SYCoord + 52, 0x2589);
    4678:	00896244 	movi	r2,9609
    467c:	d8800015 	stw	r2,0(sp)
    4680:	01c00d04 	movi	r7,52
    4684:	01800444 	movi	r6,17
    4688:	01400cc4 	movi	r5,51
    468c:	01000384 	movi	r4,14
    4690:	00089f00 	call	89f0 <VGA_box>
}
    4694:	0001883a 	nop
    4698:	e037883a 	mov	sp,fp
    469c:	dfc00117 	ldw	ra,4(sp)
    46a0:	df000017 	ldw	fp,0(sp)
    46a4:	dec00204 	addi	sp,sp,8
    46a8:	f800283a 	ret

000046ac <spencerLosePose1>:


void spencerLosePose1(void)
{
    46ac:	defffd04 	addi	sp,sp,-12
    46b0:	dfc00215 	stw	ra,8(sp)
    46b4:	df000115 	stw	fp,4(sp)
    46b8:	df000104 	addi	fp,sp,4
  // Rendering Start – Spencer Lose Pose (S6.png)

  // Render Red X
  VGA_box(SXCoord + 1, SYCoord + 2, SXCoord + 1, SYCoord + 2, 0xE8E4);
    46bc:	00ba3904 	movi	r2,-5916
    46c0:	d8800015 	stw	r2,0(sp)
    46c4:	01c00084 	movi	r7,2
    46c8:	01800044 	movi	r6,1
    46cc:	01400084 	movi	r5,2
    46d0:	01000044 	movi	r4,1
    46d4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 5, SXCoord + 1, SYCoord + 5, 0xE8E4);
    46d8:	00ba3904 	movi	r2,-5916
    46dc:	d8800015 	stw	r2,0(sp)
    46e0:	01c00144 	movi	r7,5
    46e4:	01800044 	movi	r6,1
    46e8:	01400144 	movi	r5,5
    46ec:	01000044 	movi	r4,1
    46f0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 2, SYCoord + 3, SXCoord + 3, SYCoord + 4, 0xE8E4);
    46f4:	00ba3904 	movi	r2,-5916
    46f8:	d8800015 	stw	r2,0(sp)
    46fc:	01c00104 	movi	r7,4
    4700:	018000c4 	movi	r6,3
    4704:	014000c4 	movi	r5,3
    4708:	01000084 	movi	r4,2
    470c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 2, SXCoord + 4, SYCoord + 2, 0xE8E4);
    4710:	00ba3904 	movi	r2,-5916
    4714:	d8800015 	stw	r2,0(sp)
    4718:	01c00084 	movi	r7,2
    471c:	01800104 	movi	r6,4
    4720:	01400084 	movi	r5,2
    4724:	01000104 	movi	r4,4
    4728:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 5, SXCoord + 4, SYCoord + 5, 0xE8E4);
    472c:	00ba3904 	movi	r2,-5916
    4730:	d8800015 	stw	r2,0(sp)
    4734:	01c00144 	movi	r7,5
    4738:	01800104 	movi	r6,4
    473c:	01400144 	movi	r5,5
    4740:	01000104 	movi	r4,4
    4744:	00089f00 	call	89f0 <VGA_box>


  // Render Hair
  VGA_box(SXCoord, SYCoord + 13, SXCoord + 3, SYCoord + 22, 0x59E4);
    4748:	00967904 	movi	r2,23012
    474c:	d8800015 	stw	r2,0(sp)
    4750:	01c00584 	movi	r7,22
    4754:	018000c4 	movi	r6,3
    4758:	01400344 	movi	r5,13
    475c:	0009883a 	mov	r4,zero
    4760:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 25, SXCoord, SYCoord + 25, 0x59E4);
    4764:	00967904 	movi	r2,23012
    4768:	d8800015 	stw	r2,0(sp)
    476c:	01c00644 	movi	r7,25
    4770:	000d883a 	mov	r6,zero
    4774:	01400644 	movi	r5,25
    4778:	0009883a 	mov	r4,zero
    477c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 26, SXCoord + 2, SYCoord + 28, 0x59E4);
    4780:	00967904 	movi	r2,23012
    4784:	d8800015 	stw	r2,0(sp)
    4788:	01c00704 	movi	r7,28
    478c:	01800084 	movi	r6,2
    4790:	01400684 	movi	r5,26
    4794:	0009883a 	mov	r4,zero
    4798:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 29, SXCoord + 5, SYCoord + 29, 0x59E4);
    479c:	00967904 	movi	r2,23012
    47a0:	d8800015 	stw	r2,0(sp)
    47a4:	01c00744 	movi	r7,29
    47a8:	01800144 	movi	r6,5
    47ac:	01400744 	movi	r5,29
    47b0:	01000104 	movi	r4,4
    47b4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 31, SXCoord + 6, SYCoord + 36, 0x59E4);
    47b8:	00967904 	movi	r2,23012
    47bc:	d8800015 	stw	r2,0(sp)
    47c0:	01c00904 	movi	r7,36
    47c4:	01800184 	movi	r6,6
    47c8:	014007c4 	movi	r5,31
    47cc:	01000104 	movi	r4,4
    47d0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 34, SXCoord + 7, SYCoord + 36, 0x59E4);
    47d4:	00967904 	movi	r2,23012
    47d8:	d8800015 	stw	r2,0(sp)
    47dc:	01c00904 	movi	r7,36
    47e0:	018001c4 	movi	r6,7
    47e4:	01400884 	movi	r5,34
    47e8:	010001c4 	movi	r4,7
    47ec:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 9, SXCoord + 4, SYCoord + 18, 0x59E4);
    47f0:	00967904 	movi	r2,23012
    47f4:	d8800015 	stw	r2,0(sp)
    47f8:	01c00484 	movi	r7,18
    47fc:	01800104 	movi	r6,4
    4800:	01400244 	movi	r5,9
    4804:	01000104 	movi	r4,4
    4808:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 9, SXCoord + 5, SYCoord + 17, 0x59E4);
    480c:	00967904 	movi	r2,23012
    4810:	d8800015 	stw	r2,0(sp)
    4814:	01c00444 	movi	r7,17
    4818:	01800144 	movi	r6,5
    481c:	01400244 	movi	r5,9
    4820:	01000144 	movi	r4,5
    4824:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 9, SXCoord + 25, SYCoord + 16, 0x59E4);
    4828:	00967904 	movi	r2,23012
    482c:	d8800015 	stw	r2,0(sp)
    4830:	01c00404 	movi	r7,16
    4834:	01800644 	movi	r6,25
    4838:	01400244 	movi	r5,9
    483c:	01000184 	movi	r4,6
    4840:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 9, SXCoord + 26, SYCoord + 17, 0x59E4);
    4844:	00967904 	movi	r2,23012
    4848:	d8800015 	stw	r2,0(sp)
    484c:	01c00444 	movi	r7,17
    4850:	01800684 	movi	r6,26
    4854:	01400244 	movi	r5,9
    4858:	01000684 	movi	r4,26
    485c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 27, SYCoord + 9, SXCoord + 27, SYCoord + 18, 0x59E4);
    4860:	00967904 	movi	r2,23012
    4864:	d8800015 	stw	r2,0(sp)
    4868:	01c00484 	movi	r7,18
    486c:	018006c4 	movi	r6,27
    4870:	01400244 	movi	r5,9
    4874:	010006c4 	movi	r4,27
    4878:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 13, SXCoord + 31, SYCoord + 22, 0x59E4);
    487c:	00967904 	movi	r2,23012
    4880:	d8800015 	stw	r2,0(sp)
    4884:	01c00584 	movi	r7,22
    4888:	018007c4 	movi	r6,31
    488c:	01400344 	movi	r5,13
    4890:	01000704 	movi	r4,28
    4894:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 31, SYCoord + 25, SXCoord + 31, SYCoord + 25, 0x59E4);
    4898:	00967904 	movi	r2,23012
    489c:	d8800015 	stw	r2,0(sp)
    48a0:	01c00644 	movi	r7,25
    48a4:	018007c4 	movi	r6,31
    48a8:	01400644 	movi	r5,25
    48ac:	010007c4 	movi	r4,31
    48b0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 29, SYCoord + 26, SXCoord + 31, SYCoord + 28, 0x59E4);
    48b4:	00967904 	movi	r2,23012
    48b8:	d8800015 	stw	r2,0(sp)
    48bc:	01c00704 	movi	r7,28
    48c0:	018007c4 	movi	r6,31
    48c4:	01400684 	movi	r5,26
    48c8:	01000744 	movi	r4,29
    48cc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 29, SXCoord + 27, SYCoord + 29, 0x59E4);
    48d0:	00967904 	movi	r2,23012
    48d4:	d8800015 	stw	r2,0(sp)
    48d8:	01c00744 	movi	r7,29
    48dc:	018006c4 	movi	r6,27
    48e0:	01400744 	movi	r5,29
    48e4:	01000684 	movi	r4,26
    48e8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 31, SXCoord + 27, SYCoord + 36, 0x59E4);
    48ec:	00967904 	movi	r2,23012
    48f0:	d8800015 	stw	r2,0(sp)
    48f4:	01c00904 	movi	r7,36
    48f8:	018006c4 	movi	r6,27
    48fc:	014007c4 	movi	r5,31
    4900:	01000644 	movi	r4,25
    4904:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 34, SXCoord + 24, SYCoord + 36, 0x59E4);
    4908:	00967904 	movi	r2,23012
    490c:	d8800015 	stw	r2,0(sp)
    4910:	01c00904 	movi	r7,36
    4914:	01800604 	movi	r6,24
    4918:	01400884 	movi	r5,34
    491c:	01000604 	movi	r4,24
    4920:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 5, SXCoord + 23, SYCoord + 8, 0x59E4);
    4924:	00967904 	movi	r2,23012
    4928:	d8800015 	stw	r2,0(sp)
    492c:	01c00204 	movi	r7,8
    4930:	018005c4 	movi	r6,23
    4934:	01400144 	movi	r5,5
    4938:	01000304 	movi	r4,12
    493c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 1, SXCoord + 19, SYCoord + 4, 0x59E4);
    4940:	00967904 	movi	r2,23012
    4944:	d8800015 	stw	r2,0(sp)
    4948:	01c00104 	movi	r7,4
    494c:	018004c4 	movi	r6,19
    4950:	01400044 	movi	r5,1
    4954:	01000304 	movi	r4,12
    4958:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord, SXCoord + 16, SYCoord, 0x59E4);
    495c:	00967904 	movi	r2,23012
    4960:	d8800015 	stw	r2,0(sp)
    4964:	000f883a 	mov	r7,zero
    4968:	01800404 	movi	r6,16
    496c:	000b883a 	mov	r5,zero
    4970:	010002c4 	movi	r4,11
    4974:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 1, SXCoord + 11, SYCoord + 1, 0x59E4);
    4978:	00967904 	movi	r2,23012
    497c:	d8800015 	stw	r2,0(sp)
    4980:	01c00044 	movi	r7,1
    4984:	018002c4 	movi	r6,11
    4988:	01400044 	movi	r5,1
    498c:	01000284 	movi	r4,10
    4990:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 20, SXCoord + 8, SYCoord + 20, 0x59E4);
    4994:	00967904 	movi	r2,23012
    4998:	d8800015 	stw	r2,0(sp)
    499c:	01c00504 	movi	r7,20
    49a0:	01800204 	movi	r6,8
    49a4:	01400504 	movi	r5,20
    49a8:	010001c4 	movi	r4,7
    49ac:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 20, SXCoord + 12, SYCoord + 20, 0x59E4);
    49b0:	00967904 	movi	r2,23012
    49b4:	d8800015 	stw	r2,0(sp)
    49b8:	01c00504 	movi	r7,20
    49bc:	01800304 	movi	r6,12
    49c0:	01400504 	movi	r5,20
    49c4:	010002c4 	movi	r4,11
    49c8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 22, SXCoord + 12, SYCoord + 22, 0x59E4);
    49cc:	00967904 	movi	r2,23012
    49d0:	d8800015 	stw	r2,0(sp)
    49d4:	01c00584 	movi	r7,22
    49d8:	01800304 	movi	r6,12
    49dc:	01400584 	movi	r5,22
    49e0:	01000204 	movi	r4,8
    49e4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 22, SXCoord + 23, SYCoord + 22, 0x59E4);
    49e8:	00967904 	movi	r2,23012
    49ec:	d8800015 	stw	r2,0(sp)
    49f0:	01c00584 	movi	r7,22
    49f4:	018005c4 	movi	r6,23
    49f8:	01400584 	movi	r5,22
    49fc:	010004c4 	movi	r4,19
    4a00:	00089f00 	call	89f0 <VGA_box>

  // Render Glasses
  VGA_box(SXCoord, SYCoord + 23, SXCoord + 13, SYCoord + 23, 0x0000);
    4a04:	d8000015 	stw	zero,0(sp)
    4a08:	01c005c4 	movi	r7,23
    4a0c:	01800344 	movi	r6,13
    4a10:	014005c4 	movi	r5,23
    4a14:	0009883a 	mov	r4,zero
    4a18:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 24, SXCoord + 3, SYCoord + 24, 0x0000);
    4a1c:	d8000015 	stw	zero,0(sp)
    4a20:	01c00604 	movi	r7,24
    4a24:	018000c4 	movi	r6,3
    4a28:	01400604 	movi	r5,24
    4a2c:	0009883a 	mov	r4,zero
    4a30:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 25, SXCoord + 3, SYCoord + 25, 0x0000);
    4a34:	d8000015 	stw	zero,0(sp)
    4a38:	01c00644 	movi	r7,25
    4a3c:	018000c4 	movi	r6,3
    4a40:	01400644 	movi	r5,25
    4a44:	01000044 	movi	r4,1
    4a48:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 3, SYCoord + 26, SXCoord + 3, SYCoord + 29, 0x0000);
    4a4c:	d8000015 	stw	zero,0(sp)
    4a50:	01c00744 	movi	r7,29
    4a54:	018000c4 	movi	r6,3
    4a58:	01400684 	movi	r5,26
    4a5c:	010000c4 	movi	r4,3
    4a60:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 30, SXCoord + 12, SYCoord + 30, 0x0000);
    4a64:	d8000015 	stw	zero,0(sp)
    4a68:	01c00784 	movi	r7,30
    4a6c:	01800304 	movi	r6,12
    4a70:	01400784 	movi	r5,30
    4a74:	01000104 	movi	r4,4
    4a78:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 26, SXCoord + 13, SYCoord + 29, 0x0000);
    4a7c:	d8000015 	stw	zero,0(sp)
    4a80:	01c00744 	movi	r7,29
    4a84:	01800344 	movi	r6,13
    4a88:	01400684 	movi	r5,26
    4a8c:	01000344 	movi	r4,13
    4a90:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 24, SXCoord + 17, SYCoord + 25, 0x0000);
    4a94:	d8000015 	stw	zero,0(sp)
    4a98:	01c00644 	movi	r7,25
    4a9c:	01800444 	movi	r6,17
    4aa0:	01400604 	movi	r5,24
    4aa4:	01000384 	movi	r4,14
    4aa8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 23, SXCoord + 31, SYCoord + 23, 0x0000);
    4aac:	d8000015 	stw	zero,0(sp)
    4ab0:	01c005c4 	movi	r7,23
    4ab4:	018007c4 	movi	r6,31
    4ab8:	014005c4 	movi	r5,23
    4abc:	01000484 	movi	r4,18
    4ac0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 24, SXCoord + 31, SYCoord + 24, 0x0000);
    4ac4:	d8000015 	stw	zero,0(sp)
    4ac8:	01c00604 	movi	r7,24
    4acc:	018007c4 	movi	r6,31
    4ad0:	01400604 	movi	r5,24
    4ad4:	01000704 	movi	r4,28
    4ad8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 25, SXCoord + 30, SYCoord + 25, 0x0000);
    4adc:	d8000015 	stw	zero,0(sp)
    4ae0:	01c00644 	movi	r7,25
    4ae4:	01800784 	movi	r6,30
    4ae8:	01400644 	movi	r5,25
    4aec:	01000704 	movi	r4,28
    4af0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 26, SXCoord + 28, SYCoord + 29, 0x0000);
    4af4:	d8000015 	stw	zero,0(sp)
    4af8:	01c00744 	movi	r7,29
    4afc:	01800704 	movi	r6,28
    4b00:	01400684 	movi	r5,26
    4b04:	01000704 	movi	r4,28
    4b08:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 30, SXCoord + 27, SYCoord + 30, 0x0000);
    4b0c:	d8000015 	stw	zero,0(sp)
    4b10:	01c00784 	movi	r7,30
    4b14:	018006c4 	movi	r6,27
    4b18:	01400784 	movi	r5,30
    4b1c:	010004c4 	movi	r4,19
    4b20:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 26, SXCoord + 18, SYCoord + 29, 0x0000);
    4b24:	d8000015 	stw	zero,0(sp)
    4b28:	01c00744 	movi	r7,29
    4b2c:	01800484 	movi	r6,18
    4b30:	01400684 	movi	r5,26
    4b34:	01000484 	movi	r4,18
    4b38:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 25, SXCoord + 11, SYCoord + 27, 0x0000);
    4b3c:	d8000015 	stw	zero,0(sp)
    4b40:	01c006c4 	movi	r7,27
    4b44:	018002c4 	movi	r6,11
    4b48:	01400644 	movi	r5,25
    4b4c:	01000204 	movi	r4,8
    4b50:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 25, SXCoord + 23, SYCoord + 27, 0x0000);
    4b54:	d8000015 	stw	zero,0(sp)
    4b58:	01c006c4 	movi	r7,27
    4b5c:	018005c4 	movi	r6,23
    4b60:	01400644 	movi	r5,25
    4b64:	01000504 	movi	r4,20
    4b68:	00089f00 	call	89f0 <VGA_box>

  // Render Mouth
  VGA_box(SXCoord + 8, SYCoord + 32, SXCoord + 23, SYCoord + 32, 0x0000);
    4b6c:	d8000015 	stw	zero,0(sp)
    4b70:	01c00804 	movi	r7,32
    4b74:	018005c4 	movi	r6,23
    4b78:	01400804 	movi	r5,32
    4b7c:	01000204 	movi	r4,8
    4b80:	00089f00 	call	89f0 <VGA_box>

  // Render Skin
  VGA_box(SXCoord + 6, SYCoord + 17, SXCoord + 25, SYCoord + 17, 0xF6DA);
    4b84:	00bdb684 	movi	r2,-2342
    4b88:	d8800015 	stw	r2,0(sp)
    4b8c:	01c00444 	movi	r7,17
    4b90:	01800644 	movi	r6,25
    4b94:	01400444 	movi	r5,17
    4b98:	01000184 	movi	r4,6
    4b9c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 18, SXCoord + 26, SYCoord + 18, 0xF6DA);
    4ba0:	00bdb684 	movi	r2,-2342
    4ba4:	d8800015 	stw	r2,0(sp)
    4ba8:	01c00484 	movi	r7,18
    4bac:	01800684 	movi	r6,26
    4bb0:	01400484 	movi	r5,18
    4bb4:	01000144 	movi	r4,5
    4bb8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 19, SXCoord + 27, SYCoord + 21, 0xF6DA);
    4bbc:	00bdb684 	movi	r2,-2342
    4bc0:	d8800015 	stw	r2,0(sp)
    4bc4:	01c00544 	movi	r7,21
    4bc8:	018006c4 	movi	r6,27
    4bcc:	014004c4 	movi	r5,19
    4bd0:	01000104 	movi	r4,4
    4bd4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 22, SXCoord + 7, SYCoord + 22, 0xF6DA);
    4bd8:	00bdb684 	movi	r2,-2342
    4bdc:	d8800015 	stw	r2,0(sp)
    4be0:	01c00584 	movi	r7,22
    4be4:	018001c4 	movi	r6,7
    4be8:	01400584 	movi	r5,22
    4bec:	01000104 	movi	r4,4
    4bf0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 22, SXCoord + 18, SYCoord + 22, 0xF6DA);
    4bf4:	00bdb684 	movi	r2,-2342
    4bf8:	d8800015 	stw	r2,0(sp)
    4bfc:	01c00584 	movi	r7,22
    4c00:	01800484 	movi	r6,18
    4c04:	01400584 	movi	r5,22
    4c08:	01000344 	movi	r4,13
    4c0c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 22, SXCoord + 27, SYCoord + 22, 0xF6DA);
    4c10:	00bdb684 	movi	r2,-2342
    4c14:	d8800015 	stw	r2,0(sp)
    4c18:	01c00584 	movi	r7,22
    4c1c:	018006c4 	movi	r6,27
    4c20:	01400584 	movi	r5,22
    4c24:	01000604 	movi	r4,24
    4c28:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 23, SXCoord + 17, SYCoord + 23, 0xF6DA);
    4c2c:	00bdb684 	movi	r2,-2342
    4c30:	d8800015 	stw	r2,0(sp)
    4c34:	01c005c4 	movi	r7,23
    4c38:	01800444 	movi	r6,17
    4c3c:	014005c4 	movi	r5,23
    4c40:	01000384 	movi	r4,14
    4c44:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 24, SXCoord + 13, SYCoord + 24, 0xF6DA);
    4c48:	00bdb684 	movi	r2,-2342
    4c4c:	d8800015 	stw	r2,0(sp)
    4c50:	01c00604 	movi	r7,24
    4c54:	01800344 	movi	r6,13
    4c58:	01400604 	movi	r5,24
    4c5c:	01000104 	movi	r4,4
    4c60:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 25, SXCoord + 7, SYCoord + 27, 0xF6DA);
    4c64:	00bdb684 	movi	r2,-2342
    4c68:	d8800015 	stw	r2,0(sp)
    4c6c:	01c006c4 	movi	r7,27
    4c70:	018001c4 	movi	r6,7
    4c74:	01400644 	movi	r5,25
    4c78:	01000104 	movi	r4,4
    4c7c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 28, SXCoord + 11, SYCoord + 28, 0xF6DA);
    4c80:	00bdb684 	movi	r2,-2342
    4c84:	d8800015 	stw	r2,0(sp)
    4c88:	01c00704 	movi	r7,28
    4c8c:	018002c4 	movi	r6,11
    4c90:	01400704 	movi	r5,28
    4c94:	01000104 	movi	r4,4
    4c98:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 29, SXCoord + 12, SYCoord + 29, 0xF6DA);
    4c9c:	00bdb684 	movi	r2,-2342
    4ca0:	d8800015 	stw	r2,0(sp)
    4ca4:	01c00744 	movi	r7,29
    4ca8:	01800304 	movi	r6,12
    4cac:	01400744 	movi	r5,29
    4cb0:	01000184 	movi	r4,6
    4cb4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 25, SXCoord + 13, SYCoord + 25, 0xF6DA);
    4cb8:	00bdb684 	movi	r2,-2342
    4cbc:	d8800015 	stw	r2,0(sp)
    4cc0:	01c00644 	movi	r7,25
    4cc4:	01800344 	movi	r6,13
    4cc8:	01400644 	movi	r5,25
    4ccc:	01000304 	movi	r4,12
    4cd0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 26, SXCoord + 12, SYCoord + 28, 0xF6DA);
    4cd4:	00bdb684 	movi	r2,-2342
    4cd8:	d8800015 	stw	r2,0(sp)
    4cdc:	01c00704 	movi	r7,28
    4ce0:	01800304 	movi	r6,12
    4ce4:	01400684 	movi	r5,26
    4ce8:	01000304 	movi	r4,12
    4cec:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 24, SXCoord + 27, SYCoord + 24, 0xF6DA);
    4cf0:	00bdb684 	movi	r2,-2342
    4cf4:	d8800015 	stw	r2,0(sp)
    4cf8:	01c00604 	movi	r7,24
    4cfc:	018006c4 	movi	r6,27
    4d00:	01400604 	movi	r5,24
    4d04:	01000484 	movi	r4,18
    4d08:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 25, SXCoord + 19, SYCoord + 25, 0xF6DA);
    4d0c:	00bdb684 	movi	r2,-2342
    4d10:	d8800015 	stw	r2,0(sp)
    4d14:	01c00644 	movi	r7,25
    4d18:	018004c4 	movi	r6,19
    4d1c:	01400644 	movi	r5,25
    4d20:	01000484 	movi	r4,18
    4d24:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 26, SXCoord + 19, SYCoord + 27, 0xF6DA);
    4d28:	00bdb684 	movi	r2,-2342
    4d2c:	d8800015 	stw	r2,0(sp)
    4d30:	01c006c4 	movi	r7,27
    4d34:	018004c4 	movi	r6,19
    4d38:	01400684 	movi	r5,26
    4d3c:	010004c4 	movi	r4,19
    4d40:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 29, SXCoord + 25, SYCoord + 29, 0xF6DA);
    4d44:	00bdb684 	movi	r2,-2342
    4d48:	d8800015 	stw	r2,0(sp)
    4d4c:	01c00744 	movi	r7,29
    4d50:	01800644 	movi	r6,25
    4d54:	01400744 	movi	r5,29
    4d58:	010004c4 	movi	r4,19
    4d5c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 25, SXCoord + 27, SYCoord + 27, 0xF6DA);
    4d60:	00bdb684 	movi	r2,-2342
    4d64:	d8800015 	stw	r2,0(sp)
    4d68:	01c006c4 	movi	r7,27
    4d6c:	018006c4 	movi	r6,27
    4d70:	01400644 	movi	r5,25
    4d74:	01000604 	movi	r4,24
    4d78:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 28, SXCoord + 27, SYCoord + 28, 0xF6DA);
    4d7c:	00bdb684 	movi	r2,-2342
    4d80:	d8800015 	stw	r2,0(sp)
    4d84:	01c00704 	movi	r7,28
    4d88:	018006c4 	movi	r6,27
    4d8c:	01400704 	movi	r5,28
    4d90:	010004c4 	movi	r4,19
    4d94:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 26, SXCoord + 17, SYCoord + 29, 0xF6DA);
    4d98:	00bdb684 	movi	r2,-2342
    4d9c:	d8800015 	stw	r2,0(sp)
    4da0:	01c00744 	movi	r7,29
    4da4:	01800444 	movi	r6,17
    4da8:	01400684 	movi	r5,26
    4dac:	01000384 	movi	r4,14
    4db0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 30, SXCoord + 18, SYCoord + 30, 0xF6DA);
    4db4:	00bdb684 	movi	r2,-2342
    4db8:	d8800015 	stw	r2,0(sp)
    4dbc:	01c00784 	movi	r7,30
    4dc0:	01800484 	movi	r6,18
    4dc4:	01400784 	movi	r5,30
    4dc8:	01000344 	movi	r4,13
    4dcc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 31, SXCoord + 24, SYCoord + 31, 0xF6DA);
    4dd0:	00bdb684 	movi	r2,-2342
    4dd4:	d8800015 	stw	r2,0(sp)
    4dd8:	01c007c4 	movi	r7,31
    4ddc:	01800604 	movi	r6,24
    4de0:	014007c4 	movi	r5,31
    4de4:	010001c4 	movi	r4,7
    4de8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 32, SXCoord + 7, SYCoord + 32, 0xF6DA);
    4dec:	00bdb684 	movi	r2,-2342
    4df0:	d8800015 	stw	r2,0(sp)
    4df4:	01c00804 	movi	r7,32
    4df8:	018001c4 	movi	r6,7
    4dfc:	01400804 	movi	r5,32
    4e00:	010001c4 	movi	r4,7
    4e04:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 32, SXCoord + 24, SYCoord + 32, 0xF6DA);
    4e08:	00bdb684 	movi	r2,-2342
    4e0c:	d8800015 	stw	r2,0(sp)
    4e10:	01c00804 	movi	r7,32
    4e14:	01800604 	movi	r6,24
    4e18:	01400804 	movi	r5,32
    4e1c:	01000604 	movi	r4,24
    4e20:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 33, SXCoord + 24, SYCoord + 33, 0xF6DA);
    4e24:	00bdb684 	movi	r2,-2342
    4e28:	d8800015 	stw	r2,0(sp)
    4e2c:	01c00844 	movi	r7,33
    4e30:	01800604 	movi	r6,24
    4e34:	01400844 	movi	r5,33
    4e38:	010001c4 	movi	r4,7
    4e3c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 34, SXCoord + 23, SYCoord + 36, 0xF6DA);
    4e40:	00bdb684 	movi	r2,-2342
    4e44:	d8800015 	stw	r2,0(sp)
    4e48:	01c00904 	movi	r7,36
    4e4c:	018005c4 	movi	r6,23
    4e50:	01400884 	movi	r5,34
    4e54:	01000204 	movi	r4,8
    4e58:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 37, SXCoord + 25, SYCoord + 37, 0xF6DA);
    4e5c:	00bdb684 	movi	r2,-2342
    4e60:	d8800015 	stw	r2,0(sp)
    4e64:	01c00944 	movi	r7,37
    4e68:	01800644 	movi	r6,25
    4e6c:	01400944 	movi	r5,37
    4e70:	01000184 	movi	r4,6
    4e74:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 38, SXCoord + 24, SYCoord + 38, 0xF6DA);
    4e78:	00bdb684 	movi	r2,-2342
    4e7c:	d8800015 	stw	r2,0(sp)
    4e80:	01c00984 	movi	r7,38
    4e84:	01800604 	movi	r6,24
    4e88:	01400984 	movi	r5,38
    4e8c:	010001c4 	movi	r4,7
    4e90:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 39, SXCoord + 23, SYCoord + 39, 0xF6DA);
    4e94:	00bdb684 	movi	r2,-2342
    4e98:	d8800015 	stw	r2,0(sp)
    4e9c:	01c009c4 	movi	r7,39
    4ea0:	018005c4 	movi	r6,23
    4ea4:	014009c4 	movi	r5,39
    4ea8:	01000204 	movi	r4,8
    4eac:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 40, SXCoord + 21, SYCoord + 40, 0xF6DA);
    4eb0:	00bdb684 	movi	r2,-2342
    4eb4:	d8800015 	stw	r2,0(sp)
    4eb8:	01c00a04 	movi	r7,40
    4ebc:	01800544 	movi	r6,21
    4ec0:	01400a04 	movi	r5,40
    4ec4:	01000284 	movi	r4,10
    4ec8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 41, SXCoord + 17, SYCoord + 44, 0xF6DA);
    4ecc:	00bdb684 	movi	r2,-2342
    4ed0:	d8800015 	stw	r2,0(sp)
    4ed4:	01c00b04 	movi	r7,44
    4ed8:	01800444 	movi	r6,17
    4edc:	01400a44 	movi	r5,41
    4ee0:	01000384 	movi	r4,14
    4ee4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 45, SXCoord + 19, SYCoord + 46, 0xF6DA);
    4ee8:	00bdb684 	movi	r2,-2342
    4eec:	d8800015 	stw	r2,0(sp)
    4ef0:	01c00b84 	movi	r7,46
    4ef4:	018004c4 	movi	r6,19
    4ef8:	01400b44 	movi	r5,45
    4efc:	01000304 	movi	r4,12
    4f00:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 47, SXCoord + 17, SYCoord + 48, 0xF6DA);
    4f04:	00bdb684 	movi	r2,-2342
    4f08:	d8800015 	stw	r2,0(sp)
    4f0c:	01c00c04 	movi	r7,48
    4f10:	01800444 	movi	r6,17
    4f14:	01400bc4 	movi	r5,47
    4f18:	01000384 	movi	r4,14
    4f1c:	00089f00 	call	89f0 <VGA_box>

  // Render Shirt
  VGA_box(SXCoord + 10, SYCoord + 45, SXCoord + 11, SYCoord + 46, 0x2589);
    4f20:	00896244 	movi	r2,9609
    4f24:	d8800015 	stw	r2,0(sp)
    4f28:	01c00b84 	movi	r7,46
    4f2c:	018002c4 	movi	r6,11
    4f30:	01400b44 	movi	r5,45
    4f34:	01000284 	movi	r4,10
    4f38:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 45, SXCoord + 21, SYCoord + 46, 0x2589);
    4f3c:	00896244 	movi	r2,9609
    4f40:	d8800015 	stw	r2,0(sp)
    4f44:	01c00b84 	movi	r7,46
    4f48:	01800544 	movi	r6,21
    4f4c:	01400b44 	movi	r5,45
    4f50:	01000504 	movi	r4,20
    4f54:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 47, SXCoord + 13, SYCoord + 48, 0x2589);
    4f58:	00896244 	movi	r2,9609
    4f5c:	d8800015 	stw	r2,0(sp)
    4f60:	01c00c04 	movi	r7,48
    4f64:	01800344 	movi	r6,13
    4f68:	01400bc4 	movi	r5,47
    4f6c:	01000204 	movi	r4,8
    4f70:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 47, SXCoord + 23, SYCoord + 48, 0x2589);
    4f74:	00896244 	movi	r2,9609
    4f78:	d8800015 	stw	r2,0(sp)
    4f7c:	01c00c04 	movi	r7,48
    4f80:	018005c4 	movi	r6,23
    4f84:	01400bc4 	movi	r5,47
    4f88:	01000484 	movi	r4,18
    4f8c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 49, SXCoord + 21, SYCoord + 50, 0x2589);
    4f90:	00896244 	movi	r2,9609
    4f94:	d8800015 	stw	r2,0(sp)
    4f98:	01c00c84 	movi	r7,50
    4f9c:	01800544 	movi	r6,21
    4fa0:	01400c44 	movi	r5,49
    4fa4:	01000284 	movi	r4,10
    4fa8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 51, SXCoord + 17, SYCoord + 52, 0x2589);
    4fac:	00896244 	movi	r2,9609
    4fb0:	d8800015 	stw	r2,0(sp)
    4fb4:	01c00d04 	movi	r7,52
    4fb8:	01800444 	movi	r6,17
    4fbc:	01400cc4 	movi	r5,51
    4fc0:	01000384 	movi	r4,14
    4fc4:	00089f00 	call	89f0 <VGA_box>
}
    4fc8:	0001883a 	nop
    4fcc:	e037883a 	mov	sp,fp
    4fd0:	dfc00117 	ldw	ra,4(sp)
    4fd4:	df000017 	ldw	fp,0(sp)
    4fd8:	dec00204 	addi	sp,sp,8
    4fdc:	f800283a 	ret

00004fe0 <spencerLosePose2>:


void spencerLosePose2(void)
{
    4fe0:	defffd04 	addi	sp,sp,-12
    4fe4:	dfc00215 	stw	ra,8(sp)
    4fe8:	df000115 	stw	fp,4(sp)
    4fec:	df000104 	addi	fp,sp,4
  // Rendering Start – Spencer Lose Pose (S7.png)

  // Render Red X
  VGA_box(SXCoord, SYCoord + 1, SXCoord, SYCoord + 1, 0xE8E4);
    4ff0:	00ba3904 	movi	r2,-5916
    4ff4:	d8800015 	stw	r2,0(sp)
    4ff8:	01c00044 	movi	r7,1
    4ffc:	000d883a 	mov	r6,zero
    5000:	01400044 	movi	r5,1
    5004:	0009883a 	mov	r4,zero
    5008:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 6, SXCoord, SYCoord + 6, 0xE8E4);
    500c:	00ba3904 	movi	r2,-5916
    5010:	d8800015 	stw	r2,0(sp)
    5014:	01c00184 	movi	r7,6
    5018:	000d883a 	mov	r6,zero
    501c:	01400184 	movi	r5,6
    5020:	0009883a 	mov	r4,zero
    5024:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 2, SXCoord + 1, SYCoord + 2, 0xE8E4);
    5028:	00ba3904 	movi	r2,-5916
    502c:	d8800015 	stw	r2,0(sp)
    5030:	01c00084 	movi	r7,2
    5034:	01800044 	movi	r6,1
    5038:	01400084 	movi	r5,2
    503c:	01000044 	movi	r4,1
    5040:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 5, SXCoord + 1, SYCoord + 5, 0xE8E4);
    5044:	00ba3904 	movi	r2,-5916
    5048:	d8800015 	stw	r2,0(sp)
    504c:	01c00144 	movi	r7,5
    5050:	01800044 	movi	r6,1
    5054:	01400144 	movi	r5,5
    5058:	01000044 	movi	r4,1
    505c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 2, SYCoord + 3, SXCoord + 3, SYCoord + 4, 0xE8E4);
    5060:	00ba3904 	movi	r2,-5916
    5064:	d8800015 	stw	r2,0(sp)
    5068:	01c00104 	movi	r7,4
    506c:	018000c4 	movi	r6,3
    5070:	014000c4 	movi	r5,3
    5074:	01000084 	movi	r4,2
    5078:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 2, SXCoord + 4, SYCoord + 2, 0xE8E4);
    507c:	00ba3904 	movi	r2,-5916
    5080:	d8800015 	stw	r2,0(sp)
    5084:	01c00084 	movi	r7,2
    5088:	01800104 	movi	r6,4
    508c:	01400084 	movi	r5,2
    5090:	01000104 	movi	r4,4
    5094:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 5, SXCoord + 4, SYCoord + 5, 0xE8E4);
    5098:	00ba3904 	movi	r2,-5916
    509c:	d8800015 	stw	r2,0(sp)
    50a0:	01c00144 	movi	r7,5
    50a4:	01800104 	movi	r6,4
    50a8:	01400144 	movi	r5,5
    50ac:	01000104 	movi	r4,4
    50b0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 1, SXCoord + 5, SYCoord + 1, 0xE8E4);
    50b4:	00ba3904 	movi	r2,-5916
    50b8:	d8800015 	stw	r2,0(sp)
    50bc:	01c00044 	movi	r7,1
    50c0:	01800144 	movi	r6,5
    50c4:	01400044 	movi	r5,1
    50c8:	01000144 	movi	r4,5
    50cc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 6, SXCoord + 5, SYCoord + 6, 0XE8E4);
    50d0:	00ba3904 	movi	r2,-5916
    50d4:	d8800015 	stw	r2,0(sp)
    50d8:	01c00184 	movi	r7,6
    50dc:	01800144 	movi	r6,5
    50e0:	01400184 	movi	r5,6
    50e4:	01000144 	movi	r4,5
    50e8:	00089f00 	call	89f0 <VGA_box>

  // Render Hair
  VGA_box(SXCoord, SYCoord + 13, SXCoord + 3, SYCoord + 22, 0x59E4);
    50ec:	00967904 	movi	r2,23012
    50f0:	d8800015 	stw	r2,0(sp)
    50f4:	01c00584 	movi	r7,22
    50f8:	018000c4 	movi	r6,3
    50fc:	01400344 	movi	r5,13
    5100:	0009883a 	mov	r4,zero
    5104:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 25, SXCoord, SYCoord + 25, 0x59E4);
    5108:	00967904 	movi	r2,23012
    510c:	d8800015 	stw	r2,0(sp)
    5110:	01c00644 	movi	r7,25
    5114:	000d883a 	mov	r6,zero
    5118:	01400644 	movi	r5,25
    511c:	0009883a 	mov	r4,zero
    5120:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 26, SXCoord + 2, SYCoord + 28, 0x59E4);
    5124:	00967904 	movi	r2,23012
    5128:	d8800015 	stw	r2,0(sp)
    512c:	01c00704 	movi	r7,28
    5130:	01800084 	movi	r6,2
    5134:	01400684 	movi	r5,26
    5138:	0009883a 	mov	r4,zero
    513c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 29, SXCoord + 5, SYCoord + 29, 0x59E4);
    5140:	00967904 	movi	r2,23012
    5144:	d8800015 	stw	r2,0(sp)
    5148:	01c00744 	movi	r7,29
    514c:	01800144 	movi	r6,5
    5150:	01400744 	movi	r5,29
    5154:	01000104 	movi	r4,4
    5158:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 31, SXCoord + 6, SYCoord + 31, 0X59E4);
    515c:	00967904 	movi	r2,23012
    5160:	d8800015 	stw	r2,0(sp)
    5164:	01c007c4 	movi	r7,31
    5168:	01800184 	movi	r6,6
    516c:	014007c4 	movi	r5,31
    5170:	01000104 	movi	r4,4
    5174:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 32, SXCoord + 5, SYCoord + 32, 0x59E4);
    5178:	00967904 	movi	r2,23012
    517c:	d8800015 	stw	r2,0(sp)
    5180:	01c00804 	movi	r7,32
    5184:	01800144 	movi	r6,5
    5188:	01400804 	movi	r5,32
    518c:	01000104 	movi	r4,4
    5190:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 33, SXCoord + 6, SYCoord + 33, 0x59E4);
    5194:	00967904 	movi	r2,23012
    5198:	d8800015 	stw	r2,0(sp)
    519c:	01c00844 	movi	r7,33
    51a0:	01800184 	movi	r6,6
    51a4:	01400844 	movi	r5,33
    51a8:	01000104 	movi	r4,4
    51ac:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 34, SXCoord + 7, SYCoord + 36, 0x59E4);
    51b0:	00967904 	movi	r2,23012
    51b4:	d8800015 	stw	r2,0(sp)
    51b8:	01c00904 	movi	r7,36
    51bc:	018001c4 	movi	r6,7
    51c0:	01400884 	movi	r5,34
    51c4:	01000104 	movi	r4,4
    51c8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 9, SXCoord + 4, SYCoord + 18, 0x59E4);
    51cc:	00967904 	movi	r2,23012
    51d0:	d8800015 	stw	r2,0(sp)
    51d4:	01c00484 	movi	r7,18
    51d8:	01800104 	movi	r6,4
    51dc:	01400244 	movi	r5,9
    51e0:	01000104 	movi	r4,4
    51e4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 9, SXCoord + 5, SYCoord + 17, 0x59E4);
    51e8:	00967904 	movi	r2,23012
    51ec:	d8800015 	stw	r2,0(sp)
    51f0:	01c00444 	movi	r7,17
    51f4:	01800144 	movi	r6,5
    51f8:	01400244 	movi	r5,9
    51fc:	01000144 	movi	r4,5
    5200:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 9, SXCoord + 25, SYCoord + 16, 0x59E4);
    5204:	00967904 	movi	r2,23012
    5208:	d8800015 	stw	r2,0(sp)
    520c:	01c00404 	movi	r7,16
    5210:	01800644 	movi	r6,25
    5214:	01400244 	movi	r5,9
    5218:	01000184 	movi	r4,6
    521c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 9, SXCoord + 26, SYCoord + 17, 0x59E4);
    5220:	00967904 	movi	r2,23012
    5224:	d8800015 	stw	r2,0(sp)
    5228:	01c00444 	movi	r7,17
    522c:	01800684 	movi	r6,26
    5230:	01400244 	movi	r5,9
    5234:	01000684 	movi	r4,26
    5238:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 27, SYCoord + 9, SXCoord + 27, SYCoord + 18, 0x59E4);
    523c:	00967904 	movi	r2,23012
    5240:	d8800015 	stw	r2,0(sp)
    5244:	01c00484 	movi	r7,18
    5248:	018006c4 	movi	r6,27
    524c:	01400244 	movi	r5,9
    5250:	010006c4 	movi	r4,27
    5254:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 13, SXCoord + 31, SYCoord + 22, 0x59E4);
    5258:	00967904 	movi	r2,23012
    525c:	d8800015 	stw	r2,0(sp)
    5260:	01c00584 	movi	r7,22
    5264:	018007c4 	movi	r6,31
    5268:	01400344 	movi	r5,13
    526c:	01000704 	movi	r4,28
    5270:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 31, SYCoord + 25, SXCoord + 31, SYCoord + 25, 0x59E4);
    5274:	00967904 	movi	r2,23012
    5278:	d8800015 	stw	r2,0(sp)
    527c:	01c00644 	movi	r7,25
    5280:	018007c4 	movi	r6,31
    5284:	01400644 	movi	r5,25
    5288:	010007c4 	movi	r4,31
    528c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 29, SYCoord + 26, SXCoord + 31, SYCoord + 28, 0x59E4);
    5290:	00967904 	movi	r2,23012
    5294:	d8800015 	stw	r2,0(sp)
    5298:	01c00704 	movi	r7,28
    529c:	018007c4 	movi	r6,31
    52a0:	01400684 	movi	r5,26
    52a4:	01000744 	movi	r4,29
    52a8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 29, SXCoord + 27, SYCoord + 29, 0x59E4);
    52ac:	00967904 	movi	r2,23012
    52b0:	d8800015 	stw	r2,0(sp)
    52b4:	01c00744 	movi	r7,29
    52b8:	018006c4 	movi	r6,27
    52bc:	01400744 	movi	r5,29
    52c0:	01000684 	movi	r4,26
    52c4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 31, SXCoord + 27, SYCoord + 31, 0x59E4);
    52c8:	00967904 	movi	r2,23012
    52cc:	d8800015 	stw	r2,0(sp)
    52d0:	01c007c4 	movi	r7,31
    52d4:	018006c4 	movi	r6,27
    52d8:	014007c4 	movi	r5,31
    52dc:	01000644 	movi	r4,25
    52e0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 32, SXCoord + 27, SYCoord + 32, 0x59E4);
    52e4:	00967904 	movi	r2,23012
    52e8:	d8800015 	stw	r2,0(sp)
    52ec:	01c00804 	movi	r7,32
    52f0:	018006c4 	movi	r6,27
    52f4:	01400804 	movi	r5,32
    52f8:	01000684 	movi	r4,26
    52fc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 33, SXCoord + 27, SYCoord + 33, 0x59E4);
    5300:	00967904 	movi	r2,23012
    5304:	d8800015 	stw	r2,0(sp)
    5308:	01c00844 	movi	r7,33
    530c:	018006c4 	movi	r6,27
    5310:	01400844 	movi	r5,33
    5314:	01000644 	movi	r4,25
    5318:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 34, SXCoord + 27, SYCoord + 36, 0x59E4);
    531c:	00967904 	movi	r2,23012
    5320:	d8800015 	stw	r2,0(sp)
    5324:	01c00904 	movi	r7,36
    5328:	018006c4 	movi	r6,27
    532c:	01400884 	movi	r5,34
    5330:	01000604 	movi	r4,24
    5334:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 5, SXCoord + 23, SYCoord + 8, 0x59E4);
    5338:	00967904 	movi	r2,23012
    533c:	d8800015 	stw	r2,0(sp)
    5340:	01c00204 	movi	r7,8
    5344:	018005c4 	movi	r6,23
    5348:	01400144 	movi	r5,5
    534c:	01000304 	movi	r4,12
    5350:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 1, SXCoord + 19, SYCoord + 4, 0x59E4);
    5354:	00967904 	movi	r2,23012
    5358:	d8800015 	stw	r2,0(sp)
    535c:	01c00104 	movi	r7,4
    5360:	018004c4 	movi	r6,19
    5364:	01400044 	movi	r5,1
    5368:	01000304 	movi	r4,12
    536c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord, SXCoord + 16, SYCoord, 0x59E4);
    5370:	00967904 	movi	r2,23012
    5374:	d8800015 	stw	r2,0(sp)
    5378:	000f883a 	mov	r7,zero
    537c:	01800404 	movi	r6,16
    5380:	000b883a 	mov	r5,zero
    5384:	010002c4 	movi	r4,11
    5388:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 1, SXCoord + 11, SYCoord + 1, 0x59E4);
    538c:	00967904 	movi	r2,23012
    5390:	d8800015 	stw	r2,0(sp)
    5394:	01c00044 	movi	r7,1
    5398:	018002c4 	movi	r6,11
    539c:	01400044 	movi	r5,1
    53a0:	01000284 	movi	r4,10
    53a4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 20, SXCoord + 8, SYCoord + 20, 0x59E4);
    53a8:	00967904 	movi	r2,23012
    53ac:	d8800015 	stw	r2,0(sp)
    53b0:	01c00504 	movi	r7,20
    53b4:	01800204 	movi	r6,8
    53b8:	01400504 	movi	r5,20
    53bc:	010001c4 	movi	r4,7
    53c0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 20, SXCoord + 12, SYCoord + 20, 0x59E4);
    53c4:	00967904 	movi	r2,23012
    53c8:	d8800015 	stw	r2,0(sp)
    53cc:	01c00504 	movi	r7,20
    53d0:	01800304 	movi	r6,12
    53d4:	01400504 	movi	r5,20
    53d8:	010002c4 	movi	r4,11
    53dc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 25, SXCoord + 12, SYCoord + 25, 0x59E4);
    53e0:	00967904 	movi	r2,23012
    53e4:	d8800015 	stw	r2,0(sp)
    53e8:	01c00644 	movi	r7,25
    53ec:	01800304 	movi	r6,12
    53f0:	01400644 	movi	r5,25
    53f4:	010001c4 	movi	r4,7
    53f8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 24, SXCoord + 12, SYCoord + 24, 0x59E4);
    53fc:	00967904 	movi	r2,23012
    5400:	d8800015 	stw	r2,0(sp)
    5404:	01c00604 	movi	r7,24
    5408:	01800304 	movi	r6,12
    540c:	01400604 	movi	r5,24
    5410:	01000204 	movi	r4,8
    5414:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 25, SXCoord + 24, SYCoord + 25, 0x59E4);
    5418:	00967904 	movi	r2,23012
    541c:	d8800015 	stw	r2,0(sp)
    5420:	01c00644 	movi	r7,25
    5424:	01800604 	movi	r6,24
    5428:	01400644 	movi	r5,25
    542c:	010004c4 	movi	r4,19
    5430:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 24, SXCoord + 23, SYCoord + 24, 0x59E4);
    5434:	00967904 	movi	r2,23012
    5438:	d8800015 	stw	r2,0(sp)
    543c:	01c00604 	movi	r7,24
    5440:	018005c4 	movi	r6,23
    5444:	01400604 	movi	r5,24
    5448:	010004c4 	movi	r4,19
    544c:	00089f00 	call	89f0 <VGA_box>

  // Render Glasses
  VGA_box(SXCoord, SYCoord + 23, SXCoord + 13, SYCoord + 23, 0x0000);
    5450:	d8000015 	stw	zero,0(sp)
    5454:	01c005c4 	movi	r7,23
    5458:	01800344 	movi	r6,13
    545c:	014005c4 	movi	r5,23
    5460:	0009883a 	mov	r4,zero
    5464:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 24, SXCoord + 3, SYCoord + 24, 0x0000);
    5468:	d8000015 	stw	zero,0(sp)
    546c:	01c00604 	movi	r7,24
    5470:	018000c4 	movi	r6,3
    5474:	01400604 	movi	r5,24
    5478:	0009883a 	mov	r4,zero
    547c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 25, SXCoord + 3, SYCoord + 25, 0x0000);
    5480:	d8000015 	stw	zero,0(sp)
    5484:	01c00644 	movi	r7,25
    5488:	018000c4 	movi	r6,3
    548c:	01400644 	movi	r5,25
    5490:	01000044 	movi	r4,1
    5494:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 3, SYCoord + 26, SXCoord + 3, SYCoord + 29, 0x0000);
    5498:	d8000015 	stw	zero,0(sp)
    549c:	01c00744 	movi	r7,29
    54a0:	018000c4 	movi	r6,3
    54a4:	01400684 	movi	r5,26
    54a8:	010000c4 	movi	r4,3
    54ac:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 30, SXCoord + 12, SYCoord + 30, 0x0000);
    54b0:	d8000015 	stw	zero,0(sp)
    54b4:	01c00784 	movi	r7,30
    54b8:	01800304 	movi	r6,12
    54bc:	01400784 	movi	r5,30
    54c0:	01000104 	movi	r4,4
    54c4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 26, SXCoord + 13, SYCoord + 29, 0x0000);
    54c8:	d8000015 	stw	zero,0(sp)
    54cc:	01c00744 	movi	r7,29
    54d0:	01800344 	movi	r6,13
    54d4:	01400684 	movi	r5,26
    54d8:	01000344 	movi	r4,13
    54dc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 24, SXCoord + 17, SYCoord + 25, 0x0000);
    54e0:	d8000015 	stw	zero,0(sp)
    54e4:	01c00644 	movi	r7,25
    54e8:	01800444 	movi	r6,17
    54ec:	01400604 	movi	r5,24
    54f0:	01000384 	movi	r4,14
    54f4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 23, SXCoord + 31, SYCoord + 23, 0x0000);
    54f8:	d8000015 	stw	zero,0(sp)
    54fc:	01c005c4 	movi	r7,23
    5500:	018007c4 	movi	r6,31
    5504:	014005c4 	movi	r5,23
    5508:	01000484 	movi	r4,18
    550c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 24, SXCoord + 31, SYCoord + 24, 0x0000);
    5510:	d8000015 	stw	zero,0(sp)
    5514:	01c00604 	movi	r7,24
    5518:	018007c4 	movi	r6,31
    551c:	01400604 	movi	r5,24
    5520:	01000704 	movi	r4,28
    5524:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 25, SXCoord + 30, SYCoord + 25, 0x0000);
    5528:	d8000015 	stw	zero,0(sp)
    552c:	01c00644 	movi	r7,25
    5530:	01800784 	movi	r6,30
    5534:	01400644 	movi	r5,25
    5538:	01000704 	movi	r4,28
    553c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 26, SXCoord + 28, SYCoord + 29, 0x0000);
    5540:	d8000015 	stw	zero,0(sp)
    5544:	01c00744 	movi	r7,29
    5548:	01800704 	movi	r6,28
    554c:	01400684 	movi	r5,26
    5550:	01000704 	movi	r4,28
    5554:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 30, SXCoord + 27, SYCoord + 30, 0x0000);
    5558:	d8000015 	stw	zero,0(sp)
    555c:	01c00784 	movi	r7,30
    5560:	018006c4 	movi	r6,27
    5564:	01400784 	movi	r5,30
    5568:	010004c4 	movi	r4,19
    556c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 26, SXCoord + 18, SYCoord + 29, 0x0000);
    5570:	d8000015 	stw	zero,0(sp)
    5574:	01c00744 	movi	r7,29
    5578:	01800484 	movi	r6,18
    557c:	01400684 	movi	r5,26
    5580:	01000484 	movi	r4,18
    5584:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 26, SXCoord + 11, SYCoord + 27, 0x0000);
    5588:	d8000015 	stw	zero,0(sp)
    558c:	01c006c4 	movi	r7,27
    5590:	018002c4 	movi	r6,11
    5594:	01400684 	movi	r5,26
    5598:	01000204 	movi	r4,8
    559c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 26, SXCoord + 23, SYCoord + 27, 0x0000);
    55a0:	d8000015 	stw	zero,0(sp)
    55a4:	01c006c4 	movi	r7,27
    55a8:	018005c4 	movi	r6,23
    55ac:	01400684 	movi	r5,26
    55b0:	01000504 	movi	r4,20
    55b4:	00089f00 	call	89f0 <VGA_box>

  // Render Mouth
  VGA_box(SXCoord + 6, SYCoord + 32, SXCoord + 25, SYCoord + 32, 0x0000);
    55b8:	d8000015 	stw	zero,0(sp)
    55bc:	01c00804 	movi	r7,32
    55c0:	01800644 	movi	r6,25
    55c4:	01400804 	movi	r5,32
    55c8:	01000184 	movi	r4,6
    55cc:	00089f00 	call	89f0 <VGA_box>

  // Render Skin
  VGA_box(SXCoord + 6, SYCoord + 17, SXCoord + 25, SYCoord + 17, 0xF6DA);
    55d0:	00bdb684 	movi	r2,-2342
    55d4:	d8800015 	stw	r2,0(sp)
    55d8:	01c00444 	movi	r7,17
    55dc:	01800644 	movi	r6,25
    55e0:	01400444 	movi	r5,17
    55e4:	01000184 	movi	r4,6
    55e8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 18, SXCoord + 26, SYCoord + 18, 0xF6DA);
    55ec:	00bdb684 	movi	r2,-2342
    55f0:	d8800015 	stw	r2,0(sp)
    55f4:	01c00484 	movi	r7,18
    55f8:	01800684 	movi	r6,26
    55fc:	01400484 	movi	r5,18
    5600:	01000144 	movi	r4,5
    5604:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 19, SXCoord + 27, SYCoord + 22, 0xF6DA);
    5608:	00bdb684 	movi	r2,-2342
    560c:	d8800015 	stw	r2,0(sp)
    5610:	01c00584 	movi	r7,22
    5614:	018006c4 	movi	r6,27
    5618:	014004c4 	movi	r5,19
    561c:	01000104 	movi	r4,4
    5620:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 23, SXCoord + 17, SYCoord + 23, 0xF6DA);
    5624:	00bdb684 	movi	r2,-2342
    5628:	d8800015 	stw	r2,0(sp)
    562c:	01c005c4 	movi	r7,23
    5630:	01800444 	movi	r6,17
    5634:	014005c4 	movi	r5,23
    5638:	01000384 	movi	r4,14
    563c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 24, SXCoord + 7, SYCoord + 24, 0xF6DA);
    5640:	00bdb684 	movi	r2,-2342
    5644:	d8800015 	stw	r2,0(sp)
    5648:	01c00604 	movi	r7,24
    564c:	018001c4 	movi	r6,7
    5650:	01400604 	movi	r5,24
    5654:	01000104 	movi	r4,4
    5658:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 25, SXCoord + 6, SYCoord + 25, 0xF6DA);
    565c:	00bdb684 	movi	r2,-2342
    5660:	d8800015 	stw	r2,0(sp)
    5664:	01c00644 	movi	r7,25
    5668:	01800184 	movi	r6,6
    566c:	01400644 	movi	r5,25
    5670:	01000104 	movi	r4,4
    5674:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 26, SXCoord + 7, SYCoord + 27, 0xF6DA);
    5678:	00bdb684 	movi	r2,-2342
    567c:	d8800015 	stw	r2,0(sp)
    5680:	01c006c4 	movi	r7,27
    5684:	018001c4 	movi	r6,7
    5688:	01400684 	movi	r5,26
    568c:	01000104 	movi	r4,4
    5690:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 28, SXCoord + 12, SYCoord + 28, 0xF6DA);
    5694:	00bdb684 	movi	r2,-2342
    5698:	d8800015 	stw	r2,0(sp)
    569c:	01c00704 	movi	r7,28
    56a0:	01800304 	movi	r6,12
    56a4:	01400704 	movi	r5,28
    56a8:	01000104 	movi	r4,4
    56ac:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 29, SXCoord + 12, SYCoord + 29, 0xF6DA);
    56b0:	00bdb684 	movi	r2,-2342
    56b4:	d8800015 	stw	r2,0(sp)
    56b8:	01c00744 	movi	r7,29
    56bc:	01800304 	movi	r6,12
    56c0:	01400744 	movi	r5,29
    56c4:	01000184 	movi	r4,6
    56c8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 26, SXCoord + 12, SYCoord + 27, 0xF6DA);
    56cc:	00bdb684 	movi	r2,-2342
    56d0:	d8800015 	stw	r2,0(sp)
    56d4:	01c006c4 	movi	r7,27
    56d8:	01800304 	movi	r6,12
    56dc:	01400684 	movi	r5,26
    56e0:	01000304 	movi	r4,12
    56e4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 24, SXCoord + 13, SYCoord + 25, 0xF6DA);
    56e8:	00bdb684 	movi	r2,-2342
    56ec:	d8800015 	stw	r2,0(sp)
    56f0:	01c00644 	movi	r7,25
    56f4:	01800344 	movi	r6,13
    56f8:	01400604 	movi	r5,24
    56fc:	01000344 	movi	r4,13
    5700:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 24, SXCoord + 27, SYCoord + 24, 0xF6DA);
    5704:	00bdb684 	movi	r2,-2342
    5708:	d8800015 	stw	r2,0(sp)
    570c:	01c00604 	movi	r7,24
    5710:	018006c4 	movi	r6,27
    5714:	01400604 	movi	r5,24
    5718:	01000604 	movi	r4,24
    571c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 25, SXCoord + 27, SYCoord + 25, 0xF6DA);
    5720:	00bdb684 	movi	r2,-2342
    5724:	d8800015 	stw	r2,0(sp)
    5728:	01c00644 	movi	r7,25
    572c:	018006c4 	movi	r6,27
    5730:	01400644 	movi	r5,25
    5734:	01000644 	movi	r4,25
    5738:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 26, SXCoord + 27, SYCoord + 27, 0xF6DA);
    573c:	00bdb684 	movi	r2,-2342
    5740:	d8800015 	stw	r2,0(sp)
    5744:	01c006c4 	movi	r7,27
    5748:	018006c4 	movi	r6,27
    574c:	01400684 	movi	r5,26
    5750:	01000604 	movi	r4,24
    5754:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 28, SXCoord + 27, SYCoord + 28, 0xF6DA);
    5758:	00bdb684 	movi	r2,-2342
    575c:	d8800015 	stw	r2,0(sp)
    5760:	01c00704 	movi	r7,28
    5764:	018006c4 	movi	r6,27
    5768:	01400704 	movi	r5,28
    576c:	010004c4 	movi	r4,19
    5770:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 29, SXCoord + 25, SYCoord + 29, 0xF6DA);
    5774:	00bdb684 	movi	r2,-2342
    5778:	d8800015 	stw	r2,0(sp)
    577c:	01c00744 	movi	r7,29
    5780:	01800644 	movi	r6,25
    5784:	01400744 	movi	r5,29
    5788:	010004c4 	movi	r4,19
    578c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 26, SXCoord + 19, SYCoord + 27, 0xF6DA);
    5790:	00bdb684 	movi	r2,-2342
    5794:	d8800015 	stw	r2,0(sp)
    5798:	01c006c4 	movi	r7,27
    579c:	018004c4 	movi	r6,19
    57a0:	01400684 	movi	r5,26
    57a4:	010004c4 	movi	r4,19
    57a8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 24, SXCoord + 18, SYCoord + 25, 0xF6DA);
    57ac:	00bdb684 	movi	r2,-2342
    57b0:	d8800015 	stw	r2,0(sp)
    57b4:	01c00644 	movi	r7,25
    57b8:	01800484 	movi	r6,18
    57bc:	01400604 	movi	r5,24
    57c0:	01000484 	movi	r4,18
    57c4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 26, SXCoord + 17, SYCoord + 29, 0xF6DA);
    57c8:	00bdb684 	movi	r2,-2342
    57cc:	d8800015 	stw	r2,0(sp)
    57d0:	01c00744 	movi	r7,29
    57d4:	01800444 	movi	r6,17
    57d8:	01400684 	movi	r5,26
    57dc:	01000384 	movi	r4,14
    57e0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 30, SXCoord + 18, SYCoord + 30, 0xF6DA);
    57e4:	00bdb684 	movi	r2,-2342
    57e8:	d8800015 	stw	r2,0(sp)
    57ec:	01c00784 	movi	r7,30
    57f0:	01800484 	movi	r6,18
    57f4:	01400784 	movi	r5,30
    57f8:	01000344 	movi	r4,13
    57fc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 31, SXCoord + 24, SYCoord + 31, 0xF6DA);
    5800:	00bdb684 	movi	r2,-2342
    5804:	d8800015 	stw	r2,0(sp)
    5808:	01c007c4 	movi	r7,31
    580c:	01800604 	movi	r6,24
    5810:	014007c4 	movi	r5,31
    5814:	010001c4 	movi	r4,7
    5818:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 33, SXCoord + 24, SYCoord + 33, 0xF6DA);
    581c:	00bdb684 	movi	r2,-2342
    5820:	d8800015 	stw	r2,0(sp)
    5824:	01c00844 	movi	r7,33
    5828:	01800604 	movi	r6,24
    582c:	01400844 	movi	r5,33
    5830:	010001c4 	movi	r4,7
    5834:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 34, SXCoord + 23, SYCoord + 36, 0xF6DA);
    5838:	00bdb684 	movi	r2,-2342
    583c:	d8800015 	stw	r2,0(sp)
    5840:	01c00904 	movi	r7,36
    5844:	018005c4 	movi	r6,23
    5848:	01400884 	movi	r5,34
    584c:	01000204 	movi	r4,8
    5850:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 37, SXCoord + 25, SYCoord + 37, 0xF6DA);
    5854:	00bdb684 	movi	r2,-2342
    5858:	d8800015 	stw	r2,0(sp)
    585c:	01c00944 	movi	r7,37
    5860:	01800644 	movi	r6,25
    5864:	01400944 	movi	r5,37
    5868:	01000184 	movi	r4,6
    586c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 38, SXCoord + 24, SYCoord + 38, 0xF6DA);
    5870:	00bdb684 	movi	r2,-2342
    5874:	d8800015 	stw	r2,0(sp)
    5878:	01c00984 	movi	r7,38
    587c:	01800604 	movi	r6,24
    5880:	01400984 	movi	r5,38
    5884:	010001c4 	movi	r4,7
    5888:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 39, SXCoord + 23, SYCoord + 39, 0xF6DA);
    588c:	00bdb684 	movi	r2,-2342
    5890:	d8800015 	stw	r2,0(sp)
    5894:	01c009c4 	movi	r7,39
    5898:	018005c4 	movi	r6,23
    589c:	014009c4 	movi	r5,39
    58a0:	01000204 	movi	r4,8
    58a4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 40, SXCoord + 21, SYCoord + 40, 0xF6DA);
    58a8:	00bdb684 	movi	r2,-2342
    58ac:	d8800015 	stw	r2,0(sp)
    58b0:	01c00a04 	movi	r7,40
    58b4:	01800544 	movi	r6,21
    58b8:	01400a04 	movi	r5,40
    58bc:	01000284 	movi	r4,10
    58c0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 41, SXCoord + 17, SYCoord + 44, 0xF6DA);
    58c4:	00bdb684 	movi	r2,-2342
    58c8:	d8800015 	stw	r2,0(sp)
    58cc:	01c00b04 	movi	r7,44
    58d0:	01800444 	movi	r6,17
    58d4:	01400a44 	movi	r5,41
    58d8:	01000384 	movi	r4,14
    58dc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 45, SXCoord + 19, SYCoord + 46, 0xF6DA);
    58e0:	00bdb684 	movi	r2,-2342
    58e4:	d8800015 	stw	r2,0(sp)
    58e8:	01c00b84 	movi	r7,46
    58ec:	018004c4 	movi	r6,19
    58f0:	01400b44 	movi	r5,45
    58f4:	01000304 	movi	r4,12
    58f8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 47, SXCoord + 17, SYCoord + 48, 0xF6DA);
    58fc:	00bdb684 	movi	r2,-2342
    5900:	d8800015 	stw	r2,0(sp)
    5904:	01c00c04 	movi	r7,48
    5908:	01800444 	movi	r6,17
    590c:	01400bc4 	movi	r5,47
    5910:	01000384 	movi	r4,14
    5914:	00089f00 	call	89f0 <VGA_box>

  // Render Shirt
  VGA_box(SXCoord + 10, SYCoord + 45, SXCoord + 11, SYCoord + 46, 0x2589);
    5918:	00896244 	movi	r2,9609
    591c:	d8800015 	stw	r2,0(sp)
    5920:	01c00b84 	movi	r7,46
    5924:	018002c4 	movi	r6,11
    5928:	01400b44 	movi	r5,45
    592c:	01000284 	movi	r4,10
    5930:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 45, SXCoord + 21, SYCoord + 46, 0x2589);
    5934:	00896244 	movi	r2,9609
    5938:	d8800015 	stw	r2,0(sp)
    593c:	01c00b84 	movi	r7,46
    5940:	01800544 	movi	r6,21
    5944:	01400b44 	movi	r5,45
    5948:	01000504 	movi	r4,20
    594c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 47, SXCoord + 13, SYCoord + 48, 0x2589);
    5950:	00896244 	movi	r2,9609
    5954:	d8800015 	stw	r2,0(sp)
    5958:	01c00c04 	movi	r7,48
    595c:	01800344 	movi	r6,13
    5960:	01400bc4 	movi	r5,47
    5964:	01000204 	movi	r4,8
    5968:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 47, SXCoord + 23, SYCoord + 48, 0x2589);
    596c:	00896244 	movi	r2,9609
    5970:	d8800015 	stw	r2,0(sp)
    5974:	01c00c04 	movi	r7,48
    5978:	018005c4 	movi	r6,23
    597c:	01400bc4 	movi	r5,47
    5980:	01000484 	movi	r4,18
    5984:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 49, SXCoord + 21, SYCoord + 50, 0x2589);
    5988:	00896244 	movi	r2,9609
    598c:	d8800015 	stw	r2,0(sp)
    5990:	01c00c84 	movi	r7,50
    5994:	01800544 	movi	r6,21
    5998:	01400c44 	movi	r5,49
    599c:	01000284 	movi	r4,10
    59a0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 51, SXCoord + 17, SYCoord + 52, 0x2589);
    59a4:	00896244 	movi	r2,9609
    59a8:	d8800015 	stw	r2,0(sp)
    59ac:	01c00d04 	movi	r7,52
    59b0:	01800444 	movi	r6,17
    59b4:	01400cc4 	movi	r5,51
    59b8:	01000384 	movi	r4,14
    59bc:	00089f00 	call	89f0 <VGA_box>
}
    59c0:	0001883a 	nop
    59c4:	e037883a 	mov	sp,fp
    59c8:	dfc00117 	ldw	ra,4(sp)
    59cc:	df000017 	ldw	fp,0(sp)
    59d0:	dec00204 	addi	sp,sp,8
    59d4:	f800283a 	ret

000059d8 <spencerLosePose3>:


void spencerLosePose3(void)
{
    59d8:	defffd04 	addi	sp,sp,-12
    59dc:	dfc00215 	stw	ra,8(sp)
    59e0:	df000115 	stw	fp,4(sp)
    59e4:	df000104 	addi	fp,sp,4
  // Rendering Start – Spencer Lose Pose (S8.png)

  // Render Red X
  VGA_box(SXCoord, SYCoord + 1, SXCoord, SYCoord + 1, 0xE8E4);
    59e8:	00ba3904 	movi	r2,-5916
    59ec:	d8800015 	stw	r2,0(sp)
    59f0:	01c00044 	movi	r7,1
    59f4:	000d883a 	mov	r6,zero
    59f8:	01400044 	movi	r5,1
    59fc:	0009883a 	mov	r4,zero
    5a00:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 6, SXCoord, SYCoord + 6, 0xE8E4);
    5a04:	00ba3904 	movi	r2,-5916
    5a08:	d8800015 	stw	r2,0(sp)
    5a0c:	01c00184 	movi	r7,6
    5a10:	000d883a 	mov	r6,zero
    5a14:	01400184 	movi	r5,6
    5a18:	0009883a 	mov	r4,zero
    5a1c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 2, SXCoord + 1, SYCoord + 2, 0xE8E4);
    5a20:	00ba3904 	movi	r2,-5916
    5a24:	d8800015 	stw	r2,0(sp)
    5a28:	01c00084 	movi	r7,2
    5a2c:	01800044 	movi	r6,1
    5a30:	01400084 	movi	r5,2
    5a34:	01000044 	movi	r4,1
    5a38:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 5, SXCoord + 1, SYCoord + 5, 0xE8E4);
    5a3c:	00ba3904 	movi	r2,-5916
    5a40:	d8800015 	stw	r2,0(sp)
    5a44:	01c00144 	movi	r7,5
    5a48:	01800044 	movi	r6,1
    5a4c:	01400144 	movi	r5,5
    5a50:	01000044 	movi	r4,1
    5a54:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 2, SYCoord + 3, SXCoord + 3, SYCoord + 4, 0xE8E4);
    5a58:	00ba3904 	movi	r2,-5916
    5a5c:	d8800015 	stw	r2,0(sp)
    5a60:	01c00104 	movi	r7,4
    5a64:	018000c4 	movi	r6,3
    5a68:	014000c4 	movi	r5,3
    5a6c:	01000084 	movi	r4,2
    5a70:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 2, SXCoord + 4, SYCoord + 2, 0xE8E4);
    5a74:	00ba3904 	movi	r2,-5916
    5a78:	d8800015 	stw	r2,0(sp)
    5a7c:	01c00084 	movi	r7,2
    5a80:	01800104 	movi	r6,4
    5a84:	01400084 	movi	r5,2
    5a88:	01000104 	movi	r4,4
    5a8c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 5, SXCoord + 4, SYCoord + 5, 0xE8E4);
    5a90:	00ba3904 	movi	r2,-5916
    5a94:	d8800015 	stw	r2,0(sp)
    5a98:	01c00144 	movi	r7,5
    5a9c:	01800104 	movi	r6,4
    5aa0:	01400144 	movi	r5,5
    5aa4:	01000104 	movi	r4,4
    5aa8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 1, SXCoord + 5, SYCoord + 1, 0xE8E4);
    5aac:	00ba3904 	movi	r2,-5916
    5ab0:	d8800015 	stw	r2,0(sp)
    5ab4:	01c00044 	movi	r7,1
    5ab8:	01800144 	movi	r6,5
    5abc:	01400044 	movi	r5,1
    5ac0:	01000144 	movi	r4,5
    5ac4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 6, SXCoord + 5, SYCoord + 6, 0XE8E4);
    5ac8:	00ba3904 	movi	r2,-5916
    5acc:	d8800015 	stw	r2,0(sp)
    5ad0:	01c00184 	movi	r7,6
    5ad4:	01800144 	movi	r6,5
    5ad8:	01400184 	movi	r5,6
    5adc:	01000144 	movi	r4,5
    5ae0:	00089f00 	call	89f0 <VGA_box>

  // Render Hair
  VGA_box(SXCoord, SYCoord + 14, SXCoord + 3, SYCoord + 23, 0x59E4);
    5ae4:	00967904 	movi	r2,23012
    5ae8:	d8800015 	stw	r2,0(sp)
    5aec:	01c005c4 	movi	r7,23
    5af0:	018000c4 	movi	r6,3
    5af4:	01400384 	movi	r5,14
    5af8:	0009883a 	mov	r4,zero
    5afc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 26, SXCoord, SYCoord + 26, 0x59E4);
    5b00:	00967904 	movi	r2,23012
    5b04:	d8800015 	stw	r2,0(sp)
    5b08:	01c00684 	movi	r7,26
    5b0c:	000d883a 	mov	r6,zero
    5b10:	01400684 	movi	r5,26
    5b14:	0009883a 	mov	r4,zero
    5b18:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 27, SXCoord + 2, SYCoord + 29, 0x59E4);
    5b1c:	00967904 	movi	r2,23012
    5b20:	d8800015 	stw	r2,0(sp)
    5b24:	01c00744 	movi	r7,29
    5b28:	01800084 	movi	r6,2
    5b2c:	014006c4 	movi	r5,27
    5b30:	0009883a 	mov	r4,zero
    5b34:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 30, SXCoord + 5, SYCoord + 30, 0x59E4);
    5b38:	00967904 	movi	r2,23012
    5b3c:	d8800015 	stw	r2,0(sp)
    5b40:	01c00784 	movi	r7,30
    5b44:	01800144 	movi	r6,5
    5b48:	01400784 	movi	r5,30
    5b4c:	01000104 	movi	r4,4
    5b50:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 32, SXCoord + 6, SYCoord + 32, 0X59E4);
    5b54:	00967904 	movi	r2,23012
    5b58:	d8800015 	stw	r2,0(sp)
    5b5c:	01c00804 	movi	r7,32
    5b60:	01800184 	movi	r6,6
    5b64:	01400804 	movi	r5,32
    5b68:	01000104 	movi	r4,4
    5b6c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 33, SXCoord + 5, SYCoord + 33, 0x59E4);
    5b70:	00967904 	movi	r2,23012
    5b74:	d8800015 	stw	r2,0(sp)
    5b78:	01c00844 	movi	r7,33
    5b7c:	01800144 	movi	r6,5
    5b80:	01400844 	movi	r5,33
    5b84:	01000104 	movi	r4,4
    5b88:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 34, SXCoord + 6, SYCoord + 34, 0x59E4);
    5b8c:	00967904 	movi	r2,23012
    5b90:	d8800015 	stw	r2,0(sp)
    5b94:	01c00884 	movi	r7,34
    5b98:	01800184 	movi	r6,6
    5b9c:	01400884 	movi	r5,34
    5ba0:	01000104 	movi	r4,4
    5ba4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 35, SXCoord + 7, SYCoord + 37, 0x59E4);
    5ba8:	00967904 	movi	r2,23012
    5bac:	d8800015 	stw	r2,0(sp)
    5bb0:	01c00944 	movi	r7,37
    5bb4:	018001c4 	movi	r6,7
    5bb8:	014008c4 	movi	r5,35
    5bbc:	01000104 	movi	r4,4
    5bc0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 10, SXCoord + 4, SYCoord + 19, 0x59E4);
    5bc4:	00967904 	movi	r2,23012
    5bc8:	d8800015 	stw	r2,0(sp)
    5bcc:	01c004c4 	movi	r7,19
    5bd0:	01800104 	movi	r6,4
    5bd4:	01400284 	movi	r5,10
    5bd8:	01000104 	movi	r4,4
    5bdc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 10, SXCoord + 5, SYCoord + 18, 0x59E4);
    5be0:	00967904 	movi	r2,23012
    5be4:	d8800015 	stw	r2,0(sp)
    5be8:	01c00484 	movi	r7,18
    5bec:	01800144 	movi	r6,5
    5bf0:	01400284 	movi	r5,10
    5bf4:	01000144 	movi	r4,5
    5bf8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 10, SXCoord + 25, SYCoord + 17, 0x59E4);
    5bfc:	00967904 	movi	r2,23012
    5c00:	d8800015 	stw	r2,0(sp)
    5c04:	01c00444 	movi	r7,17
    5c08:	01800644 	movi	r6,25
    5c0c:	01400284 	movi	r5,10
    5c10:	01000184 	movi	r4,6
    5c14:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 10, SXCoord + 26, SYCoord + 18, 0x59E4);
    5c18:	00967904 	movi	r2,23012
    5c1c:	d8800015 	stw	r2,0(sp)
    5c20:	01c00484 	movi	r7,18
    5c24:	01800684 	movi	r6,26
    5c28:	01400284 	movi	r5,10
    5c2c:	01000684 	movi	r4,26
    5c30:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 27, SYCoord + 10, SXCoord + 27, SYCoord + 19, 0x59E4);
    5c34:	00967904 	movi	r2,23012
    5c38:	d8800015 	stw	r2,0(sp)
    5c3c:	01c004c4 	movi	r7,19
    5c40:	018006c4 	movi	r6,27
    5c44:	01400284 	movi	r5,10
    5c48:	010006c4 	movi	r4,27
    5c4c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 14, SXCoord + 31, SYCoord + 23, 0x59E4);
    5c50:	00967904 	movi	r2,23012
    5c54:	d8800015 	stw	r2,0(sp)
    5c58:	01c005c4 	movi	r7,23
    5c5c:	018007c4 	movi	r6,31
    5c60:	01400384 	movi	r5,14
    5c64:	01000704 	movi	r4,28
    5c68:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 31, SYCoord + 26, SXCoord + 31, SYCoord + 26, 0x59E4);
    5c6c:	00967904 	movi	r2,23012
    5c70:	d8800015 	stw	r2,0(sp)
    5c74:	01c00684 	movi	r7,26
    5c78:	018007c4 	movi	r6,31
    5c7c:	01400684 	movi	r5,26
    5c80:	010007c4 	movi	r4,31
    5c84:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 29, SYCoord + 27, SXCoord + 31, SYCoord + 29, 0x59E4);
    5c88:	00967904 	movi	r2,23012
    5c8c:	d8800015 	stw	r2,0(sp)
    5c90:	01c00744 	movi	r7,29
    5c94:	018007c4 	movi	r6,31
    5c98:	014006c4 	movi	r5,27
    5c9c:	01000744 	movi	r4,29
    5ca0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 30, SXCoord + 27, SYCoord + 30, 0x59E4);
    5ca4:	00967904 	movi	r2,23012
    5ca8:	d8800015 	stw	r2,0(sp)
    5cac:	01c00784 	movi	r7,30
    5cb0:	018006c4 	movi	r6,27
    5cb4:	01400784 	movi	r5,30
    5cb8:	01000684 	movi	r4,26
    5cbc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 32, SXCoord + 27, SYCoord + 32, 0x59E4);
    5cc0:	00967904 	movi	r2,23012
    5cc4:	d8800015 	stw	r2,0(sp)
    5cc8:	01c00804 	movi	r7,32
    5ccc:	018006c4 	movi	r6,27
    5cd0:	01400804 	movi	r5,32
    5cd4:	01000644 	movi	r4,25
    5cd8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 33, SXCoord + 27, SYCoord + 33, 0x59E4);
    5cdc:	00967904 	movi	r2,23012
    5ce0:	d8800015 	stw	r2,0(sp)
    5ce4:	01c00844 	movi	r7,33
    5ce8:	018006c4 	movi	r6,27
    5cec:	01400844 	movi	r5,33
    5cf0:	01000684 	movi	r4,26
    5cf4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 34, SXCoord + 27, SYCoord + 34, 0x59E4);
    5cf8:	00967904 	movi	r2,23012
    5cfc:	d8800015 	stw	r2,0(sp)
    5d00:	01c00884 	movi	r7,34
    5d04:	018006c4 	movi	r6,27
    5d08:	01400884 	movi	r5,34
    5d0c:	01000644 	movi	r4,25
    5d10:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 35, SXCoord + 27, SYCoord + 37, 0x59E4);
    5d14:	00967904 	movi	r2,23012
    5d18:	d8800015 	stw	r2,0(sp)
    5d1c:	01c00944 	movi	r7,37
    5d20:	018006c4 	movi	r6,27
    5d24:	014008c4 	movi	r5,35
    5d28:	01000604 	movi	r4,24
    5d2c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 6, SXCoord + 23, SYCoord + 9, 0x59E4);
    5d30:	00967904 	movi	r2,23012
    5d34:	d8800015 	stw	r2,0(sp)
    5d38:	01c00244 	movi	r7,9
    5d3c:	018005c4 	movi	r6,23
    5d40:	01400184 	movi	r5,6
    5d44:	01000304 	movi	r4,12
    5d48:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 2, SXCoord + 19, SYCoord + 5, 0x59E4);
    5d4c:	00967904 	movi	r2,23012
    5d50:	d8800015 	stw	r2,0(sp)
    5d54:	01c00144 	movi	r7,5
    5d58:	018004c4 	movi	r6,19
    5d5c:	01400084 	movi	r5,2
    5d60:	01000304 	movi	r4,12
    5d64:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 1, SXCoord + 16, SYCoord + 1, 0x59E4);
    5d68:	00967904 	movi	r2,23012
    5d6c:	d8800015 	stw	r2,0(sp)
    5d70:	01c00044 	movi	r7,1
    5d74:	01800404 	movi	r6,16
    5d78:	01400044 	movi	r5,1
    5d7c:	010002c4 	movi	r4,11
    5d80:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 2, SXCoord + 11, SYCoord + 2, 0x59E4);
    5d84:	00967904 	movi	r2,23012
    5d88:	d8800015 	stw	r2,0(sp)
    5d8c:	01c00084 	movi	r7,2
    5d90:	018002c4 	movi	r6,11
    5d94:	01400084 	movi	r5,2
    5d98:	01000284 	movi	r4,10
    5d9c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 21, SXCoord + 8, SYCoord + 21, 0x59E4);
    5da0:	00967904 	movi	r2,23012
    5da4:	d8800015 	stw	r2,0(sp)
    5da8:	01c00544 	movi	r7,21
    5dac:	01800204 	movi	r6,8
    5db0:	01400544 	movi	r5,21
    5db4:	010001c4 	movi	r4,7
    5db8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 21, SXCoord + 12, SYCoord + 21, 0x59E4);
    5dbc:	00967904 	movi	r2,23012
    5dc0:	d8800015 	stw	r2,0(sp)
    5dc4:	01c00544 	movi	r7,21
    5dc8:	01800304 	movi	r6,12
    5dcc:	01400544 	movi	r5,21
    5dd0:	010002c4 	movi	r4,11
    5dd4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 26, SXCoord + 12, SYCoord + 26, 0x59E4);
    5dd8:	00967904 	movi	r2,23012
    5ddc:	d8800015 	stw	r2,0(sp)
    5de0:	01c00684 	movi	r7,26
    5de4:	01800304 	movi	r6,12
    5de8:	01400684 	movi	r5,26
    5dec:	010001c4 	movi	r4,7
    5df0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 25, SXCoord + 12, SYCoord + 25, 0x59E4);
    5df4:	00967904 	movi	r2,23012
    5df8:	d8800015 	stw	r2,0(sp)
    5dfc:	01c00644 	movi	r7,25
    5e00:	01800304 	movi	r6,12
    5e04:	01400644 	movi	r5,25
    5e08:	01000204 	movi	r4,8
    5e0c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 26, SXCoord + 24, SYCoord + 26, 0x59E4);
    5e10:	00967904 	movi	r2,23012
    5e14:	d8800015 	stw	r2,0(sp)
    5e18:	01c00684 	movi	r7,26
    5e1c:	01800604 	movi	r6,24
    5e20:	01400684 	movi	r5,26
    5e24:	010004c4 	movi	r4,19
    5e28:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 25, SXCoord + 23, SYCoord + 25, 0x59E4);
    5e2c:	00967904 	movi	r2,23012
    5e30:	d8800015 	stw	r2,0(sp)
    5e34:	01c00644 	movi	r7,25
    5e38:	018005c4 	movi	r6,23
    5e3c:	01400644 	movi	r5,25
    5e40:	010004c4 	movi	r4,19
    5e44:	00089f00 	call	89f0 <VGA_box>

  // Render Glasses
  VGA_box(SXCoord, SYCoord + 24, SXCoord + 13, SYCoord + 24, 0x0000);
    5e48:	d8000015 	stw	zero,0(sp)
    5e4c:	01c00604 	movi	r7,24
    5e50:	01800344 	movi	r6,13
    5e54:	01400604 	movi	r5,24
    5e58:	0009883a 	mov	r4,zero
    5e5c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 25, SXCoord + 3, SYCoord + 25, 0x0000);
    5e60:	d8000015 	stw	zero,0(sp)
    5e64:	01c00644 	movi	r7,25
    5e68:	018000c4 	movi	r6,3
    5e6c:	01400644 	movi	r5,25
    5e70:	0009883a 	mov	r4,zero
    5e74:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 26, SXCoord + 3, SYCoord + 26, 0x0000);
    5e78:	d8000015 	stw	zero,0(sp)
    5e7c:	01c00684 	movi	r7,26
    5e80:	018000c4 	movi	r6,3
    5e84:	01400684 	movi	r5,26
    5e88:	01000044 	movi	r4,1
    5e8c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 3, SYCoord + 27, SXCoord + 3, SYCoord + 30, 0x0000);
    5e90:	d8000015 	stw	zero,0(sp)
    5e94:	01c00784 	movi	r7,30
    5e98:	018000c4 	movi	r6,3
    5e9c:	014006c4 	movi	r5,27
    5ea0:	010000c4 	movi	r4,3
    5ea4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 31, SXCoord + 12, SYCoord + 31, 0x0000);
    5ea8:	d8000015 	stw	zero,0(sp)
    5eac:	01c007c4 	movi	r7,31
    5eb0:	01800304 	movi	r6,12
    5eb4:	014007c4 	movi	r5,31
    5eb8:	01000104 	movi	r4,4
    5ebc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 27, SXCoord + 13, SYCoord + 30, 0x0000);
    5ec0:	d8000015 	stw	zero,0(sp)
    5ec4:	01c00784 	movi	r7,30
    5ec8:	01800344 	movi	r6,13
    5ecc:	014006c4 	movi	r5,27
    5ed0:	01000344 	movi	r4,13
    5ed4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 25, SXCoord + 17, SYCoord + 26, 0x0000);
    5ed8:	d8000015 	stw	zero,0(sp)
    5edc:	01c00684 	movi	r7,26
    5ee0:	01800444 	movi	r6,17
    5ee4:	01400644 	movi	r5,25
    5ee8:	01000384 	movi	r4,14
    5eec:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 24, SXCoord + 31, SYCoord + 24, 0x0000);
    5ef0:	d8000015 	stw	zero,0(sp)
    5ef4:	01c00604 	movi	r7,24
    5ef8:	018007c4 	movi	r6,31
    5efc:	01400604 	movi	r5,24
    5f00:	01000484 	movi	r4,18
    5f04:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 25, SXCoord + 31, SYCoord + 25, 0x0000);
    5f08:	d8000015 	stw	zero,0(sp)
    5f0c:	01c00644 	movi	r7,25
    5f10:	018007c4 	movi	r6,31
    5f14:	01400644 	movi	r5,25
    5f18:	01000704 	movi	r4,28
    5f1c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 26, SXCoord + 30, SYCoord + 26, 0x0000);
    5f20:	d8000015 	stw	zero,0(sp)
    5f24:	01c00684 	movi	r7,26
    5f28:	01800784 	movi	r6,30
    5f2c:	01400684 	movi	r5,26
    5f30:	01000704 	movi	r4,28
    5f34:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 27, SXCoord + 28, SYCoord + 30, 0x0000);
    5f38:	d8000015 	stw	zero,0(sp)
    5f3c:	01c00784 	movi	r7,30
    5f40:	01800704 	movi	r6,28
    5f44:	014006c4 	movi	r5,27
    5f48:	01000704 	movi	r4,28
    5f4c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 31, SXCoord + 27, SYCoord + 31, 0x0000);
    5f50:	d8000015 	stw	zero,0(sp)
    5f54:	01c007c4 	movi	r7,31
    5f58:	018006c4 	movi	r6,27
    5f5c:	014007c4 	movi	r5,31
    5f60:	010004c4 	movi	r4,19
    5f64:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 27, SXCoord + 18, SYCoord + 30, 0x0000);
    5f68:	d8000015 	stw	zero,0(sp)
    5f6c:	01c00784 	movi	r7,30
    5f70:	01800484 	movi	r6,18
    5f74:	014006c4 	movi	r5,27
    5f78:	01000484 	movi	r4,18
    5f7c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 27, SXCoord + 11, SYCoord + 28, 0x0000);
    5f80:	d8000015 	stw	zero,0(sp)
    5f84:	01c00704 	movi	r7,28
    5f88:	018002c4 	movi	r6,11
    5f8c:	014006c4 	movi	r5,27
    5f90:	01000204 	movi	r4,8
    5f94:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 27, SXCoord + 23, SYCoord + 28, 0x0000);
    5f98:	d8000015 	stw	zero,0(sp)
    5f9c:	01c00704 	movi	r7,28
    5fa0:	018005c4 	movi	r6,23
    5fa4:	014006c4 	movi	r5,27
    5fa8:	01000504 	movi	r4,20
    5fac:	00089f00 	call	89f0 <VGA_box>

  // Render Mouth
  VGA_box(SXCoord + 6, SYCoord + 33, SXCoord + 25, SYCoord + 33, 0x0000);
    5fb0:	d8000015 	stw	zero,0(sp)
    5fb4:	01c00844 	movi	r7,33
    5fb8:	01800644 	movi	r6,25
    5fbc:	01400844 	movi	r5,33
    5fc0:	01000184 	movi	r4,6
    5fc4:	00089f00 	call	89f0 <VGA_box>

  // Render Skin
  VGA_box(SXCoord + 6, SYCoord + 18, SXCoord + 25, SYCoord + 18, 0xF6DA);
    5fc8:	00bdb684 	movi	r2,-2342
    5fcc:	d8800015 	stw	r2,0(sp)
    5fd0:	01c00484 	movi	r7,18
    5fd4:	01800644 	movi	r6,25
    5fd8:	01400484 	movi	r5,18
    5fdc:	01000184 	movi	r4,6
    5fe0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 19, SXCoord + 26, SYCoord + 19, 0xF6DA);
    5fe4:	00bdb684 	movi	r2,-2342
    5fe8:	d8800015 	stw	r2,0(sp)
    5fec:	01c004c4 	movi	r7,19
    5ff0:	01800684 	movi	r6,26
    5ff4:	014004c4 	movi	r5,19
    5ff8:	01000144 	movi	r4,5
    5ffc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 20, SXCoord + 27, SYCoord + 23, 0xF6DA);
    6000:	00bdb684 	movi	r2,-2342
    6004:	d8800015 	stw	r2,0(sp)
    6008:	01c005c4 	movi	r7,23
    600c:	018006c4 	movi	r6,27
    6010:	01400504 	movi	r5,20
    6014:	01000104 	movi	r4,4
    6018:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 24, SXCoord + 17, SYCoord + 24, 0xF6DA);
    601c:	00bdb684 	movi	r2,-2342
    6020:	d8800015 	stw	r2,0(sp)
    6024:	01c00604 	movi	r7,24
    6028:	01800444 	movi	r6,17
    602c:	01400604 	movi	r5,24
    6030:	01000384 	movi	r4,14
    6034:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 25, SXCoord + 7, SYCoord + 25, 0xF6DA);
    6038:	00bdb684 	movi	r2,-2342
    603c:	d8800015 	stw	r2,0(sp)
    6040:	01c00644 	movi	r7,25
    6044:	018001c4 	movi	r6,7
    6048:	01400644 	movi	r5,25
    604c:	01000104 	movi	r4,4
    6050:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 26, SXCoord + 6, SYCoord + 26, 0xF6DA);
    6054:	00bdb684 	movi	r2,-2342
    6058:	d8800015 	stw	r2,0(sp)
    605c:	01c00684 	movi	r7,26
    6060:	01800184 	movi	r6,6
    6064:	01400684 	movi	r5,26
    6068:	01000104 	movi	r4,4
    606c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 27, SXCoord + 7, SYCoord + 28, 0xF6DA);
    6070:	00bdb684 	movi	r2,-2342
    6074:	d8800015 	stw	r2,0(sp)
    6078:	01c00704 	movi	r7,28
    607c:	018001c4 	movi	r6,7
    6080:	014006c4 	movi	r5,27
    6084:	01000104 	movi	r4,4
    6088:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 29, SXCoord + 12, SYCoord + 29, 0xF6DA);
    608c:	00bdb684 	movi	r2,-2342
    6090:	d8800015 	stw	r2,0(sp)
    6094:	01c00744 	movi	r7,29
    6098:	01800304 	movi	r6,12
    609c:	01400744 	movi	r5,29
    60a0:	01000104 	movi	r4,4
    60a4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 30, SXCoord + 12, SYCoord + 30, 0xF6DA);
    60a8:	00bdb684 	movi	r2,-2342
    60ac:	d8800015 	stw	r2,0(sp)
    60b0:	01c00784 	movi	r7,30
    60b4:	01800304 	movi	r6,12
    60b8:	01400784 	movi	r5,30
    60bc:	01000184 	movi	r4,6
    60c0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 27, SXCoord + 12, SYCoord + 28, 0xF6DA);
    60c4:	00bdb684 	movi	r2,-2342
    60c8:	d8800015 	stw	r2,0(sp)
    60cc:	01c00704 	movi	r7,28
    60d0:	01800304 	movi	r6,12
    60d4:	014006c4 	movi	r5,27
    60d8:	01000304 	movi	r4,12
    60dc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 25, SXCoord + 13, SYCoord + 26, 0xF6DA);
    60e0:	00bdb684 	movi	r2,-2342
    60e4:	d8800015 	stw	r2,0(sp)
    60e8:	01c00684 	movi	r7,26
    60ec:	01800344 	movi	r6,13
    60f0:	01400644 	movi	r5,25
    60f4:	01000344 	movi	r4,13
    60f8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 25, SXCoord + 27, SYCoord + 25, 0xF6DA);
    60fc:	00bdb684 	movi	r2,-2342
    6100:	d8800015 	stw	r2,0(sp)
    6104:	01c00644 	movi	r7,25
    6108:	018006c4 	movi	r6,27
    610c:	01400644 	movi	r5,25
    6110:	01000604 	movi	r4,24
    6114:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 26, SXCoord + 27, SYCoord + 26, 0xF6DA);
    6118:	00bdb684 	movi	r2,-2342
    611c:	d8800015 	stw	r2,0(sp)
    6120:	01c00684 	movi	r7,26
    6124:	018006c4 	movi	r6,27
    6128:	01400684 	movi	r5,26
    612c:	01000644 	movi	r4,25
    6130:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 27, SXCoord + 27, SYCoord + 28, 0xF6DA);
    6134:	00bdb684 	movi	r2,-2342
    6138:	d8800015 	stw	r2,0(sp)
    613c:	01c00704 	movi	r7,28
    6140:	018006c4 	movi	r6,27
    6144:	014006c4 	movi	r5,27
    6148:	01000604 	movi	r4,24
    614c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 29, SXCoord + 27, SYCoord + 29, 0xF6DA);
    6150:	00bdb684 	movi	r2,-2342
    6154:	d8800015 	stw	r2,0(sp)
    6158:	01c00744 	movi	r7,29
    615c:	018006c4 	movi	r6,27
    6160:	01400744 	movi	r5,29
    6164:	010004c4 	movi	r4,19
    6168:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 30, SXCoord + 25, SYCoord + 30, 0xF6DA);
    616c:	00bdb684 	movi	r2,-2342
    6170:	d8800015 	stw	r2,0(sp)
    6174:	01c00784 	movi	r7,30
    6178:	01800644 	movi	r6,25
    617c:	01400784 	movi	r5,30
    6180:	010004c4 	movi	r4,19
    6184:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 27, SXCoord + 19, SYCoord + 28, 0xF6DA);
    6188:	00bdb684 	movi	r2,-2342
    618c:	d8800015 	stw	r2,0(sp)
    6190:	01c00704 	movi	r7,28
    6194:	018004c4 	movi	r6,19
    6198:	014006c4 	movi	r5,27
    619c:	010004c4 	movi	r4,19
    61a0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 25, SXCoord + 18, SYCoord + 26, 0xF6DA);
    61a4:	00bdb684 	movi	r2,-2342
    61a8:	d8800015 	stw	r2,0(sp)
    61ac:	01c00684 	movi	r7,26
    61b0:	01800484 	movi	r6,18
    61b4:	01400644 	movi	r5,25
    61b8:	01000484 	movi	r4,18
    61bc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 27, SXCoord + 17, SYCoord + 30, 0xF6DA);
    61c0:	00bdb684 	movi	r2,-2342
    61c4:	d8800015 	stw	r2,0(sp)
    61c8:	01c00784 	movi	r7,30
    61cc:	01800444 	movi	r6,17
    61d0:	014006c4 	movi	r5,27
    61d4:	01000384 	movi	r4,14
    61d8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 31, SXCoord + 18, SYCoord + 31, 0xF6DA);
    61dc:	00bdb684 	movi	r2,-2342
    61e0:	d8800015 	stw	r2,0(sp)
    61e4:	01c007c4 	movi	r7,31
    61e8:	01800484 	movi	r6,18
    61ec:	014007c4 	movi	r5,31
    61f0:	01000344 	movi	r4,13
    61f4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 32, SXCoord + 24, SYCoord + 32, 0xF6DA);
    61f8:	00bdb684 	movi	r2,-2342
    61fc:	d8800015 	stw	r2,0(sp)
    6200:	01c00804 	movi	r7,32
    6204:	01800604 	movi	r6,24
    6208:	01400804 	movi	r5,32
    620c:	010001c4 	movi	r4,7
    6210:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 34, SXCoord + 24, SYCoord + 34, 0xF6DA);
    6214:	00bdb684 	movi	r2,-2342
    6218:	d8800015 	stw	r2,0(sp)
    621c:	01c00884 	movi	r7,34
    6220:	01800604 	movi	r6,24
    6224:	01400884 	movi	r5,34
    6228:	010001c4 	movi	r4,7
    622c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 35, SXCoord + 23, SYCoord + 37, 0xF6DA);
    6230:	00bdb684 	movi	r2,-2342
    6234:	d8800015 	stw	r2,0(sp)
    6238:	01c00944 	movi	r7,37
    623c:	018005c4 	movi	r6,23
    6240:	014008c4 	movi	r5,35
    6244:	01000204 	movi	r4,8
    6248:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 38, SXCoord + 25, SYCoord + 38, 0xF6DA);
    624c:	00bdb684 	movi	r2,-2342
    6250:	d8800015 	stw	r2,0(sp)
    6254:	01c00984 	movi	r7,38
    6258:	01800644 	movi	r6,25
    625c:	01400984 	movi	r5,38
    6260:	01000184 	movi	r4,6
    6264:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 39, SXCoord + 24, SYCoord + 39, 0xF6DA);
    6268:	00bdb684 	movi	r2,-2342
    626c:	d8800015 	stw	r2,0(sp)
    6270:	01c009c4 	movi	r7,39
    6274:	01800604 	movi	r6,24
    6278:	014009c4 	movi	r5,39
    627c:	010001c4 	movi	r4,7
    6280:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 40, SXCoord + 23, SYCoord + 40, 0xF6DA);
    6284:	00bdb684 	movi	r2,-2342
    6288:	d8800015 	stw	r2,0(sp)
    628c:	01c00a04 	movi	r7,40
    6290:	018005c4 	movi	r6,23
    6294:	01400a04 	movi	r5,40
    6298:	01000204 	movi	r4,8
    629c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 41, SXCoord + 21, SYCoord + 41, 0xF6DA);
    62a0:	00bdb684 	movi	r2,-2342
    62a4:	d8800015 	stw	r2,0(sp)
    62a8:	01c00a44 	movi	r7,41
    62ac:	01800544 	movi	r6,21
    62b0:	01400a44 	movi	r5,41
    62b4:	01000284 	movi	r4,10
    62b8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 42, SXCoord + 17, SYCoord + 44, 0xF6DA);
    62bc:	00bdb684 	movi	r2,-2342
    62c0:	d8800015 	stw	r2,0(sp)
    62c4:	01c00b04 	movi	r7,44
    62c8:	01800444 	movi	r6,17
    62cc:	01400a84 	movi	r5,42
    62d0:	01000384 	movi	r4,14
    62d4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 45, SXCoord + 19, SYCoord + 46, 0xF6DA);
    62d8:	00bdb684 	movi	r2,-2342
    62dc:	d8800015 	stw	r2,0(sp)
    62e0:	01c00b84 	movi	r7,46
    62e4:	018004c4 	movi	r6,19
    62e8:	01400b44 	movi	r5,45
    62ec:	01000304 	movi	r4,12
    62f0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 47, SXCoord + 17, SYCoord + 48, 0xF6DA);
    62f4:	00bdb684 	movi	r2,-2342
    62f8:	d8800015 	stw	r2,0(sp)
    62fc:	01c00c04 	movi	r7,48
    6300:	01800444 	movi	r6,17
    6304:	01400bc4 	movi	r5,47
    6308:	01000384 	movi	r4,14
    630c:	00089f00 	call	89f0 <VGA_box>

  // Render Shirt
  VGA_box(SXCoord + 10, SYCoord + 45, SXCoord + 11, SYCoord + 46, 0x2589);
    6310:	00896244 	movi	r2,9609
    6314:	d8800015 	stw	r2,0(sp)
    6318:	01c00b84 	movi	r7,46
    631c:	018002c4 	movi	r6,11
    6320:	01400b44 	movi	r5,45
    6324:	01000284 	movi	r4,10
    6328:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 45, SXCoord + 21, SYCoord + 46, 0x2589);
    632c:	00896244 	movi	r2,9609
    6330:	d8800015 	stw	r2,0(sp)
    6334:	01c00b84 	movi	r7,46
    6338:	01800544 	movi	r6,21
    633c:	01400b44 	movi	r5,45
    6340:	01000504 	movi	r4,20
    6344:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 47, SXCoord + 13, SYCoord + 48, 0x2589);
    6348:	00896244 	movi	r2,9609
    634c:	d8800015 	stw	r2,0(sp)
    6350:	01c00c04 	movi	r7,48
    6354:	01800344 	movi	r6,13
    6358:	01400bc4 	movi	r5,47
    635c:	01000204 	movi	r4,8
    6360:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 47, SXCoord + 23, SYCoord + 48, 0x2589);
    6364:	00896244 	movi	r2,9609
    6368:	d8800015 	stw	r2,0(sp)
    636c:	01c00c04 	movi	r7,48
    6370:	018005c4 	movi	r6,23
    6374:	01400bc4 	movi	r5,47
    6378:	01000484 	movi	r4,18
    637c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 49, SXCoord + 21, SYCoord + 50, 0x2589);
    6380:	00896244 	movi	r2,9609
    6384:	d8800015 	stw	r2,0(sp)
    6388:	01c00c84 	movi	r7,50
    638c:	01800544 	movi	r6,21
    6390:	01400c44 	movi	r5,49
    6394:	01000284 	movi	r4,10
    6398:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 51, SXCoord + 17, SYCoord + 52, 0x2589);
    639c:	00896244 	movi	r2,9609
    63a0:	d8800015 	stw	r2,0(sp)
    63a4:	01c00d04 	movi	r7,52
    63a8:	01800444 	movi	r6,17
    63ac:	01400cc4 	movi	r5,51
    63b0:	01000384 	movi	r4,14
    63b4:	00089f00 	call	89f0 <VGA_box>
}
    63b8:	0001883a 	nop
    63bc:	e037883a 	mov	sp,fp
    63c0:	dfc00117 	ldw	ra,4(sp)
    63c4:	df000017 	ldw	fp,0(sp)
    63c8:	dec00204 	addi	sp,sp,8
    63cc:	f800283a 	ret

000063d0 <spencerTimeRunningOutPose1>:


void spencerTimeRunningOutPose1(void)
{
    63d0:	defffd04 	addi	sp,sp,-12
    63d4:	dfc00215 	stw	ra,8(sp)
    63d8:	df000115 	stw	fp,4(sp)
    63dc:	df000104 	addi	fp,sp,4
  // Rendering Start – Spencer Time Running Out Pose (S9.png)

  // Render Exclamation Mark
  VGA_box(SXCoord + 1, SYCoord + 1, SXCoord + 3, SYCoord + 2, 0x3A59);
    63e0:	008e9644 	movi	r2,14937
    63e4:	d8800015 	stw	r2,0(sp)
    63e8:	01c00084 	movi	r7,2
    63ec:	018000c4 	movi	r6,3
    63f0:	01400044 	movi	r5,1
    63f4:	01000044 	movi	r4,1
    63f8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 2, SYCoord + 3, SXCoord + 2, SYCoord + 3, 0x3A59);
    63fc:	008e9644 	movi	r2,14937
    6400:	d8800015 	stw	r2,0(sp)
    6404:	01c000c4 	movi	r7,3
    6408:	01800084 	movi	r6,2
    640c:	014000c4 	movi	r5,3
    6410:	01000084 	movi	r4,2
    6414:	00089f00 	call	89f0 <VGA_box>

  // Render Hair
  VGA_box(SXCoord, SYCoord + 13, SXCoord + 3, SYCoord + 22, 0x59E4);
    6418:	00967904 	movi	r2,23012
    641c:	d8800015 	stw	r2,0(sp)
    6420:	01c00584 	movi	r7,22
    6424:	018000c4 	movi	r6,3
    6428:	01400344 	movi	r5,13
    642c:	0009883a 	mov	r4,zero
    6430:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 25, SXCoord, SYCoord + 25, 0x59E4);
    6434:	00967904 	movi	r2,23012
    6438:	d8800015 	stw	r2,0(sp)
    643c:	01c00644 	movi	r7,25
    6440:	000d883a 	mov	r6,zero
    6444:	01400644 	movi	r5,25
    6448:	0009883a 	mov	r4,zero
    644c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 26, SXCoord + 2, SYCoord + 28, 0x59E4);
    6450:	00967904 	movi	r2,23012
    6454:	d8800015 	stw	r2,0(sp)
    6458:	01c00704 	movi	r7,28
    645c:	01800084 	movi	r6,2
    6460:	01400684 	movi	r5,26
    6464:	0009883a 	mov	r4,zero
    6468:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 29, SXCoord + 5, SYCoord + 29, 0x59E4);
    646c:	00967904 	movi	r2,23012
    6470:	d8800015 	stw	r2,0(sp)
    6474:	01c00744 	movi	r7,29
    6478:	01800144 	movi	r6,5
    647c:	01400744 	movi	r5,29
    6480:	01000104 	movi	r4,4
    6484:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 31, SXCoord + 6, SYCoord + 36, 0x59E4);
    6488:	00967904 	movi	r2,23012
    648c:	d8800015 	stw	r2,0(sp)
    6490:	01c00904 	movi	r7,36
    6494:	01800184 	movi	r6,6
    6498:	014007c4 	movi	r5,31
    649c:	01000104 	movi	r4,4
    64a0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 34, SXCoord + 7, SYCoord + 36, 0x59E4);
    64a4:	00967904 	movi	r2,23012
    64a8:	d8800015 	stw	r2,0(sp)
    64ac:	01c00904 	movi	r7,36
    64b0:	018001c4 	movi	r6,7
    64b4:	01400884 	movi	r5,34
    64b8:	010001c4 	movi	r4,7
    64bc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 9, SXCoord + 4, SYCoord + 18, 0x59E4);
    64c0:	00967904 	movi	r2,23012
    64c4:	d8800015 	stw	r2,0(sp)
    64c8:	01c00484 	movi	r7,18
    64cc:	01800104 	movi	r6,4
    64d0:	01400244 	movi	r5,9
    64d4:	01000104 	movi	r4,4
    64d8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 9, SXCoord + 5, SYCoord + 17, 0x59E4);
    64dc:	00967904 	movi	r2,23012
    64e0:	d8800015 	stw	r2,0(sp)
    64e4:	01c00444 	movi	r7,17
    64e8:	01800144 	movi	r6,5
    64ec:	01400244 	movi	r5,9
    64f0:	01000144 	movi	r4,5
    64f4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 9, SXCoord + 25, SYCoord + 16, 0x59E4);
    64f8:	00967904 	movi	r2,23012
    64fc:	d8800015 	stw	r2,0(sp)
    6500:	01c00404 	movi	r7,16
    6504:	01800644 	movi	r6,25
    6508:	01400244 	movi	r5,9
    650c:	01000184 	movi	r4,6
    6510:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 9, SXCoord + 26, SYCoord + 17, 0x59E4);
    6514:	00967904 	movi	r2,23012
    6518:	d8800015 	stw	r2,0(sp)
    651c:	01c00444 	movi	r7,17
    6520:	01800684 	movi	r6,26
    6524:	01400244 	movi	r5,9
    6528:	01000684 	movi	r4,26
    652c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 27, SYCoord + 9, SXCoord + 27, SYCoord + 18, 0x59E4);
    6530:	00967904 	movi	r2,23012
    6534:	d8800015 	stw	r2,0(sp)
    6538:	01c00484 	movi	r7,18
    653c:	018006c4 	movi	r6,27
    6540:	01400244 	movi	r5,9
    6544:	010006c4 	movi	r4,27
    6548:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 13, SXCoord + 31, SYCoord + 22, 0x59E4);
    654c:	00967904 	movi	r2,23012
    6550:	d8800015 	stw	r2,0(sp)
    6554:	01c00584 	movi	r7,22
    6558:	018007c4 	movi	r6,31
    655c:	01400344 	movi	r5,13
    6560:	01000704 	movi	r4,28
    6564:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 31, SYCoord + 25, SXCoord + 31, SYCoord + 25, 0x59E4);
    6568:	00967904 	movi	r2,23012
    656c:	d8800015 	stw	r2,0(sp)
    6570:	01c00644 	movi	r7,25
    6574:	018007c4 	movi	r6,31
    6578:	01400644 	movi	r5,25
    657c:	010007c4 	movi	r4,31
    6580:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 29, SYCoord + 26, SXCoord + 31, SYCoord + 28, 0x59E4);
    6584:	00967904 	movi	r2,23012
    6588:	d8800015 	stw	r2,0(sp)
    658c:	01c00704 	movi	r7,28
    6590:	018007c4 	movi	r6,31
    6594:	01400684 	movi	r5,26
    6598:	01000744 	movi	r4,29
    659c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 29, SXCoord + 27, SYCoord + 29, 0x59E4);
    65a0:	00967904 	movi	r2,23012
    65a4:	d8800015 	stw	r2,0(sp)
    65a8:	01c00744 	movi	r7,29
    65ac:	018006c4 	movi	r6,27
    65b0:	01400744 	movi	r5,29
    65b4:	01000684 	movi	r4,26
    65b8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 31, SXCoord + 27, SYCoord + 36, 0x59E4);
    65bc:	00967904 	movi	r2,23012
    65c0:	d8800015 	stw	r2,0(sp)
    65c4:	01c00904 	movi	r7,36
    65c8:	018006c4 	movi	r6,27
    65cc:	014007c4 	movi	r5,31
    65d0:	01000644 	movi	r4,25
    65d4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 34, SXCoord + 24, SYCoord + 36, 0x59E4);
    65d8:	00967904 	movi	r2,23012
    65dc:	d8800015 	stw	r2,0(sp)
    65e0:	01c00904 	movi	r7,36
    65e4:	01800604 	movi	r6,24
    65e8:	01400884 	movi	r5,34
    65ec:	01000604 	movi	r4,24
    65f0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 5, SXCoord + 23, SYCoord + 8, 0x59E4);
    65f4:	00967904 	movi	r2,23012
    65f8:	d8800015 	stw	r2,0(sp)
    65fc:	01c00204 	movi	r7,8
    6600:	018005c4 	movi	r6,23
    6604:	01400144 	movi	r5,5
    6608:	01000304 	movi	r4,12
    660c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 1, SXCoord + 19, SYCoord + 4, 0x59E4);
    6610:	00967904 	movi	r2,23012
    6614:	d8800015 	stw	r2,0(sp)
    6618:	01c00104 	movi	r7,4
    661c:	018004c4 	movi	r6,19
    6620:	01400044 	movi	r5,1
    6624:	01000304 	movi	r4,12
    6628:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord, SXCoord + 16, SYCoord, 0x59E4);
    662c:	00967904 	movi	r2,23012
    6630:	d8800015 	stw	r2,0(sp)
    6634:	000f883a 	mov	r7,zero
    6638:	01800404 	movi	r6,16
    663c:	000b883a 	mov	r5,zero
    6640:	010002c4 	movi	r4,11
    6644:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 1, SXCoord + 11, SYCoord + 1, 0x59E4);
    6648:	00967904 	movi	r2,23012
    664c:	d8800015 	stw	r2,0(sp)
    6650:	01c00044 	movi	r7,1
    6654:	018002c4 	movi	r6,11
    6658:	01400044 	movi	r5,1
    665c:	01000284 	movi	r4,10
    6660:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 20, SXCoord + 8, SYCoord + 20, 0x59E4);
    6664:	00967904 	movi	r2,23012
    6668:	d8800015 	stw	r2,0(sp)
    666c:	01c00504 	movi	r7,20
    6670:	01800204 	movi	r6,8
    6674:	01400504 	movi	r5,20
    6678:	010001c4 	movi	r4,7
    667c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 20, SXCoord + 12, SYCoord + 20, 0x59E4);
    6680:	00967904 	movi	r2,23012
    6684:	d8800015 	stw	r2,0(sp)
    6688:	01c00504 	movi	r7,20
    668c:	01800304 	movi	r6,12
    6690:	01400504 	movi	r5,20
    6694:	010002c4 	movi	r4,11
    6698:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 22, SXCoord + 10, SYCoord + 22, 0x59E4);
    669c:	00967904 	movi	r2,23012
    66a0:	d8800015 	stw	r2,0(sp)
    66a4:	01c00584 	movi	r7,22
    66a8:	01800284 	movi	r6,10
    66ac:	01400584 	movi	r5,22
    66b0:	010001c4 	movi	r4,7
    66b4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 21, SXCoord + 12, SYCoord + 21, 0x59E4);
    66b8:	00967904 	movi	r2,23012
    66bc:	d8800015 	stw	r2,0(sp)
    66c0:	01c00544 	movi	r7,21
    66c4:	01800304 	movi	r6,12
    66c8:	01400544 	movi	r5,21
    66cc:	01000204 	movi	r4,8
    66d0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 20, SXCoord + 12, SYCoord + 20, 0x59E4);
    66d4:	00967904 	movi	r2,23012
    66d8:	d8800015 	stw	r2,0(sp)
    66dc:	01c00504 	movi	r7,20
    66e0:	01800304 	movi	r6,12
    66e4:	01400504 	movi	r5,20
    66e8:	01000284 	movi	r4,10
    66ec:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 22, SXCoord + 24, SYCoord + 22, 0x59E4);
    66f0:	00967904 	movi	r2,23012
    66f4:	d8800015 	stw	r2,0(sp)
    66f8:	01c00584 	movi	r7,22
    66fc:	01800604 	movi	r6,24
    6700:	01400584 	movi	r5,22
    6704:	01000544 	movi	r4,21
    6708:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 21, SXCoord + 23, SYCoord + 21, 0x59E4);
    670c:	00967904 	movi	r2,23012
    6710:	d8800015 	stw	r2,0(sp)
    6714:	01c00544 	movi	r7,21
    6718:	018005c4 	movi	r6,23
    671c:	01400544 	movi	r5,21
    6720:	010004c4 	movi	r4,19
    6724:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 20, SXCoord + 21, SYCoord + 20, 0x59E4);
    6728:	00967904 	movi	r2,23012
    672c:	d8800015 	stw	r2,0(sp)
    6730:	01c00504 	movi	r7,20
    6734:	01800544 	movi	r6,21
    6738:	01400504 	movi	r5,20
    673c:	010004c4 	movi	r4,19
    6740:	00089f00 	call	89f0 <VGA_box>

  // Render Glasses
  VGA_box(SXCoord, SYCoord + 23, SXCoord + 13, SYCoord + 23, 0x0000);
    6744:	d8000015 	stw	zero,0(sp)
    6748:	01c005c4 	movi	r7,23
    674c:	01800344 	movi	r6,13
    6750:	014005c4 	movi	r5,23
    6754:	0009883a 	mov	r4,zero
    6758:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 24, SXCoord + 3, SYCoord + 24, 0x0000);
    675c:	d8000015 	stw	zero,0(sp)
    6760:	01c00604 	movi	r7,24
    6764:	018000c4 	movi	r6,3
    6768:	01400604 	movi	r5,24
    676c:	0009883a 	mov	r4,zero
    6770:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 25, SXCoord + 3, SYCoord + 25, 0x0000);
    6774:	d8000015 	stw	zero,0(sp)
    6778:	01c00644 	movi	r7,25
    677c:	018000c4 	movi	r6,3
    6780:	01400644 	movi	r5,25
    6784:	01000044 	movi	r4,1
    6788:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 3, SYCoord + 26, SXCoord + 3, SYCoord + 29, 0x0000);
    678c:	d8000015 	stw	zero,0(sp)
    6790:	01c00744 	movi	r7,29
    6794:	018000c4 	movi	r6,3
    6798:	01400684 	movi	r5,26
    679c:	010000c4 	movi	r4,3
    67a0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 30, SXCoord + 12, SYCoord + 30, 0x0000);
    67a4:	d8000015 	stw	zero,0(sp)
    67a8:	01c00784 	movi	r7,30
    67ac:	01800304 	movi	r6,12
    67b0:	01400784 	movi	r5,30
    67b4:	01000104 	movi	r4,4
    67b8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 26, SXCoord + 13, SYCoord + 29, 0x0000);
    67bc:	d8000015 	stw	zero,0(sp)
    67c0:	01c00744 	movi	r7,29
    67c4:	01800344 	movi	r6,13
    67c8:	01400684 	movi	r5,26
    67cc:	01000344 	movi	r4,13
    67d0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 24, SXCoord + 17, SYCoord + 25, 0x0000);
    67d4:	d8000015 	stw	zero,0(sp)
    67d8:	01c00644 	movi	r7,25
    67dc:	01800444 	movi	r6,17
    67e0:	01400604 	movi	r5,24
    67e4:	01000384 	movi	r4,14
    67e8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 23, SXCoord + 31, SYCoord + 23, 0x0000);
    67ec:	d8000015 	stw	zero,0(sp)
    67f0:	01c005c4 	movi	r7,23
    67f4:	018007c4 	movi	r6,31
    67f8:	014005c4 	movi	r5,23
    67fc:	01000484 	movi	r4,18
    6800:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 24, SXCoord + 31, SYCoord + 24, 0x0000);
    6804:	d8000015 	stw	zero,0(sp)
    6808:	01c00604 	movi	r7,24
    680c:	018007c4 	movi	r6,31
    6810:	01400604 	movi	r5,24
    6814:	01000704 	movi	r4,28
    6818:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 25, SXCoord + 30, SYCoord + 25, 0x0000);
    681c:	d8000015 	stw	zero,0(sp)
    6820:	01c00644 	movi	r7,25
    6824:	01800784 	movi	r6,30
    6828:	01400644 	movi	r5,25
    682c:	01000704 	movi	r4,28
    6830:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 26, SXCoord + 28, SYCoord + 29, 0x0000);
    6834:	d8000015 	stw	zero,0(sp)
    6838:	01c00744 	movi	r7,29
    683c:	01800704 	movi	r6,28
    6840:	01400684 	movi	r5,26
    6844:	01000704 	movi	r4,28
    6848:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 30, SXCoord + 27, SYCoord + 30, 0x0000);
    684c:	d8000015 	stw	zero,0(sp)
    6850:	01c00784 	movi	r7,30
    6854:	018006c4 	movi	r6,27
    6858:	01400784 	movi	r5,30
    685c:	010004c4 	movi	r4,19
    6860:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 26, SXCoord + 18, SYCoord + 29, 0x0000);
    6864:	d8000015 	stw	zero,0(sp)
    6868:	01c00744 	movi	r7,29
    686c:	01800484 	movi	r6,18
    6870:	01400684 	movi	r5,26
    6874:	01000484 	movi	r4,18
    6878:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 25, SXCoord + 11, SYCoord + 28, 0x0000);
    687c:	d8000015 	stw	zero,0(sp)
    6880:	01c00704 	movi	r7,28
    6884:	018002c4 	movi	r6,11
    6888:	01400644 	movi	r5,25
    688c:	01000204 	movi	r4,8
    6890:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 25, SXCoord + 23, SYCoord + 28, 0x0000);
    6894:	d8000015 	stw	zero,0(sp)
    6898:	01c00704 	movi	r7,28
    689c:	018005c4 	movi	r6,23
    68a0:	01400644 	movi	r5,25
    68a4:	01000504 	movi	r4,20
    68a8:	00089f00 	call	89f0 <VGA_box>

  // Render Mouth
  VGA_box(SXCoord + 10, SYCoord + 32, SXCoord + 21, SYCoord + 32, 0x0000);
    68ac:	d8000015 	stw	zero,0(sp)
    68b0:	01c00804 	movi	r7,32
    68b4:	01800544 	movi	r6,21
    68b8:	01400804 	movi	r5,32
    68bc:	01000284 	movi	r4,10
    68c0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 9, SYCoord + 33, SXCoord + 10, SYCoord + 33, 0x0000);
    68c4:	d8000015 	stw	zero,0(sp)
    68c8:	01c00844 	movi	r7,33
    68cc:	01800284 	movi	r6,10
    68d0:	01400844 	movi	r5,33
    68d4:	01000244 	movi	r4,9
    68d8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 33, SXCoord + 22, SYCoord + 33, 0x0000);
    68dc:	d8000015 	stw	zero,0(sp)
    68e0:	01c00844 	movi	r7,33
    68e4:	01800584 	movi	r6,22
    68e8:	01400844 	movi	r5,33
    68ec:	01000544 	movi	r4,21
    68f0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 34, SXCoord + 21, SYCoord + 34, 0x0000);
    68f4:	d8000015 	stw	zero,0(sp)
    68f8:	01c00884 	movi	r7,34
    68fc:	01800544 	movi	r6,21
    6900:	01400884 	movi	r5,34
    6904:	01000284 	movi	r4,10
    6908:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 35, SXCoord + 13, SYCoord + 35, 0x0000);
    690c:	d8000015 	stw	zero,0(sp)
    6910:	01c008c4 	movi	r7,35
    6914:	01800344 	movi	r6,13
    6918:	014008c4 	movi	r5,35
    691c:	010002c4 	movi	r4,11
    6920:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 35, SXCoord + 20, SYCoord + 35, 0x0000);
    6924:	d8000015 	stw	zero,0(sp)
    6928:	01c008c4 	movi	r7,35
    692c:	01800504 	movi	r6,20
    6930:	014008c4 	movi	r5,35
    6934:	01000484 	movi	r4,18
    6938:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 36, SXCoord + 19, SYCoord + 36, 0x0000);
    693c:	d8000015 	stw	zero,0(sp)
    6940:	01c00904 	movi	r7,36
    6944:	018004c4 	movi	r6,19
    6948:	01400904 	movi	r5,36
    694c:	01000304 	movi	r4,12
    6950:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 33, SXCoord + 20, SYCoord + 33, 0xFFFF);
    6954:	00bfffc4 	movi	r2,-1
    6958:	d8800015 	stw	r2,0(sp)
    695c:	01c00844 	movi	r7,33
    6960:	01800504 	movi	r6,20
    6964:	01400844 	movi	r5,33
    6968:	010002c4 	movi	r4,11
    696c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 35, SXCoord + 17, SYCoord + 35, 0xFD79);
    6970:	00bf5e44 	movi	r2,-647
    6974:	d8800015 	stw	r2,0(sp)
    6978:	01c008c4 	movi	r7,35
    697c:	01800444 	movi	r6,17
    6980:	014008c4 	movi	r5,35
    6984:	01000384 	movi	r4,14
    6988:	00089f00 	call	89f0 <VGA_box>

  // Render Skin
  VGA_box(SXCoord + 6, SYCoord + 17, SXCoord + 25, SYCoord + 17, 0xF6DA);
    698c:	00bdb684 	movi	r2,-2342
    6990:	d8800015 	stw	r2,0(sp)
    6994:	01c00444 	movi	r7,17
    6998:	01800644 	movi	r6,25
    699c:	01400444 	movi	r5,17
    69a0:	01000184 	movi	r4,6
    69a4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 18, SXCoord + 26, SYCoord + 18, 0xF6DA);
    69a8:	00bdb684 	movi	r2,-2342
    69ac:	d8800015 	stw	r2,0(sp)
    69b0:	01c00484 	movi	r7,18
    69b4:	01800684 	movi	r6,26
    69b8:	01400484 	movi	r5,18
    69bc:	01000144 	movi	r4,5
    69c0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 19, SXCoord + 27, SYCoord + 19, 0xF6DA);
    69c4:	00bdb684 	movi	r2,-2342
    69c8:	d8800015 	stw	r2,0(sp)
    69cc:	01c004c4 	movi	r7,19
    69d0:	018006c4 	movi	r6,27
    69d4:	014004c4 	movi	r5,19
    69d8:	01000104 	movi	r4,4
    69dc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 20, SXCoord + 9, SYCoord + 20, 0xF6DA);
    69e0:	00bdb684 	movi	r2,-2342
    69e4:	d8800015 	stw	r2,0(sp)
    69e8:	01c00504 	movi	r7,20
    69ec:	01800244 	movi	r6,9
    69f0:	01400504 	movi	r5,20
    69f4:	01000104 	movi	r4,4
    69f8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 22, SYCoord + 20, SXCoord + 27, SYCoord + 20, 0xF6DA);
    69fc:	00bdb684 	movi	r2,-2342
    6a00:	d8800015 	stw	r2,0(sp)
    6a04:	01c00504 	movi	r7,20
    6a08:	018006c4 	movi	r6,27
    6a0c:	01400504 	movi	r5,20
    6a10:	01000584 	movi	r4,22
    6a14:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 21, SXCoord + 7, SYCoord + 21, 0xF6DA);
    6a18:	00bdb684 	movi	r2,-2342
    6a1c:	d8800015 	stw	r2,0(sp)
    6a20:	01c00544 	movi	r7,21
    6a24:	018001c4 	movi	r6,7
    6a28:	01400544 	movi	r5,21
    6a2c:	01000104 	movi	r4,4
    6a30:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 21, SXCoord + 27, SYCoord + 21, 0xF6DA);
    6a34:	00bdb684 	movi	r2,-2342
    6a38:	d8800015 	stw	r2,0(sp)
    6a3c:	01c00544 	movi	r7,21
    6a40:	018006c4 	movi	r6,27
    6a44:	01400544 	movi	r5,21
    6a48:	01000604 	movi	r4,24
    6a4c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 20, SXCoord + 18, SYCoord + 21, 0xF6DA);
    6a50:	00bdb684 	movi	r2,-2342
    6a54:	d8800015 	stw	r2,0(sp)
    6a58:	01c00544 	movi	r7,21
    6a5c:	01800484 	movi	r6,18
    6a60:	01400504 	movi	r5,20
    6a64:	01000344 	movi	r4,13
    6a68:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 22, SXCoord + 6, SYCoord + 22, 0xF6DA);
    6a6c:	00bdb684 	movi	r2,-2342
    6a70:	d8800015 	stw	r2,0(sp)
    6a74:	01c00584 	movi	r7,22
    6a78:	01800184 	movi	r6,6
    6a7c:	01400584 	movi	r5,22
    6a80:	01000104 	movi	r4,4
    6a84:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 22, SXCoord + 20, SYCoord + 22, 0xF6DA);
    6a88:	00bdb684 	movi	r2,-2342
    6a8c:	d8800015 	stw	r2,0(sp)
    6a90:	01c00584 	movi	r7,22
    6a94:	01800504 	movi	r6,20
    6a98:	01400584 	movi	r5,22
    6a9c:	010002c4 	movi	r4,11
    6aa0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 22, SXCoord + 27, SYCoord + 22, 0xF6DA);
    6aa4:	00bdb684 	movi	r2,-2342
    6aa8:	d8800015 	stw	r2,0(sp)
    6aac:	01c00584 	movi	r7,22
    6ab0:	018006c4 	movi	r6,27
    6ab4:	01400584 	movi	r5,22
    6ab8:	01000644 	movi	r4,25
    6abc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 23, SXCoord + 17, SYCoord + 23, 0xF6DA);
    6ac0:	00bdb684 	movi	r2,-2342
    6ac4:	d8800015 	stw	r2,0(sp)
    6ac8:	01c005c4 	movi	r7,23
    6acc:	01800444 	movi	r6,17
    6ad0:	014005c4 	movi	r5,23
    6ad4:	01000384 	movi	r4,14
    6ad8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 24, SXCoord + 13, SYCoord + 24, 0xF6DA);
    6adc:	00bdb684 	movi	r2,-2342
    6ae0:	d8800015 	stw	r2,0(sp)
    6ae4:	01c00604 	movi	r7,24
    6ae8:	01800344 	movi	r6,13
    6aec:	01400604 	movi	r5,24
    6af0:	01000104 	movi	r4,4
    6af4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 25, SXCoord + 7, SYCoord + 28, 0xF6DA);
    6af8:	00bdb684 	movi	r2,-2342
    6afc:	d8800015 	stw	r2,0(sp)
    6b00:	01c00704 	movi	r7,28
    6b04:	018001c4 	movi	r6,7
    6b08:	01400644 	movi	r5,25
    6b0c:	01000104 	movi	r4,4
    6b10:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 29, SXCoord + 6, SYCoord + 29, 0xF6DA);
    6b14:	00bdb684 	movi	r2,-2342
    6b18:	d8800015 	stw	r2,0(sp)
    6b1c:	01c00744 	movi	r7,29
    6b20:	01800184 	movi	r6,6
    6b24:	01400744 	movi	r5,29
    6b28:	01000184 	movi	r4,6
    6b2c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 29, SXCoord + 12, SYCoord + 29, 0xF6DA);
    6b30:	00bdb684 	movi	r2,-2342
    6b34:	d8800015 	stw	r2,0(sp)
    6b38:	01c00744 	movi	r7,29
    6b3c:	01800304 	movi	r6,12
    6b40:	01400744 	movi	r5,29
    6b44:	010002c4 	movi	r4,11
    6b48:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 25, SXCoord + 13, SYCoord + 25, 0xF6DA);
    6b4c:	00bdb684 	movi	r2,-2342
    6b50:	d8800015 	stw	r2,0(sp)
    6b54:	01c00644 	movi	r7,25
    6b58:	01800344 	movi	r6,13
    6b5c:	01400644 	movi	r5,25
    6b60:	01000304 	movi	r4,12
    6b64:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 26, SXCoord + 12, SYCoord + 28, 0xF6DA);
    6b68:	00bdb684 	movi	r2,-2342
    6b6c:	d8800015 	stw	r2,0(sp)
    6b70:	01c00704 	movi	r7,28
    6b74:	01800304 	movi	r6,12
    6b78:	01400684 	movi	r5,26
    6b7c:	01000304 	movi	r4,12
    6b80:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 24, SXCoord + 27, SYCoord + 24, 0xF6DA);
    6b84:	00bdb684 	movi	r2,-2342
    6b88:	d8800015 	stw	r2,0(sp)
    6b8c:	01c00604 	movi	r7,24
    6b90:	018006c4 	movi	r6,27
    6b94:	01400604 	movi	r5,24
    6b98:	01000484 	movi	r4,18
    6b9c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 25, SXCoord + 19, SYCoord + 25, 0xF6DA);
    6ba0:	00bdb684 	movi	r2,-2342
    6ba4:	d8800015 	stw	r2,0(sp)
    6ba8:	01c00644 	movi	r7,25
    6bac:	018004c4 	movi	r6,19
    6bb0:	01400644 	movi	r5,25
    6bb4:	01000484 	movi	r4,18
    6bb8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 26, SXCoord + 19, SYCoord + 28, 0xF6DA);
    6bbc:	00bdb684 	movi	r2,-2342
    6bc0:	d8800015 	stw	r2,0(sp)
    6bc4:	01c00704 	movi	r7,28
    6bc8:	018004c4 	movi	r6,19
    6bcc:	01400684 	movi	r5,26
    6bd0:	010004c4 	movi	r4,19
    6bd4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 29, SXCoord + 20, SYCoord + 29, 0xF6DA);
    6bd8:	00bdb684 	movi	r2,-2342
    6bdc:	d8800015 	stw	r2,0(sp)
    6be0:	01c00744 	movi	r7,29
    6be4:	01800504 	movi	r6,20
    6be8:	01400744 	movi	r5,29
    6bec:	010004c4 	movi	r4,19
    6bf0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 29, SXCoord + 25, SYCoord + 29, 0xF6DA);
    6bf4:	00bdb684 	movi	r2,-2342
    6bf8:	d8800015 	stw	r2,0(sp)
    6bfc:	01c00744 	movi	r7,29
    6c00:	01800644 	movi	r6,25
    6c04:	01400744 	movi	r5,29
    6c08:	01000644 	movi	r4,25
    6c0c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 25, SXCoord + 27, SYCoord + 28, 0xF6DA);
    6c10:	00bdb684 	movi	r2,-2342
    6c14:	d8800015 	stw	r2,0(sp)
    6c18:	01c00704 	movi	r7,28
    6c1c:	018006c4 	movi	r6,27
    6c20:	01400644 	movi	r5,25
    6c24:	01000604 	movi	r4,24
    6c28:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 26, SXCoord + 17, SYCoord + 29, 0xF6DA);
    6c2c:	00bdb684 	movi	r2,-2342
    6c30:	d8800015 	stw	r2,0(sp)
    6c34:	01c00744 	movi	r7,29
    6c38:	01800444 	movi	r6,17
    6c3c:	01400684 	movi	r5,26
    6c40:	01000384 	movi	r4,14
    6c44:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 30, SXCoord + 18, SYCoord + 30, 0xF6DA);
    6c48:	00bdb684 	movi	r2,-2342
    6c4c:	d8800015 	stw	r2,0(sp)
    6c50:	01c00784 	movi	r7,30
    6c54:	01800484 	movi	r6,18
    6c58:	01400784 	movi	r5,30
    6c5c:	01000344 	movi	r4,13
    6c60:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 31, SXCoord + 24, SYCoord + 31, 0xF6DA);
    6c64:	00bdb684 	movi	r2,-2342
    6c68:	d8800015 	stw	r2,0(sp)
    6c6c:	01c007c4 	movi	r7,31
    6c70:	01800604 	movi	r6,24
    6c74:	014007c4 	movi	r5,31
    6c78:	010001c4 	movi	r4,7
    6c7c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 32, SXCoord + 9, SYCoord + 32, 0xF6DA);
    6c80:	00bdb684 	movi	r2,-2342
    6c84:	d8800015 	stw	r2,0(sp)
    6c88:	01c00804 	movi	r7,32
    6c8c:	01800244 	movi	r6,9
    6c90:	01400804 	movi	r5,32
    6c94:	010001c4 	movi	r4,7
    6c98:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 22, SYCoord + 32, SXCoord + 24, SYCoord + 32, 0xF6DA);
    6c9c:	00bdb684 	movi	r2,-2342
    6ca0:	d8800015 	stw	r2,0(sp)
    6ca4:	01c00804 	movi	r7,32
    6ca8:	01800604 	movi	r6,24
    6cac:	01400804 	movi	r5,32
    6cb0:	01000584 	movi	r4,22
    6cb4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 33, SXCoord + 8, SYCoord + 33, 0xF6DA);
    6cb8:	00bdb684 	movi	r2,-2342
    6cbc:	d8800015 	stw	r2,0(sp)
    6cc0:	01c00844 	movi	r7,33
    6cc4:	01800204 	movi	r6,8
    6cc8:	01400844 	movi	r5,33
    6ccc:	010001c4 	movi	r4,7
    6cd0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 23, SYCoord + 33, SXCoord + 24, SYCoord + 33, 0xF6DA);
    6cd4:	00bdb684 	movi	r2,-2342
    6cd8:	d8800015 	stw	r2,0(sp)
    6cdc:	01c00844 	movi	r7,33
    6ce0:	01800604 	movi	r6,24
    6ce4:	01400844 	movi	r5,33
    6ce8:	010005c4 	movi	r4,23
    6cec:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 34, SXCoord + 9, SYCoord + 34, 0xF6DA);
    6cf0:	00bdb684 	movi	r2,-2342
    6cf4:	d8800015 	stw	r2,0(sp)
    6cf8:	01c00884 	movi	r7,34
    6cfc:	01800244 	movi	r6,9
    6d00:	01400884 	movi	r5,34
    6d04:	01000204 	movi	r4,8
    6d08:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 22, SYCoord + 34, SXCoord + 23, SYCoord + 34, 0xF6DA);
    6d0c:	00bdb684 	movi	r2,-2342
    6d10:	d8800015 	stw	r2,0(sp)
    6d14:	01c00884 	movi	r7,34
    6d18:	018005c4 	movi	r6,23
    6d1c:	01400884 	movi	r5,34
    6d20:	01000584 	movi	r4,22
    6d24:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 35, SXCoord + 10, SYCoord + 35, 0xF6DA);
    6d28:	00bdb684 	movi	r2,-2342
    6d2c:	d8800015 	stw	r2,0(sp)
    6d30:	01c008c4 	movi	r7,35
    6d34:	01800284 	movi	r6,10
    6d38:	014008c4 	movi	r5,35
    6d3c:	01000204 	movi	r4,8
    6d40:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 35, SXCoord + 23, SYCoord + 35, 0xF6DA);
    6d44:	00bdb684 	movi	r2,-2342
    6d48:	d8800015 	stw	r2,0(sp)
    6d4c:	01c008c4 	movi	r7,35
    6d50:	018005c4 	movi	r6,23
    6d54:	014008c4 	movi	r5,35
    6d58:	01000544 	movi	r4,21
    6d5c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 36, SXCoord + 11, SYCoord + 36, 0xF6DA);
    6d60:	00bdb684 	movi	r2,-2342
    6d64:	d8800015 	stw	r2,0(sp)
    6d68:	01c00904 	movi	r7,36
    6d6c:	018002c4 	movi	r6,11
    6d70:	01400904 	movi	r5,36
    6d74:	01000204 	movi	r4,8
    6d78:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 36, SXCoord + 23, SYCoord + 36, 0xF6DA);
    6d7c:	00bdb684 	movi	r2,-2342
    6d80:	d8800015 	stw	r2,0(sp)
    6d84:	01c00904 	movi	r7,36
    6d88:	018005c4 	movi	r6,23
    6d8c:	01400904 	movi	r5,36
    6d90:	01000504 	movi	r4,20
    6d94:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 37, SXCoord + 25, SYCoord + 37, 0xF6DA);
    6d98:	00bdb684 	movi	r2,-2342
    6d9c:	d8800015 	stw	r2,0(sp)
    6da0:	01c00944 	movi	r7,37
    6da4:	01800644 	movi	r6,25
    6da8:	01400944 	movi	r5,37
    6dac:	01000184 	movi	r4,6
    6db0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 38, SXCoord + 24, SYCoord + 38, 0xF6DA);
    6db4:	00bdb684 	movi	r2,-2342
    6db8:	d8800015 	stw	r2,0(sp)
    6dbc:	01c00984 	movi	r7,38
    6dc0:	01800604 	movi	r6,24
    6dc4:	01400984 	movi	r5,38
    6dc8:	010001c4 	movi	r4,7
    6dcc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 39, SXCoord + 23, SYCoord + 39, 0xF6DA);
    6dd0:	00bdb684 	movi	r2,-2342
    6dd4:	d8800015 	stw	r2,0(sp)
    6dd8:	01c009c4 	movi	r7,39
    6ddc:	018005c4 	movi	r6,23
    6de0:	014009c4 	movi	r5,39
    6de4:	01000204 	movi	r4,8
    6de8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 40, SXCoord + 21, SYCoord + 40, 0xF6DA);
    6dec:	00bdb684 	movi	r2,-2342
    6df0:	d8800015 	stw	r2,0(sp)
    6df4:	01c00a04 	movi	r7,40
    6df8:	01800544 	movi	r6,21
    6dfc:	01400a04 	movi	r5,40
    6e00:	01000284 	movi	r4,10
    6e04:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 41, SXCoord + 17, SYCoord + 44, 0xF6DA);
    6e08:	00bdb684 	movi	r2,-2342
    6e0c:	d8800015 	stw	r2,0(sp)
    6e10:	01c00b04 	movi	r7,44
    6e14:	01800444 	movi	r6,17
    6e18:	01400a44 	movi	r5,41
    6e1c:	01000384 	movi	r4,14
    6e20:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 45, SXCoord + 19, SYCoord + 46, 0xF6DA);
    6e24:	00bdb684 	movi	r2,-2342
    6e28:	d8800015 	stw	r2,0(sp)
    6e2c:	01c00b84 	movi	r7,46
    6e30:	018004c4 	movi	r6,19
    6e34:	01400b44 	movi	r5,45
    6e38:	01000304 	movi	r4,12
    6e3c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 47, SXCoord + 17, SYCoord + 48, 0xF6DA);
    6e40:	00bdb684 	movi	r2,-2342
    6e44:	d8800015 	stw	r2,0(sp)
    6e48:	01c00c04 	movi	r7,48
    6e4c:	01800444 	movi	r6,17
    6e50:	01400bc4 	movi	r5,47
    6e54:	01000384 	movi	r4,14
    6e58:	00089f00 	call	89f0 <VGA_box>

  // Render Tears
  VGA_box(SXCoord + 7, SYCoord + 29, SXCoord + 10, SYCoord + 29, 0x9EDD);
    6e5c:	00a7b744 	movi	r2,-24867
    6e60:	d8800015 	stw	r2,0(sp)
    6e64:	01c00744 	movi	r7,29
    6e68:	01800284 	movi	r6,10
    6e6c:	01400744 	movi	r5,29
    6e70:	010001c4 	movi	r4,7
    6e74:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 29, SXCoord + 24, SYCoord + 29, 0x9EDD);
    6e78:	00a7b744 	movi	r2,-24867
    6e7c:	d8800015 	stw	r2,0(sp)
    6e80:	01c00744 	movi	r7,29
    6e84:	01800604 	movi	r6,24
    6e88:	01400744 	movi	r5,29
    6e8c:	01000544 	movi	r4,21
    6e90:	00089f00 	call	89f0 <VGA_box>


  // Render Shirt
  VGA_box(SXCoord + 10, SYCoord + 45, SXCoord + 11, SYCoord + 46, 0x2589);
    6e94:	00896244 	movi	r2,9609
    6e98:	d8800015 	stw	r2,0(sp)
    6e9c:	01c00b84 	movi	r7,46
    6ea0:	018002c4 	movi	r6,11
    6ea4:	01400b44 	movi	r5,45
    6ea8:	01000284 	movi	r4,10
    6eac:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 45, SXCoord + 21, SYCoord + 46, 0x2589);
    6eb0:	00896244 	movi	r2,9609
    6eb4:	d8800015 	stw	r2,0(sp)
    6eb8:	01c00b84 	movi	r7,46
    6ebc:	01800544 	movi	r6,21
    6ec0:	01400b44 	movi	r5,45
    6ec4:	01000504 	movi	r4,20
    6ec8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 47, SXCoord + 13, SYCoord + 48, 0x2589);
    6ecc:	00896244 	movi	r2,9609
    6ed0:	d8800015 	stw	r2,0(sp)
    6ed4:	01c00c04 	movi	r7,48
    6ed8:	01800344 	movi	r6,13
    6edc:	01400bc4 	movi	r5,47
    6ee0:	01000204 	movi	r4,8
    6ee4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 47, SXCoord + 23, SYCoord + 48, 0x2589);
    6ee8:	00896244 	movi	r2,9609
    6eec:	d8800015 	stw	r2,0(sp)
    6ef0:	01c00c04 	movi	r7,48
    6ef4:	018005c4 	movi	r6,23
    6ef8:	01400bc4 	movi	r5,47
    6efc:	01000484 	movi	r4,18
    6f00:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 49, SXCoord + 21, SYCoord + 50, 0x2589);
    6f04:	00896244 	movi	r2,9609
    6f08:	d8800015 	stw	r2,0(sp)
    6f0c:	01c00c84 	movi	r7,50
    6f10:	01800544 	movi	r6,21
    6f14:	01400c44 	movi	r5,49
    6f18:	01000284 	movi	r4,10
    6f1c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 51, SXCoord + 17, SYCoord + 52, 0x2589);
    6f20:	00896244 	movi	r2,9609
    6f24:	d8800015 	stw	r2,0(sp)
    6f28:	01c00d04 	movi	r7,52
    6f2c:	01800444 	movi	r6,17
    6f30:	01400cc4 	movi	r5,51
    6f34:	01000384 	movi	r4,14
    6f38:	00089f00 	call	89f0 <VGA_box>
}
    6f3c:	0001883a 	nop
    6f40:	e037883a 	mov	sp,fp
    6f44:	dfc00117 	ldw	ra,4(sp)
    6f48:	df000017 	ldw	fp,0(sp)
    6f4c:	dec00204 	addi	sp,sp,8
    6f50:	f800283a 	ret

00006f54 <spencerTimeRunningOutPose2>:


void spencerTimeRunningOutPose2(void)
{
    6f54:	defffd04 	addi	sp,sp,-12
    6f58:	dfc00215 	stw	ra,8(sp)
    6f5c:	df000115 	stw	fp,4(sp)
    6f60:	df000104 	addi	fp,sp,4
  // Rendering Start – Spencer Time Running Out Pose (S10.png)

  // Render Exclamation Mark
  VGA_box(SXCoord, SYCoord + 1, SXCoord + 4, SYCoord + 1, 0x3A59);
    6f64:	008e9644 	movi	r2,14937
    6f68:	d8800015 	stw	r2,0(sp)
    6f6c:	01c00044 	movi	r7,1
    6f70:	01800104 	movi	r6,4
    6f74:	01400044 	movi	r5,1
    6f78:	0009883a 	mov	r4,zero
    6f7c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 2, SXCoord + 3, SYCoord + 3, 0x3A59);
    6f80:	008e9644 	movi	r2,14937
    6f84:	d8800015 	stw	r2,0(sp)
    6f88:	01c000c4 	movi	r7,3
    6f8c:	018000c4 	movi	r6,3
    6f90:	01400084 	movi	r5,2
    6f94:	01000044 	movi	r4,1
    6f98:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 2, SYCoord + 4, SXCoord + 2, SYCoord + 4, 0x3A59);
    6f9c:	008e9644 	movi	r2,14937
    6fa0:	d8800015 	stw	r2,0(sp)
    6fa4:	01c00104 	movi	r7,4
    6fa8:	01800084 	movi	r6,2
    6fac:	01400104 	movi	r5,4
    6fb0:	01000084 	movi	r4,2
    6fb4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 2, SYCoord + 6, SXCoord + 2, SYCoord + 6, 0x3A59);
    6fb8:	008e9644 	movi	r2,14937
    6fbc:	d8800015 	stw	r2,0(sp)
    6fc0:	01c00184 	movi	r7,6
    6fc4:	01800084 	movi	r6,2
    6fc8:	01400184 	movi	r5,6
    6fcc:	01000084 	movi	r4,2
    6fd0:	00089f00 	call	89f0 <VGA_box>

  // Render Hair
  VGA_box(SXCoord, SYCoord + 13, SXCoord + 3, SYCoord + 22, 0x59E4);
    6fd4:	00967904 	movi	r2,23012
    6fd8:	d8800015 	stw	r2,0(sp)
    6fdc:	01c00584 	movi	r7,22
    6fe0:	018000c4 	movi	r6,3
    6fe4:	01400344 	movi	r5,13
    6fe8:	0009883a 	mov	r4,zero
    6fec:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 25, SXCoord, SYCoord + 25, 0x59E4);
    6ff0:	00967904 	movi	r2,23012
    6ff4:	d8800015 	stw	r2,0(sp)
    6ff8:	01c00644 	movi	r7,25
    6ffc:	000d883a 	mov	r6,zero
    7000:	01400644 	movi	r5,25
    7004:	0009883a 	mov	r4,zero
    7008:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 26, SXCoord + 2, SYCoord + 28, 0x59E4);
    700c:	00967904 	movi	r2,23012
    7010:	d8800015 	stw	r2,0(sp)
    7014:	01c00704 	movi	r7,28
    7018:	01800084 	movi	r6,2
    701c:	01400684 	movi	r5,26
    7020:	0009883a 	mov	r4,zero
    7024:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 29, SXCoord + 5, SYCoord + 29, 0x59E4);
    7028:	00967904 	movi	r2,23012
    702c:	d8800015 	stw	r2,0(sp)
    7030:	01c00744 	movi	r7,29
    7034:	01800144 	movi	r6,5
    7038:	01400744 	movi	r5,29
    703c:	01000104 	movi	r4,4
    7040:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 31, SXCoord + 6, SYCoord + 36, 0x59E4);
    7044:	00967904 	movi	r2,23012
    7048:	d8800015 	stw	r2,0(sp)
    704c:	01c00904 	movi	r7,36
    7050:	01800184 	movi	r6,6
    7054:	014007c4 	movi	r5,31
    7058:	01000104 	movi	r4,4
    705c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 9, SXCoord + 4, SYCoord + 18, 0x59E4);
    7060:	00967904 	movi	r2,23012
    7064:	d8800015 	stw	r2,0(sp)
    7068:	01c00484 	movi	r7,18
    706c:	01800104 	movi	r6,4
    7070:	01400244 	movi	r5,9
    7074:	01000104 	movi	r4,4
    7078:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 9, SXCoord + 5, SYCoord + 17, 0x59E4);
    707c:	00967904 	movi	r2,23012
    7080:	d8800015 	stw	r2,0(sp)
    7084:	01c00444 	movi	r7,17
    7088:	01800144 	movi	r6,5
    708c:	01400244 	movi	r5,9
    7090:	01000144 	movi	r4,5
    7094:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 9, SXCoord + 25, SYCoord + 16, 0x59E4);
    7098:	00967904 	movi	r2,23012
    709c:	d8800015 	stw	r2,0(sp)
    70a0:	01c00404 	movi	r7,16
    70a4:	01800644 	movi	r6,25
    70a8:	01400244 	movi	r5,9
    70ac:	01000184 	movi	r4,6
    70b0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 9, SXCoord + 26, SYCoord + 17, 0x59E4);
    70b4:	00967904 	movi	r2,23012
    70b8:	d8800015 	stw	r2,0(sp)
    70bc:	01c00444 	movi	r7,17
    70c0:	01800684 	movi	r6,26
    70c4:	01400244 	movi	r5,9
    70c8:	01000684 	movi	r4,26
    70cc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 27, SYCoord + 9, SXCoord + 27, SYCoord + 18, 0x59E4);
    70d0:	00967904 	movi	r2,23012
    70d4:	d8800015 	stw	r2,0(sp)
    70d8:	01c00484 	movi	r7,18
    70dc:	018006c4 	movi	r6,27
    70e0:	01400244 	movi	r5,9
    70e4:	010006c4 	movi	r4,27
    70e8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 13, SXCoord + 31, SYCoord + 22, 0x59E4);
    70ec:	00967904 	movi	r2,23012
    70f0:	d8800015 	stw	r2,0(sp)
    70f4:	01c00584 	movi	r7,22
    70f8:	018007c4 	movi	r6,31
    70fc:	01400344 	movi	r5,13
    7100:	01000704 	movi	r4,28
    7104:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 31, SYCoord + 25, SXCoord + 31, SYCoord + 25, 0x59E4);
    7108:	00967904 	movi	r2,23012
    710c:	d8800015 	stw	r2,0(sp)
    7110:	01c00644 	movi	r7,25
    7114:	018007c4 	movi	r6,31
    7118:	01400644 	movi	r5,25
    711c:	010007c4 	movi	r4,31
    7120:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 29, SYCoord + 26, SXCoord + 31, SYCoord + 28, 0x59E4);
    7124:	00967904 	movi	r2,23012
    7128:	d8800015 	stw	r2,0(sp)
    712c:	01c00704 	movi	r7,28
    7130:	018007c4 	movi	r6,31
    7134:	01400684 	movi	r5,26
    7138:	01000744 	movi	r4,29
    713c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 29, SXCoord + 27, SYCoord + 29, 0x59E4);
    7140:	00967904 	movi	r2,23012
    7144:	d8800015 	stw	r2,0(sp)
    7148:	01c00744 	movi	r7,29
    714c:	018006c4 	movi	r6,27
    7150:	01400744 	movi	r5,29
    7154:	01000684 	movi	r4,26
    7158:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 31, SXCoord + 27, SYCoord + 36, 0x59E4);
    715c:	00967904 	movi	r2,23012
    7160:	d8800015 	stw	r2,0(sp)
    7164:	01c00904 	movi	r7,36
    7168:	018006c4 	movi	r6,27
    716c:	014007c4 	movi	r5,31
    7170:	01000644 	movi	r4,25
    7174:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 5, SXCoord + 23, SYCoord + 8, 0x59E4);
    7178:	00967904 	movi	r2,23012
    717c:	d8800015 	stw	r2,0(sp)
    7180:	01c00204 	movi	r7,8
    7184:	018005c4 	movi	r6,23
    7188:	01400144 	movi	r5,5
    718c:	01000304 	movi	r4,12
    7190:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 1, SXCoord + 19, SYCoord + 4, 0x59E4);
    7194:	00967904 	movi	r2,23012
    7198:	d8800015 	stw	r2,0(sp)
    719c:	01c00104 	movi	r7,4
    71a0:	018004c4 	movi	r6,19
    71a4:	01400044 	movi	r5,1
    71a8:	01000304 	movi	r4,12
    71ac:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord, SXCoord + 16, SYCoord, 0x59E4);
    71b0:	00967904 	movi	r2,23012
    71b4:	d8800015 	stw	r2,0(sp)
    71b8:	000f883a 	mov	r7,zero
    71bc:	01800404 	movi	r6,16
    71c0:	000b883a 	mov	r5,zero
    71c4:	010002c4 	movi	r4,11
    71c8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 1, SXCoord + 11, SYCoord + 1, 0x59E4);
    71cc:	00967904 	movi	r2,23012
    71d0:	d8800015 	stw	r2,0(sp)
    71d4:	01c00044 	movi	r7,1
    71d8:	018002c4 	movi	r6,11
    71dc:	01400044 	movi	r5,1
    71e0:	01000284 	movi	r4,10
    71e4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 20, SXCoord + 8, SYCoord + 20, 0x59E4);
    71e8:	00967904 	movi	r2,23012
    71ec:	d8800015 	stw	r2,0(sp)
    71f0:	01c00504 	movi	r7,20
    71f4:	01800204 	movi	r6,8
    71f8:	01400504 	movi	r5,20
    71fc:	010001c4 	movi	r4,7
    7200:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 20, SXCoord + 12, SYCoord + 20, 0x59E4);
    7204:	00967904 	movi	r2,23012
    7208:	d8800015 	stw	r2,0(sp)
    720c:	01c00504 	movi	r7,20
    7210:	01800304 	movi	r6,12
    7214:	01400504 	movi	r5,20
    7218:	010002c4 	movi	r4,11
    721c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 21, SXCoord + 10, SYCoord + 21, 0x59E4);
    7220:	00967904 	movi	r2,23012
    7224:	d8800015 	stw	r2,0(sp)
    7228:	01c00544 	movi	r7,21
    722c:	01800284 	movi	r6,10
    7230:	01400544 	movi	r5,21
    7234:	010001c4 	movi	r4,7
    7238:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 20, SXCoord + 12, SYCoord + 20, 0x59E4);
    723c:	00967904 	movi	r2,23012
    7240:	d8800015 	stw	r2,0(sp)
    7244:	01c00504 	movi	r7,20
    7248:	01800304 	movi	r6,12
    724c:	01400504 	movi	r5,20
    7250:	01000204 	movi	r4,8
    7254:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 19, SXCoord + 12, SYCoord + 19, 0x59E4);
    7258:	00967904 	movi	r2,23012
    725c:	d8800015 	stw	r2,0(sp)
    7260:	01c004c4 	movi	r7,19
    7264:	01800304 	movi	r6,12
    7268:	014004c4 	movi	r5,19
    726c:	01000284 	movi	r4,10
    7270:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 21, SXCoord + 24, SYCoord + 21, 0x59E4);
    7274:	00967904 	movi	r2,23012
    7278:	d8800015 	stw	r2,0(sp)
    727c:	01c00544 	movi	r7,21
    7280:	01800604 	movi	r6,24
    7284:	01400544 	movi	r5,21
    7288:	01000544 	movi	r4,21
    728c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 20, SXCoord + 23, SYCoord + 20, 0x59E4);
    7290:	00967904 	movi	r2,23012
    7294:	d8800015 	stw	r2,0(sp)
    7298:	01c00504 	movi	r7,20
    729c:	018005c4 	movi	r6,23
    72a0:	01400504 	movi	r5,20
    72a4:	010004c4 	movi	r4,19
    72a8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 19, SXCoord + 21, SYCoord + 19, 0x59E4);
    72ac:	00967904 	movi	r2,23012
    72b0:	d8800015 	stw	r2,0(sp)
    72b4:	01c004c4 	movi	r7,19
    72b8:	01800544 	movi	r6,21
    72bc:	014004c4 	movi	r5,19
    72c0:	010004c4 	movi	r4,19
    72c4:	00089f00 	call	89f0 <VGA_box>

  // Render Glasses
  VGA_box(SXCoord, SYCoord + 23, SXCoord + 13, SYCoord + 23, 0x0000);
    72c8:	d8000015 	stw	zero,0(sp)
    72cc:	01c005c4 	movi	r7,23
    72d0:	01800344 	movi	r6,13
    72d4:	014005c4 	movi	r5,23
    72d8:	0009883a 	mov	r4,zero
    72dc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 24, SXCoord + 3, SYCoord + 24, 0x0000);
    72e0:	d8000015 	stw	zero,0(sp)
    72e4:	01c00604 	movi	r7,24
    72e8:	018000c4 	movi	r6,3
    72ec:	01400604 	movi	r5,24
    72f0:	0009883a 	mov	r4,zero
    72f4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 25, SXCoord + 3, SYCoord + 25, 0x0000);
    72f8:	d8000015 	stw	zero,0(sp)
    72fc:	01c00644 	movi	r7,25
    7300:	018000c4 	movi	r6,3
    7304:	01400644 	movi	r5,25
    7308:	01000044 	movi	r4,1
    730c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 3, SYCoord + 26, SXCoord + 3, SYCoord + 29, 0x0000);
    7310:	d8000015 	stw	zero,0(sp)
    7314:	01c00744 	movi	r7,29
    7318:	018000c4 	movi	r6,3
    731c:	01400684 	movi	r5,26
    7320:	010000c4 	movi	r4,3
    7324:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 30, SXCoord + 12, SYCoord + 30, 0x0000);
    7328:	d8000015 	stw	zero,0(sp)
    732c:	01c00784 	movi	r7,30
    7330:	01800304 	movi	r6,12
    7334:	01400784 	movi	r5,30
    7338:	01000104 	movi	r4,4
    733c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 26, SXCoord + 13, SYCoord + 29, 0x0000);
    7340:	d8000015 	stw	zero,0(sp)
    7344:	01c00744 	movi	r7,29
    7348:	01800344 	movi	r6,13
    734c:	01400684 	movi	r5,26
    7350:	01000344 	movi	r4,13
    7354:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 24, SXCoord + 17, SYCoord + 25, 0x0000);
    7358:	d8000015 	stw	zero,0(sp)
    735c:	01c00644 	movi	r7,25
    7360:	01800444 	movi	r6,17
    7364:	01400604 	movi	r5,24
    7368:	01000384 	movi	r4,14
    736c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 23, SXCoord + 31, SYCoord + 23, 0x0000);
    7370:	d8000015 	stw	zero,0(sp)
    7374:	01c005c4 	movi	r7,23
    7378:	018007c4 	movi	r6,31
    737c:	014005c4 	movi	r5,23
    7380:	01000484 	movi	r4,18
    7384:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 24, SXCoord + 31, SYCoord + 24, 0x0000);
    7388:	d8000015 	stw	zero,0(sp)
    738c:	01c00604 	movi	r7,24
    7390:	018007c4 	movi	r6,31
    7394:	01400604 	movi	r5,24
    7398:	01000704 	movi	r4,28
    739c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 25, SXCoord + 30, SYCoord + 25, 0x0000);
    73a0:	d8000015 	stw	zero,0(sp)
    73a4:	01c00644 	movi	r7,25
    73a8:	01800784 	movi	r6,30
    73ac:	01400644 	movi	r5,25
    73b0:	01000704 	movi	r4,28
    73b4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 26, SXCoord + 28, SYCoord + 29, 0x0000);
    73b8:	d8000015 	stw	zero,0(sp)
    73bc:	01c00744 	movi	r7,29
    73c0:	01800704 	movi	r6,28
    73c4:	01400684 	movi	r5,26
    73c8:	01000704 	movi	r4,28
    73cc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 30, SXCoord + 27, SYCoord + 30, 0x0000);
    73d0:	d8000015 	stw	zero,0(sp)
    73d4:	01c00784 	movi	r7,30
    73d8:	018006c4 	movi	r6,27
    73dc:	01400784 	movi	r5,30
    73e0:	010004c4 	movi	r4,19
    73e4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 26, SXCoord + 18, SYCoord + 29, 0x0000);
    73e8:	d8000015 	stw	zero,0(sp)
    73ec:	01c00744 	movi	r7,29
    73f0:	01800484 	movi	r6,18
    73f4:	01400684 	movi	r5,26
    73f8:	01000484 	movi	r4,18
    73fc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 25, SXCoord + 11, SYCoord + 28, 0x0000);
    7400:	d8000015 	stw	zero,0(sp)
    7404:	01c00704 	movi	r7,28
    7408:	018002c4 	movi	r6,11
    740c:	01400644 	movi	r5,25
    7410:	01000204 	movi	r4,8
    7414:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 25, SXCoord + 23, SYCoord + 28, 0x0000);
    7418:	d8000015 	stw	zero,0(sp)
    741c:	01c00704 	movi	r7,28
    7420:	018005c4 	movi	r6,23
    7424:	01400644 	movi	r5,25
    7428:	01000504 	movi	r4,20
    742c:	00089f00 	call	89f0 <VGA_box>

  // Render Mouth
  VGA_box(SXCoord + 10, SYCoord + 32, SXCoord + 21, SYCoord + 32, 0x0000);
    7430:	d8000015 	stw	zero,0(sp)
    7434:	01c00804 	movi	r7,32
    7438:	01800544 	movi	r6,21
    743c:	01400804 	movi	r5,32
    7440:	01000284 	movi	r4,10
    7444:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 9, SYCoord + 33, SXCoord + 10, SYCoord + 33, 0x0000);
    7448:	d8000015 	stw	zero,0(sp)
    744c:	01c00844 	movi	r7,33
    7450:	01800284 	movi	r6,10
    7454:	01400844 	movi	r5,33
    7458:	01000244 	movi	r4,9
    745c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 33, SXCoord + 22, SYCoord + 33, 0x0000);
    7460:	d8000015 	stw	zero,0(sp)
    7464:	01c00844 	movi	r7,33
    7468:	01800584 	movi	r6,22
    746c:	01400844 	movi	r5,33
    7470:	01000544 	movi	r4,21
    7474:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 9, SYCoord + 34, SXCoord + 22, SYCoord + 34, 0x0000);
    7478:	d8000015 	stw	zero,0(sp)
    747c:	01c00884 	movi	r7,34
    7480:	01800584 	movi	r6,22
    7484:	01400884 	movi	r5,34
    7488:	01000244 	movi	r4,9
    748c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 35, SXCoord + 14, SYCoord + 35, 0x0000);
    7490:	d8000015 	stw	zero,0(sp)
    7494:	01c008c4 	movi	r7,35
    7498:	01800384 	movi	r6,14
    749c:	014008c4 	movi	r5,35
    74a0:	01000284 	movi	r4,10
    74a4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 17, SYCoord + 35, SXCoord + 21, SYCoord + 35, 0x0000);
    74a8:	d8000015 	stw	zero,0(sp)
    74ac:	01c008c4 	movi	r7,35
    74b0:	01800544 	movi	r6,21
    74b4:	014008c4 	movi	r5,35
    74b8:	01000444 	movi	r4,17
    74bc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 36, SXCoord + 13, SYCoord + 36, 0x0000);
    74c0:	d8000015 	stw	zero,0(sp)
    74c4:	01c00904 	movi	r7,36
    74c8:	01800344 	movi	r6,13
    74cc:	01400904 	movi	r5,36
    74d0:	010002c4 	movi	r4,11
    74d4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 36, SXCoord + 20, SYCoord + 36, 0x0000);
    74d8:	d8000015 	stw	zero,0(sp)
    74dc:	01c00904 	movi	r7,36
    74e0:	01800504 	movi	r6,20
    74e4:	01400904 	movi	r5,36
    74e8:	01000484 	movi	r4,18
    74ec:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 37, SXCoord + 19, SYCoord + 37, 0x0000);
    74f0:	d8000015 	stw	zero,0(sp)
    74f4:	01c00944 	movi	r7,37
    74f8:	018004c4 	movi	r6,19
    74fc:	01400944 	movi	r5,37
    7500:	01000304 	movi	r4,12
    7504:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 33, SXCoord + 20, SYCoord + 33, 0xFFFF);
    7508:	00bfffc4 	movi	r2,-1
    750c:	d8800015 	stw	r2,0(sp)
    7510:	01c00844 	movi	r7,33
    7514:	01800504 	movi	r6,20
    7518:	01400844 	movi	r5,33
    751c:	010002c4 	movi	r4,11
    7520:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 15, SYCoord + 35, SXCoord + 16, SYCoord + 35, 0xFD79);
    7524:	00bf5e44 	movi	r2,-647
    7528:	d8800015 	stw	r2,0(sp)
    752c:	01c008c4 	movi	r7,35
    7530:	01800404 	movi	r6,16
    7534:	014008c4 	movi	r5,35
    7538:	010003c4 	movi	r4,15
    753c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 36, SXCoord + 17, SYCoord + 36, 0xFD79);
    7540:	00bf5e44 	movi	r2,-647
    7544:	d8800015 	stw	r2,0(sp)
    7548:	01c00904 	movi	r7,36
    754c:	01800444 	movi	r6,17
    7550:	01400904 	movi	r5,36
    7554:	01000384 	movi	r4,14
    7558:	00089f00 	call	89f0 <VGA_box>

  // Render Skin
  VGA_box(SXCoord + 6, SYCoord + 17, SXCoord + 25, SYCoord + 17, 0xF6DA);
    755c:	00bdb684 	movi	r2,-2342
    7560:	d8800015 	stw	r2,0(sp)
    7564:	01c00444 	movi	r7,17
    7568:	01800644 	movi	r6,25
    756c:	01400444 	movi	r5,17
    7570:	01000184 	movi	r4,6
    7574:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 18, SXCoord + 26, SYCoord + 18, 0xF6DA);
    7578:	00bdb684 	movi	r2,-2342
    757c:	d8800015 	stw	r2,0(sp)
    7580:	01c00484 	movi	r7,18
    7584:	01800684 	movi	r6,26
    7588:	01400484 	movi	r5,18
    758c:	01000144 	movi	r4,5
    7590:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 19, SXCoord + 9, SYCoord + 19, 0xF6DA);
    7594:	00bdb684 	movi	r2,-2342
    7598:	d8800015 	stw	r2,0(sp)
    759c:	01c004c4 	movi	r7,19
    75a0:	01800244 	movi	r6,9
    75a4:	014004c4 	movi	r5,19
    75a8:	01000104 	movi	r4,4
    75ac:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 22, SYCoord + 19, SXCoord + 27, SYCoord + 19, 0xF6DA);
    75b0:	00bdb684 	movi	r2,-2342
    75b4:	d8800015 	stw	r2,0(sp)
    75b8:	01c004c4 	movi	r7,19
    75bc:	018006c4 	movi	r6,27
    75c0:	014004c4 	movi	r5,19
    75c4:	01000584 	movi	r4,22
    75c8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 20, SXCoord + 7, SYCoord + 20, 0xF6DA);
    75cc:	00bdb684 	movi	r2,-2342
    75d0:	d8800015 	stw	r2,0(sp)
    75d4:	01c00504 	movi	r7,20
    75d8:	018001c4 	movi	r6,7
    75dc:	01400504 	movi	r5,20
    75e0:	01000104 	movi	r4,4
    75e4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 20, SXCoord + 27, SYCoord + 20, 0xF6DA);
    75e8:	00bdb684 	movi	r2,-2342
    75ec:	d8800015 	stw	r2,0(sp)
    75f0:	01c00504 	movi	r7,20
    75f4:	018006c4 	movi	r6,27
    75f8:	01400504 	movi	r5,20
    75fc:	01000604 	movi	r4,24
    7600:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 19, SXCoord + 18, SYCoord + 20, 0xF6DA);
    7604:	00bdb684 	movi	r2,-2342
    7608:	d8800015 	stw	r2,0(sp)
    760c:	01c00504 	movi	r7,20
    7610:	01800484 	movi	r6,18
    7614:	014004c4 	movi	r5,19
    7618:	01000344 	movi	r4,13
    761c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 21, SXCoord + 6, SYCoord + 21, 0xF6DA);
    7620:	00bdb684 	movi	r2,-2342
    7624:	d8800015 	stw	r2,0(sp)
    7628:	01c00544 	movi	r7,21
    762c:	01800184 	movi	r6,6
    7630:	01400544 	movi	r5,21
    7634:	01000104 	movi	r4,4
    7638:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 21, SXCoord + 20, SYCoord + 21, 0xF6DA);
    763c:	00bdb684 	movi	r2,-2342
    7640:	d8800015 	stw	r2,0(sp)
    7644:	01c00544 	movi	r7,21
    7648:	01800504 	movi	r6,20
    764c:	01400544 	movi	r5,21
    7650:	010002c4 	movi	r4,11
    7654:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 21, SXCoord + 27, SYCoord + 21, 0xF6DA);
    7658:	00bdb684 	movi	r2,-2342
    765c:	d8800015 	stw	r2,0(sp)
    7660:	01c00544 	movi	r7,21
    7664:	018006c4 	movi	r6,27
    7668:	01400544 	movi	r5,21
    766c:	01000644 	movi	r4,25
    7670:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 22, SXCoord + 27, SYCoord + 22, 0xF6DA);
    7674:	00bdb684 	movi	r2,-2342
    7678:	d8800015 	stw	r2,0(sp)
    767c:	01c00584 	movi	r7,22
    7680:	018006c4 	movi	r6,27
    7684:	01400584 	movi	r5,22
    7688:	01000104 	movi	r4,4
    768c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 23, SXCoord + 17, SYCoord + 23, 0xF6DA);
    7690:	00bdb684 	movi	r2,-2342
    7694:	d8800015 	stw	r2,0(sp)
    7698:	01c005c4 	movi	r7,23
    769c:	01800444 	movi	r6,17
    76a0:	014005c4 	movi	r5,23
    76a4:	01000384 	movi	r4,14
    76a8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 24, SXCoord + 13, SYCoord + 24, 0xF6DA);
    76ac:	00bdb684 	movi	r2,-2342
    76b0:	d8800015 	stw	r2,0(sp)
    76b4:	01c00604 	movi	r7,24
    76b8:	01800344 	movi	r6,13
    76bc:	01400604 	movi	r5,24
    76c0:	01000104 	movi	r4,4
    76c4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 25, SXCoord + 7, SYCoord + 28, 0xF6DA);
    76c8:	00bdb684 	movi	r2,-2342
    76cc:	d8800015 	stw	r2,0(sp)
    76d0:	01c00704 	movi	r7,28
    76d4:	018001c4 	movi	r6,7
    76d8:	01400644 	movi	r5,25
    76dc:	01000104 	movi	r4,4
    76e0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 29, SXCoord + 6, SYCoord + 29, 0xF6DA);
    76e4:	00bdb684 	movi	r2,-2342
    76e8:	d8800015 	stw	r2,0(sp)
    76ec:	01c00744 	movi	r7,29
    76f0:	01800184 	movi	r6,6
    76f4:	01400744 	movi	r5,29
    76f8:	01000184 	movi	r4,6
    76fc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 29, SXCoord + 12, SYCoord + 29, 0xF6DA);
    7700:	00bdb684 	movi	r2,-2342
    7704:	d8800015 	stw	r2,0(sp)
    7708:	01c00744 	movi	r7,29
    770c:	01800304 	movi	r6,12
    7710:	01400744 	movi	r5,29
    7714:	010002c4 	movi	r4,11
    7718:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 25, SXCoord + 13, SYCoord + 25, 0xF6DA);
    771c:	00bdb684 	movi	r2,-2342
    7720:	d8800015 	stw	r2,0(sp)
    7724:	01c00644 	movi	r7,25
    7728:	01800344 	movi	r6,13
    772c:	01400644 	movi	r5,25
    7730:	01000304 	movi	r4,12
    7734:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 26, SXCoord + 12, SYCoord + 28, 0xF6DA);
    7738:	00bdb684 	movi	r2,-2342
    773c:	d8800015 	stw	r2,0(sp)
    7740:	01c00704 	movi	r7,28
    7744:	01800304 	movi	r6,12
    7748:	01400684 	movi	r5,26
    774c:	01000304 	movi	r4,12
    7750:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 24, SXCoord + 27, SYCoord + 24, 0xF6DA);
    7754:	00bdb684 	movi	r2,-2342
    7758:	d8800015 	stw	r2,0(sp)
    775c:	01c00604 	movi	r7,24
    7760:	018006c4 	movi	r6,27
    7764:	01400604 	movi	r5,24
    7768:	01000484 	movi	r4,18
    776c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 25, SXCoord + 19, SYCoord + 25, 0xF6DA);
    7770:	00bdb684 	movi	r2,-2342
    7774:	d8800015 	stw	r2,0(sp)
    7778:	01c00644 	movi	r7,25
    777c:	018004c4 	movi	r6,19
    7780:	01400644 	movi	r5,25
    7784:	01000484 	movi	r4,18
    7788:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 26, SXCoord + 19, SYCoord + 28, 0xF6DA);
    778c:	00bdb684 	movi	r2,-2342
    7790:	d8800015 	stw	r2,0(sp)
    7794:	01c00704 	movi	r7,28
    7798:	018004c4 	movi	r6,19
    779c:	01400684 	movi	r5,26
    77a0:	010004c4 	movi	r4,19
    77a4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 29, SXCoord + 20, SYCoord + 29, 0xF6DA);
    77a8:	00bdb684 	movi	r2,-2342
    77ac:	d8800015 	stw	r2,0(sp)
    77b0:	01c00744 	movi	r7,29
    77b4:	01800504 	movi	r6,20
    77b8:	01400744 	movi	r5,29
    77bc:	010004c4 	movi	r4,19
    77c0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 29, SXCoord + 25, SYCoord + 29, 0xF6DA);
    77c4:	00bdb684 	movi	r2,-2342
    77c8:	d8800015 	stw	r2,0(sp)
    77cc:	01c00744 	movi	r7,29
    77d0:	01800644 	movi	r6,25
    77d4:	01400744 	movi	r5,29
    77d8:	01000644 	movi	r4,25
    77dc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 25, SXCoord + 27, SYCoord + 28, 0xF6DA);
    77e0:	00bdb684 	movi	r2,-2342
    77e4:	d8800015 	stw	r2,0(sp)
    77e8:	01c00704 	movi	r7,28
    77ec:	018006c4 	movi	r6,27
    77f0:	01400644 	movi	r5,25
    77f4:	01000604 	movi	r4,24
    77f8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 26, SXCoord + 17, SYCoord + 29, 0xF6DA);
    77fc:	00bdb684 	movi	r2,-2342
    7800:	d8800015 	stw	r2,0(sp)
    7804:	01c00744 	movi	r7,29
    7808:	01800444 	movi	r6,17
    780c:	01400684 	movi	r5,26
    7810:	01000384 	movi	r4,14
    7814:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 30, SXCoord + 18, SYCoord + 30, 0xF6DA);
    7818:	00bdb684 	movi	r2,-2342
    781c:	d8800015 	stw	r2,0(sp)
    7820:	01c00784 	movi	r7,30
    7824:	01800484 	movi	r6,18
    7828:	01400784 	movi	r5,30
    782c:	01000344 	movi	r4,13
    7830:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 31, SXCoord + 20, SYCoord + 31, 0xF6DA);
    7834:	00bdb684 	movi	r2,-2342
    7838:	d8800015 	stw	r2,0(sp)
    783c:	01c007c4 	movi	r7,31
    7840:	01800504 	movi	r6,20
    7844:	014007c4 	movi	r5,31
    7848:	010002c4 	movi	r4,11
    784c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 37, SXCoord + 6, SYCoord + 37, 0xF6DA);
    7850:	00bdb684 	movi	r2,-2342
    7854:	d8800015 	stw	r2,0(sp)
    7858:	01c00944 	movi	r7,37
    785c:	01800184 	movi	r6,6
    7860:	01400944 	movi	r5,37
    7864:	01000184 	movi	r4,6
    7868:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 37, SXCoord + 11, SYCoord + 37, 0xF6DA);
    786c:	00bdb684 	movi	r2,-2342
    7870:	d8800015 	stw	r2,0(sp)
    7874:	01c00944 	movi	r7,37
    7878:	018002c4 	movi	r6,11
    787c:	01400944 	movi	r5,37
    7880:	010002c4 	movi	r4,11
    7884:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 37, SXCoord + 20, SYCoord + 37, 0xF6DA);
    7888:	00bdb684 	movi	r2,-2342
    788c:	d8800015 	stw	r2,0(sp)
    7890:	01c00944 	movi	r7,37
    7894:	01800504 	movi	r6,20
    7898:	01400944 	movi	r5,37
    789c:	01000504 	movi	r4,20
    78a0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 37, SXCoord + 25, SYCoord + 37, 0xF6DA);
    78a4:	00bdb684 	movi	r2,-2342
    78a8:	d8800015 	stw	r2,0(sp)
    78ac:	01c00944 	movi	r7,37
    78b0:	01800644 	movi	r6,25
    78b4:	01400944 	movi	r5,37
    78b8:	01000644 	movi	r4,25
    78bc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 38, SXCoord + 20, SYCoord + 40, 0xF6DA);
    78c0:	00bdb684 	movi	r2,-2342
    78c4:	d8800015 	stw	r2,0(sp)
    78c8:	01c00a04 	movi	r7,40
    78cc:	01800504 	movi	r6,20
    78d0:	01400984 	movi	r5,38
    78d4:	010002c4 	movi	r4,11
    78d8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 41, SXCoord + 17, SYCoord + 44, 0xF6DA);
    78dc:	00bdb684 	movi	r2,-2342
    78e0:	d8800015 	stw	r2,0(sp)
    78e4:	01c00b04 	movi	r7,44
    78e8:	01800444 	movi	r6,17
    78ec:	01400a44 	movi	r5,41
    78f0:	01000384 	movi	r4,14
    78f4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 45, SXCoord + 19, SYCoord + 46, 0xF6DA);
    78f8:	00bdb684 	movi	r2,-2342
    78fc:	d8800015 	stw	r2,0(sp)
    7900:	01c00b84 	movi	r7,46
    7904:	018004c4 	movi	r6,19
    7908:	01400b44 	movi	r5,45
    790c:	01000304 	movi	r4,12
    7910:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 47, SXCoord + 17, SYCoord + 48, 0xF6DA);
    7914:	00bdb684 	movi	r2,-2342
    7918:	d8800015 	stw	r2,0(sp)
    791c:	01c00c04 	movi	r7,48
    7920:	01800444 	movi	r6,17
    7924:	01400bc4 	movi	r5,47
    7928:	01000384 	movi	r4,14
    792c:	00089f00 	call	89f0 <VGA_box>

  // Render Tears
  VGA_box(SXCoord + 7, SYCoord + 29, SXCoord + 10, SYCoord + 29, 0x9EDD);
    7930:	00a7b744 	movi	r2,-24867
    7934:	d8800015 	stw	r2,0(sp)
    7938:	01c00744 	movi	r7,29
    793c:	01800284 	movi	r6,10
    7940:	01400744 	movi	r5,29
    7944:	010001c4 	movi	r4,7
    7948:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 31, SXCoord + 10, SYCoord + 31, 0x9EDD);
    794c:	00a7b744 	movi	r2,-24867
    7950:	d8800015 	stw	r2,0(sp)
    7954:	01c007c4 	movi	r7,31
    7958:	01800284 	movi	r6,10
    795c:	014007c4 	movi	r5,31
    7960:	010001c4 	movi	r4,7
    7964:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 32, SXCoord + 9, SYCoord + 32, 0x9EDD);
    7968:	00a7b744 	movi	r2,-24867
    796c:	d8800015 	stw	r2,0(sp)
    7970:	01c00804 	movi	r7,32
    7974:	01800244 	movi	r6,9
    7978:	01400804 	movi	r5,32
    797c:	010001c4 	movi	r4,7
    7980:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 33, SXCoord + 8, SYCoord + 34, 0x9EDD);
    7984:	00a7b744 	movi	r2,-24867
    7988:	d8800015 	stw	r2,0(sp)
    798c:	01c00884 	movi	r7,34
    7990:	01800204 	movi	r6,8
    7994:	01400844 	movi	r5,33
    7998:	010001c4 	movi	r4,7
    799c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 35, SXCoord + 9, SYCoord + 35, 0x9EDD);
    79a0:	00a7b744 	movi	r2,-24867
    79a4:	d8800015 	stw	r2,0(sp)
    79a8:	01c008c4 	movi	r7,35
    79ac:	01800244 	movi	r6,9
    79b0:	014008c4 	movi	r5,35
    79b4:	010001c4 	movi	r4,7
    79b8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 36, SXCoord + 10, SYCoord + 38, 0x9EDD);
    79bc:	00a7b744 	movi	r2,-24867
    79c0:	d8800015 	stw	r2,0(sp)
    79c4:	01c00984 	movi	r7,38
    79c8:	01800284 	movi	r6,10
    79cc:	01400904 	movi	r5,36
    79d0:	010001c4 	movi	r4,7
    79d4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 39, SXCoord + 10, SYCoord + 39, 0x9EDD);
    79d8:	00a7b744 	movi	r2,-24867
    79dc:	d8800015 	stw	r2,0(sp)
    79e0:	01c009c4 	movi	r7,39
    79e4:	01800284 	movi	r6,10
    79e8:	014009c4 	movi	r5,39
    79ec:	01000204 	movi	r4,8
    79f0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 9, SYCoord + 40, SXCoord + 10, SYCoord + 40, 0x9EDD);
    79f4:	00a7b744 	movi	r2,-24867
    79f8:	d8800015 	stw	r2,0(sp)
    79fc:	01c00a04 	movi	r7,40
    7a00:	01800284 	movi	r6,10
    7a04:	01400a04 	movi	r5,40
    7a08:	01000244 	movi	r4,9
    7a0c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 29, SXCoord + 24, SYCoord + 29, 0x9EDD);
    7a10:	00a7b744 	movi	r2,-24867
    7a14:	d8800015 	stw	r2,0(sp)
    7a18:	01c00744 	movi	r7,29
    7a1c:	01800604 	movi	r6,24
    7a20:	01400744 	movi	r5,29
    7a24:	01000544 	movi	r4,21
    7a28:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 31, SXCoord + 24, SYCoord + 31, 0x9EDD);
    7a2c:	00a7b744 	movi	r2,-24867
    7a30:	d8800015 	stw	r2,0(sp)
    7a34:	01c007c4 	movi	r7,31
    7a38:	01800604 	movi	r6,24
    7a3c:	014007c4 	movi	r5,31
    7a40:	01000544 	movi	r4,21
    7a44:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 22, SYCoord + 32, SXCoord + 24, SYCoord + 32, 0x9EDD);
    7a48:	00a7b744 	movi	r2,-24867
    7a4c:	d8800015 	stw	r2,0(sp)
    7a50:	01c00804 	movi	r7,32
    7a54:	01800604 	movi	r6,24
    7a58:	01400804 	movi	r5,32
    7a5c:	01000584 	movi	r4,22
    7a60:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 23, SYCoord + 33, SXCoord + 24, SYCoord + 34, 0x9EDD);
    7a64:	00a7b744 	movi	r2,-24867
    7a68:	d8800015 	stw	r2,0(sp)
    7a6c:	01c00884 	movi	r7,34
    7a70:	01800604 	movi	r6,24
    7a74:	01400844 	movi	r5,33
    7a78:	010005c4 	movi	r4,23
    7a7c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 22, SYCoord + 35, SXCoord + 24, SYCoord + 35, 0x9EDD);
    7a80:	00a7b744 	movi	r2,-24867
    7a84:	d8800015 	stw	r2,0(sp)
    7a88:	01c008c4 	movi	r7,35
    7a8c:	01800604 	movi	r6,24
    7a90:	014008c4 	movi	r5,35
    7a94:	01000584 	movi	r4,22
    7a98:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 36, SXCoord + 24, SYCoord + 38, 0x9EDD);
    7a9c:	00a7b744 	movi	r2,-24867
    7aa0:	d8800015 	stw	r2,0(sp)
    7aa4:	01c00984 	movi	r7,38
    7aa8:	01800604 	movi	r6,24
    7aac:	01400904 	movi	r5,36
    7ab0:	01000544 	movi	r4,21
    7ab4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 39, SXCoord + 23, SYCoord + 39, 0x9EDD);
    7ab8:	00a7b744 	movi	r2,-24867
    7abc:	d8800015 	stw	r2,0(sp)
    7ac0:	01c009c4 	movi	r7,39
    7ac4:	018005c4 	movi	r6,23
    7ac8:	014009c4 	movi	r5,39
    7acc:	01000544 	movi	r4,21
    7ad0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 40, SXCoord + 22, SYCoord + 40, 0x9EDD);
    7ad4:	00a7b744 	movi	r2,-24867
    7ad8:	d8800015 	stw	r2,0(sp)
    7adc:	01c00a04 	movi	r7,40
    7ae0:	01800584 	movi	r6,22
    7ae4:	01400a04 	movi	r5,40
    7ae8:	01000544 	movi	r4,21
    7aec:	00089f00 	call	89f0 <VGA_box>

  // Render Shirt
  VGA_box(SXCoord + 10, SYCoord + 45, SXCoord + 11, SYCoord + 46, 0x2589);
    7af0:	00896244 	movi	r2,9609
    7af4:	d8800015 	stw	r2,0(sp)
    7af8:	01c00b84 	movi	r7,46
    7afc:	018002c4 	movi	r6,11
    7b00:	01400b44 	movi	r5,45
    7b04:	01000284 	movi	r4,10
    7b08:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 45, SXCoord + 21, SYCoord + 46, 0x2589);
    7b0c:	00896244 	movi	r2,9609
    7b10:	d8800015 	stw	r2,0(sp)
    7b14:	01c00b84 	movi	r7,46
    7b18:	01800544 	movi	r6,21
    7b1c:	01400b44 	movi	r5,45
    7b20:	01000504 	movi	r4,20
    7b24:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 47, SXCoord + 13, SYCoord + 48, 0x2589);
    7b28:	00896244 	movi	r2,9609
    7b2c:	d8800015 	stw	r2,0(sp)
    7b30:	01c00c04 	movi	r7,48
    7b34:	01800344 	movi	r6,13
    7b38:	01400bc4 	movi	r5,47
    7b3c:	01000204 	movi	r4,8
    7b40:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 47, SXCoord + 23, SYCoord + 48, 0x2589);
    7b44:	00896244 	movi	r2,9609
    7b48:	d8800015 	stw	r2,0(sp)
    7b4c:	01c00c04 	movi	r7,48
    7b50:	018005c4 	movi	r6,23
    7b54:	01400bc4 	movi	r5,47
    7b58:	01000484 	movi	r4,18
    7b5c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 49, SXCoord + 21, SYCoord + 50, 0x2589);
    7b60:	00896244 	movi	r2,9609
    7b64:	d8800015 	stw	r2,0(sp)
    7b68:	01c00c84 	movi	r7,50
    7b6c:	01800544 	movi	r6,21
    7b70:	01400c44 	movi	r5,49
    7b74:	01000284 	movi	r4,10
    7b78:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 51, SXCoord + 17, SYCoord + 52, 0x2589);
    7b7c:	00896244 	movi	r2,9609
    7b80:	d8800015 	stw	r2,0(sp)
    7b84:	01c00d04 	movi	r7,52
    7b88:	01800444 	movi	r6,17
    7b8c:	01400cc4 	movi	r5,51
    7b90:	01000384 	movi	r4,14
    7b94:	00089f00 	call	89f0 <VGA_box>
}
    7b98:	0001883a 	nop
    7b9c:	e037883a 	mov	sp,fp
    7ba0:	dfc00117 	ldw	ra,4(sp)
    7ba4:	df000017 	ldw	fp,0(sp)
    7ba8:	dec00204 	addi	sp,sp,8
    7bac:	f800283a 	ret

00007bb0 <spencerTimeRunningOutPose3>:


void spencerTimeRunningOutPose3(void)
{
    7bb0:	defffd04 	addi	sp,sp,-12
    7bb4:	dfc00215 	stw	ra,8(sp)
    7bb8:	df000115 	stw	fp,4(sp)
    7bbc:	df000104 	addi	fp,sp,4
  // Rendering Start – Spencer Time Running Out Pose (S11.png)

  // Render Exclamation Mark
  VGA_box(SXCoord, SYCoord + 1, SXCoord + 4, SYCoord + 1, 0x3A59);
    7bc0:	008e9644 	movi	r2,14937
    7bc4:	d8800015 	stw	r2,0(sp)
    7bc8:	01c00044 	movi	r7,1
    7bcc:	01800104 	movi	r6,4
    7bd0:	01400044 	movi	r5,1
    7bd4:	0009883a 	mov	r4,zero
    7bd8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 2, SXCoord + 3, SYCoord + 3, 0x3A59);
    7bdc:	008e9644 	movi	r2,14937
    7be0:	d8800015 	stw	r2,0(sp)
    7be4:	01c000c4 	movi	r7,3
    7be8:	018000c4 	movi	r6,3
    7bec:	01400084 	movi	r5,2
    7bf0:	01000044 	movi	r4,1
    7bf4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 2, SYCoord + 4, SXCoord + 2, SYCoord + 4, 0x3A59);
    7bf8:	008e9644 	movi	r2,14937
    7bfc:	d8800015 	stw	r2,0(sp)
    7c00:	01c00104 	movi	r7,4
    7c04:	01800084 	movi	r6,2
    7c08:	01400104 	movi	r5,4
    7c0c:	01000084 	movi	r4,2
    7c10:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 2, SYCoord + 6, SXCoord + 2, SYCoord + 6, 0x3A59);
    7c14:	008e9644 	movi	r2,14937
    7c18:	d8800015 	stw	r2,0(sp)
    7c1c:	01c00184 	movi	r7,6
    7c20:	01800084 	movi	r6,2
    7c24:	01400184 	movi	r5,6
    7c28:	01000084 	movi	r4,2
    7c2c:	00089f00 	call	89f0 <VGA_box>

  // Render Hair
  VGA_box(SXCoord, SYCoord + 14, SXCoord + 3, SYCoord + 23, 0x59E4);
    7c30:	00967904 	movi	r2,23012
    7c34:	d8800015 	stw	r2,0(sp)
    7c38:	01c005c4 	movi	r7,23
    7c3c:	018000c4 	movi	r6,3
    7c40:	01400384 	movi	r5,14
    7c44:	0009883a 	mov	r4,zero
    7c48:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 26, SXCoord, SYCoord + 26, 0x59E4);
    7c4c:	00967904 	movi	r2,23012
    7c50:	d8800015 	stw	r2,0(sp)
    7c54:	01c00684 	movi	r7,26
    7c58:	000d883a 	mov	r6,zero
    7c5c:	01400684 	movi	r5,26
    7c60:	0009883a 	mov	r4,zero
    7c64:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 27, SXCoord + 2, SYCoord + 29, 0x59E4);
    7c68:	00967904 	movi	r2,23012
    7c6c:	d8800015 	stw	r2,0(sp)
    7c70:	01c00744 	movi	r7,29
    7c74:	01800084 	movi	r6,2
    7c78:	014006c4 	movi	r5,27
    7c7c:	0009883a 	mov	r4,zero
    7c80:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 30, SXCoord + 5, SYCoord + 30, 0x59E4);
    7c84:	00967904 	movi	r2,23012
    7c88:	d8800015 	stw	r2,0(sp)
    7c8c:	01c00784 	movi	r7,30
    7c90:	01800144 	movi	r6,5
    7c94:	01400784 	movi	r5,30
    7c98:	01000104 	movi	r4,4
    7c9c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 32, SXCoord + 6, SYCoord + 32, 0x59E4);
    7ca0:	00967904 	movi	r2,23012
    7ca4:	d8800015 	stw	r2,0(sp)
    7ca8:	01c00804 	movi	r7,32
    7cac:	01800184 	movi	r6,6
    7cb0:	01400804 	movi	r5,32
    7cb4:	01000104 	movi	r4,4
    7cb8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 33, SXCoord + 5, SYCoord + 34, 0x59E4);
    7cbc:	00967904 	movi	r2,23012
    7cc0:	d8800015 	stw	r2,0(sp)
    7cc4:	01c00884 	movi	r7,34
    7cc8:	01800144 	movi	r6,5
    7ccc:	01400844 	movi	r5,33
    7cd0:	01000104 	movi	r4,4
    7cd4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 35, SXCoord + 6, SYCoord + 36, 0x59E4);
    7cd8:	00967904 	movi	r2,23012
    7cdc:	d8800015 	stw	r2,0(sp)
    7ce0:	01c00904 	movi	r7,36
    7ce4:	01800184 	movi	r6,6
    7ce8:	014008c4 	movi	r5,35
    7cec:	01000104 	movi	r4,4
    7cf0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 37, SXCoord + 5, SYCoord + 37, 0x59E4);
    7cf4:	00967904 	movi	r2,23012
    7cf8:	d8800015 	stw	r2,0(sp)
    7cfc:	01c00944 	movi	r7,37
    7d00:	01800144 	movi	r6,5
    7d04:	01400944 	movi	r5,37
    7d08:	01000104 	movi	r4,4
    7d0c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 10, SXCoord + 4, SYCoord + 19, 0x59E4);
    7d10:	00967904 	movi	r2,23012
    7d14:	d8800015 	stw	r2,0(sp)
    7d18:	01c004c4 	movi	r7,19
    7d1c:	01800104 	movi	r6,4
    7d20:	01400284 	movi	r5,10
    7d24:	01000104 	movi	r4,4
    7d28:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 10, SXCoord + 5, SYCoord + 18, 0x59E4);
    7d2c:	00967904 	movi	r2,23012
    7d30:	d8800015 	stw	r2,0(sp)
    7d34:	01c00484 	movi	r7,18
    7d38:	01800144 	movi	r6,5
    7d3c:	01400284 	movi	r5,10
    7d40:	01000144 	movi	r4,5
    7d44:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 10, SXCoord + 25, SYCoord + 17, 0x59E4);
    7d48:	00967904 	movi	r2,23012
    7d4c:	d8800015 	stw	r2,0(sp)
    7d50:	01c00444 	movi	r7,17
    7d54:	01800644 	movi	r6,25
    7d58:	01400284 	movi	r5,10
    7d5c:	01000184 	movi	r4,6
    7d60:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 10, SXCoord + 26, SYCoord + 18, 0x59E4);
    7d64:	00967904 	movi	r2,23012
    7d68:	d8800015 	stw	r2,0(sp)
    7d6c:	01c00484 	movi	r7,18
    7d70:	01800684 	movi	r6,26
    7d74:	01400284 	movi	r5,10
    7d78:	01000684 	movi	r4,26
    7d7c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 27, SYCoord + 10, SXCoord + 27, SYCoord + 19, 0x59E4);
    7d80:	00967904 	movi	r2,23012
    7d84:	d8800015 	stw	r2,0(sp)
    7d88:	01c004c4 	movi	r7,19
    7d8c:	018006c4 	movi	r6,27
    7d90:	01400284 	movi	r5,10
    7d94:	010006c4 	movi	r4,27
    7d98:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 14, SXCoord + 31, SYCoord + 23, 0x59E4);
    7d9c:	00967904 	movi	r2,23012
    7da0:	d8800015 	stw	r2,0(sp)
    7da4:	01c005c4 	movi	r7,23
    7da8:	018007c4 	movi	r6,31
    7dac:	01400384 	movi	r5,14
    7db0:	01000704 	movi	r4,28
    7db4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 31, SYCoord + 26, SXCoord + 31, SYCoord + 26, 0x59E4);
    7db8:	00967904 	movi	r2,23012
    7dbc:	d8800015 	stw	r2,0(sp)
    7dc0:	01c00684 	movi	r7,26
    7dc4:	018007c4 	movi	r6,31
    7dc8:	01400684 	movi	r5,26
    7dcc:	010007c4 	movi	r4,31
    7dd0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 29, SYCoord + 27, SXCoord + 31, SYCoord + 29, 0x59E4);
    7dd4:	00967904 	movi	r2,23012
    7dd8:	d8800015 	stw	r2,0(sp)
    7ddc:	01c00744 	movi	r7,29
    7de0:	018007c4 	movi	r6,31
    7de4:	014006c4 	movi	r5,27
    7de8:	01000744 	movi	r4,29
    7dec:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 30, SXCoord + 27, SYCoord + 30, 0x59E4);
    7df0:	00967904 	movi	r2,23012
    7df4:	d8800015 	stw	r2,0(sp)
    7df8:	01c00784 	movi	r7,30
    7dfc:	018006c4 	movi	r6,27
    7e00:	01400784 	movi	r5,30
    7e04:	01000684 	movi	r4,26
    7e08:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 32, SXCoord + 27, SYCoord + 32, 0x59E4);
    7e0c:	00967904 	movi	r2,23012
    7e10:	d8800015 	stw	r2,0(sp)
    7e14:	01c00804 	movi	r7,32
    7e18:	018006c4 	movi	r6,27
    7e1c:	01400804 	movi	r5,32
    7e20:	01000644 	movi	r4,25
    7e24:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 33, SXCoord + 27, SYCoord + 34, 0x59E4);
    7e28:	00967904 	movi	r2,23012
    7e2c:	d8800015 	stw	r2,0(sp)
    7e30:	01c00884 	movi	r7,34
    7e34:	018006c4 	movi	r6,27
    7e38:	01400844 	movi	r5,33
    7e3c:	01000684 	movi	r4,26
    7e40:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 35, SXCoord + 27, SYCoord + 36, 0x59E4);
    7e44:	00967904 	movi	r2,23012
    7e48:	d8800015 	stw	r2,0(sp)
    7e4c:	01c00904 	movi	r7,36
    7e50:	018006c4 	movi	r6,27
    7e54:	014008c4 	movi	r5,35
    7e58:	01000644 	movi	r4,25
    7e5c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 26, SYCoord + 37, SXCoord + 27, SYCoord + 37, 0x59E4);
    7e60:	00967904 	movi	r2,23012
    7e64:	d8800015 	stw	r2,0(sp)
    7e68:	01c00944 	movi	r7,37
    7e6c:	018006c4 	movi	r6,27
    7e70:	01400944 	movi	r5,37
    7e74:	01000684 	movi	r4,26
    7e78:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 6, SXCoord + 23, SYCoord + 9, 0x59E4);
    7e7c:	00967904 	movi	r2,23012
    7e80:	d8800015 	stw	r2,0(sp)
    7e84:	01c00244 	movi	r7,9
    7e88:	018005c4 	movi	r6,23
    7e8c:	01400184 	movi	r5,6
    7e90:	01000304 	movi	r4,12
    7e94:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 2, SXCoord + 19, SYCoord + 5, 0x59E4);
    7e98:	00967904 	movi	r2,23012
    7e9c:	d8800015 	stw	r2,0(sp)
    7ea0:	01c00144 	movi	r7,5
    7ea4:	018004c4 	movi	r6,19
    7ea8:	01400084 	movi	r5,2
    7eac:	01000304 	movi	r4,12
    7eb0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 1, SXCoord + 16, SYCoord + 1, 0x59E4);
    7eb4:	00967904 	movi	r2,23012
    7eb8:	d8800015 	stw	r2,0(sp)
    7ebc:	01c00044 	movi	r7,1
    7ec0:	01800404 	movi	r6,16
    7ec4:	01400044 	movi	r5,1
    7ec8:	010002c4 	movi	r4,11
    7ecc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 2, SXCoord + 11, SYCoord + 2, 0x59E4);
    7ed0:	00967904 	movi	r2,23012
    7ed4:	d8800015 	stw	r2,0(sp)
    7ed8:	01c00084 	movi	r7,2
    7edc:	018002c4 	movi	r6,11
    7ee0:	01400084 	movi	r5,2
    7ee4:	01000284 	movi	r4,10
    7ee8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 21, SXCoord + 8, SYCoord + 21, 0x59E4);
    7eec:	00967904 	movi	r2,23012
    7ef0:	d8800015 	stw	r2,0(sp)
    7ef4:	01c00544 	movi	r7,21
    7ef8:	01800204 	movi	r6,8
    7efc:	01400544 	movi	r5,21
    7f00:	010001c4 	movi	r4,7
    7f04:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 21, SXCoord + 12, SYCoord + 21, 0x59E4);
    7f08:	00967904 	movi	r2,23012
    7f0c:	d8800015 	stw	r2,0(sp)
    7f10:	01c00544 	movi	r7,21
    7f14:	01800304 	movi	r6,12
    7f18:	01400544 	movi	r5,21
    7f1c:	010002c4 	movi	r4,11
    7f20:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 22, SXCoord + 10, SYCoord + 22, 0x59E4);
    7f24:	00967904 	movi	r2,23012
    7f28:	d8800015 	stw	r2,0(sp)
    7f2c:	01c00584 	movi	r7,22
    7f30:	01800284 	movi	r6,10
    7f34:	01400584 	movi	r5,22
    7f38:	010001c4 	movi	r4,7
    7f3c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 21, SXCoord + 12, SYCoord + 21, 0x59E4);
    7f40:	00967904 	movi	r2,23012
    7f44:	d8800015 	stw	r2,0(sp)
    7f48:	01c00544 	movi	r7,21
    7f4c:	01800304 	movi	r6,12
    7f50:	01400544 	movi	r5,21
    7f54:	01000204 	movi	r4,8
    7f58:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 20, SXCoord + 12, SYCoord + 20, 0x59E4);
    7f5c:	00967904 	movi	r2,23012
    7f60:	d8800015 	stw	r2,0(sp)
    7f64:	01c00504 	movi	r7,20
    7f68:	01800304 	movi	r6,12
    7f6c:	01400504 	movi	r5,20
    7f70:	01000284 	movi	r4,10
    7f74:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 22, SXCoord + 24, SYCoord + 22, 0x59E4);
    7f78:	00967904 	movi	r2,23012
    7f7c:	d8800015 	stw	r2,0(sp)
    7f80:	01c00584 	movi	r7,22
    7f84:	01800604 	movi	r6,24
    7f88:	01400584 	movi	r5,22
    7f8c:	01000544 	movi	r4,21
    7f90:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 21, SXCoord + 23, SYCoord + 21, 0x59E4);
    7f94:	00967904 	movi	r2,23012
    7f98:	d8800015 	stw	r2,0(sp)
    7f9c:	01c00544 	movi	r7,21
    7fa0:	018005c4 	movi	r6,23
    7fa4:	01400544 	movi	r5,21
    7fa8:	010004c4 	movi	r4,19
    7fac:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 20, SXCoord + 21, SYCoord + 20, 0x59E4);
    7fb0:	00967904 	movi	r2,23012
    7fb4:	d8800015 	stw	r2,0(sp)
    7fb8:	01c00504 	movi	r7,20
    7fbc:	01800544 	movi	r6,21
    7fc0:	01400504 	movi	r5,20
    7fc4:	010004c4 	movi	r4,19
    7fc8:	00089f00 	call	89f0 <VGA_box>

  // Render Glasses
  VGA_box(SXCoord, SYCoord + 24, SXCoord + 13, SYCoord + 24, 0x0000);
    7fcc:	d8000015 	stw	zero,0(sp)
    7fd0:	01c00604 	movi	r7,24
    7fd4:	01800344 	movi	r6,13
    7fd8:	01400604 	movi	r5,24
    7fdc:	0009883a 	mov	r4,zero
    7fe0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord, SYCoord + 25, SXCoord + 3, SYCoord + 25, 0x0000);
    7fe4:	d8000015 	stw	zero,0(sp)
    7fe8:	01c00644 	movi	r7,25
    7fec:	018000c4 	movi	r6,3
    7ff0:	01400644 	movi	r5,25
    7ff4:	0009883a 	mov	r4,zero
    7ff8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 1, SYCoord + 26, SXCoord + 3, SYCoord + 26, 0x0000);
    7ffc:	d8000015 	stw	zero,0(sp)
    8000:	01c00684 	movi	r7,26
    8004:	018000c4 	movi	r6,3
    8008:	01400684 	movi	r5,26
    800c:	01000044 	movi	r4,1
    8010:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 3, SYCoord + 27, SXCoord + 3, SYCoord + 30, 0x0000);
    8014:	d8000015 	stw	zero,0(sp)
    8018:	01c00784 	movi	r7,30
    801c:	018000c4 	movi	r6,3
    8020:	014006c4 	movi	r5,27
    8024:	010000c4 	movi	r4,3
    8028:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 31, SXCoord + 12, SYCoord + 31, 0x0000);
    802c:	d8000015 	stw	zero,0(sp)
    8030:	01c007c4 	movi	r7,31
    8034:	01800304 	movi	r6,12
    8038:	014007c4 	movi	r5,31
    803c:	01000104 	movi	r4,4
    8040:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 27, SXCoord + 13, SYCoord + 30, 0x0000);
    8044:	d8000015 	stw	zero,0(sp)
    8048:	01c00784 	movi	r7,30
    804c:	01800344 	movi	r6,13
    8050:	014006c4 	movi	r5,27
    8054:	01000344 	movi	r4,13
    8058:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 25, SXCoord + 17, SYCoord + 26, 0x0000);
    805c:	d8000015 	stw	zero,0(sp)
    8060:	01c00684 	movi	r7,26
    8064:	01800444 	movi	r6,17
    8068:	01400644 	movi	r5,25
    806c:	01000384 	movi	r4,14
    8070:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 24, SXCoord + 31, SYCoord + 24, 0x0000);
    8074:	d8000015 	stw	zero,0(sp)
    8078:	01c00604 	movi	r7,24
    807c:	018007c4 	movi	r6,31
    8080:	01400604 	movi	r5,24
    8084:	01000484 	movi	r4,18
    8088:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 25, SXCoord + 31, SYCoord + 25, 0x0000);
    808c:	d8000015 	stw	zero,0(sp)
    8090:	01c00644 	movi	r7,25
    8094:	018007c4 	movi	r6,31
    8098:	01400644 	movi	r5,25
    809c:	01000704 	movi	r4,28
    80a0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 26, SXCoord + 30, SYCoord + 26, 0x0000);
    80a4:	d8000015 	stw	zero,0(sp)
    80a8:	01c00684 	movi	r7,26
    80ac:	01800784 	movi	r6,30
    80b0:	01400684 	movi	r5,26
    80b4:	01000704 	movi	r4,28
    80b8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 28, SYCoord + 27, SXCoord + 28, SYCoord + 30, 0x0000);
    80bc:	d8000015 	stw	zero,0(sp)
    80c0:	01c00784 	movi	r7,30
    80c4:	01800704 	movi	r6,28
    80c8:	014006c4 	movi	r5,27
    80cc:	01000704 	movi	r4,28
    80d0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 31, SXCoord + 27, SYCoord + 31, 0x0000);
    80d4:	d8000015 	stw	zero,0(sp)
    80d8:	01c007c4 	movi	r7,31
    80dc:	018006c4 	movi	r6,27
    80e0:	014007c4 	movi	r5,31
    80e4:	010004c4 	movi	r4,19
    80e8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 27, SXCoord + 18, SYCoord + 30, 0x0000);
    80ec:	d8000015 	stw	zero,0(sp)
    80f0:	01c00784 	movi	r7,30
    80f4:	01800484 	movi	r6,18
    80f8:	014006c4 	movi	r5,27
    80fc:	01000484 	movi	r4,18
    8100:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 26, SXCoord + 11, SYCoord + 29, 0x0000);
    8104:	d8000015 	stw	zero,0(sp)
    8108:	01c00744 	movi	r7,29
    810c:	018002c4 	movi	r6,11
    8110:	01400684 	movi	r5,26
    8114:	01000204 	movi	r4,8
    8118:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 26, SXCoord + 23, SYCoord + 29, 0x0000);
    811c:	d8000015 	stw	zero,0(sp)
    8120:	01c00744 	movi	r7,29
    8124:	018005c4 	movi	r6,23
    8128:	01400684 	movi	r5,26
    812c:	01000504 	movi	r4,20
    8130:	00089f00 	call	89f0 <VGA_box>

  // Render Mouth
  VGA_box(SXCoord + 10, SYCoord + 33, SXCoord + 21, SYCoord + 33, 0x0000);
    8134:	d8000015 	stw	zero,0(sp)
    8138:	01c00844 	movi	r7,33
    813c:	01800544 	movi	r6,21
    8140:	01400844 	movi	r5,33
    8144:	01000284 	movi	r4,10
    8148:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 9, SYCoord + 34, SXCoord + 10, SYCoord + 34, 0x0000);
    814c:	d8000015 	stw	zero,0(sp)
    8150:	01c00884 	movi	r7,34
    8154:	01800284 	movi	r6,10
    8158:	01400884 	movi	r5,34
    815c:	01000244 	movi	r4,9
    8160:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 34, SXCoord + 22, SYCoord + 34, 0x0000);
    8164:	d8000015 	stw	zero,0(sp)
    8168:	01c00884 	movi	r7,34
    816c:	01800584 	movi	r6,22
    8170:	01400884 	movi	r5,34
    8174:	01000544 	movi	r4,21
    8178:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 9, SYCoord + 35, SXCoord + 22, SYCoord + 35, 0x0000);
    817c:	d8000015 	stw	zero,0(sp)
    8180:	01c008c4 	movi	r7,35
    8184:	01800584 	movi	r6,22
    8188:	014008c4 	movi	r5,35
    818c:	01000244 	movi	r4,9
    8190:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 36, SXCoord + 14, SYCoord + 36, 0x0000);
    8194:	d8000015 	stw	zero,0(sp)
    8198:	01c00904 	movi	r7,36
    819c:	01800384 	movi	r6,14
    81a0:	01400904 	movi	r5,36
    81a4:	01000284 	movi	r4,10
    81a8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 17, SYCoord + 36, SXCoord + 21, SYCoord + 36, 0x0000);
    81ac:	d8000015 	stw	zero,0(sp)
    81b0:	01c00904 	movi	r7,36
    81b4:	01800544 	movi	r6,21
    81b8:	01400904 	movi	r5,36
    81bc:	01000444 	movi	r4,17
    81c0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 37, SXCoord + 13, SYCoord + 37, 0x0000);
    81c4:	d8000015 	stw	zero,0(sp)
    81c8:	01c00944 	movi	r7,37
    81cc:	01800344 	movi	r6,13
    81d0:	01400944 	movi	r5,37
    81d4:	010002c4 	movi	r4,11
    81d8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 37, SXCoord + 20, SYCoord + 37, 0x0000);
    81dc:	d8000015 	stw	zero,0(sp)
    81e0:	01c00944 	movi	r7,37
    81e4:	01800504 	movi	r6,20
    81e8:	01400944 	movi	r5,37
    81ec:	01000484 	movi	r4,18
    81f0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 38, SXCoord + 19, SYCoord + 38, 0x0000);
    81f4:	d8000015 	stw	zero,0(sp)
    81f8:	01c00984 	movi	r7,38
    81fc:	018004c4 	movi	r6,19
    8200:	01400984 	movi	r5,38
    8204:	01000304 	movi	r4,12
    8208:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 34, SXCoord + 20, SYCoord + 34, 0xFFFF);
    820c:	00bfffc4 	movi	r2,-1
    8210:	d8800015 	stw	r2,0(sp)
    8214:	01c00884 	movi	r7,34
    8218:	01800504 	movi	r6,20
    821c:	01400884 	movi	r5,34
    8220:	010002c4 	movi	r4,11
    8224:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 15, SYCoord + 36, SXCoord + 16, SYCoord + 36, 0xFD79);
    8228:	00bf5e44 	movi	r2,-647
    822c:	d8800015 	stw	r2,0(sp)
    8230:	01c00904 	movi	r7,36
    8234:	01800404 	movi	r6,16
    8238:	01400904 	movi	r5,36
    823c:	010003c4 	movi	r4,15
    8240:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 37, SXCoord + 17, SYCoord + 37, 0xFD79);
    8244:	00bf5e44 	movi	r2,-647
    8248:	d8800015 	stw	r2,0(sp)
    824c:	01c00944 	movi	r7,37
    8250:	01800444 	movi	r6,17
    8254:	01400944 	movi	r5,37
    8258:	01000384 	movi	r4,14
    825c:	00089f00 	call	89f0 <VGA_box>

  // Render Skin
  VGA_box(SXCoord + 6, SYCoord + 18, SXCoord + 25, SYCoord + 18, 0xF6DA);
    8260:	00bdb684 	movi	r2,-2342
    8264:	d8800015 	stw	r2,0(sp)
    8268:	01c00484 	movi	r7,18
    826c:	01800644 	movi	r6,25
    8270:	01400484 	movi	r5,18
    8274:	01000184 	movi	r4,6
    8278:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 5, SYCoord + 19, SXCoord + 26, SYCoord + 19, 0xF6DA);
    827c:	00bdb684 	movi	r2,-2342
    8280:	d8800015 	stw	r2,0(sp)
    8284:	01c004c4 	movi	r7,19
    8288:	01800684 	movi	r6,26
    828c:	014004c4 	movi	r5,19
    8290:	01000144 	movi	r4,5
    8294:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 20, SXCoord + 9, SYCoord + 20, 0xF6DA);
    8298:	00bdb684 	movi	r2,-2342
    829c:	d8800015 	stw	r2,0(sp)
    82a0:	01c00504 	movi	r7,20
    82a4:	01800244 	movi	r6,9
    82a8:	01400504 	movi	r5,20
    82ac:	01000104 	movi	r4,4
    82b0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 22, SYCoord + 20, SXCoord + 27, SYCoord + 20, 0xF6DA);
    82b4:	00bdb684 	movi	r2,-2342
    82b8:	d8800015 	stw	r2,0(sp)
    82bc:	01c00504 	movi	r7,20
    82c0:	018006c4 	movi	r6,27
    82c4:	01400504 	movi	r5,20
    82c8:	01000584 	movi	r4,22
    82cc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 21, SXCoord + 7, SYCoord + 21, 0xF6DA);
    82d0:	00bdb684 	movi	r2,-2342
    82d4:	d8800015 	stw	r2,0(sp)
    82d8:	01c00544 	movi	r7,21
    82dc:	018001c4 	movi	r6,7
    82e0:	01400544 	movi	r5,21
    82e4:	01000104 	movi	r4,4
    82e8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 21, SXCoord + 27, SYCoord + 21, 0xF6DA);
    82ec:	00bdb684 	movi	r2,-2342
    82f0:	d8800015 	stw	r2,0(sp)
    82f4:	01c00544 	movi	r7,21
    82f8:	018006c4 	movi	r6,27
    82fc:	01400544 	movi	r5,21
    8300:	01000604 	movi	r4,24
    8304:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 20, SXCoord + 18, SYCoord + 21, 0xF6DA);
    8308:	00bdb684 	movi	r2,-2342
    830c:	d8800015 	stw	r2,0(sp)
    8310:	01c00544 	movi	r7,21
    8314:	01800484 	movi	r6,18
    8318:	01400504 	movi	r5,20
    831c:	01000344 	movi	r4,13
    8320:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 22, SXCoord + 6, SYCoord + 22, 0xF6DA);
    8324:	00bdb684 	movi	r2,-2342
    8328:	d8800015 	stw	r2,0(sp)
    832c:	01c00584 	movi	r7,22
    8330:	01800184 	movi	r6,6
    8334:	01400584 	movi	r5,22
    8338:	01000104 	movi	r4,4
    833c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 22, SXCoord + 20, SYCoord + 22, 0xF6DA);
    8340:	00bdb684 	movi	r2,-2342
    8344:	d8800015 	stw	r2,0(sp)
    8348:	01c00584 	movi	r7,22
    834c:	01800504 	movi	r6,20
    8350:	01400584 	movi	r5,22
    8354:	010002c4 	movi	r4,11
    8358:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 22, SXCoord + 27, SYCoord + 22, 0xF6DA);
    835c:	00bdb684 	movi	r2,-2342
    8360:	d8800015 	stw	r2,0(sp)
    8364:	01c00584 	movi	r7,22
    8368:	018006c4 	movi	r6,27
    836c:	01400584 	movi	r5,22
    8370:	01000644 	movi	r4,25
    8374:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 23, SXCoord + 27, SYCoord + 23, 0xF6DA);
    8378:	00bdb684 	movi	r2,-2342
    837c:	d8800015 	stw	r2,0(sp)
    8380:	01c005c4 	movi	r7,23
    8384:	018006c4 	movi	r6,27
    8388:	014005c4 	movi	r5,23
    838c:	01000104 	movi	r4,4
    8390:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 24, SXCoord + 17, SYCoord + 24, 0xF6DA);
    8394:	00bdb684 	movi	r2,-2342
    8398:	d8800015 	stw	r2,0(sp)
    839c:	01c00604 	movi	r7,24
    83a0:	01800444 	movi	r6,17
    83a4:	01400604 	movi	r5,24
    83a8:	01000384 	movi	r4,14
    83ac:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 25, SXCoord + 13, SYCoord + 25, 0xF6DA);
    83b0:	00bdb684 	movi	r2,-2342
    83b4:	d8800015 	stw	r2,0(sp)
    83b8:	01c00644 	movi	r7,25
    83bc:	01800344 	movi	r6,13
    83c0:	01400644 	movi	r5,25
    83c4:	01000104 	movi	r4,4
    83c8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 4, SYCoord + 26, SXCoord + 7, SYCoord + 29, 0xF6DA);
    83cc:	00bdb684 	movi	r2,-2342
    83d0:	d8800015 	stw	r2,0(sp)
    83d4:	01c00744 	movi	r7,29
    83d8:	018001c4 	movi	r6,7
    83dc:	01400684 	movi	r5,26
    83e0:	01000104 	movi	r4,4
    83e4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 30, SXCoord + 6, SYCoord + 30, 0xF6DA);
    83e8:	00bdb684 	movi	r2,-2342
    83ec:	d8800015 	stw	r2,0(sp)
    83f0:	01c00784 	movi	r7,30
    83f4:	01800184 	movi	r6,6
    83f8:	01400784 	movi	r5,30
    83fc:	01000184 	movi	r4,6
    8400:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 30, SXCoord + 12, SYCoord + 30, 0xF6DA);
    8404:	00bdb684 	movi	r2,-2342
    8408:	d8800015 	stw	r2,0(sp)
    840c:	01c00784 	movi	r7,30
    8410:	01800304 	movi	r6,12
    8414:	01400784 	movi	r5,30
    8418:	010002c4 	movi	r4,11
    841c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 26, SXCoord + 13, SYCoord + 26, 0xF6DA);
    8420:	00bdb684 	movi	r2,-2342
    8424:	d8800015 	stw	r2,0(sp)
    8428:	01c00684 	movi	r7,26
    842c:	01800344 	movi	r6,13
    8430:	01400684 	movi	r5,26
    8434:	01000304 	movi	r4,12
    8438:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 27, SXCoord + 12, SYCoord + 29, 0xF6DA);
    843c:	00bdb684 	movi	r2,-2342
    8440:	d8800015 	stw	r2,0(sp)
    8444:	01c00744 	movi	r7,29
    8448:	01800304 	movi	r6,12
    844c:	014006c4 	movi	r5,27
    8450:	01000304 	movi	r4,12
    8454:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 25, SXCoord + 27, SYCoord + 25, 0xF6DA);
    8458:	00bdb684 	movi	r2,-2342
    845c:	d8800015 	stw	r2,0(sp)
    8460:	01c00644 	movi	r7,25
    8464:	018006c4 	movi	r6,27
    8468:	01400644 	movi	r5,25
    846c:	01000484 	movi	r4,18
    8470:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 26, SXCoord + 19, SYCoord + 26, 0xF6DA);
    8474:	00bdb684 	movi	r2,-2342
    8478:	d8800015 	stw	r2,0(sp)
    847c:	01c00684 	movi	r7,26
    8480:	018004c4 	movi	r6,19
    8484:	01400684 	movi	r5,26
    8488:	01000484 	movi	r4,18
    848c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 27, SXCoord + 19, SYCoord + 29, 0xF6DA);
    8490:	00bdb684 	movi	r2,-2342
    8494:	d8800015 	stw	r2,0(sp)
    8498:	01c00744 	movi	r7,29
    849c:	018004c4 	movi	r6,19
    84a0:	014006c4 	movi	r5,27
    84a4:	010004c4 	movi	r4,19
    84a8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 19, SYCoord + 30, SXCoord + 20, SYCoord + 30, 0xF6DA);
    84ac:	00bdb684 	movi	r2,-2342
    84b0:	d8800015 	stw	r2,0(sp)
    84b4:	01c00784 	movi	r7,30
    84b8:	01800504 	movi	r6,20
    84bc:	01400784 	movi	r5,30
    84c0:	010004c4 	movi	r4,19
    84c4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 25, SYCoord + 30, SXCoord + 25, SYCoord + 30, 0xF6DA);
    84c8:	00bdb684 	movi	r2,-2342
    84cc:	d8800015 	stw	r2,0(sp)
    84d0:	01c00784 	movi	r7,30
    84d4:	01800644 	movi	r6,25
    84d8:	01400784 	movi	r5,30
    84dc:	01000644 	movi	r4,25
    84e0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 24, SYCoord + 26, SXCoord + 27, SYCoord + 29, 0xF6DA);
    84e4:	00bdb684 	movi	r2,-2342
    84e8:	d8800015 	stw	r2,0(sp)
    84ec:	01c00744 	movi	r7,29
    84f0:	018006c4 	movi	r6,27
    84f4:	01400684 	movi	r5,26
    84f8:	01000604 	movi	r4,24
    84fc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 27, SXCoord + 17, SYCoord + 30, 0xF6DA);
    8500:	00bdb684 	movi	r2,-2342
    8504:	d8800015 	stw	r2,0(sp)
    8508:	01c00784 	movi	r7,30
    850c:	01800444 	movi	r6,17
    8510:	014006c4 	movi	r5,27
    8514:	01000384 	movi	r4,14
    8518:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 13, SYCoord + 31, SXCoord + 18, SYCoord + 31, 0xF6DA);
    851c:	00bdb684 	movi	r2,-2342
    8520:	d8800015 	stw	r2,0(sp)
    8524:	01c007c4 	movi	r7,31
    8528:	01800484 	movi	r6,18
    852c:	014007c4 	movi	r5,31
    8530:	01000344 	movi	r4,13
    8534:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 32, SXCoord + 20, SYCoord + 32, 0xF6DA);
    8538:	00bdb684 	movi	r2,-2342
    853c:	d8800015 	stw	r2,0(sp)
    8540:	01c00804 	movi	r7,32
    8544:	01800504 	movi	r6,20
    8548:	01400804 	movi	r5,32
    854c:	010002c4 	movi	r4,11
    8550:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 37, SXCoord + 10, SYCoord + 37, 0xF6DA);
    8554:	00bdb684 	movi	r2,-2342
    8558:	d8800015 	stw	r2,0(sp)
    855c:	01c00944 	movi	r7,37
    8560:	01800284 	movi	r6,10
    8564:	01400944 	movi	r5,37
    8568:	01000284 	movi	r4,10
    856c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 37, SXCoord + 21, SYCoord + 37, 0xF6DA);
    8570:	00bdb684 	movi	r2,-2342
    8574:	d8800015 	stw	r2,0(sp)
    8578:	01c00944 	movi	r7,37
    857c:	01800544 	movi	r6,21
    8580:	01400944 	movi	r5,37
    8584:	01000544 	movi	r4,21
    8588:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 38, SXCoord + 11, SYCoord + 38, 0xF6DA);
    858c:	00bdb684 	movi	r2,-2342
    8590:	d8800015 	stw	r2,0(sp)
    8594:	01c00984 	movi	r7,38
    8598:	018002c4 	movi	r6,11
    859c:	01400984 	movi	r5,38
    85a0:	01000284 	movi	r4,10
    85a4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 38, SXCoord + 21, SYCoord + 38, 0xF6DA);
    85a8:	00bdb684 	movi	r2,-2342
    85ac:	d8800015 	stw	r2,0(sp)
    85b0:	01c00984 	movi	r7,38
    85b4:	01800544 	movi	r6,21
    85b8:	01400984 	movi	r5,38
    85bc:	01000504 	movi	r4,20
    85c0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 11, SYCoord + 39, SXCoord + 20, SYCoord + 40, 0xF6DA);
    85c4:	00bdb684 	movi	r2,-2342
    85c8:	d8800015 	stw	r2,0(sp)
    85cc:	01c00a04 	movi	r7,40
    85d0:	01800504 	movi	r6,20
    85d4:	014009c4 	movi	r5,39
    85d8:	010002c4 	movi	r4,11
    85dc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 41, SXCoord + 21, SYCoord + 41, 0xF6DA);
    85e0:	00bdb684 	movi	r2,-2342
    85e4:	d8800015 	stw	r2,0(sp)
    85e8:	01c00a44 	movi	r7,41
    85ec:	01800544 	movi	r6,21
    85f0:	01400a44 	movi	r5,41
    85f4:	01000284 	movi	r4,10
    85f8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 42, SXCoord + 17, SYCoord + 44, 0xF6DA);
    85fc:	00bdb684 	movi	r2,-2342
    8600:	d8800015 	stw	r2,0(sp)
    8604:	01c00b04 	movi	r7,44
    8608:	01800444 	movi	r6,17
    860c:	01400a84 	movi	r5,42
    8610:	01000384 	movi	r4,14
    8614:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 12, SYCoord + 45, SXCoord + 19, SYCoord + 46, 0xF6DA);
    8618:	00bdb684 	movi	r2,-2342
    861c:	d8800015 	stw	r2,0(sp)
    8620:	01c00b84 	movi	r7,46
    8624:	018004c4 	movi	r6,19
    8628:	01400b44 	movi	r5,45
    862c:	01000304 	movi	r4,12
    8630:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 47, SXCoord + 17, SYCoord + 48, 0xF6DA);
    8634:	00bdb684 	movi	r2,-2342
    8638:	d8800015 	stw	r2,0(sp)
    863c:	01c00c04 	movi	r7,48
    8640:	01800444 	movi	r6,17
    8644:	01400bc4 	movi	r5,47
    8648:	01000384 	movi	r4,14
    864c:	00089f00 	call	89f0 <VGA_box>

  // Render Tears
  VGA_box(SXCoord + 7, SYCoord + 30, SXCoord + 10, SYCoord + 30, 0x9EDD);
    8650:	00a7b744 	movi	r2,-24867
    8654:	d8800015 	stw	r2,0(sp)
    8658:	01c00784 	movi	r7,30
    865c:	01800284 	movi	r6,10
    8660:	01400784 	movi	r5,30
    8664:	010001c4 	movi	r4,7
    8668:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 32, SXCoord + 10, SYCoord + 32, 0x9EDD);
    866c:	00a7b744 	movi	r2,-24867
    8670:	d8800015 	stw	r2,0(sp)
    8674:	01c00804 	movi	r7,32
    8678:	01800284 	movi	r6,10
    867c:	01400804 	movi	r5,32
    8680:	010001c4 	movi	r4,7
    8684:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 33, SXCoord + 9, SYCoord + 33, 0x9EDD);
    8688:	00a7b744 	movi	r2,-24867
    868c:	d8800015 	stw	r2,0(sp)
    8690:	01c00844 	movi	r7,33
    8694:	01800244 	movi	r6,9
    8698:	01400844 	movi	r5,33
    869c:	01000184 	movi	r4,6
    86a0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 34, SXCoord + 8, SYCoord + 34, 0x9EDD);
    86a4:	00a7b744 	movi	r2,-24867
    86a8:	d8800015 	stw	r2,0(sp)
    86ac:	01c00884 	movi	r7,34
    86b0:	01800204 	movi	r6,8
    86b4:	01400884 	movi	r5,34
    86b8:	01000184 	movi	r4,6
    86bc:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 35, SXCoord + 8, SYCoord + 35, 0x9EDD);
    86c0:	00a7b744 	movi	r2,-24867
    86c4:	d8800015 	stw	r2,0(sp)
    86c8:	01c008c4 	movi	r7,35
    86cc:	01800204 	movi	r6,8
    86d0:	014008c4 	movi	r5,35
    86d4:	010001c4 	movi	r4,7
    86d8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 36, SXCoord + 9, SYCoord + 36, 0x9EDD);
    86dc:	00a7b744 	movi	r2,-24867
    86e0:	d8800015 	stw	r2,0(sp)
    86e4:	01c00904 	movi	r7,36
    86e8:	01800244 	movi	r6,9
    86ec:	01400904 	movi	r5,36
    86f0:	010001c4 	movi	r4,7
    86f4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 6, SYCoord + 37, SXCoord + 9, SYCoord + 38, 0x9EDD);
    86f8:	00a7b744 	movi	r2,-24867
    86fc:	d8800015 	stw	r2,0(sp)
    8700:	01c00984 	movi	r7,38
    8704:	01800244 	movi	r6,9
    8708:	01400944 	movi	r5,37
    870c:	01000184 	movi	r4,6
    8710:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 7, SYCoord + 39, SXCoord + 10, SYCoord + 39, 0x9EDD);
    8714:	00a7b744 	movi	r2,-24867
    8718:	d8800015 	stw	r2,0(sp)
    871c:	01c009c4 	movi	r7,39
    8720:	01800284 	movi	r6,10
    8724:	014009c4 	movi	r5,39
    8728:	010001c4 	movi	r4,7
    872c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 40, SXCoord + 10, SYCoord + 40, 0x9EDD);
    8730:	00a7b744 	movi	r2,-24867
    8734:	d8800015 	stw	r2,0(sp)
    8738:	01c00a04 	movi	r7,40
    873c:	01800284 	movi	r6,10
    8740:	01400a04 	movi	r5,40
    8744:	01000204 	movi	r4,8
    8748:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 9, SYCoord + 41, SXCoord + 9, SYCoord + 41, 0x9EDD);
    874c:	00a7b744 	movi	r2,-24867
    8750:	d8800015 	stw	r2,0(sp)
    8754:	01c00a44 	movi	r7,41
    8758:	01800244 	movi	r6,9
    875c:	01400a44 	movi	r5,41
    8760:	01000244 	movi	r4,9
    8764:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 30, SXCoord + 24, SYCoord + 30, 0x9EDD);
    8768:	00a7b744 	movi	r2,-24867
    876c:	d8800015 	stw	r2,0(sp)
    8770:	01c00784 	movi	r7,30
    8774:	01800604 	movi	r6,24
    8778:	01400784 	movi	r5,30
    877c:	01000544 	movi	r4,21
    8780:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 32, SXCoord + 24, SYCoord + 32, 0x9EDD);
    8784:	00a7b744 	movi	r2,-24867
    8788:	d8800015 	stw	r2,0(sp)
    878c:	01c00804 	movi	r7,32
    8790:	01800604 	movi	r6,24
    8794:	01400804 	movi	r5,32
    8798:	01000544 	movi	r4,21
    879c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 22, SYCoord + 33, SXCoord + 25, SYCoord + 33, 0x9EDD);
    87a0:	00a7b744 	movi	r2,-24867
    87a4:	d8800015 	stw	r2,0(sp)
    87a8:	01c00844 	movi	r7,33
    87ac:	01800644 	movi	r6,25
    87b0:	01400844 	movi	r5,33
    87b4:	01000584 	movi	r4,22
    87b8:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 23, SYCoord + 34, SXCoord + 25, SYCoord + 34, 0x9EDD);
    87bc:	00a7b744 	movi	r2,-24867
    87c0:	d8800015 	stw	r2,0(sp)
    87c4:	01c00884 	movi	r7,34
    87c8:	01800644 	movi	r6,25
    87cc:	01400884 	movi	r5,34
    87d0:	010005c4 	movi	r4,23
    87d4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 23, SYCoord + 35, SXCoord + 24, SYCoord + 35, 0x9EDD);
    87d8:	00a7b744 	movi	r2,-24867
    87dc:	d8800015 	stw	r2,0(sp)
    87e0:	01c008c4 	movi	r7,35
    87e4:	01800604 	movi	r6,24
    87e8:	014008c4 	movi	r5,35
    87ec:	010005c4 	movi	r4,23
    87f0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 22, SYCoord + 36, SXCoord + 24, SYCoord + 36, 0x9EDD);
    87f4:	00a7b744 	movi	r2,-24867
    87f8:	d8800015 	stw	r2,0(sp)
    87fc:	01c00904 	movi	r7,36
    8800:	01800604 	movi	r6,24
    8804:	01400904 	movi	r5,36
    8808:	01000584 	movi	r4,22
    880c:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 22, SYCoord + 37, SXCoord + 25, SYCoord + 38, 0x9EDD);
    8810:	00a7b744 	movi	r2,-24867
    8814:	d8800015 	stw	r2,0(sp)
    8818:	01c00984 	movi	r7,38
    881c:	01800644 	movi	r6,25
    8820:	01400944 	movi	r5,37
    8824:	01000584 	movi	r4,22
    8828:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 39, SXCoord + 24, SYCoord + 39, 0x9EDD);
    882c:	00a7b744 	movi	r2,-24867
    8830:	d8800015 	stw	r2,0(sp)
    8834:	01c009c4 	movi	r7,39
    8838:	01800604 	movi	r6,24
    883c:	014009c4 	movi	r5,39
    8840:	01000544 	movi	r4,21
    8844:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 21, SYCoord + 40, SXCoord + 23, SYCoord + 40, 0x9EDD);
    8848:	00a7b744 	movi	r2,-24867
    884c:	d8800015 	stw	r2,0(sp)
    8850:	01c00a04 	movi	r7,40
    8854:	018005c4 	movi	r6,23
    8858:	01400a04 	movi	r5,40
    885c:	01000544 	movi	r4,21
    8860:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 22, SYCoord + 41, SXCoord + 22, SYCoord + 41, 0x9EDD);
    8864:	00a7b744 	movi	r2,-24867
    8868:	d8800015 	stw	r2,0(sp)
    886c:	01c00a44 	movi	r7,41
    8870:	01800584 	movi	r6,22
    8874:	01400a44 	movi	r5,41
    8878:	01000584 	movi	r4,22
    887c:	00089f00 	call	89f0 <VGA_box>

  // Render Shirt
  VGA_box(SXCoord + 10, SYCoord + 45, SXCoord + 11, SYCoord + 46, 0x2589);
    8880:	00896244 	movi	r2,9609
    8884:	d8800015 	stw	r2,0(sp)
    8888:	01c00b84 	movi	r7,46
    888c:	018002c4 	movi	r6,11
    8890:	01400b44 	movi	r5,45
    8894:	01000284 	movi	r4,10
    8898:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 20, SYCoord + 45, SXCoord + 21, SYCoord + 46, 0x2589);
    889c:	00896244 	movi	r2,9609
    88a0:	d8800015 	stw	r2,0(sp)
    88a4:	01c00b84 	movi	r7,46
    88a8:	01800544 	movi	r6,21
    88ac:	01400b44 	movi	r5,45
    88b0:	01000504 	movi	r4,20
    88b4:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 8, SYCoord + 47, SXCoord + 13, SYCoord + 48, 0x2589);
    88b8:	00896244 	movi	r2,9609
    88bc:	d8800015 	stw	r2,0(sp)
    88c0:	01c00c04 	movi	r7,48
    88c4:	01800344 	movi	r6,13
    88c8:	01400bc4 	movi	r5,47
    88cc:	01000204 	movi	r4,8
    88d0:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 18, SYCoord + 47, SXCoord + 23, SYCoord + 48, 0x2589);
    88d4:	00896244 	movi	r2,9609
    88d8:	d8800015 	stw	r2,0(sp)
    88dc:	01c00c04 	movi	r7,48
    88e0:	018005c4 	movi	r6,23
    88e4:	01400bc4 	movi	r5,47
    88e8:	01000484 	movi	r4,18
    88ec:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 10, SYCoord + 49, SXCoord + 21, SYCoord + 50, 0x2589);
    88f0:	00896244 	movi	r2,9609
    88f4:	d8800015 	stw	r2,0(sp)
    88f8:	01c00c84 	movi	r7,50
    88fc:	01800544 	movi	r6,21
    8900:	01400c44 	movi	r5,49
    8904:	01000284 	movi	r4,10
    8908:	00089f00 	call	89f0 <VGA_box>
  VGA_box(SXCoord + 14, SYCoord + 51, SXCoord + 17, SYCoord + 52, 0x2589);
    890c:	00896244 	movi	r2,9609
    8910:	d8800015 	stw	r2,0(sp)
    8914:	01c00d04 	movi	r7,52
    8918:	01800444 	movi	r6,17
    891c:	01400cc4 	movi	r5,51
    8920:	01000384 	movi	r4,14
    8924:	00089f00 	call	89f0 <VGA_box>
}
    8928:	0001883a 	nop
    892c:	e037883a 	mov	sp,fp
    8930:	dfc00117 	ldw	ra,4(sp)
    8934:	df000017 	ldw	fp,0(sp)
    8938:	dec00204 	addi	sp,sp,8
    893c:	f800283a 	ret

00008940 <get_hex_value_from_switches>:
// Reads right to left EG: 7:4 for values on sw 4 to 7, param are 4,4
// Pre: num_bits_to_get = int number of bits wanted from start point
//      start_sw_point = int start point
// Post: Find information on state of selected switches
// Return: Value of selected switches
int get_hex_value_from_switches (int num_bits_to_get, int start_sw_point) {
    8940:	defffd04 	addi	sp,sp,-12
    8944:	df000215 	stw	fp,8(sp)
    8948:	df000204 	addi	fp,sp,8
    894c:	e13ffe15 	stw	r4,-8(fp)
    8950:	e17fff15 	stw	r5,-4(fp)
	return (SW_SWITCH >> start_sw_point) & ((1 << num_bits_to_get)-1);
    8954:	00840034 	movhi	r2,4096
    8958:	10801004 	addi	r2,r2,64
    895c:	10c00017 	ldw	r3,0(r2)
    8960:	e0bfff17 	ldw	r2,-4(fp)
    8964:	1887d83a 	sra	r3,r3,r2
    8968:	01000044 	movi	r4,1
    896c:	e0bffe17 	ldw	r2,-8(fp)
    8970:	2084983a 	sll	r2,r4,r2
    8974:	10bfffc4 	addi	r2,r2,-1
    8978:	1884703a 	and	r2,r3,r2
}
    897c:	e037883a 	mov	sp,fp
    8980:	df000017 	ldw	fp,0(sp)
    8984:	dec00104 	addi	sp,sp,4
    8988:	f800283a 	ret

0000898c <get_value_of_switch>:

// Gets the value of only one switch
// Pre: sw = int switch to get values from (valid range 0-17)
// Post: Find information on state of selected switch
// Return: Value of selected switch
int get_value_of_switch (int sw) {
    898c:	defffd04 	addi	sp,sp,-12
    8990:	dfc00215 	stw	ra,8(sp)
    8994:	df000115 	stw	fp,4(sp)
    8998:	df000104 	addi	fp,sp,4
    899c:	e13fff15 	stw	r4,-4(fp)
	return get_hex_value_from_switches(1, sw);
    89a0:	e17fff17 	ldw	r5,-4(fp)
    89a4:	01000044 	movi	r4,1
    89a8:	00089400 	call	8940 <get_hex_value_from_switches>
}
    89ac:	e037883a 	mov	sp,fp
    89b0:	dfc00117 	ldw	ra,4(sp)
    89b4:	df000017 	ldw	fp,0(sp)
    89b8:	dec00204 	addi	sp,sp,8
    89bc:	f800283a 	ret

000089c0 <get_value_of_all_switches>:

// Gets the value of all the switches
// Return: Value (bin) represented by all switches 
int get_value_of_all_switches (void) {
    89c0:	defffe04 	addi	sp,sp,-8
    89c4:	dfc00115 	stw	ra,4(sp)
    89c8:	df000015 	stw	fp,0(sp)
    89cc:	d839883a 	mov	fp,sp
	return get_hex_value_from_switches(18,0);
    89d0:	000b883a 	mov	r5,zero
    89d4:	01000484 	movi	r4,18
    89d8:	00089400 	call	8940 <get_hex_value_from_switches>
}
    89dc:	e037883a 	mov	sp,fp
    89e0:	dfc00117 	ldw	ra,4(sp)
    89e4:	df000017 	ldw	fp,0(sp)
    89e8:	dec00204 	addi	sp,sp,8
    89ec:	f800283a 	ret

000089f0 <VGA_box>:
#include "de2_vga.h"

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    89f0:	defff604 	addi	sp,sp,-40
    89f4:	df000915 	stw	fp,36(sp)
    89f8:	df000904 	addi	fp,sp,36
    89fc:	e13ffb15 	stw	r4,-20(fp)
    8a00:	e17ffc15 	stw	r5,-16(fp)
    8a04:	e1bffd15 	stw	r6,-12(fp)
    8a08:	e1fffe15 	stw	r7,-8(fp)
    8a0c:	e0800117 	ldw	r2,4(fp)
    8a10:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
	volatile short * pixel_buffer = (short*) 0x08000000; // VGA pixel buffer
    8a14:	00820034 	movhi	r2,2048
    8a18:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    8a1c:	e0bffc17 	ldw	r2,-16(fp)
    8a20:	e0bff715 	stw	r2,-36(fp)
    8a24:	00001806 	br	8a88 <VGA_box+0x98>
	{
		col = x1;
    8a28:	e0bffb17 	ldw	r2,-20(fp)
    8a2c:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
    8a30:	00000f06 	br	8a70 <VGA_box+0x80>
		{
			offset = (row << 9) + col;
    8a34:	e0bff717 	ldw	r2,-36(fp)
    8a38:	1006927a 	slli	r3,r2,9
    8a3c:	e0bff817 	ldw	r2,-32(fp)
    8a40:	1885883a 	add	r2,r3,r2
    8a44:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
    8a48:	e0bffa17 	ldw	r2,-24(fp)
    8a4c:	1085883a 	add	r2,r2,r2
    8a50:	1007883a 	mov	r3,r2
    8a54:	e0bff917 	ldw	r2,-28(fp)
    8a58:	10c5883a 	add	r2,r2,r3
    8a5c:	e0ffff0b 	ldhu	r3,-4(fp)
    8a60:	10c0000d 	sth	r3,0(r2)
			++col;
    8a64:	e0bff817 	ldw	r2,-32(fp)
    8a68:	10800044 	addi	r2,r2,1
    8a6c:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
    8a70:	e0bff817 	ldw	r2,-32(fp)
    8a74:	e0fffd17 	ldw	r3,-12(fp)
    8a78:	18bfee0e 	bge	r3,r2,8a34 <VGA_box+0x44>
{
	int offset, row, col;
	volatile short * pixel_buffer = (short*) 0x08000000; // VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    8a7c:	e0bff717 	ldw	r2,-36(fp)
    8a80:	10800044 	addi	r2,r2,1
    8a84:	e0bff715 	stw	r2,-36(fp)
    8a88:	e0bff717 	ldw	r2,-36(fp)
    8a8c:	e0fffe17 	ldw	r3,-8(fp)
    8a90:	18bfe50e 	bge	r3,r2,8a28 <VGA_box+0x38>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
    8a94:	0001883a 	nop
    8a98:	e037883a 	mov	sp,fp
    8a9c:	df000017 	ldw	fp,0(sp)
    8aa0:	dec00104 	addi	sp,sp,4
    8aa4:	f800283a 	ret

00008aa8 <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
    8aa8:	defffa04 	addi	sp,sp,-24
    8aac:	df000515 	stw	fp,20(sp)
    8ab0:	df000504 	addi	fp,sp,20
    8ab4:	e13ffd15 	stw	r4,-12(fp)
    8ab8:	e17ffe15 	stw	r5,-8(fp)
    8abc:	e1bfff15 	stw	r6,-4(fp)
	int offset;
	volatile char * character_buffer = (char *) 0x09000000; // VGA character buffer
    8ac0:	00824034 	movhi	r2,2304
    8ac4:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
    8ac8:	e0bffe17 	ldw	r2,-8(fp)
    8acc:	100691fa 	slli	r3,r2,7
    8ad0:	e0bffd17 	ldw	r2,-12(fp)
    8ad4:	1885883a 	add	r2,r3,r2
    8ad8:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
    8adc:	00000c06 	br	8b10 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    8ae0:	e0bffb17 	ldw	r2,-20(fp)
    8ae4:	e0fffc17 	ldw	r3,-16(fp)
    8ae8:	1885883a 	add	r2,r3,r2
    8aec:	e0ffff17 	ldw	r3,-4(fp)
    8af0:	18c00003 	ldbu	r3,0(r3)
    8af4:	10c00005 	stb	r3,0(r2)
		++text_ptr;
    8af8:	e0bfff17 	ldw	r2,-4(fp)
    8afc:	10800044 	addi	r2,r2,1
    8b00:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    8b04:	e0bffb17 	ldw	r2,-20(fp)
    8b08:	10800044 	addi	r2,r2,1
    8b0c:	e0bffb15 	stw	r2,-20(fp)
	int offset;
	volatile char * character_buffer = (char *) 0x09000000; // VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
    8b10:	e0bfff17 	ldw	r2,-4(fp)
    8b14:	10800003 	ldbu	r2,0(r2)
    8b18:	10803fcc 	andi	r2,r2,255
    8b1c:	1080201c 	xori	r2,r2,128
    8b20:	10bfe004 	addi	r2,r2,-128
    8b24:	103fee1e 	bne	r2,zero,8ae0 <VGA_text+0x38>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
    8b28:	0001883a 	nop
    8b2c:	e037883a 	mov	sp,fp
    8b30:	df000017 	ldw	fp,0(sp)
    8b34:	dec00104 	addi	sp,sp,4
    8b38:	f800283a 	ret

00008b3c <populateLevels>:
 * Pre: Nothing
 * Post: Levels contains Level_t with fields populated with information
 * Return: Nothing
 * Timing Constraints: None; this function should be run before task creation.
 */
static void populateLevels(void) {
    8b3c:	defffe04 	addi	sp,sp,-8
    8b40:	df000115 	stw	fp,4(sp)
    8b44:	df000104 	addi	fp,sp,4
    int i; // for for loop
    for (i=0; i<MAX_NUMBER_OF_LEVELS; i++) {
    8b48:	e03fff15 	stw	zero,-4(fp)
    8b4c:	00007406 	br	8d20 <populateLevels+0x1e4>
        Levels[i].levelNumber = i; // Populate levelNumber
    8b50:	00800174 	movhi	r2,5
    8b54:	10a66b04 	addi	r2,r2,-26196
    8b58:	e0ffff17 	ldw	r3,-4(fp)
    8b5c:	18c00624 	muli	r3,r3,24
    8b60:	10c5883a 	add	r2,r2,r3
    8b64:	e0ffff17 	ldw	r3,-4(fp)
    8b68:	10c00015 	stw	r3,0(r2)
        // Populate minNumber...
        Levels[i].minNumber = 1 + (i << i/2)/3;
    8b6c:	e0bfff17 	ldw	r2,-4(fp)
    8b70:	1006d7fa 	srli	r3,r2,31
    8b74:	1885883a 	add	r2,r3,r2
    8b78:	1005d07a 	srai	r2,r2,1
    8b7c:	1007883a 	mov	r3,r2
    8b80:	e0bfff17 	ldw	r2,-4(fp)
    8b84:	10c6983a 	sll	r3,r2,r3
    8b88:	008000c4 	movi	r2,3
    8b8c:	1885283a 	div	r2,r3,r2
    8b90:	10c00044 	addi	r3,r2,1
    8b94:	00800174 	movhi	r2,5
    8b98:	10a66b04 	addi	r2,r2,-26196
    8b9c:	e13fff17 	ldw	r4,-4(fp)
    8ba0:	21000624 	muli	r4,r4,24
    8ba4:	1105883a 	add	r2,r2,r4
    8ba8:	10800104 	addi	r2,r2,4
    8bac:	10c00015 	stw	r3,0(r2)
        // Ensure minNumber > 1
        if (Levels[i].minNumber < MIN_NUMBER_OVERALL) Levels[i].minNumber = MIN_NUMBER_OVERALL;
    8bb0:	00800174 	movhi	r2,5
    8bb4:	10a66b04 	addi	r2,r2,-26196
    8bb8:	e0ffff17 	ldw	r3,-4(fp)
    8bbc:	18c00624 	muli	r3,r3,24
    8bc0:	10c5883a 	add	r2,r2,r3
    8bc4:	10800104 	addi	r2,r2,4
    8bc8:	10800017 	ldw	r2,0(r2)
    8bcc:	00800816 	blt	zero,r2,8bf0 <populateLevels+0xb4>
    8bd0:	00800174 	movhi	r2,5
    8bd4:	10a66b04 	addi	r2,r2,-26196
    8bd8:	e0ffff17 	ldw	r3,-4(fp)
    8bdc:	18c00624 	muli	r3,r3,24
    8be0:	10c5883a 	add	r2,r2,r3
    8be4:	10800104 	addi	r2,r2,4
    8be8:	00c00044 	movi	r3,1
    8bec:	10c00015 	stw	r3,0(r2)
        // Populate maxNumber...
        Levels[i].maxNumber = 20 + (i << i*2) + (i << i/2)/3;
    8bf0:	e0bfff17 	ldw	r2,-4(fp)
    8bf4:	1085883a 	add	r2,r2,r2
    8bf8:	1007883a 	mov	r3,r2
    8bfc:	e0bfff17 	ldw	r2,-4(fp)
    8c00:	10c4983a 	sll	r2,r2,r3
    8c04:	10c00504 	addi	r3,r2,20
    8c08:	e0bfff17 	ldw	r2,-4(fp)
    8c0c:	1008d7fa 	srli	r4,r2,31
    8c10:	2085883a 	add	r2,r4,r2
    8c14:	1005d07a 	srai	r2,r2,1
    8c18:	1009883a 	mov	r4,r2
    8c1c:	e0bfff17 	ldw	r2,-4(fp)
    8c20:	1108983a 	sll	r4,r2,r4
    8c24:	008000c4 	movi	r2,3
    8c28:	2085283a 	div	r2,r4,r2
    8c2c:	1887883a 	add	r3,r3,r2
    8c30:	00800174 	movhi	r2,5
    8c34:	10a66b04 	addi	r2,r2,-26196
    8c38:	e13fff17 	ldw	r4,-4(fp)
    8c3c:	21000624 	muli	r4,r4,24
    8c40:	1105883a 	add	r2,r2,r4
    8c44:	10800204 	addi	r2,r2,8
    8c48:	10c00015 	stw	r3,0(r2)
        // Ensure maxNumber < 2^17+2^16+... (reserve SW17 for 1s complement)
        if (Levels[i].maxNumber > MAX_NUMBER_OVERALL) Levels[i].maxNumber = MAX_NUMBER_OVERALL;
    8c4c:	00800174 	movhi	r2,5
    8c50:	10a66b04 	addi	r2,r2,-26196
    8c54:	e0ffff17 	ldw	r3,-4(fp)
    8c58:	18c00624 	muli	r3,r3,24
    8c5c:	10c5883a 	add	r2,r2,r3
    8c60:	10800204 	addi	r2,r2,8
    8c64:	10c00017 	ldw	r3,0(r2)
    8c68:	00800134 	movhi	r2,4
    8c6c:	18800916 	blt	r3,r2,8c94 <populateLevels+0x158>
    8c70:	00800174 	movhi	r2,5
    8c74:	10a66b04 	addi	r2,r2,-26196
    8c78:	e0ffff17 	ldw	r3,-4(fp)
    8c7c:	18c00624 	muli	r3,r3,24
    8c80:	10c5883a 	add	r2,r2,r3
    8c84:	10c00204 	addi	r3,r2,8
    8c88:	00800134 	movhi	r2,4
    8c8c:	10bfffc4 	addi	r2,r2,-1
    8c90:	18800015 	stw	r2,0(r3)
        // Populate maxNumberMult...
        Levels[i].maxNumberMult = 5 + (1 << i*2)/3;
    8c94:	e0bfff17 	ldw	r2,-4(fp)
    8c98:	1085883a 	add	r2,r2,r2
    8c9c:	1007883a 	mov	r3,r2
    8ca0:	00800044 	movi	r2,1
    8ca4:	10c6983a 	sll	r3,r2,r3
    8ca8:	008000c4 	movi	r2,3
    8cac:	1885283a 	div	r2,r3,r2
    8cb0:	10c00144 	addi	r3,r2,5
    8cb4:	00800174 	movhi	r2,5
    8cb8:	10a66b04 	addi	r2,r2,-26196
    8cbc:	e13fff17 	ldw	r4,-4(fp)
    8cc0:	21000624 	muli	r4,r4,24
    8cc4:	1105883a 	add	r2,r2,r4
    8cc8:	10800304 	addi	r2,r2,12
    8ccc:	10c00015 	stw	r3,0(r2)
        // Ensure maxNumberMult is within some sort of reason
        if (Levels[i].maxNumberMult > MAX_NUMBER_MULTIPLICATION) Levels[i].maxNumberMult = MAX_NUMBER_MULTIPLICATION;
    8cd0:	00800174 	movhi	r2,5
    8cd4:	10a66b04 	addi	r2,r2,-26196
    8cd8:	e0ffff17 	ldw	r3,-4(fp)
    8cdc:	18c00624 	muli	r3,r3,24
    8ce0:	10c5883a 	add	r2,r2,r3
    8ce4:	10800304 	addi	r2,r2,12
    8ce8:	10800017 	ldw	r2,0(r2)
    8cec:	1080b450 	cmplti	r2,r2,721
    8cf0:	1000081e 	bne	r2,zero,8d14 <populateLevels+0x1d8>
    8cf4:	00800174 	movhi	r2,5
    8cf8:	10a66b04 	addi	r2,r2,-26196
    8cfc:	e0ffff17 	ldw	r3,-4(fp)
    8d00:	18c00624 	muli	r3,r3,24
    8d04:	10c5883a 	add	r2,r2,r3
    8d08:	10800304 	addi	r2,r2,12
    8d0c:	00c0b404 	movi	r3,720
    8d10:	10c00015 	stw	r3,0(r2)
 * Return: Nothing
 * Timing Constraints: None; this function should be run before task creation.
 */
static void populateLevels(void) {
    int i; // for for loop
    for (i=0; i<MAX_NUMBER_OF_LEVELS; i++) {
    8d14:	e0bfff17 	ldw	r2,-4(fp)
    8d18:	10800044 	addi	r2,r2,1
    8d1c:	e0bfff15 	stw	r2,-4(fp)
    8d20:	e0bfff17 	ldw	r2,-4(fp)
    8d24:	10800190 	cmplti	r2,r2,6
    8d28:	103f891e 	bne	r2,zero,8b50 <populateLevels+0x14>
        // Ensure maxNumberMult is within some sort of reason
        if (Levels[i].maxNumberMult > MAX_NUMBER_MULTIPLICATION) Levels[i].maxNumberMult = MAX_NUMBER_MULTIPLICATION;
    }
    // Other, hard-coded vals...
    // Time per question
    Levels[0].timePerQuestion = 99;
    8d2c:	00800174 	movhi	r2,5
    8d30:	10a66b04 	addi	r2,r2,-26196
    8d34:	00c018c4 	movi	r3,99
    8d38:	10c00515 	stw	r3,20(r2)
    Levels[1].timePerQuestion = 60;
    8d3c:	00800174 	movhi	r2,5
    8d40:	10a66b04 	addi	r2,r2,-26196
    8d44:	00c00f04 	movi	r3,60
    8d48:	10c00b15 	stw	r3,44(r2)
    Levels[2].timePerQuestion = 60;
    8d4c:	00800174 	movhi	r2,5
    8d50:	10a66b04 	addi	r2,r2,-26196
    8d54:	00c00f04 	movi	r3,60
    8d58:	10c01115 	stw	r3,68(r2)
    Levels[3].timePerQuestion = 30;
    8d5c:	00800174 	movhi	r2,5
    8d60:	10a66b04 	addi	r2,r2,-26196
    8d64:	00c00784 	movi	r3,30
    8d68:	10c01715 	stw	r3,92(r2)
    Levels[4].timePerQuestion = 30;
    8d6c:	00800174 	movhi	r2,5
    8d70:	10a66b04 	addi	r2,r2,-26196
    8d74:	00c00784 	movi	r3,30
    8d78:	10c01d15 	stw	r3,116(r2)
    Levels[5].timePerQuestion = 20;
    8d7c:	00800174 	movhi	r2,5
    8d80:	10a66b04 	addi	r2,r2,-26196
    8d84:	00c00504 	movi	r3,20
    8d88:	10c02315 	stw	r3,140(r2)
    // Operation Allowances
    Levels[0].allowedOperations = LEVEL_ALLOW_ADDITION;
    8d8c:	00800174 	movhi	r2,5
    8d90:	10a66b04 	addi	r2,r2,-26196
    8d94:	00c00044 	movi	r3,1
    8d98:	10c00415 	stw	r3,16(r2)
    Levels[1].allowedOperations = LEVEL_ALLOW_ADDITION;
    8d9c:	00800174 	movhi	r2,5
    8da0:	10a66b04 	addi	r2,r2,-26196
    8da4:	00c00044 	movi	r3,1
    8da8:	10c00a15 	stw	r3,40(r2)
    Levels[2].allowedOperations = LEVEL_ALLOW_ADDITION+LEVEL_ALLOW_SUBTRACTION;
    8dac:	00800174 	movhi	r2,5
    8db0:	10a66b04 	addi	r2,r2,-26196
    8db4:	00c000c4 	movi	r3,3
    8db8:	10c01015 	stw	r3,64(r2)
    Levels[3].allowedOperations = LEVEL_ALLOW_ADDITION+LEVEL_ALLOW_SUBTRACTION+LEVEL_ALLOW_INT_DIVISION;
    8dbc:	00800174 	movhi	r2,5
    8dc0:	10a66b04 	addi	r2,r2,-26196
    8dc4:	00c001c4 	movi	r3,7
    8dc8:	10c01615 	stw	r3,88(r2)
    Levels[4].allowedOperations = LEVEL_ALLOW_ADDITION+LEVEL_ALLOW_SUBTRACTION+LEVEL_ALLOW_INT_DIVISION+LEVEL_ALLOW_MULTIPLICATION;
    8dcc:	00800174 	movhi	r2,5
    8dd0:	10a66b04 	addi	r2,r2,-26196
    8dd4:	00c003c4 	movi	r3,15
    8dd8:	10c01c15 	stw	r3,112(r2)
    Levels[5].allowedOperations = LEVEL_ALLOW_ADDITION+LEVEL_ALLOW_SUBTRACTION+LEVEL_ALLOW_INT_DIVISION+LEVEL_ALLOW_MULTIPLICATION;
    8ddc:	00800174 	movhi	r2,5
    8de0:	10a66b04 	addi	r2,r2,-26196
    8de4:	00c003c4 	movi	r3,15
    8de8:	10c02215 	stw	r3,136(r2)
}
    8dec:	0001883a 	nop
    8df0:	e037883a 	mov	sp,fp
    8df4:	df000017 	ldw	fp,0(sp)
    8df8:	dec00104 	addi	sp,sp,4
    8dfc:	f800283a 	ret

00008e00 <getNumber>:
 * Post: Nothing
 * Return: random number between level.minNumber and level.maxNumber, inclusive
 * Timing Constraints: This task should be (in practice) approximately 1 atomic operations.
 * @50Mhz clock, this is 20ns.
 */
unsigned long getNumber(Level_t level) {
    8e00:	defff904 	addi	sp,sp,-28
    8e04:	dfc00215 	stw	ra,8(sp)
    8e08:	df000115 	stw	fp,4(sp)
    8e0c:	dc000015 	stw	r16,0(sp)
    8e10:	df000104 	addi	fp,sp,4
    8e14:	e1000215 	stw	r4,8(fp)
    8e18:	e1400315 	stw	r5,12(fp)
    8e1c:	e1800415 	stw	r6,16(fp)
    8e20:	e1c00515 	stw	r7,20(fp)
    return level.minNumber + rand()%(level.maxNumber-level.minNumber);
    8e24:	e4000317 	ldw	r16,12(fp)
    8e28:	000b62c0 	call	b62c <rand>
    8e2c:	1007883a 	mov	r3,r2
    8e30:	e1000417 	ldw	r4,16(fp)
    8e34:	e0800317 	ldw	r2,12(fp)
    8e38:	2085c83a 	sub	r2,r4,r2
    8e3c:	1889283a 	div	r4,r3,r2
    8e40:	2085383a 	mul	r2,r4,r2
    8e44:	1885c83a 	sub	r2,r3,r2
    8e48:	8085883a 	add	r2,r16,r2
}
    8e4c:	e6ffff04 	addi	sp,fp,-4
    8e50:	dfc00217 	ldw	ra,8(sp)
    8e54:	df000117 	ldw	fp,4(sp)
    8e58:	dc000017 	ldw	r16,0(sp)
    8e5c:	dec00704 	addi	sp,sp,28
    8e60:	f800283a 	ret

00008e64 <getNumberMult>:
 * Post: Nothing
 * Return: random number between level.minNumber and level.maxNumberMult, inclusive
 * Timing Constraints: This task should be (in practice) approximately 1 atomic operations.
 * @50Mhz clock, this is 20ns.
 */
unsigned long getNumberMult(Level_t level) {
    8e64:	defff904 	addi	sp,sp,-28
    8e68:	dfc00215 	stw	ra,8(sp)
    8e6c:	df000115 	stw	fp,4(sp)
    8e70:	dc000015 	stw	r16,0(sp)
    8e74:	df000104 	addi	fp,sp,4
    8e78:	e1000215 	stw	r4,8(fp)
    8e7c:	e1400315 	stw	r5,12(fp)
    8e80:	e1800415 	stw	r6,16(fp)
    8e84:	e1c00515 	stw	r7,20(fp)
    return level.minNumber + rand()%(level.maxNumberMult-level.minNumber);
    8e88:	e4000317 	ldw	r16,12(fp)
    8e8c:	000b62c0 	call	b62c <rand>
    8e90:	1007883a 	mov	r3,r2
    8e94:	e1000517 	ldw	r4,20(fp)
    8e98:	e0800317 	ldw	r2,12(fp)
    8e9c:	2085c83a 	sub	r2,r4,r2
    8ea0:	1889283a 	div	r4,r3,r2
    8ea4:	2085383a 	mul	r2,r4,r2
    8ea8:	1885c83a 	sub	r2,r3,r2
    8eac:	8085883a 	add	r2,r16,r2
}
    8eb0:	e6ffff04 	addi	sp,fp,-4
    8eb4:	dfc00217 	ldw	ra,8(sp)
    8eb8:	df000117 	ldw	fp,4(sp)
    8ebc:	dc000017 	ldw	r16,0(sp)
    8ec0:	dec00704 	addi	sp,sp,28
    8ec4:	f800283a 	ret

00008ec8 <getOperation>:
 * Return: value between 0 and 3, where 0 is addition, 1 is subraction, 2 is division, and 3 is
 * multiplication
 * Timing Constraints: This task should be (in practice) no worse than 6 atomic operations.
 * @50Mhz clock, this is 120ns.
 */
unsigned short getOperation(Level_t level) {
    8ec8:	defff804 	addi	sp,sp,-32
    8ecc:	dfc00315 	stw	ra,12(sp)
    8ed0:	df000215 	stw	fp,8(sp)
    8ed4:	df000204 	addi	fp,sp,8
    8ed8:	e1000215 	stw	r4,8(fp)
    8edc:	e1400315 	stw	r5,12(fp)
    8ee0:	e1800415 	stw	r6,16(fp)
    8ee4:	e1c00515 	stw	r7,20(fp)
    int loopCounter = 4;
    8ee8:	00800104 	movi	r2,4
    8eec:	e0bffe15 	stw	r2,-8(fp)
    unsigned short operation = rand()%4;
    8ef0:	000b62c0 	call	b62c <rand>
    8ef4:	1007883a 	mov	r3,r2
    8ef8:	00a00034 	movhi	r2,32768
    8efc:	108000c4 	addi	r2,r2,3
    8f00:	1884703a 	and	r2,r3,r2
    8f04:	1000040e 	bge	r2,zero,8f18 <getOperation+0x50>
    8f08:	10bfffc4 	addi	r2,r2,-1
    8f0c:	00ffff04 	movi	r3,-4
    8f10:	10c4b03a 	or	r2,r2,r3
    8f14:	10800044 	addi	r2,r2,1
    8f18:	e0bfff0d 	sth	r2,-4(fp)
    while (loopCounter) { // Loop should run for max of 4 times
    8f1c:	00000d06 	br	8f54 <getOperation+0x8c>
        //printf("%d\n", operation);
        if (level.allowedOperations&(1 << operation)) return operation;
    8f20:	e0c00617 	ldw	r3,24(fp)
    8f24:	e0bfff0b 	ldhu	r2,-4(fp)
    8f28:	1885d83a 	sra	r2,r3,r2
    8f2c:	1080004c 	andi	r2,r2,1
    8f30:	10000226 	beq	r2,zero,8f3c <getOperation+0x74>
    8f34:	e0bfff0b 	ldhu	r2,-4(fp)
    8f38:	00000906 	br	8f60 <getOperation+0x98>
        operation--;
    8f3c:	e0bfff0b 	ldhu	r2,-4(fp)
    8f40:	10bfffc4 	addi	r2,r2,-1
    8f44:	e0bfff0d 	sth	r2,-4(fp)
        loopCounter--;
    8f48:	e0bffe17 	ldw	r2,-8(fp)
    8f4c:	10bfffc4 	addi	r2,r2,-1
    8f50:	e0bffe15 	stw	r2,-8(fp)
 * @50Mhz clock, this is 120ns.
 */
unsigned short getOperation(Level_t level) {
    int loopCounter = 4;
    unsigned short operation = rand()%4;
    while (loopCounter) { // Loop should run for max of 4 times
    8f54:	e0bffe17 	ldw	r2,-8(fp)
    8f58:	103ff11e 	bne	r2,zero,8f20 <getOperation+0x58>
        //printf("%d\n", operation);
        if (level.allowedOperations&(1 << operation)) return operation;
        operation--;
        loopCounter--;
    }
    return 0;
    8f5c:	0005883a 	mov	r2,zero
}
    8f60:	e037883a 	mov	sp,fp
    8f64:	dfc00117 	ldw	ra,4(sp)
    8f68:	df000017 	ldw	fp,0(sp)
    8f6c:	dec00604 	addi	sp,sp,24
    8f70:	f800283a 	ret

00008f74 <getOperationSymbol>:
 * Pre: op = unsigned value representing a mathematical operationPost: Nothing
 * Return: char representation of numerical op
 * Timing Constraints: This task should be (in practice) no worse than 5 atomic operations.
 * @50Mhz clock, this is 100ns.
 */
unsigned char getOperationSymbol(unsigned short operation) {
    8f74:	defffe04 	addi	sp,sp,-8
    8f78:	df000115 	stw	fp,4(sp)
    8f7c:	df000104 	addi	fp,sp,4
    8f80:	2005883a 	mov	r2,r4
    8f84:	e0bfff0d 	sth	r2,-4(fp)
    if (0 == operation) return '+';
    8f88:	e0bfff0b 	ldhu	r2,-4(fp)
    8f8c:	1000021e 	bne	r2,zero,8f98 <getOperationSymbol+0x24>
    8f90:	00800ac4 	movi	r2,43
    8f94:	00000b06 	br	8fc4 <getOperationSymbol+0x50>
    else if (1 == operation) return '-';
    8f98:	e0bfff0b 	ldhu	r2,-4(fp)
    8f9c:	10800058 	cmpnei	r2,r2,1
    8fa0:	1000021e 	bne	r2,zero,8fac <getOperationSymbol+0x38>
    8fa4:	00800b44 	movi	r2,45
    8fa8:	00000606 	br	8fc4 <getOperationSymbol+0x50>
    else if (2 == operation) return '/';
    8fac:	e0bfff0b 	ldhu	r2,-4(fp)
    8fb0:	10800098 	cmpnei	r2,r2,2
    8fb4:	1000021e 	bne	r2,zero,8fc0 <getOperationSymbol+0x4c>
    8fb8:	00800bc4 	movi	r2,47
    8fbc:	00000106 	br	8fc4 <getOperationSymbol+0x50>
    else return '*';
    8fc0:	00800a84 	movi	r2,42
}
    8fc4:	e037883a 	mov	sp,fp
    8fc8:	df000017 	ldw	fp,0(sp)
    8fcc:	dec00104 	addi	sp,sp,4
    8fd0:	f800283a 	ret

00008fd4 <getAns>:
 * Post: Nothing
 * Return: num1 OP num2
 * Timing Constraints: This task should be (in practice) no worse than 5 atomic operations.
 * @50Mhz clock, this is 100ns.
 */
int getAns (int n1, char op, int n2) {
    8fd4:	defffc04 	addi	sp,sp,-16
    8fd8:	df000315 	stw	fp,12(sp)
    8fdc:	df000304 	addi	fp,sp,12
    8fe0:	e13ffd15 	stw	r4,-12(fp)
    8fe4:	2805883a 	mov	r2,r5
    8fe8:	e1bfff15 	stw	r6,-4(fp)
    8fec:	e0bffe05 	stb	r2,-8(fp)
    switch (op) {
    8ff0:	e0bffe07 	ldb	r2,-8(fp)
    8ff4:	10c00060 	cmpeqi	r3,r2,1
    8ff8:	1800071e 	bne	r3,zero,9018 <getAns+0x44>
    8ffc:	10c000a0 	cmpeqi	r3,r2,2
    9000:	18000c1e 	bne	r3,zero,9034 <getAns+0x60>
    9004:	10000f1e 	bne	r2,zero,9044 <getAns+0x70>
        case 0:
            return n1 + n2;
    9008:	e0fffd17 	ldw	r3,-12(fp)
    900c:	e0bfff17 	ldw	r2,-4(fp)
    9010:	1885883a 	add	r2,r3,r2
    9014:	00000e06 	br	9050 <getAns+0x7c>
        case 1:
            return (unsigned)((n1 - n2)&MAX_HEX_NUMBER_REPRESENTABLE_BY_INPUT);
    9018:	e0fffd17 	ldw	r3,-12(fp)
    901c:	e0bfff17 	ldw	r2,-4(fp)
    9020:	1887c83a 	sub	r3,r3,r2
    9024:	00800134 	movhi	r2,4
    9028:	10bfffc4 	addi	r2,r2,-1
    902c:	1884703a 	and	r2,r3,r2
    9030:	00000706 	br	9050 <getAns+0x7c>
        case 2:
            return n1 / n2;
    9034:	e0fffd17 	ldw	r3,-12(fp)
    9038:	e0bfff17 	ldw	r2,-4(fp)
    903c:	1885283a 	div	r2,r3,r2
    9040:	00000306 	br	9050 <getAns+0x7c>
        default:
            return n1 * n2;
    9044:	e0fffd17 	ldw	r3,-12(fp)
    9048:	e0bfff17 	ldw	r2,-4(fp)
    904c:	1885383a 	mul	r2,r3,r2
    }
}
    9050:	e037883a 	mov	sp,fp
    9054:	df000017 	ldw	fp,0(sp)
    9058:	dec00104 	addi	sp,sp,4
    905c:	f800283a 	ret

00009060 <inVGAMode>:
 * Returns an int-cast boolean regarding whether the program is operating in VGA mode.
 * Pre: Nothing
 * Post: Nothing
 * Return: >0 if in VGA mode, 0 else.
 */
int inVGAMode(void) {
    9060:	defffd04 	addi	sp,sp,-12
    9064:	dfc00215 	stw	ra,8(sp)
    9068:	df000115 	stw	fp,4(sp)
    906c:	df000104 	addi	fp,sp,4
	INT8U err;
	return PROGRAM_STATE_VGA_MODE_SET&OSFlagQuery(ProgramStateFlags, &err);
    9070:	d0a7bc17 	ldw	r2,-24848(gp)
    9074:	e17fff04 	addi	r5,fp,-4
    9078:	1009883a 	mov	r4,r2
    907c:	001f3040 	call	1f304 <OSFlagQuery>
    9080:	10bfffcc 	andi	r2,r2,65535
    9084:	1080004c 	andi	r2,r2,1

}
    9088:	e037883a 	mov	sp,fp
    908c:	dfc00117 	ldw	ra,4(sp)
    9090:	df000017 	ldw	fp,0(sp)
    9094:	dec00204 	addi	sp,sp,8
    9098:	f800283a 	ret

0000909c <inHexMode>:
 * Returns an int-cast boolean regarding whether the program is operating in VGA mode.
 * Pre: Nothing
 * Post: Nothing
 * Return: >0 if in VGA mode, 0 else.
 */
int inHexMode(void) {
    909c:	defffd04 	addi	sp,sp,-12
    90a0:	dfc00215 	stw	ra,8(sp)
    90a4:	df000115 	stw	fp,4(sp)
    90a8:	df000104 	addi	fp,sp,4
	INT8U err;
	return PROGRAM_STATE_HEX_MODE_SET&OSFlagQuery(ProgramStateFlags, &err);
    90ac:	d0a7bc17 	ldw	r2,-24848(gp)
    90b0:	e17fff04 	addi	r5,fp,-4
    90b4:	1009883a 	mov	r4,r2
    90b8:	001f3040 	call	1f304 <OSFlagQuery>
    90bc:	10bfffcc 	andi	r2,r2,65535
    90c0:	1080008c 	andi	r2,r2,2
}
    90c4:	e037883a 	mov	sp,fp
    90c8:	dfc00117 	ldw	ra,4(sp)
    90cc:	df000017 	ldw	fp,0(sp)
    90d0:	dec00204 	addi	sp,sp,8
    90d4:	f800283a 	ret

000090d8 <getReadyNewQuestion>:
 * Pre: Nothing
 * Post: The system will generate and then display a new question when
 * TimeRemaining reaches 0.
 * Return: Nothing
 */
void getReadyNewQuestion(void) {
    90d8:	defffd04 	addi	sp,sp,-12
    90dc:	dfc00215 	stw	ra,8(sp)
    90e0:	df000115 	stw	fp,4(sp)
    90e4:	df000104 	addi	fp,sp,4
	INT8U err;
	OSFlagPost(ProgramStateFlags, PROGRAM_STATE_DISPLAY_RESULT, OS_FLAG_CLR, &err);
    90e8:	d0a7bc17 	ldw	r2,-24848(gp)
    90ec:	e1ffff04 	addi	r7,fp,-4
    90f0:	000d883a 	mov	r6,zero
    90f4:	01400104 	movi	r5,4
    90f8:	1009883a 	mov	r4,r2
    90fc:	001ef700 	call	1ef70 <OSFlagPost>
}
    9100:	0001883a 	nop
    9104:	e037883a 	mov	sp,fp
    9108:	dfc00117 	ldw	ra,4(sp)
    910c:	df000017 	ldw	fp,0(sp)
    9110:	dec00204 	addi	sp,sp,8
    9114:	f800283a 	ret

00009118 <getReadyDisplayResult>:
 * Pre: Nothing
 * Post: The system will generate and then display a new question when
 * TimeRemaining reaches 0.
 * Return: Nothing
 */
void getReadyDisplayResult(void) {
    9118:	defffd04 	addi	sp,sp,-12
    911c:	dfc00215 	stw	ra,8(sp)
    9120:	df000115 	stw	fp,4(sp)
    9124:	df000104 	addi	fp,sp,4
	INT8U err;
	OSFlagPost(ProgramStateFlags, PROGRAM_STATE_DISPLAY_RESULT, OS_FLAG_SET, &err);
    9128:	d0a7bc17 	ldw	r2,-24848(gp)
    912c:	e1ffff04 	addi	r7,fp,-4
    9130:	01800044 	movi	r6,1
    9134:	01400104 	movi	r5,4
    9138:	1009883a 	mov	r4,r2
    913c:	001ef700 	call	1ef70 <OSFlagPost>
}
    9140:	0001883a 	nop
    9144:	e037883a 	mov	sp,fp
    9148:	dfc00117 	ldw	ra,4(sp)
    914c:	df000017 	ldw	fp,0(sp)
    9150:	dec00204 	addi	sp,sp,8
    9154:	f800283a 	ret

00009158 <getReadyEndOfLevel>:
 * Pre: Nothing
 * Post: The system will generate and then display end of level stats when
 * TimeRemaining reaches 0.
 * Return: Nothing
 */
void getReadyEndOfLevel(void) {
    9158:	defffd04 	addi	sp,sp,-12
    915c:	dfc00215 	stw	ra,8(sp)
    9160:	df000115 	stw	fp,4(sp)
    9164:	df000104 	addi	fp,sp,4
	INT8U err;
	OSFlagPost(ProgramStateFlags, PROGRAM_STATE_END_LEVEL, OS_FLAG_SET, &err);
    9168:	d0a7bc17 	ldw	r2,-24848(gp)
    916c:	e1ffff04 	addi	r7,fp,-4
    9170:	01800044 	movi	r6,1
    9174:	01400204 	movi	r5,8
    9178:	1009883a 	mov	r4,r2
    917c:	001ef700 	call	1ef70 <OSFlagPost>
}
    9180:	0001883a 	nop
    9184:	e037883a 	mov	sp,fp
    9188:	dfc00117 	ldw	ra,4(sp)
    918c:	df000017 	ldw	fp,0(sp)
    9190:	dec00204 	addi	sp,sp,8
    9194:	f800283a 	ret

00009198 <getReadyGoForwardLevel>:
 * Gets the program ready to go forward a level.
 * Pre: Nothing
 * Post: Sets LEVEL_GO_FORWARD in LevelGoFlags.
 * Return: Nothing
 */
void getReadyGoForwardLevel(void) {
    9198:	defffd04 	addi	sp,sp,-12
    919c:	dfc00215 	stw	ra,8(sp)
    91a0:	df000115 	stw	fp,4(sp)
    91a4:	df000104 	addi	fp,sp,4
	INT8U err;
	OSFlagPost(LevelGoFlags, LEVEL_GO_FORWARD, OS_FLAG_SET, &err);
    91a8:	d0a7c317 	ldw	r2,-24820(gp)
    91ac:	e1ffff04 	addi	r7,fp,-4
    91b0:	01800044 	movi	r6,1
    91b4:	01400044 	movi	r5,1
    91b8:	1009883a 	mov	r4,r2
    91bc:	001ef700 	call	1ef70 <OSFlagPost>
}
    91c0:	0001883a 	nop
    91c4:	e037883a 	mov	sp,fp
    91c8:	dfc00117 	ldw	ra,4(sp)
    91cc:	df000017 	ldw	fp,0(sp)
    91d0:	dec00204 	addi	sp,sp,8
    91d4:	f800283a 	ret

000091d8 <getReadyGoBackwardLevel>:
 * Gets the program ready to go back a level.
 * Pre: Nothing
 * Post: Clears LEVEL_GO_FORWARD in LevelGoFlags.
 * Return: Nothing
 */
void getReadyGoBackwardLevel(void) {
    91d8:	defffd04 	addi	sp,sp,-12
    91dc:	dfc00215 	stw	ra,8(sp)
    91e0:	df000115 	stw	fp,4(sp)
    91e4:	df000104 	addi	fp,sp,4
	INT8U err;
	OSFlagPost(LevelGoFlags, LEVEL_GO_FORWARD, OS_FLAG_CLR, &err);
    91e8:	d0a7c317 	ldw	r2,-24820(gp)
    91ec:	e1ffff04 	addi	r7,fp,-4
    91f0:	000d883a 	mov	r6,zero
    91f4:	01400044 	movi	r5,1
    91f8:	1009883a 	mov	r4,r2
    91fc:	001ef700 	call	1ef70 <OSFlagPost>
}
    9200:	0001883a 	nop
    9204:	e037883a 	mov	sp,fp
    9208:	dfc00117 	ldw	ra,4(sp)
    920c:	df000017 	ldw	fp,0(sp)
    9210:	dec00204 	addi	sp,sp,8
    9214:	f800283a 	ret

00009218 <clearLevel>:
 * Pre: Nothing
 * Post: No LEDGs are onReturn: Nothing
 * Timing Constraints: This task should be (in practice) approximately 4 atomic operations.
 * @50MHz clock, this is 80ns.
 */
void clearLevel(void) {
    9218:	defffd04 	addi	sp,sp,-12
    921c:	dfc00215 	stw	ra,8(sp)
    9220:	df000115 	stw	fp,4(sp)
    9224:	df000104 	addi	fp,sp,4
	INT8U err;
	set_ledg(0);
    9228:	0009883a 	mov	r4,zero
    922c:	00005d40 	call	5d4 <set_ledg>
	OSFlagPost(LevelGoFlags, LEVEL_GO_FORWARD, OS_FLAG_CLR, &err);
    9230:	d0a7c317 	ldw	r2,-24820(gp)
    9234:	e1ffff04 	addi	r7,fp,-4
    9238:	000d883a 	mov	r6,zero
    923c:	01400044 	movi	r5,1
    9240:	1009883a 	mov	r4,r2
    9244:	001ef700 	call	1ef70 <OSFlagPost>
	QuestionsCorrect = 0;
    9248:	d027b215 	stw	zero,-24888(gp)
	OnQuestionNum = 0; // displays what question in the level we are on (start at 0, incremented to 1 by TaskUpdateQuestion on game start)
    924c:	d027b115 	stw	zero,-24892(gp)
	CurrentLevelNumber = CurrentLevel.levelNumber; // TODO find a different place for this maybe? It works as is though
    9250:	00800134 	movhi	r2,4
    9254:	109e6504 	addi	r2,r2,31124
    9258:	10800017 	ldw	r2,0(r2)
    925c:	d0a7c115 	stw	r2,-24828(gp)
	// Remove flag for end of level state.
	OSFlagPost(ProgramStateFlags, PROGRAM_STATE_END_LEVEL, OS_FLAG_CLR, &err);
    9260:	d0a7bc17 	ldw	r2,-24848(gp)
    9264:	e1ffff04 	addi	r7,fp,-4
    9268:	000d883a 	mov	r6,zero
    926c:	01400204 	movi	r5,8
    9270:	1009883a 	mov	r4,r2
    9274:	001ef700 	call	1ef70 <OSFlagPost>
}
    9278:	0001883a 	nop
    927c:	e037883a 	mov	sp,fp
    9280:	dfc00117 	ldw	ra,4(sp)
    9284:	df000017 	ldw	fp,0(sp)
    9288:	dec00204 	addi	sp,sp,8
    928c:	f800283a 	ret

00009290 <updateLevel>:
 * Post: CurrentLevel is changed
 * Return: Nothing
 * Timing Constraints: This task should be (in practice) should be 2 atomic operations +
 * clearLevel(). @50MHz, this is approximately 120ns.
 */
void updateLevel(void) {
    9290:	defffd04 	addi	sp,sp,-12
    9294:	dfc00215 	stw	ra,8(sp)
    9298:	df000115 	stw	fp,4(sp)
    929c:	df000104 	addi	fp,sp,4
	INT8U err;
	// Going forward a level?
	if (LEVEL_GO_FORWARD&OSFlagQuery(LevelGoFlags, &err)) {
    92a0:	d0a7c317 	ldw	r2,-24820(gp)
    92a4:	e17fff04 	addi	r5,fp,-4
    92a8:	1009883a 	mov	r4,r2
    92ac:	001f3040 	call	1f304 <OSFlagQuery>
    92b0:	1080004c 	andi	r2,r2,1
    92b4:	10bfffcc 	andi	r2,r2,65535
    92b8:	10000a26 	beq	r2,zero,92e4 <updateLevel+0x54>
		if (CurrentLevelNumber < MAX_NUMBER_OF_LEVELS-1) CurrentLevelNumber++; // MAX_NUMBER_OF_LEVELS-1 because levels start at 0
    92bc:	d0a7c117 	ldw	r2,-24828(gp)
    92c0:	10800148 	cmpgei	r2,r2,5
    92c4:	1000041e 	bne	r2,zero,92d8 <updateLevel+0x48>
    92c8:	d0a7c117 	ldw	r2,-24828(gp)
    92cc:	10800044 	addi	r2,r2,1
    92d0:	d0a7c115 	stw	r2,-24828(gp)
    92d4:	00000806 	br	92f8 <updateLevel+0x68>
		// Reset game.
		else CurrentLevelNumber = 1; // TODO: good enough reset level?
    92d8:	00800044 	movi	r2,1
    92dc:	d0a7c115 	stw	r2,-24828(gp)
    92e0:	00000506 	br	92f8 <updateLevel+0x68>
	} else {
		if (CurrentLevelNumber) CurrentLevelNumber--;
    92e4:	d0a7c117 	ldw	r2,-24828(gp)
    92e8:	10000326 	beq	r2,zero,92f8 <updateLevel+0x68>
    92ec:	d0a7c117 	ldw	r2,-24828(gp)
    92f0:	10bfffc4 	addi	r2,r2,-1
    92f4:	d0a7c115 	stw	r2,-24828(gp)
	}
	CurrentLevel = Levels[CurrentLevelNumber];
    92f8:	d127c117 	ldw	r4,-24828(gp)
    92fc:	00800134 	movhi	r2,4
    9300:	109e6504 	addi	r2,r2,31124
    9304:	00c00174 	movhi	r3,5
    9308:	18e66b04 	addi	r3,r3,-26196
    930c:	21000624 	muli	r4,r4,24
    9310:	1907883a 	add	r3,r3,r4
    9314:	19000017 	ldw	r4,0(r3)
    9318:	11000015 	stw	r4,0(r2)
    931c:	19000117 	ldw	r4,4(r3)
    9320:	11000115 	stw	r4,4(r2)
    9324:	19000217 	ldw	r4,8(r3)
    9328:	11000215 	stw	r4,8(r2)
    932c:	19000317 	ldw	r4,12(r3)
    9330:	11000315 	stw	r4,12(r2)
    9334:	19000417 	ldw	r4,16(r3)
    9338:	11000415 	stw	r4,16(r2)
    933c:	18c00517 	ldw	r3,20(r3)
    9340:	10c00515 	stw	r3,20(r2)
	clearLevel();
    9344:	00092180 	call	9218 <clearLevel>
}
    9348:	0001883a 	nop
    934c:	e037883a 	mov	sp,fp
    9350:	dfc00117 	ldw	ra,4(sp)
    9354:	df000017 	ldw	fp,0(sp)
    9358:	dec00204 	addi	sp,sp,8
    935c:	f800283a 	ret

00009360 <createGeneralTasks>:
 * Creates GENERAL TASKS.
 * Pre: Nothing
 * Post: Tasks under GENERAL TASKS are created
 * Return: Nothing
 */
static void createGeneralTasks(void) {
    9360:	defff704 	addi	sp,sp,-36
    9364:	dfc00815 	stw	ra,32(sp)
    9368:	df000715 	stw	fp,28(sp)
    936c:	df000704 	addi	fp,sp,28
	INT8U err;
	int value = OSFlagQuery(ResetStateFlags, &err);
    9370:	d0a7c217 	ldw	r2,-24824(gp)
    9374:	e0ffff04 	addi	r3,fp,-4
    9378:	180b883a 	mov	r5,r3
    937c:	1009883a 	mov	r4,r2
    9380:	001f3040 	call	1f304 <OSFlagQuery>
    9384:	10bfffcc 	andi	r2,r2,65535
    9388:	e0bffe15 	stw	r2,-8(fp)
	if (!(value&RESET_STATE_TASK_SCAN_KEY_EXISTS)) {
    938c:	e0bffe17 	ldw	r2,-8(fp)
    9390:	1080004c 	andi	r2,r2,1
    9394:	1000171e 	bne	r2,zero,93f4 <createGeneralTasks+0x94>
		OSTaskCreateExt(TaskScanKey,
    9398:	d8000415 	stw	zero,16(sp)
    939c:	d8000315 	stw	zero,12(sp)
    93a0:	00820004 	movi	r2,2048
    93a4:	d8800215 	stw	r2,8(sp)
    93a8:	008000f4 	movhi	r2,3
    93ac:	10b66504 	addi	r2,r2,-9836
    93b0:	d8800115 	stw	r2,4(sp)
    93b4:	008000c4 	movi	r2,3
    93b8:	d8800015 	stw	r2,0(sp)
    93bc:	01c000c4 	movi	r7,3
    93c0:	018000f4 	movhi	r6,3
    93c4:	31be6404 	addi	r6,r6,-1648
    93c8:	000b883a 	mov	r5,zero
    93cc:	01000074 	movhi	r4,1
    93d0:	2127c804 	addi	r4,r4,-24800
    93d4:	0022bbc0 	call	22bbc <OSTaskCreateExt>
				TaskScanKeyPrio,
				TaskScanKey_stk,
				TASK_STACKSIZE,
				NULL,
				0);
		OSFlagPost(ResetStateFlags, RESET_STATE_TASK_SCAN_KEY_EXISTS, OS_FLAG_SET, &err);
    93d8:	d0a7c217 	ldw	r2,-24824(gp)
    93dc:	e0ffff04 	addi	r3,fp,-4
    93e0:	180f883a 	mov	r7,r3
    93e4:	01800044 	movi	r6,1
    93e8:	01400044 	movi	r5,1
    93ec:	1009883a 	mov	r4,r2
    93f0:	001ef700 	call	1ef70 <OSFlagPost>
	}

	OSTaskCreateExt(TaskScanSwitch,
    93f4:	d8000415 	stw	zero,16(sp)
    93f8:	d8000315 	stw	zero,12(sp)
    93fc:	00820004 	movi	r2,2048
    9400:	d8800215 	stw	r2,8(sp)
    9404:	00800174 	movhi	r2,5
    9408:	10be8f04 	addi	r2,r2,-1476
    940c:	d8800115 	stw	r2,4(sp)
    9410:	00800084 	movi	r2,2
    9414:	d8800015 	stw	r2,0(sp)
    9418:	01c00084 	movi	r7,2
    941c:	01800174 	movhi	r6,5
    9420:	31868e04 	addi	r6,r6,6712
    9424:	000b883a 	mov	r5,zero
    9428:	01000074 	movhi	r4,1
    942c:	2127eb04 	addi	r4,r4,-24660
    9430:	0022bbc0 	call	22bbc <OSTaskCreateExt>
			TaskScanSwitch_stk,
			TASK_STACKSIZE,
			NULL,
			0);

	OSTaskCreateExt(TaskSubmit,
    9434:	d8000415 	stw	zero,16(sp)
    9438:	d8000315 	stw	zero,12(sp)
    943c:	00820004 	movi	r2,2048
    9440:	d8800215 	stw	r2,8(sp)
    9444:	008000f4 	movhi	r2,3
    9448:	10be6504 	addi	r2,r2,-1644
    944c:	d8800115 	stw	r2,4(sp)
    9450:	00800104 	movi	r2,4
    9454:	d8800015 	stw	r2,0(sp)
    9458:	01c00104 	movi	r7,4
    945c:	018000f4 	movhi	r6,3
    9460:	31866404 	addi	r6,r6,6544
    9464:	000b883a 	mov	r5,zero
    9468:	01000074 	movhi	r4,1
    946c:	2127fd04 	addi	r4,r4,-24588
    9470:	0022bbc0 	call	22bbc <OSTaskCreateExt>
			TaskSubmit_stk,
			TASK_STACKSIZE,
			NULL,
			0);

	OSTaskCreateExt(TaskUpdateQuestion,
    9474:	d8000415 	stw	zero,16(sp)
    9478:	d8000315 	stw	zero,12(sp)
    947c:	00820004 	movi	r2,2048
    9480:	d8800215 	stw	r2,8(sp)
    9484:	00800134 	movhi	r2,4
    9488:	10966504 	addi	r2,r2,22932
    948c:	d8800115 	stw	r2,4(sp)
    9490:	008001c4 	movi	r2,7
    9494:	d8800015 	stw	r2,0(sp)
    9498:	01c001c4 	movi	r7,7
    949c:	01800134 	movhi	r6,4
    94a0:	319e6404 	addi	r6,r6,31120
    94a4:	000b883a 	mov	r5,zero
    94a8:	01000074 	movhi	r4,1
    94ac:	2128c604 	addi	r4,r4,-23784
    94b0:	0022bbc0 	call	22bbc <OSTaskCreateExt>
			TaskUpdateQuestion_stk,
			TASK_STACKSIZE,
			NULL,
			0);

	OSTaskCreateExt(TaskUpdateTimer,
    94b4:	d8000415 	stw	zero,16(sp)
    94b8:	d8000315 	stw	zero,12(sp)
    94bc:	00820004 	movi	r2,2048
    94c0:	d8800215 	stw	r2,8(sp)
    94c4:	00800134 	movhi	r2,4
    94c8:	108e6504 	addi	r2,r2,14740
    94cc:	d8800115 	stw	r2,4(sp)
    94d0:	00800204 	movi	r2,8
    94d4:	d8800015 	stw	r2,0(sp)
    94d8:	01c00204 	movi	r7,8
    94dc:	01800134 	movhi	r6,4
    94e0:	31966404 	addi	r6,r6,22928
    94e4:	000b883a 	mov	r5,zero
    94e8:	01000074 	movhi	r4,1
    94ec:	21295a04 	addi	r4,r4,-23192
    94f0:	0022bbc0 	call	22bbc <OSTaskCreateExt>
			TaskUpdateTimerPrio,
			TaskUpdateTimer_stk,
			TASK_STACKSIZE,
			NULL,
			0);
}
    94f4:	0001883a 	nop
    94f8:	e037883a 	mov	sp,fp
    94fc:	dfc00117 	ldw	ra,4(sp)
    9500:	df000017 	ldw	fp,0(sp)
    9504:	dec00204 	addi	sp,sp,8
    9508:	f800283a 	ret

0000950c <createOnBoardTasks>:
 * Creates ON-BOARD DISPLAY TASKS.
 * Pre: Nothing
 * Post: Tasks under ON-BOARD DISPLAY TASKS are created
 * Return: Nothing
 */
static void createOnBoardTasks(void) {
    950c:	defff904 	addi	sp,sp,-28
    9510:	dfc00615 	stw	ra,24(sp)
    9514:	df000515 	stw	fp,20(sp)
    9518:	df000504 	addi	fp,sp,20
	OSTaskCreateExt(TaskDisplayResultLCD,
    951c:	d8000415 	stw	zero,16(sp)
    9520:	d8000315 	stw	zero,12(sp)
    9524:	00820004 	movi	r2,2048
    9528:	d8800215 	stw	r2,8(sp)
    952c:	008000f4 	movhi	r2,3
    9530:	109e6504 	addi	r2,r2,31124
    9534:	d8800115 	stw	r2,4(sp)
    9538:	00800144 	movi	r2,5
    953c:	d8800015 	stw	r2,0(sp)
    9540:	01c00144 	movi	r7,5
    9544:	01800134 	movhi	r6,4
    9548:	31a66404 	addi	r6,r6,-26224
    954c:	000b883a 	mov	r5,zero
    9550:	01000074 	movhi	r4,1
    9554:	21287e04 	addi	r4,r4,-24072
    9558:	0022bbc0 	call	22bbc <OSTaskCreateExt>
			TaskDisplayResultLCD_stk,
			TASK_STACKSIZE,
			NULL,
			0);

	OSTaskCreateExt(TaskDisplayEndOfLevelLCD,
    955c:	d8000415 	stw	zero,16(sp)
    9560:	d8000315 	stw	zero,12(sp)
    9564:	00820004 	movi	r2,2048
    9568:	d8800215 	stw	r2,8(sp)
    956c:	008000f4 	movhi	r2,3
    9570:	108e6504 	addi	r2,r2,14740
    9574:	d8800115 	stw	r2,4(sp)
    9578:	00800184 	movi	r2,6
    957c:	d8800015 	stw	r2,0(sp)
    9580:	01c00184 	movi	r7,6
    9584:	018000f4 	movhi	r6,3
    9588:	31966404 	addi	r6,r6,22928
    958c:	000b883a 	mov	r5,zero
    9590:	01000074 	movhi	r4,1
    9594:	21282404 	addi	r4,r4,-24432
    9598:	0022bbc0 	call	22bbc <OSTaskCreateExt>
			TaskDisplayEndOfLevelLCD_stk,
			TASK_STACKSIZE,
			NULL,
			0);

	OSTaskCreateExt(TaskDisplayTimer,
    959c:	d8000415 	stw	zero,16(sp)
    95a0:	d8000315 	stw	zero,12(sp)
    95a4:	00820004 	movi	r2,2048
    95a8:	d8800215 	stw	r2,8(sp)
    95ac:	00800134 	movhi	r2,4
    95b0:	109e6b04 	addi	r2,r2,31148
    95b4:	d8800115 	stw	r2,4(sp)
    95b8:	00800244 	movi	r2,9
    95bc:	d8800015 	stw	r2,0(sp)
    95c0:	01c00244 	movi	r7,9
    95c4:	01800174 	movhi	r6,5
    95c8:	31a66a04 	addi	r6,r6,-26200
    95cc:	000b883a 	mov	r5,zero
    95d0:	01000074 	movhi	r4,1
    95d4:	21297804 	addi	r4,r4,-23072
    95d8:	0022bbc0 	call	22bbc <OSTaskCreateExt>
			TaskDisplayTimer_stk,
			TASK_STACKSIZE,
			NULL,
			0);

	OSTaskCreateExt(TaskDisplayLevel,
    95dc:	d8000415 	stw	zero,16(sp)
    95e0:	d8000315 	stw	zero,12(sp)
    95e4:	00820004 	movi	r2,2048
    95e8:	d8800215 	stw	r2,8(sp)
    95ec:	00800134 	movhi	r2,4
    95f0:	10b66504 	addi	r2,r2,-9836
    95f4:	d8800115 	stw	r2,4(sp)
    95f8:	00800284 	movi	r2,10
    95fc:	d8800015 	stw	r2,0(sp)
    9600:	01c00284 	movi	r7,10
    9604:	01800134 	movhi	r6,4
    9608:	31be6404 	addi	r6,r6,-1648
    960c:	000b883a 	mov	r5,zero
    9610:	01000074 	movhi	r4,1
    9614:	2129a304 	addi	r4,r4,-22900
    9618:	0022bbc0 	call	22bbc <OSTaskCreateExt>
			TaskDisplayLevel_stk,
			TASK_STACKSIZE,
			NULL,
			0);

	OSTaskCreateExt(TaskUpdateQuestionPosedLCD,
    961c:	d8000415 	stw	zero,16(sp)
    9620:	d8000315 	stw	zero,12(sp)
    9624:	00820004 	movi	r2,2048
    9628:	d8800215 	stw	r2,8(sp)
    962c:	00800174 	movhi	r2,5
    9630:	10a68f04 	addi	r2,r2,-26052
    9634:	d8800115 	stw	r2,4(sp)
    9638:	008002c4 	movi	r2,11
    963c:	d8800015 	stw	r2,0(sp)
    9640:	01c002c4 	movi	r7,11
    9644:	01800174 	movhi	r6,5
    9648:	31ae8e04 	addi	r6,r6,-17864
    964c:	000b883a 	mov	r5,zero
    9650:	01000074 	movhi	r4,1
    9654:	2129b904 	addi	r4,r4,-22812
    9658:	0022bbc0 	call	22bbc <OSTaskCreateExt>
			TaskUpdateQuestionPosedLCD_stk,
			TASK_STACKSIZE,
			NULL,
			0);

	OSTaskCreateExt(TaskUpdateQuestionNumberLCD,
    965c:	d8000415 	stw	zero,16(sp)
    9660:	d8000315 	stw	zero,12(sp)
    9664:	00820004 	movi	r2,2048
    9668:	d8800215 	stw	r2,8(sp)
    966c:	008000f4 	movhi	r2,3
    9670:	10ae6504 	addi	r2,r2,-18028
    9674:	d8800115 	stw	r2,4(sp)
    9678:	00800304 	movi	r2,12
    967c:	d8800015 	stw	r2,0(sp)
    9680:	01c00304 	movi	r7,12
    9684:	018000f4 	movhi	r6,3
    9688:	31b66404 	addi	r6,r6,-9840
    968c:	000b883a 	mov	r5,zero
    9690:	01000074 	movhi	r4,1
    9694:	2129dc04 	addi	r4,r4,-22672
    9698:	0022bbc0 	call	22bbc <OSTaskCreateExt>
			TaskUpdateQuestionNumberLCDPrio,
			TaskUpdateQuestionNumberLCD_stk,
			TASK_STACKSIZE,
			NULL,
			0);
}
    969c:	0001883a 	nop
    96a0:	e037883a 	mov	sp,fp
    96a4:	dfc00117 	ldw	ra,4(sp)
    96a8:	df000017 	ldw	fp,0(sp)
    96ac:	dec00204 	addi	sp,sp,8
    96b0:	f800283a 	ret

000096b4 <createVGATasks>:
 * Creates VGA OUT DISPLAY TASKS.
 * Pre: Nothing
 * Post: Tasks under VGA OUT DISPLAY TASKS are created
 * Return: Nothing
 */
static void createVGATasks(void) {
    96b4:	defff904 	addi	sp,sp,-28
    96b8:	dfc00615 	stw	ra,24(sp)
    96bc:	df000515 	stw	fp,20(sp)
    96c0:	df000504 	addi	fp,sp,20
	OSTaskCreateExt(TaskDrawAnimationsVGA,
    96c4:	d8000415 	stw	zero,16(sp)
    96c8:	d8000315 	stw	zero,12(sp)
    96cc:	00820004 	movi	r2,2048
    96d0:	d8800215 	stw	r2,8(sp)
    96d4:	00800134 	movhi	r2,4
    96d8:	10ae6504 	addi	r2,r2,-18028
    96dc:	d8800115 	stw	r2,4(sp)
    96e0:	00800344 	movi	r2,13
    96e4:	d8800015 	stw	r2,0(sp)
    96e8:	01c00344 	movi	r7,13
    96ec:	01800134 	movhi	r6,4
    96f0:	31b66404 	addi	r6,r6,-9840
    96f4:	000b883a 	mov	r5,zero
    96f8:	01000074 	movhi	r4,1
    96fc:	2129f904 	addi	r4,r4,-22556
    9700:	0022bbc0 	call	22bbc <OSTaskCreateExt>
			TaskDrawAnimationsVGA_stk,
			TASK_STACKSIZE,
			NULL,
			0);

	OSTaskCreateExt(TaskDisplayEndOfLevelVGA,
    9704:	d8000415 	stw	zero,16(sp)
    9708:	d8000315 	stw	zero,12(sp)
    970c:	00820004 	movi	r2,2048
    9710:	d8800215 	stw	r2,8(sp)
    9714:	00800134 	movhi	r2,4
    9718:	10be6504 	addi	r2,r2,-1644
    971c:	d8800115 	stw	r2,4(sp)
    9720:	00800184 	movi	r2,6
    9724:	d8800015 	stw	r2,0(sp)
    9728:	01c00184 	movi	r7,6
    972c:	01800134 	movhi	r6,4
    9730:	31866404 	addi	r6,r6,6544
    9734:	000b883a 	mov	r5,zero
    9738:	01000074 	movhi	r4,1
    973c:	212a4904 	addi	r4,r4,-22236
    9740:	0022bbc0 	call	22bbc <OSTaskCreateExt>
			TaskDisplayEndOfLevelVGA_stk,
			TASK_STACKSIZE,
			NULL,
			0);
	// Spencer additions start here!
	OSTaskCreateExt(TaskDisplayResultVGA,
    9744:	d8000415 	stw	zero,16(sp)
    9748:	d8000315 	stw	zero,12(sp)
    974c:	00820004 	movi	r2,2048
    9750:	d8800215 	stw	r2,8(sp)
    9754:	00800134 	movhi	r2,4
    9758:	10866504 	addi	r2,r2,6548
    975c:	d8800115 	stw	r2,4(sp)
    9760:	00800144 	movi	r2,5
    9764:	d8800015 	stw	r2,0(sp)
    9768:	01c00144 	movi	r7,5
    976c:	01800134 	movhi	r6,4
    9770:	318e6404 	addi	r6,r6,14736
    9774:	000b883a 	mov	r5,zero
    9778:	01000074 	movhi	r4,1
    977c:	212ab304 	addi	r4,r4,-21812
    9780:	0022bbc0 	call	22bbc <OSTaskCreateExt>
			TaskDisplayResultVGA_stk,
			TASK_STACKSIZE,
			NULL,
			0);

	OSTaskCreateExt(TaskDisplayTimerVGA,
    9784:	d8000415 	stw	zero,16(sp)
    9788:	d8000315 	stw	zero,12(sp)
    978c:	00820004 	movi	r2,2048
    9790:	d8800215 	stw	r2,8(sp)
    9794:	008000f4 	movhi	r2,3
    9798:	10966504 	addi	r2,r2,22932
    979c:	d8800115 	stw	r2,4(sp)
    97a0:	00800244 	movi	r2,9
    97a4:	d8800015 	stw	r2,0(sp)
    97a8:	01c00244 	movi	r7,9
    97ac:	018000f4 	movhi	r6,3
    97b0:	319e6404 	addi	r6,r6,31120
    97b4:	000b883a 	mov	r5,zero
    97b8:	01000074 	movhi	r4,1
    97bc:	212b0004 	addi	r4,r4,-21504
    97c0:	0022bbc0 	call	22bbc <OSTaskCreateExt>
			TaskDisplayTimerVGA_stk,
			TASK_STACKSIZE,
			NULL,
			0);

	OSTaskCreateExt(TaskDisplayLevelVGA,
    97c4:	d8000415 	stw	zero,16(sp)
    97c8:	d8000315 	stw	zero,12(sp)
    97cc:	00820004 	movi	r2,2048
    97d0:	d8800215 	stw	r2,8(sp)
    97d4:	00800174 	movhi	r2,5
    97d8:	10b68f04 	addi	r2,r2,-9668
    97dc:	d8800115 	stw	r2,4(sp)
    97e0:	00800284 	movi	r2,10
    97e4:	d8800015 	stw	r2,0(sp)
    97e8:	01c00284 	movi	r7,10
    97ec:	01800174 	movhi	r6,5
    97f0:	31be8e04 	addi	r6,r6,-1480
    97f4:	000b883a 	mov	r5,zero
    97f8:	01000074 	movhi	r4,1
    97fc:	212b5804 	addi	r4,r4,-21152
    9800:	0022bbc0 	call	22bbc <OSTaskCreateExt>
			TaskDisplayLevelVGA_stk,
			TASK_STACKSIZE,
			NULL,
			0);

	OSTaskCreateExt(TaskUpdateQuestionPosedVGA,
    9804:	d8000415 	stw	zero,16(sp)
    9808:	d8000315 	stw	zero,12(sp)
    980c:	00820004 	movi	r2,2048
    9810:	d8800215 	stw	r2,8(sp)
    9814:	00800174 	movhi	r2,5
    9818:	10ae8f04 	addi	r2,r2,-17860
    981c:	d8800115 	stw	r2,4(sp)
    9820:	008002c4 	movi	r2,11
    9824:	d8800015 	stw	r2,0(sp)
    9828:	01c002c4 	movi	r7,11
    982c:	01800174 	movhi	r6,5
    9830:	31b68e04 	addi	r6,r6,-9672
    9834:	000b883a 	mov	r5,zero
    9838:	01000074 	movhi	r4,1
    983c:	212b6e04 	addi	r4,r4,-21064
    9840:	0022bbc0 	call	22bbc <OSTaskCreateExt>
			TaskUpdateQuestionPosedVGA_stk,
			TASK_STACKSIZE,
			NULL,
			0);

	OSTaskCreateExt(TaskUpdateQuestionNumberVGA,
    9844:	d8000415 	stw	zero,16(sp)
    9848:	d8000315 	stw	zero,12(sp)
    984c:	00820004 	movi	r2,2048
    9850:	d8800215 	stw	r2,8(sp)
    9854:	00800134 	movhi	r2,4
    9858:	10a66504 	addi	r2,r2,-26220
    985c:	d8800115 	stw	r2,4(sp)
    9860:	00800304 	movi	r2,12
    9864:	d8800015 	stw	r2,0(sp)
    9868:	01c00304 	movi	r7,12
    986c:	01800134 	movhi	r6,4
    9870:	31ae6404 	addi	r6,r6,-18032
    9874:	000b883a 	mov	r5,zero
    9878:	01000074 	movhi	r4,1
    987c:	212b9104 	addi	r4,r4,-20924
    9880:	0022bbc0 	call	22bbc <OSTaskCreateExt>
			TaskUpdateQuestionNumberVGA_stk,
			TASK_STACKSIZE,
			NULL,
			0);
	// Spencer additions ends here!
}
    9884:	0001883a 	nop
    9888:	e037883a 	mov	sp,fp
    988c:	dfc00117 	ldw	ra,4(sp)
    9890:	df000017 	ldw	fp,0(sp)
    9894:	dec00204 	addi	sp,sp,8
    9898:	f800283a 	ret

0000989c <explodeVGAAnimationCuesFlags>:
 * Clears the VGAAnimationCuesFlags.
 * Pre: Nothing
 * Post: VGAAnimationCuesFlags has value 0 (neutral phase)
 * Return: Nothing
 */
void explodeVGAAnimationCuesFlags(void) {
    989c:	defffc04 	addi	sp,sp,-16
    98a0:	dfc00315 	stw	ra,12(sp)
    98a4:	df000215 	stw	fp,8(sp)
    98a8:	df000204 	addi	fp,sp,8
	INT8U err;
	int j; // for for loop
	for (j=0; j<3; j++) {
    98ac:	e03ffe15 	stw	zero,-8(fp)
    98b0:	00000d06 	br	98e8 <explodeVGAAnimationCuesFlags+0x4c>
		OSFlagPost(VGAAnimationCuesFlags, (1 << j), OS_FLAG_CLR, &err);
    98b4:	d127ba17 	ldw	r4,-24856(gp)
    98b8:	00c00044 	movi	r3,1
    98bc:	e0bffe17 	ldw	r2,-8(fp)
    98c0:	1884983a 	sll	r2,r3,r2
    98c4:	10bfffcc 	andi	r2,r2,65535
    98c8:	e0ffff04 	addi	r3,fp,-4
    98cc:	180f883a 	mov	r7,r3
    98d0:	000d883a 	mov	r6,zero
    98d4:	100b883a 	mov	r5,r2
    98d8:	001ef700 	call	1ef70 <OSFlagPost>
 * Return: Nothing
 */
void explodeVGAAnimationCuesFlags(void) {
	INT8U err;
	int j; // for for loop
	for (j=0; j<3; j++) {
    98dc:	e0bffe17 	ldw	r2,-8(fp)
    98e0:	10800044 	addi	r2,r2,1
    98e4:	e0bffe15 	stw	r2,-8(fp)
    98e8:	e0bffe17 	ldw	r2,-8(fp)
    98ec:	108000d0 	cmplti	r2,r2,3
    98f0:	103ff01e 	bne	r2,zero,98b4 <explodeVGAAnimationCuesFlags+0x18>
		OSFlagPost(VGAAnimationCuesFlags, (1 << j), OS_FLAG_CLR, &err);
	}
}
    98f4:	0001883a 	nop
    98f8:	e037883a 	mov	sp,fp
    98fc:	dfc00117 	ldw	ra,4(sp)
    9900:	df000017 	ldw	fp,0(sp)
    9904:	dec00204 	addi	sp,sp,8
    9908:	f800283a 	ret

0000990c <explodeBinaryMathGame>:
 * Destroy the system.
 * Pre: Nothing
 * Post: System is destroyed.
 * Return: Nothing
 */
void explodeBinaryMathGame(void) {
    990c:	defff504 	addi	sp,sp,-44
    9910:	dfc00a15 	stw	ra,40(sp)
    9914:	df000915 	stw	fp,36(sp)
    9918:	df000904 	addi	fp,sp,36
	INT8U err;
	INT8U i;
	int j, k; // for for and while loop
	//printf("1");
	// Reset generalities...
	explode_seven_segment();
    991c:	000129c0 	call	129c <explode_seven_segment>
	LCD_clear();
    9920:	000056c0 	call	56c <LCD_clear>
	set_ledg(0);
    9924:	0009883a 	mov	r4,zero
    9928:	00005d40 	call	5d4 <set_ledg>
	set_ledr(0);
    992c:	0009883a 	mov	r4,zero
    9930:	00005a40 	call	5a4 <set_ledr>
	// TODO: This takes a long time...?
	//VGA_box(0,0,640,480,0x0000);
	// Clear the character buffer
	j = 0;
    9934:	e03ffd15 	stw	zero,-12(fp)
	k = 0;
    9938:	e03ffe15 	stw	zero,-8(fp)
	while (j <= 80)
    993c:	00001006 	br	9980 <explodeBinaryMathGame+0x74>
	{
		k = 0;
    9940:	e03ffe15 	stw	zero,-8(fp)
		while (k <= 60)
    9944:	00000806 	br	9968 <explodeBinaryMathGame+0x5c>
		{
			VGA_text(j, k, " ");
    9948:	018000b4 	movhi	r6,2
    994c:	319d3b04 	addi	r6,r6,29932
    9950:	e17ffe17 	ldw	r5,-8(fp)
    9954:	e13ffd17 	ldw	r4,-12(fp)
    9958:	0008aa80 	call	8aa8 <VGA_text>
			k++;
    995c:	e0bffe17 	ldw	r2,-8(fp)
    9960:	10800044 	addi	r2,r2,1
    9964:	e0bffe15 	stw	r2,-8(fp)
	j = 0;
	k = 0;
	while (j <= 80)
	{
		k = 0;
		while (k <= 60)
    9968:	e0bffe17 	ldw	r2,-8(fp)
    996c:	10800f50 	cmplti	r2,r2,61
    9970:	103ff51e 	bne	r2,zero,9948 <explodeBinaryMathGame+0x3c>
		{
			VGA_text(j, k, " ");
			k++;
		}
		j++;
    9974:	e0bffd17 	ldw	r2,-12(fp)
    9978:	10800044 	addi	r2,r2,1
    997c:	e0bffd15 	stw	r2,-12(fp)
	// TODO: This takes a long time...?
	//VGA_box(0,0,640,480,0x0000);
	// Clear the character buffer
	j = 0;
	k = 0;
	while (j <= 80)
    9980:	e0bffd17 	ldw	r2,-12(fp)
    9984:	10801450 	cmplti	r2,r2,81
    9988:	103fed1e 	bne	r2,zero,9940 <explodeBinaryMathGame+0x34>
		j++;
	}
	// END TODO
	//printf("2");
	// Explode Tasks
	for (i=1; i<=BIGGEST_TASK_PRIO; i++) {
    998c:	00800044 	movi	r2,1
    9990:	e0bffc05 	stb	r2,-16(fp)
    9994:	00006006 	br	9b18 <explodeBinaryMathGame+0x20c>
		//printf("Prio %d", i);
		if (i != TaskScanKeyPrio) {
    9998:	e0bffc03 	ldbu	r2,-16(fp)
    999c:	108000e0 	cmpeqi	r2,r2,3
    99a0:	1000061e 	bne	r2,zero,99bc <explodeBinaryMathGame+0xb0>
			OSTaskDel(i);
    99a4:	e0bffc03 	ldbu	r2,-16(fp)
    99a8:	1009883a 	mov	r4,r2
    99ac:	0022da00 	call	22da0 <OSTaskDel>
			OSTaskDelReq(i);
    99b0:	e0bffc03 	ldbu	r2,-16(fp)
    99b4:	1009883a 	mov	r4,r2
    99b8:	00230e40 	call	230e4 <OSTaskDelReq>
		}
		OS_TaskStkClr ((void*)TaskStartup_stk[TASK_STACKSIZE], TASK_STACKSIZE, 0);
    99bc:	008000f4 	movhi	r2,3
    99c0:	10866504 	addi	r2,r2,6548
    99c4:	10880017 	ldw	r2,8192(r2)
    99c8:	000d883a 	mov	r6,zero
    99cc:	01420004 	movi	r5,2048
    99d0:	1009883a 	mov	r4,r2
    99d4:	0023c1c0 	call	23c1c <OS_TaskStkClr>
		OS_TaskStkClr ((void*)TaskScanKey_stk[TASK_STACKSIZE], TASK_STACKSIZE, 0);
    99d8:	008000f4 	movhi	r2,3
    99dc:	10b66504 	addi	r2,r2,-9836
    99e0:	10880017 	ldw	r2,8192(r2)
    99e4:	000d883a 	mov	r6,zero
    99e8:	01420004 	movi	r5,2048
    99ec:	1009883a 	mov	r4,r2
    99f0:	0023c1c0 	call	23c1c <OS_TaskStkClr>
		OS_TaskStkClr ((void*)TaskScanSwitch_stk[TASK_STACKSIZE], TASK_STACKSIZE, 0);
    99f4:	00800174 	movhi	r2,5
    99f8:	10be8f04 	addi	r2,r2,-1476
    99fc:	10880017 	ldw	r2,8192(r2)
    9a00:	000d883a 	mov	r6,zero
    9a04:	01420004 	movi	r5,2048
    9a08:	1009883a 	mov	r4,r2
    9a0c:	0023c1c0 	call	23c1c <OS_TaskStkClr>
		OS_TaskStkClr ((void*)TaskSubmit_stk[TASK_STACKSIZE], TASK_STACKSIZE, 0);
    9a10:	008000f4 	movhi	r2,3
    9a14:	10be6504 	addi	r2,r2,-1644
    9a18:	10880017 	ldw	r2,8192(r2)
    9a1c:	000d883a 	mov	r6,zero
    9a20:	01420004 	movi	r5,2048
    9a24:	1009883a 	mov	r4,r2
    9a28:	0023c1c0 	call	23c1c <OS_TaskStkClr>
		OS_TaskStkClr ((void*)TaskUpdateQuestion_stk[TASK_STACKSIZE], TASK_STACKSIZE, 0);
    9a2c:	00800134 	movhi	r2,4
    9a30:	10966504 	addi	r2,r2,22932
    9a34:	10880017 	ldw	r2,8192(r2)
    9a38:	000d883a 	mov	r6,zero
    9a3c:	01420004 	movi	r5,2048
    9a40:	1009883a 	mov	r4,r2
    9a44:	0023c1c0 	call	23c1c <OS_TaskStkClr>
		OS_TaskStkClr ((void*)TaskUpdateTimer_stk[TASK_STACKSIZE], TASK_STACKSIZE, 0);
    9a48:	00800134 	movhi	r2,4
    9a4c:	108e6504 	addi	r2,r2,14740
    9a50:	10880017 	ldw	r2,8192(r2)
    9a54:	000d883a 	mov	r6,zero
    9a58:	01420004 	movi	r5,2048
    9a5c:	1009883a 	mov	r4,r2
    9a60:	0023c1c0 	call	23c1c <OS_TaskStkClr>
		OS_TaskStkClr ((void*)TaskDisplayTimer_stk[TASK_STACKSIZE], TASK_STACKSIZE, 0);
    9a64:	00800134 	movhi	r2,4
    9a68:	109e6b04 	addi	r2,r2,31148
    9a6c:	10880017 	ldw	r2,8192(r2)
    9a70:	000d883a 	mov	r6,zero
    9a74:	01420004 	movi	r5,2048
    9a78:	1009883a 	mov	r4,r2
    9a7c:	0023c1c0 	call	23c1c <OS_TaskStkClr>
		OS_TaskStkClr ((void*)TaskDisplayLevel_stk[TASK_STACKSIZE], TASK_STACKSIZE, 0);
    9a80:	00800134 	movhi	r2,4
    9a84:	10b66504 	addi	r2,r2,-9836
    9a88:	10880017 	ldw	r2,8192(r2)
    9a8c:	000d883a 	mov	r6,zero
    9a90:	01420004 	movi	r5,2048
    9a94:	1009883a 	mov	r4,r2
    9a98:	0023c1c0 	call	23c1c <OS_TaskStkClr>
		OS_TaskStkClr ((void*)TaskUpdateQuestionPosedLCD_stk[TASK_STACKSIZE], TASK_STACKSIZE, 0);
    9a9c:	00800174 	movhi	r2,5
    9aa0:	10a68f04 	addi	r2,r2,-26052
    9aa4:	10880017 	ldw	r2,8192(r2)
    9aa8:	000d883a 	mov	r6,zero
    9aac:	01420004 	movi	r5,2048
    9ab0:	1009883a 	mov	r4,r2
    9ab4:	0023c1c0 	call	23c1c <OS_TaskStkClr>
		OS_TaskStkClr ((void*)TaskUpdateQuestionNumberLCD_stk[TASK_STACKSIZE], TASK_STACKSIZE, 0);
    9ab8:	008000f4 	movhi	r2,3
    9abc:	10ae6504 	addi	r2,r2,-18028
    9ac0:	10880017 	ldw	r2,8192(r2)
    9ac4:	000d883a 	mov	r6,zero
    9ac8:	01420004 	movi	r5,2048
    9acc:	1009883a 	mov	r4,r2
    9ad0:	0023c1c0 	call	23c1c <OS_TaskStkClr>
		OS_TaskStkClr ((void*)TaskDisplayResultLCD_stk[TASK_STACKSIZE], TASK_STACKSIZE, 0);
    9ad4:	008000f4 	movhi	r2,3
    9ad8:	109e6504 	addi	r2,r2,31124
    9adc:	10880017 	ldw	r2,8192(r2)
    9ae0:	000d883a 	mov	r6,zero
    9ae4:	01420004 	movi	r5,2048
    9ae8:	1009883a 	mov	r4,r2
    9aec:	0023c1c0 	call	23c1c <OS_TaskStkClr>
		OS_TaskStkClr ((void*)TaskDisplayEndOfLevelLCD_stk[TASK_STACKSIZE], TASK_STACKSIZE, 0);
    9af0:	008000f4 	movhi	r2,3
    9af4:	108e6504 	addi	r2,r2,14740
    9af8:	10880017 	ldw	r2,8192(r2)
    9afc:	000d883a 	mov	r6,zero
    9b00:	01420004 	movi	r5,2048
    9b04:	1009883a 	mov	r4,r2
    9b08:	0023c1c0 	call	23c1c <OS_TaskStkClr>
		j++;
	}
	// END TODO
	//printf("2");
	// Explode Tasks
	for (i=1; i<=BIGGEST_TASK_PRIO; i++) {
    9b0c:	e0bffc03 	ldbu	r2,-16(fp)
    9b10:	10800044 	addi	r2,r2,1
    9b14:	e0bffc05 	stb	r2,-16(fp)
    9b18:	e0bffc03 	ldbu	r2,-16(fp)
    9b1c:	108003b0 	cmpltui	r2,r2,14
    9b20:	103f9d1e 	bne	r2,zero,9998 <explodeBinaryMathGame+0x8c>
		OS_TaskStkClr ((void*)TaskDisplayResultLCD_stk[TASK_STACKSIZE], TASK_STACKSIZE, 0);
		OS_TaskStkClr ((void*)TaskDisplayEndOfLevelLCD_stk[TASK_STACKSIZE], TASK_STACKSIZE, 0);
	}
	//printf("3");
	// Explode Semaphores
	KeyPress1Sem = OSSemDel(KeyPress1Sem, OS_DEL_ALWAYS, &err);
    9b24:	d0a7bf17 	ldw	r2,-24836(gp)
    9b28:	e0ffff04 	addi	r3,fp,-4
    9b2c:	180d883a 	mov	r6,r3
    9b30:	01400044 	movi	r5,1
    9b34:	1009883a 	mov	r4,r2
    9b38:	0021c480 	call	21c48 <OSSemDel>
    9b3c:	d0a7bf15 	stw	r2,-24836(gp)
	KeyPress2Sem = OSSemDel(KeyPress2Sem, OS_DEL_ALWAYS, &err);
    9b40:	d0a7bd17 	ldw	r2,-24844(gp)
    9b44:	e0ffff04 	addi	r3,fp,-4
    9b48:	180d883a 	mov	r6,r3
    9b4c:	01400044 	movi	r5,1
    9b50:	1009883a 	mov	r4,r2
    9b54:	0021c480 	call	21c48 <OSSemDel>
    9b58:	d0a7bd15 	stw	r2,-24844(gp)
	KeyPress3Sem = OSSemDel(KeyPress3Sem, OS_DEL_ALWAYS, &err);
    9b5c:	d0a7b517 	ldw	r2,-24876(gp)
    9b60:	e0ffff04 	addi	r3,fp,-4
    9b64:	180d883a 	mov	r6,r3
    9b68:	01400044 	movi	r5,1
    9b6c:	1009883a 	mov	r4,r2
    9b70:	0021c480 	call	21c48 <OSSemDel>
    9b74:	d0a7b515 	stw	r2,-24876(gp)
	SwitchValueSem = OSSemDel(SwitchValueSem, OS_DEL_ALWAYS, &err);
    9b78:	d0a7bb17 	ldw	r2,-24852(gp)
    9b7c:	e0ffff04 	addi	r3,fp,-4
    9b80:	180d883a 	mov	r6,r3
    9b84:	01400044 	movi	r5,1
    9b88:	1009883a 	mov	r4,r2
    9b8c:	0021c480 	call	21c48 <OSSemDel>
    9b90:	d0a7bb15 	stw	r2,-24852(gp)
	UpdateQuestionSem = OSSemDel(UpdateQuestionSem, OS_DEL_ALWAYS, &err);
    9b94:	d0a7b617 	ldw	r2,-24872(gp)
    9b98:	e0ffff04 	addi	r3,fp,-4
    9b9c:	180d883a 	mov	r6,r3
    9ba0:	01400044 	movi	r5,1
    9ba4:	1009883a 	mov	r4,r2
    9ba8:	0021c480 	call	21c48 <OSSemDel>
    9bac:	d0a7b615 	stw	r2,-24872(gp)
	DisplayResultSem = OSSemDel(DisplayResultSem, OS_DEL_ALWAYS, &err);
    9bb0:	d0a7c517 	ldw	r2,-24812(gp)
    9bb4:	e0ffff04 	addi	r3,fp,-4
    9bb8:	180d883a 	mov	r6,r3
    9bbc:	01400044 	movi	r5,1
    9bc0:	1009883a 	mov	r4,r2
    9bc4:	0021c480 	call	21c48 <OSSemDel>
    9bc8:	d0a7c515 	stw	r2,-24812(gp)
	LevelDisplaySem = OSSemDel(LevelDisplaySem, OS_DEL_ALWAYS, &err);
    9bcc:	d0a7b917 	ldw	r2,-24860(gp)
    9bd0:	e0ffff04 	addi	r3,fp,-4
    9bd4:	180d883a 	mov	r6,r3
    9bd8:	01400044 	movi	r5,1
    9bdc:	1009883a 	mov	r4,r2
    9be0:	0021c480 	call	21c48 <OSSemDel>
    9be4:	d0a7b915 	stw	r2,-24860(gp)
	HEXDisplaySem = OSSemDel(HEXDisplaySem, OS_DEL_ALWAYS, &err);
    9be8:	d0a7b317 	ldw	r2,-24884(gp)
    9bec:	e0ffff04 	addi	r3,fp,-4
    9bf0:	180d883a 	mov	r6,r3
    9bf4:	01400044 	movi	r5,1
    9bf8:	1009883a 	mov	r4,r2
    9bfc:	0021c480 	call	21c48 <OSSemDel>
    9c00:	d0a7b315 	stw	r2,-24884(gp)
	VGADisplaySem = OSSemDel(VGADisplaySem, OS_DEL_ALWAYS, &err);
    9c04:	d0a7be17 	ldw	r2,-24840(gp)
    9c08:	e0ffff04 	addi	r3,fp,-4
    9c0c:	180d883a 	mov	r6,r3
    9c10:	01400044 	movi	r5,1
    9c14:	1009883a 	mov	r4,r2
    9c18:	0021c480 	call	21c48 <OSSemDel>
    9c1c:	d0a7be15 	stw	r2,-24840(gp)
	LCDDisplaySem = OSSemDel(LCDDisplaySem, OS_DEL_ALWAYS, &err);
    9c20:	d0a7b417 	ldw	r2,-24880(gp)
    9c24:	e0ffff04 	addi	r3,fp,-4
    9c28:	180d883a 	mov	r6,r3
    9c2c:	01400044 	movi	r5,1
    9c30:	1009883a 	mov	r4,r2
    9c34:	0021c480 	call	21c48 <OSSemDel>
    9c38:	d0a7b415 	stw	r2,-24880(gp)
	//printf("4");
	// Explode Mailboxes
	QuestionPosedMbox = OSMboxDel(QuestionPosedMbox, OS_DEL_ALWAYS, &err);
    9c3c:	d0a7b717 	ldw	r2,-24868(gp)
    9c40:	e0ffff04 	addi	r3,fp,-4
    9c44:	180d883a 	mov	r6,r3
    9c48:	01400044 	movi	r5,1
    9c4c:	1009883a 	mov	r4,r2
    9c50:	001f90c0 	call	1f90c <OSMboxDel>
    9c54:	d0a7b715 	stw	r2,-24868(gp)
	QuestionNumberMbox = OSMboxDel(QuestionNumberMbox, OS_DEL_ALWAYS, &err);
    9c58:	d0a7c417 	ldw	r2,-24816(gp)
    9c5c:	e0ffff04 	addi	r3,fp,-4
    9c60:	180d883a 	mov	r6,r3
    9c64:	01400044 	movi	r5,1
    9c68:	1009883a 	mov	r4,r2
    9c6c:	001f90c0 	call	1f90c <OSMboxDel>
    9c70:	d0a7c415 	stw	r2,-24816(gp)
	// Explode flags EXCEPT FOR ResetStateFlags
	for (j=0; j<4; j++) {
    9c74:	e03ffd15 	stw	zero,-12(fp)
    9c78:	00001706 	br	9cd8 <explodeBinaryMathGame+0x3cc>
		OSFlagPost(LevelGoFlags, (1 << j), OS_FLAG_CLR, &err);
    9c7c:	d127c317 	ldw	r4,-24820(gp)
    9c80:	00c00044 	movi	r3,1
    9c84:	e0bffd17 	ldw	r2,-12(fp)
    9c88:	1884983a 	sll	r2,r3,r2
    9c8c:	10bfffcc 	andi	r2,r2,65535
    9c90:	e0ffff04 	addi	r3,fp,-4
    9c94:	180f883a 	mov	r7,r3
    9c98:	000d883a 	mov	r6,zero
    9c9c:	100b883a 	mov	r5,r2
    9ca0:	001ef700 	call	1ef70 <OSFlagPost>
		OSFlagPost(ProgramStateFlags, (1 << j), OS_FLAG_CLR, &err);
    9ca4:	d127bc17 	ldw	r4,-24848(gp)
    9ca8:	00c00044 	movi	r3,1
    9cac:	e0bffd17 	ldw	r2,-12(fp)
    9cb0:	1884983a 	sll	r2,r3,r2
    9cb4:	10bfffcc 	andi	r2,r2,65535
    9cb8:	e0ffff04 	addi	r3,fp,-4
    9cbc:	180f883a 	mov	r7,r3
    9cc0:	000d883a 	mov	r6,zero
    9cc4:	100b883a 	mov	r5,r2
    9cc8:	001ef700 	call	1ef70 <OSFlagPost>
	//printf("4");
	// Explode Mailboxes
	QuestionPosedMbox = OSMboxDel(QuestionPosedMbox, OS_DEL_ALWAYS, &err);
	QuestionNumberMbox = OSMboxDel(QuestionNumberMbox, OS_DEL_ALWAYS, &err);
	// Explode flags EXCEPT FOR ResetStateFlags
	for (j=0; j<4; j++) {
    9ccc:	e0bffd17 	ldw	r2,-12(fp)
    9cd0:	10800044 	addi	r2,r2,1
    9cd4:	e0bffd15 	stw	r2,-12(fp)
    9cd8:	e0bffd17 	ldw	r2,-12(fp)
    9cdc:	10800110 	cmplti	r2,r2,4
    9ce0:	103fe61e 	bne	r2,zero,9c7c <explodeBinaryMathGame+0x370>
		OSFlagPost(LevelGoFlags, (1 << j), OS_FLAG_CLR, &err);
		OSFlagPost(ProgramStateFlags, (1 << j), OS_FLAG_CLR, &err);
	}
	explodeVGAAnimationCuesFlags();
    9ce4:	000989c0 	call	989c <explodeVGAAnimationCuesFlags>
	//printf("Am I dead yet?");

	OnQuestionNum = 0;
    9ce8:	d027b115 	stw	zero,-24892(gp)
	QuestionsCorrect = 0;
    9cec:	d027b215 	stw	zero,-24888(gp)
	// Set current level to Level 0 on startup
	CurrentLevelNumber = 0; // Normally start at 0, start at other levels for debugging
    9cf0:	d027c115 	stw	zero,-24828(gp)
	CurrentLevel = Levels[CurrentLevelNumber];
    9cf4:	d127c117 	ldw	r4,-24828(gp)
    9cf8:	00800134 	movhi	r2,4
    9cfc:	109e6504 	addi	r2,r2,31124
    9d00:	00c00174 	movhi	r3,5
    9d04:	18e66b04 	addi	r3,r3,-26196
    9d08:	21000624 	muli	r4,r4,24
    9d0c:	1907883a 	add	r3,r3,r4
    9d10:	19000017 	ldw	r4,0(r3)
    9d14:	11000015 	stw	r4,0(r2)
    9d18:	19000117 	ldw	r4,4(r3)
    9d1c:	11000115 	stw	r4,4(r2)
    9d20:	19000217 	ldw	r4,8(r3)
    9d24:	11000215 	stw	r4,8(r2)
    9d28:	19000317 	ldw	r4,12(r3)
    9d2c:	11000315 	stw	r4,12(r2)
    9d30:	19000417 	ldw	r4,16(r3)
    9d34:	11000415 	stw	r4,16(r2)
    9d38:	18c00517 	ldw	r3,20(r3)
    9d3c:	10c00515 	stw	r3,20(r2)

	// Make Semaphores
	KeyPress1Sem = OSSemCreate(0);
    9d40:	0009883a 	mov	r4,zero
    9d44:	0021b700 	call	21b70 <OSSemCreate>
    9d48:	d0a7bf15 	stw	r2,-24836(gp)
	KeyPress2Sem = OSSemCreate(0);
    9d4c:	0009883a 	mov	r4,zero
    9d50:	0021b700 	call	21b70 <OSSemCreate>
    9d54:	d0a7bd15 	stw	r2,-24844(gp)
	KeyPress3Sem = OSSemCreate(0);
    9d58:	0009883a 	mov	r4,zero
    9d5c:	0021b700 	call	21b70 <OSSemCreate>
    9d60:	d0a7b515 	stw	r2,-24876(gp)
	SwitchValueSem = OSSemCreate(1);
    9d64:	01000044 	movi	r4,1
    9d68:	0021b700 	call	21b70 <OSSemCreate>
    9d6c:	d0a7bb15 	stw	r2,-24852(gp)
	UpdateQuestionSem = OSSemCreate(1);
    9d70:	01000044 	movi	r4,1
    9d74:	0021b700 	call	21b70 <OSSemCreate>
    9d78:	d0a7b615 	stw	r2,-24872(gp)
	DisplayResultSem = OSSemCreate(0);
    9d7c:	0009883a 	mov	r4,zero
    9d80:	0021b700 	call	21b70 <OSSemCreate>
    9d84:	d0a7c515 	stw	r2,-24812(gp)
	LevelDisplaySem = OSSemCreate(0);
    9d88:	0009883a 	mov	r4,zero
    9d8c:	0021b700 	call	21b70 <OSSemCreate>
    9d90:	d0a7b915 	stw	r2,-24860(gp)
	HEXDisplaySem = OSSemCreate(1);
    9d94:	01000044 	movi	r4,1
    9d98:	0021b700 	call	21b70 <OSSemCreate>
    9d9c:	d0a7b315 	stw	r2,-24884(gp)
	VGADisplaySem = OSSemCreate(1);
    9da0:	01000044 	movi	r4,1
    9da4:	0021b700 	call	21b70 <OSSemCreate>
    9da8:	d0a7be15 	stw	r2,-24840(gp)
	LCDDisplaySem = OSSemCreate(1);
    9dac:	01000044 	movi	r4,1
    9db0:	0021b700 	call	21b70 <OSSemCreate>
    9db4:	d0a7b415 	stw	r2,-24880(gp)

	// Make Mailboxes
	QuestionPosedMbox = OSMboxCreate((void*)0);
    9db8:	0009883a 	mov	r4,zero
    9dbc:	001f8380 	call	1f838 <OSMboxCreate>
    9dc0:	d0a7b715 	stw	r2,-24868(gp)
	QuestionNumberMbox = OSMboxCreate((void*)0);
    9dc4:	0009883a 	mov	r4,zero
    9dc8:	001f8380 	call	1f838 <OSMboxCreate>
    9dcc:	d0a7c415 	stw	r2,-24816(gp)

	// Make Flags
//	LevelGoFlags = OSFlagCreate(0x00, &err);
	//ProgramStateFlags = OSFlagCreate(0x00, &err);

	OSTaskCreateExt(TaskStartup,
    9dd0:	d8000415 	stw	zero,16(sp)
    9dd4:	d8000315 	stw	zero,12(sp)
    9dd8:	00820004 	movi	r2,2048
    9ddc:	d8800215 	stw	r2,8(sp)
    9de0:	008000f4 	movhi	r2,3
    9de4:	10866504 	addi	r2,r2,6548
    9de8:	d8800115 	stw	r2,4(sp)
    9dec:	00800044 	movi	r2,1
    9df0:	d8800015 	stw	r2,0(sp)
    9df4:	01c00044 	movi	r7,1
    9df8:	018000f4 	movhi	r6,3
    9dfc:	318e6404 	addi	r6,r6,14736
    9e00:	000b883a 	mov	r5,zero
    9e04:	01000074 	movhi	r4,1
    9e08:	21278a04 	addi	r4,r4,-25048
    9e0c:	0022bbc0 	call	22bbc <OSTaskCreateExt>
		// TODO: Write LVL to HEX[3:1]
		createOnBoardTasks();
	}
*/

}
    9e10:	0001883a 	nop
    9e14:	e037883a 	mov	sp,fp
    9e18:	dfc00117 	ldw	ra,4(sp)
    9e1c:	df000017 	ldw	fp,0(sp)
    9e20:	dec00204 	addi	sp,sp,8
    9e24:	f800283a 	ret

00009e28 <TaskStartup>:
 * Starts the system and any accompanying tasks.
 * Priority Planning: This task should have priority 1.
 * Timing Constraints: This task should have none as it deletes itself after creating other tasks
 * and servicing other uC/OS-II routines, such as initial OSFLAG posts.
 */
void TaskStartup(void* pdata) {
    9e28:	defffc04 	addi	sp,sp,-16
    9e2c:	dfc00315 	stw	ra,12(sp)
    9e30:	df000215 	stw	fp,8(sp)
    9e34:	df000204 	addi	fp,sp,8
    9e38:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	createGeneralTasks();
    9e3c:	00093600 	call	9360 <createGeneralTasks>
	printf("Startup...");
    9e40:	010000b4 	movhi	r4,2
    9e44:	211d3c04 	addi	r4,r4,29936
    9e48:	000b5d80 	call	b5d8 <printf>
	// Reset LCD cursor
	LCD_cursor(0,0);
    9e4c:	000b883a 	mov	r5,zero
    9e50:	0009883a 	mov	r4,zero
    9e54:	000045c0 	call	45c <LCD_cursor>
	if (EASTER_EGG_VALUE == get_hex_value_from_switches(17,0)) {
    9e58:	000b883a 	mov	r5,zero
    9e5c:	01000444 	movi	r4,17
    9e60:	00089400 	call	8940 <get_hex_value_from_switches>
    9e64:	10800a98 	cmpnei	r2,r2,42
    9e68:	1000061e 	bne	r2,zero,9e84 <TaskStartup+0x5c>
		OSFlagPost(ProgramStateFlags, PROGRAM_STATE_HEX_MODE_SET, OS_FLAG_SET, &err);
    9e6c:	d0a7bc17 	ldw	r2,-24848(gp)
    9e70:	e1fffe04 	addi	r7,fp,-8
    9e74:	01800044 	movi	r6,1
    9e78:	01400084 	movi	r5,2
    9e7c:	1009883a 	mov	r4,r2
    9e80:	001ef700 	call	1ef70 <OSFlagPost>
	}
	if (get_value_of_switch(17)) {
    9e84:	01000444 	movi	r4,17
    9e88:	000898c0 	call	898c <get_value_of_switch>
    9e8c:	10000b26 	beq	r2,zero,9ebc <TaskStartup+0x94>
		OSFlagPost(ProgramStateFlags, PROGRAM_STATE_VGA_MODE_SET, OS_FLAG_SET, &err);
    9e90:	d0a7bc17 	ldw	r2,-24848(gp)
    9e94:	e1fffe04 	addi	r7,fp,-8
    9e98:	01800044 	movi	r6,1
    9e9c:	01400044 	movi	r5,1
    9ea0:	1009883a 	mov	r4,r2
    9ea4:	001ef700 	call	1ef70 <OSFlagPost>
		// Write "Look at the VGA!" to top row
		//printf("Program is here");
		LCD_text("Look at the VGA!"); // No need for semaphore here as it's the only thing printed to the LCD the entire time in VGA mode
    9ea8:	010000b4 	movhi	r4,2
    9eac:	211d3f04 	addi	r4,r4,29948
    9eb0:	00004c80 	call	4c8 <LCD_text>
		//printf(" Now it's here");
		createVGATasks();
    9eb4:	00096b40 	call	96b4 <createVGATasks>
    9eb8:	00000a06 	br	9ee4 <TaskStartup+0xbc>
		//printf(" Finally, it's here");
	} else {
		// Write LVL to HEX[3:1]
		display_hex_on_seven_segment(0x38, 3);
    9ebc:	014000c4 	movi	r5,3
    9ec0:	01000e04 	movi	r4,56
    9ec4:	00008bc0 	call	8bc <display_hex_on_seven_segment>
		display_hex_on_seven_segment(0x3E, 2);
    9ec8:	01400084 	movi	r5,2
    9ecc:	01000f84 	movi	r4,62
    9ed0:	00008bc0 	call	8bc <display_hex_on_seven_segment>
		display_hex_on_seven_segment(0x38, 1);
    9ed4:	01400044 	movi	r5,1
    9ed8:	01000e04 	movi	r4,56
    9edc:	00008bc0 	call	8bc <display_hex_on_seven_segment>
		createOnBoardTasks();
    9ee0:	000950c0 	call	950c <createOnBoardTasks>
	}
	// First submit should show the result
	OSFlagPost(ProgramStateFlags, PROGRAM_STATE_END_LEVEL, OS_FLAG_CLR, &err);
    9ee4:	d0a7bc17 	ldw	r2,-24848(gp)
    9ee8:	e1fffe04 	addi	r7,fp,-8
    9eec:	000d883a 	mov	r6,zero
    9ef0:	01400204 	movi	r5,8
    9ef4:	1009883a 	mov	r4,r2
    9ef8:	001ef700 	call	1ef70 <OSFlagPost>
	getReadyDisplayResult();
    9efc:	00091180 	call	9118 <getReadyDisplayResult>
	// Delete this task
	OSTaskDel(TaskStartupPrio);
    9f00:	01000044 	movi	r4,1
    9f04:	0022da00 	call	22da0 <OSTaskDel>
}
    9f08:	0001883a 	nop
    9f0c:	e037883a 	mov	sp,fp
    9f10:	dfc00117 	ldw	ra,4(sp)
    9f14:	df000017 	ldw	fp,0(sp)
    9f18:	dec00204 	addi	sp,sp,8
    9f1c:	f800283a 	ret

00009f20 <TaskScanKey>:
 * Priority Planning: This task should have one of the highest priorities, but a lower priority
 * than TaskScanSwitch.
 * Timing Constraints: This task should be (in practice) no more than 5 atomic operations
 * without counting the DELAY. @50Mhz clock, this is 100ns.
 */
void TaskScanKey(void* pdata) {
    9f20:	defffd04 	addi	sp,sp,-12
    9f24:	dfc00215 	stw	ra,8(sp)
    9f28:	df000115 	stw	fp,4(sp)
    9f2c:	df000104 	addi	fp,sp,4
    9f30:	e13fff15 	stw	r4,-4(fp)
	for (;;) {
		if (KEYS&KEY1) {
    9f34:	00840034 	movhi	r2,4096
    9f38:	10801404 	addi	r2,r2,80
    9f3c:	10800017 	ldw	r2,0(r2)
    9f40:	1080008c 	andi	r2,r2,2
    9f44:	10000226 	beq	r2,zero,9f50 <TaskScanKey+0x30>
			//OSSemPost(KeyPress1Sem);
			//wait_for_key_depress(KEY1);
			explodeBinaryMathGame();
    9f48:	000990c0 	call	990c <explodeBinaryMathGame>
    9f4c:	00001106 	br	9f94 <TaskScanKey+0x74>
		}
		else if (KEYS&KEY2) {
    9f50:	00840034 	movhi	r2,4096
    9f54:	10801404 	addi	r2,r2,80
    9f58:	10800017 	ldw	r2,0(r2)
    9f5c:	1080010c 	andi	r2,r2,4
    9f60:	10000426 	beq	r2,zero,9f74 <TaskScanKey+0x54>
			OSSemPost(KeyPress2Sem);
    9f64:	d0a7bd17 	ldw	r2,-24844(gp)
    9f68:	1009883a 	mov	r4,r2
    9f6c:	00222000 	call	22200 <OSSemPost>
    9f70:	00000806 	br	9f94 <TaskScanKey+0x74>
		}
		else if (KEYS&KEY3) {
    9f74:	00840034 	movhi	r2,4096
    9f78:	10801404 	addi	r2,r2,80
    9f7c:	10800017 	ldw	r2,0(r2)
    9f80:	1080020c 	andi	r2,r2,8
    9f84:	10000326 	beq	r2,zero,9f94 <TaskScanKey+0x74>
			OSSemPost(KeyPress3Sem);
    9f88:	d0a7b517 	ldw	r2,-24876(gp)
    9f8c:	1009883a 	mov	r4,r2
    9f90:	00222000 	call	22200 <OSSemPost>
		}
		OSTimeDlyHMSM(0,0,0,180); // TODO: Is this button debouncing good enough?
    9f94:	01c02d04 	movi	r7,180
    9f98:	000d883a 	mov	r6,zero
    9f9c:	000b883a 	mov	r5,zero
    9fa0:	0009883a 	mov	r4,zero
    9fa4:	0023d900 	call	23d90 <OSTimeDlyHMSM>
	}
    9fa8:	003fe206 	br	9f34 <TaskScanKey+0x14>

00009fac <TaskScanSwitch>:
 * SwitchValueSem.
 * Priority Planning: This task should have one of the highest priorities.
 * Timing Constraints: This task should be (in practice) no more than 3 atomic operations
 * without counting the DELAY. @50Mhz clock, this is 60ns.
 */
void TaskScanSwitch(void* pdata) {
    9fac:	defffc04 	addi	sp,sp,-16
    9fb0:	dfc00315 	stw	ra,12(sp)
    9fb4:	df000215 	stw	fp,8(sp)
    9fb8:	df000204 	addi	fp,sp,8
    9fbc:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	for (;;) {
		OSSemPend(SwitchValueSem, 0, &err);
    9fc0:	d0a7bb17 	ldw	r2,-24852(gp)
    9fc4:	e1bffe04 	addi	r6,fp,-8
    9fc8:	000b883a 	mov	r5,zero
    9fcc:	1009883a 	mov	r4,r2
    9fd0:	0021e880 	call	21e88 <OSSemPend>
		SwitchValue = get_value_of_all_switches();
    9fd4:	00089c00 	call	89c0 <get_value_of_all_switches>
    9fd8:	d0a7c615 	stw	r2,-24808(gp)
		//printf("%u\n",SwitchValue); // DEBUG LINE
		OSSemPost(SwitchValueSem);
    9fdc:	d0a7bb17 	ldw	r2,-24852(gp)
    9fe0:	1009883a 	mov	r4,r2
    9fe4:	00222000 	call	22200 <OSSemPost>
		OSTimeDly(1);
    9fe8:	01000044 	movi	r4,1
    9fec:	0023c8c0 	call	23c8c <OSTimeDly>
	}
    9ff0:	003ff306 	br	9fc0 <TaskScanSwitch+0x14>

00009ff4 <TaskSubmit>:
 * display the result (posts DisplayResultSem).
 * Priority Planning: This task should be medium priority.
 * Timing Constraints: This task should be (in practice) no more than 6 atomic operations
 * + explodeVGAAnimationCuesFlags() without counting the DELAY. @50Mhz clock, this is 220ns.
 */
void TaskSubmit(void* pdata) {
    9ff4:	defffb04 	addi	sp,sp,-20
    9ff8:	dfc00415 	stw	ra,16(sp)
    9ffc:	df000315 	stw	fp,12(sp)
    a000:	df000304 	addi	fp,sp,12
    a004:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	int value;
	for (;;) {
		// Wait for submit...
		OSSemPend(KeyPress3Sem, 0, &err);
    a008:	d0a7b517 	ldw	r2,-24876(gp)
    a00c:	e0fffe04 	addi	r3,fp,-8
    a010:	180d883a 	mov	r6,r3
    a014:	000b883a 	mov	r5,zero
    a018:	1009883a 	mov	r4,r2
    a01c:	0021e880 	call	21e88 <OSSemPend>
		value = OSFlagQuery(ProgramStateFlags, &err);
    a020:	d0a7bc17 	ldw	r2,-24848(gp)
    a024:	e0fffe04 	addi	r3,fp,-8
    a028:	180b883a 	mov	r5,r3
    a02c:	1009883a 	mov	r4,r2
    a030:	001f3040 	call	1f304 <OSFlagQuery>
    a034:	10bfffcc 	andi	r2,r2,65535
    a038:	e0bffd15 	stw	r2,-12(fp)
		// Restore neutral animations
		explodeVGAAnimationCuesFlags();
    a03c:	000989c0 	call	989c <explodeVGAAnimationCuesFlags>
		//printf("0x%X",value); // DEBUG LINE
		// Are we going to display the result?
		if (value&PROGRAM_STATE_DISPLAY_RESULT) {
    a040:	e0bffd17 	ldw	r2,-12(fp)
    a044:	1080010c 	andi	r2,r2,4
    a048:	10000526 	beq	r2,zero,a060 <TaskSubmit+0x6c>
			getReadyNewQuestion();
    a04c:	00090d80 	call	90d8 <getReadyNewQuestion>
			OSSemPost(DisplayResultSem);
    a050:	d0a7c517 	ldw	r2,-24812(gp)
    a054:	1009883a 	mov	r4,r2
    a058:	00222000 	call	22200 <OSSemPost>
    a05c:	003fea06 	br	a008 <TaskSubmit+0x14>
		} else if (value&PROGRAM_STATE_END_LEVEL) { // Or are we going to display new level info?
    a060:	e0bffd17 	ldw	r2,-12(fp)
    a064:	1080020c 	andi	r2,r2,8
    a068:	10000426 	beq	r2,zero,a07c <TaskSubmit+0x88>
			OSSemPost(LevelDisplaySem);
    a06c:	d0a7b917 	ldw	r2,-24860(gp)
    a070:	1009883a 	mov	r4,r2
    a074:	00222000 	call	22200 <OSSemPost>
    a078:	003fe306 	br	a008 <TaskSubmit+0x14>
		} else { // Or generate a new question?
			getReadyDisplayResult();
    a07c:	00091180 	call	9118 <getReadyDisplayResult>
			OSSemPost(UpdateQuestionSem);
    a080:	d0a7b617 	ldw	r2,-24872(gp)
    a084:	1009883a 	mov	r4,r2
    a088:	00222000 	call	22200 <OSSemPost>
		}
	}
    a08c:	003fde06 	br	a008 <TaskSubmit+0x14>

0000a090 <TaskDisplayEndOfLevelLCD>:
 * Priority Planning: This task should be medium priority, but lower priority than
 * TaskSubmit.
 * Timing Constraints: This task should be (in practice) no more than 45 atomic operations
 * without counting the DELAY. @50Mhz clock, this is 900ns.
 */
void TaskDisplayEndOfLevelLCD(void* pdata) {
    a090:	defff904 	addi	sp,sp,-28
    a094:	dfc00615 	stw	ra,24(sp)
    a098:	df000515 	stw	fp,20(sp)
    a09c:	df000504 	addi	fp,sp,20
    a0a0:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	double roundPercent;
	char roundPercentStr[5];
	for (;;) {
		OSSemPend(LevelDisplaySem, 0, &err);
    a0a4:	d0a7b917 	ldw	r2,-24860(gp)
    a0a8:	e0fffd04 	addi	r3,fp,-12
    a0ac:	180d883a 	mov	r6,r3
    a0b0:	000b883a 	mov	r5,zero
    a0b4:	1009883a 	mov	r4,r2
    a0b8:	0021e880 	call	21e88 <OSSemPend>
		// Reset timer to TIME_TO_DISPLAY_LEVEL_END
		TimeRemaining = TIME_TO_DISPLAY_LEVEL_END;
    a0bc:	00800284 	movi	r2,10
    a0c0:	d0a7b815 	stw	r2,-24864(gp)
		// Get percentage for round
		roundPercent = QuestionsCorrect*100.0/NUM_QUESTIONS_PER_LEVEL;
    a0c4:	d0a7b217 	ldw	r2,-24888(gp)
    a0c8:	1009883a 	mov	r4,r2
    a0cc:	000b0ec0 	call	b0ec <__floatsisf>
    a0d0:	1007883a 	mov	r3,r2
    a0d4:	0090b234 	movhi	r2,17096
    a0d8:	1887ff32 	custom	252,r3,r3,r2
    a0dc:	00904034 	movhi	r2,16640
    a0e0:	1885fff2 	custom	255,r2,r3,r2
    a0e4:	1009883a 	mov	r4,r2
    a0e8:	000b2ec0 	call	b2ec <__extendsfdf2>
    a0ec:	1009883a 	mov	r4,r2
    a0f0:	180b883a 	mov	r5,r3
    a0f4:	e13ffb15 	stw	r4,-20(fp)
    a0f8:	e17ffc15 	stw	r5,-16(fp)
		// Put its float value in roundPercentStr
		sprintf(roundPercentStr, "%.1f", roundPercent);
    a0fc:	e0bffd44 	addi	r2,fp,-11
    a100:	e1bffb17 	ldw	r6,-20(fp)
    a104:	e1fffc17 	ldw	r7,-16(fp)
    a108:	014000b4 	movhi	r5,2
    a10c:	295d4404 	addi	r5,r5,29968
    a110:	1009883a 	mov	r4,r2
    a114:	000b6e40 	call	b6e4 <sprintf>
		// Clear the LCD and reset cursor...?
		OSSemPend(LCDDisplaySem, 0, &err); // Acquire semaphore to write to LCD
    a118:	d0a7b417 	ldw	r2,-24880(gp)
    a11c:	e0fffd04 	addi	r3,fp,-12
    a120:	180d883a 	mov	r6,r3
    a124:	000b883a 	mov	r5,zero
    a128:	1009883a 	mov	r4,r2
    a12c:	0021e880 	call	21e88 <OSSemPend>
		LCD_clear();
    a130:	000056c0 	call	56c <LCD_clear>
		LCD_cursor(0,0);
    a134:	000b883a 	mov	r5,zero
    a138:	0009883a 	mov	r4,zero
    a13c:	000045c0 	call	45c <LCD_cursor>
		// Print level score on line 1
		LCD_text("Lvl score: ");
    a140:	010000b4 	movhi	r4,2
    a144:	211d4604 	addi	r4,r4,29976
    a148:	00004c80 	call	4c8 <LCD_text>
		LCD_text(roundPercentStr);
    a14c:	e0bffd44 	addi	r2,fp,-11
    a150:	1009883a 	mov	r4,r2
    a154:	00004c80 	call	4c8 <LCD_text>
		// Prepare to print result on line 2
		LCD_cursor(0,1);
    a158:	01400044 	movi	r5,1
    a15c:	0009883a 	mov	r4,zero
    a160:	000045c0 	call	45c <LCD_cursor>
		// Are we advancing or resetting the level?
		if (roundPercent >= MIN_PERCENTAGE_CORRECT_FOR_PROMOTION) {
    a164:	000d883a 	mov	r6,zero
    a168:	01d01274 	movhi	r7,16457
    a16c:	e13ffb17 	ldw	r4,-20(fp)
    a170:	e17ffc17 	ldw	r5,-16(fp)
    a174:	000b2100 	call	b210 <__gedf2>
    a178:	10001716 	blt	r2,zero,a1d8 <TaskDisplayEndOfLevelLCD+0x148>
			// Normal next level case
			if (CurrentLevelNumber < MAX_NUMBER_OF_LEVELS - 1) {
    a17c:	d0a7c117 	ldw	r2,-24828(gp)
    a180:	10800148 	cmpgei	r2,r2,5
    a184:	1000091e 	bne	r2,zero,a1ac <TaskDisplayEndOfLevelLCD+0x11c>
				LCD_text("Next Lvl Ready!");
    a188:	010000b4 	movhi	r4,2
    a18c:	211d4904 	addi	r4,r4,29988
    a190:	00004c80 	call	4c8 <LCD_text>
				OSSemPost(LCDDisplaySem); // Repost once done
    a194:	d0a7b417 	ldw	r2,-24880(gp)
    a198:	1009883a 	mov	r4,r2
    a19c:	00222000 	call	22200 <OSSemPost>
				getReadyGoForwardLevel();
    a1a0:	00091980 	call	9198 <getReadyGoForwardLevel>
				updateLevel();
    a1a4:	00092900 	call	9290 <updateLevel>
    a1a8:	003fbe06 	br	a0a4 <TaskDisplayEndOfLevelLCD+0x14>
			} else { // Game over case
				LCD_text("You win! Replay?");
    a1ac:	010000b4 	movhi	r4,2
    a1b0:	211d4d04 	addi	r4,r4,30004
    a1b4:	00004c80 	call	4c8 <LCD_text>
				OSSemPost(LCDDisplaySem); // Repost once done
    a1b8:	d0a7b417 	ldw	r2,-24880(gp)
    a1bc:	1009883a 	mov	r4,r2
    a1c0:	00222000 	call	22200 <OSSemPost>
				// Specifically set the win screen to show for TIME_TO_DISPLAY_END_OF_GAME instead
				TimeRemaining = TIME_TO_DISPLAY_END_OF_GAME;
    a1c4:	008018c4 	movi	r2,99
    a1c8:	d0a7b815 	stw	r2,-24864(gp)
				getReadyGoForwardLevel();
    a1cc:	00091980 	call	9198 <getReadyGoForwardLevel>
				updateLevel();
    a1d0:	00092900 	call	9290 <updateLevel>
    a1d4:	003fb306 	br	a0a4 <TaskDisplayEndOfLevelLCD+0x14>
			}
		} else {
			LCD_text("Repeat Lvl...");
    a1d8:	010000b4 	movhi	r4,2
    a1dc:	211d5204 	addi	r4,r4,30024
    a1e0:	00004c80 	call	4c8 <LCD_text>
			OSSemPost(LCDDisplaySem); // Repost once done
    a1e4:	d0a7b417 	ldw	r2,-24880(gp)
    a1e8:	1009883a 	mov	r4,r2
    a1ec:	00222000 	call	22200 <OSSemPost>
			clearLevel();
    a1f0:	00092180 	call	9218 <clearLevel>
		}
	}
    a1f4:	003fab06 	br	a0a4 <TaskDisplayEndOfLevelLCD+0x14>

0000a1f8 <TaskDisplayResultLCD>:
 * Priority Planning: This task should be medium priority, but lower priority than TaskSubmit, and
 * higher priority than TaskUpdateQuestion.
 * Timing Constraints: This task should be (in practice) no more than 30 atomic operations
 * without counting the DELAY. @50Mhz clock, this is 600ns.
 */
void TaskDisplayResultLCD(void* pdata) {
    a1f8:	defffa04 	addi	sp,sp,-24
    a1fc:	dfc00515 	stw	ra,20(sp)
    a200:	df000415 	stw	fp,16(sp)
    a204:	df000404 	addi	fp,sp,16
    a208:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	char currentCorrectAnswer[11];
	for (;;) {
		OSSemPend(DisplayResultSem, 0, &err);
    a20c:	d0a7c517 	ldw	r2,-24812(gp)
    a210:	e1bffc04 	addi	r6,fp,-16
    a214:	000b883a 	mov	r5,zero
    a218:	1009883a 	mov	r4,r2
    a21c:	0021e880 	call	21e88 <OSSemPend>
		// Reset timer to TIME_TO_DISPLAY_RESULT
		TimeRemaining = TIME_TO_DISPLAY_RESULT;
    a220:	00800144 	movi	r2,5
    a224:	d0a7b815 	stw	r2,-24864(gp)
		// Clear the LCD and reset cursor...?
		OSSemPend(LCDDisplaySem, 0, &err); // Acquire semaphore to write to LCD
    a228:	d0a7b417 	ldw	r2,-24880(gp)
    a22c:	e1bffc04 	addi	r6,fp,-16
    a230:	000b883a 	mov	r5,zero
    a234:	1009883a 	mov	r4,r2
    a238:	0021e880 	call	21e88 <OSSemPend>
		LCD_clear();
    a23c:	000056c0 	call	56c <LCD_clear>
		LCD_cursor(0,0);
    a240:	000b883a 	mov	r5,zero
    a244:	0009883a 	mov	r4,zero
    a248:	000045c0 	call	45c <LCD_cursor>
		// Was the answer correct?
		if (CurrentCorrectAnswer == SwitchValue) {
    a24c:	d0e7c017 	ldw	r3,-24832(gp)
    a250:	d0a7c617 	ldw	r2,-24808(gp)
    a254:	18800f1e 	bne	r3,r2,a294 <TaskDisplayResultLCD+0x9c>
			// Write to LCD display.
			LCD_text("CORRECT!");
    a258:	010000b4 	movhi	r4,2
    a25c:	211d5604 	addi	r4,r4,30040
    a260:	00004c80 	call	4c8 <LCD_text>
			OSSemPost(LCDDisplaySem); // Repost once done
    a264:	d0a7b417 	ldw	r2,-24880(gp)
    a268:	1009883a 	mov	r4,r2
    a26c:	00222000 	call	22200 <OSSemPost>
			// Set LEDG and print CORRECT message
			set_ledg_bit(NUM_QUESTIONS_PER_LEVEL-OnQuestionNum);
    a270:	d0a7b117 	ldw	r2,-24892(gp)
    a274:	00c00204 	movi	r3,8
    a278:	1885c83a 	sub	r2,r3,r2
    a27c:	1009883a 	mov	r4,r2
    a280:	000065c0 	call	65c <set_ledg_bit>
			QuestionsCorrect++;
    a284:	d0a7b217 	ldw	r2,-24888(gp)
    a288:	10800044 	addi	r2,r2,1
    a28c:	d0a7b215 	stw	r2,-24888(gp)
    a290:	003fde06 	br	a20c <TaskDisplayResultLCD+0x14>
		} else {
			// Print INCORRECT message
			LCD_text("INCORRECT");
    a294:	010000b4 	movhi	r4,2
    a298:	211d5904 	addi	r4,r4,30052
    a29c:	00004c80 	call	4c8 <LCD_text>
			LCD_cursor(0,1);
    a2a0:	01400044 	movi	r5,1
    a2a4:	0009883a 	mov	r4,zero
    a2a8:	000045c0 	call	45c <LCD_cursor>
			if (inHexMode()) {
    a2ac:	000909c0 	call	909c <inHexMode>
    a2b0:	10000826 	beq	r2,zero,a2d4 <TaskDisplayResultLCD+0xdc>
				sprintf(currentCorrectAnswer, "0x%X", CurrentCorrectAnswer);
    a2b4:	d0e7c017 	ldw	r3,-24832(gp)
    a2b8:	e0bffc44 	addi	r2,fp,-15
    a2bc:	180d883a 	mov	r6,r3
    a2c0:	014000b4 	movhi	r5,2
    a2c4:	295d5c04 	addi	r5,r5,30064
    a2c8:	1009883a 	mov	r4,r2
    a2cc:	000b6e40 	call	b6e4 <sprintf>
    a2d0:	00000706 	br	a2f0 <TaskDisplayResultLCD+0xf8>
			} else {
				sprintf(currentCorrectAnswer, "%d", CurrentCorrectAnswer);
    a2d4:	d0e7c017 	ldw	r3,-24832(gp)
    a2d8:	e0bffc44 	addi	r2,fp,-15
    a2dc:	180d883a 	mov	r6,r3
    a2e0:	014000b4 	movhi	r5,2
    a2e4:	295d5e04 	addi	r5,r5,30072
    a2e8:	1009883a 	mov	r4,r2
    a2ec:	000b6e40 	call	b6e4 <sprintf>
			}
			LCD_text("Ans: ");
    a2f0:	010000b4 	movhi	r4,2
    a2f4:	211d5f04 	addi	r4,r4,30076
    a2f8:	00004c80 	call	4c8 <LCD_text>
			LCD_text(currentCorrectAnswer);
    a2fc:	e0bffc44 	addi	r2,fp,-15
    a300:	1009883a 	mov	r4,r2
    a304:	00004c80 	call	4c8 <LCD_text>
			OSSemPost(LCDDisplaySem); // Repost once done
    a308:	d0a7b417 	ldw	r2,-24880(gp)
    a30c:	1009883a 	mov	r4,r2
    a310:	00222000 	call	22200 <OSSemPost>
		}
	}
    a314:	003fbd06 	br	a20c <TaskDisplayResultLCD+0x14>

0000a318 <TaskUpdateQuestion>:
 * Priority Planning: This task should be medium priority, but higher than TaskSubmit.
 * Timing Constraints: This task should be (in practice) no more than approximately 16 atomic
 * operations + updateLevel() + [getNumber() or getNumberMult()]*2 + getOperation() + getOperationSymbol() +
 * getAns() without counting the DELAY. @50Mhz clock, this is 800ns.
 */
void TaskUpdateQuestion(void* pdata) {
    a318:	deffe204 	addi	sp,sp,-120
    a31c:	dfc01d15 	stw	ra,116(sp)
    a320:	df001c15 	stw	fp,112(sp)
    a324:	df001c04 	addi	fp,sp,112
    a328:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	char questionPosed[40], questionNumber[40];
	int num1, num2; // Numbers for randomly generated question
	unsigned op, op_char; // Operation for randomly generated question
	for (;;) {
		OSSemPend(UpdateQuestionSem, 0, &err);
    a32c:	d0a7b617 	ldw	r2,-24872(gp)
    a330:	e0ffea04 	addi	r3,fp,-88
    a334:	180d883a 	mov	r6,r3
    a338:	000b883a 	mov	r5,zero
    a33c:	1009883a 	mov	r4,r2
    a340:	0021e880 	call	21e88 <OSSemPend>
		// Clear the LCD...?
		LCD_clear();
    a344:	000056c0 	call	56c <LCD_clear>
		// Update question
		OnQuestionNum++;
    a348:	d0a7b117 	ldw	r2,-24892(gp)
    a34c:	10800044 	addi	r2,r2,1
    a350:	d0a7b115 	stw	r2,-24892(gp)
		// Ready to end level?
		if (OnQuestionNum == NUM_QUESTIONS_PER_LEVEL) {
    a354:	d0a7b117 	ldw	r2,-24892(gp)
    a358:	10800218 	cmpnei	r2,r2,8
    a35c:	1000011e 	bne	r2,zero,a364 <TaskUpdateQuestion+0x4c>
			getReadyEndOfLevel();
    a360:	00091580 	call	9158 <getReadyEndOfLevel>
		}
		TimeRemaining = CurrentLevel.timePerQuestion;
    a364:	00800134 	movhi	r2,4
    a368:	109e6504 	addi	r2,r2,31124
    a36c:	10800517 	ldw	r2,20(r2)
    a370:	d0a7b815 	stw	r2,-24864(gp)
		op = getOperation(CurrentLevel);
    a374:	00800134 	movhi	r2,4
    a378:	109e6504 	addi	r2,r2,31124
    a37c:	10c00417 	ldw	r3,16(r2)
    a380:	d8c00015 	stw	r3,0(sp)
    a384:	10c00517 	ldw	r3,20(r2)
    a388:	d8c00115 	stw	r3,4(sp)
    a38c:	11000017 	ldw	r4,0(r2)
    a390:	11400117 	ldw	r5,4(r2)
    a394:	11800217 	ldw	r6,8(r2)
    a398:	11c00317 	ldw	r7,12(r2)
    a39c:	0008ec80 	call	8ec8 <getOperation>
    a3a0:	10bfffcc 	andi	r2,r2,65535
    a3a4:	e0bfe815 	stw	r2,-96(fp)
		op_char = getOperationSymbol(op);
    a3a8:	e0bfe817 	ldw	r2,-96(fp)
    a3ac:	10bfffcc 	andi	r2,r2,65535
    a3b0:	1009883a 	mov	r4,r2
    a3b4:	0008f740 	call	8f74 <getOperationSymbol>
    a3b8:	10803fcc 	andi	r2,r2,255
    a3bc:	e0bfe915 	stw	r2,-92(fp)
		if ('*' == op_char) {
    a3c0:	e0bfe917 	ldw	r2,-92(fp)
    a3c4:	10800a98 	cmpnei	r2,r2,42
    a3c8:	1000191e 	bne	r2,zero,a430 <TaskUpdateQuestion+0x118>
			num1 = getNumberMult(CurrentLevel);
    a3cc:	00800134 	movhi	r2,4
    a3d0:	109e6504 	addi	r2,r2,31124
    a3d4:	10c00417 	ldw	r3,16(r2)
    a3d8:	d8c00015 	stw	r3,0(sp)
    a3dc:	10c00517 	ldw	r3,20(r2)
    a3e0:	d8c00115 	stw	r3,4(sp)
    a3e4:	11000017 	ldw	r4,0(r2)
    a3e8:	11400117 	ldw	r5,4(r2)
    a3ec:	11800217 	ldw	r6,8(r2)
    a3f0:	11c00317 	ldw	r7,12(r2)
    a3f4:	0008e640 	call	8e64 <getNumberMult>
    a3f8:	e0bfe615 	stw	r2,-104(fp)
			num2 = getNumberMult(CurrentLevel);
    a3fc:	00800134 	movhi	r2,4
    a400:	109e6504 	addi	r2,r2,31124
    a404:	10c00417 	ldw	r3,16(r2)
    a408:	d8c00015 	stw	r3,0(sp)
    a40c:	10c00517 	ldw	r3,20(r2)
    a410:	d8c00115 	stw	r3,4(sp)
    a414:	11000017 	ldw	r4,0(r2)
    a418:	11400117 	ldw	r5,4(r2)
    a41c:	11800217 	ldw	r6,8(r2)
    a420:	11c00317 	ldw	r7,12(r2)
    a424:	0008e640 	call	8e64 <getNumberMult>
    a428:	e0bfe715 	stw	r2,-100(fp)
    a42c:	00001806 	br	a490 <TaskUpdateQuestion+0x178>
		} else {
			num1 = getNumber(CurrentLevel);
    a430:	00800134 	movhi	r2,4
    a434:	109e6504 	addi	r2,r2,31124
    a438:	10c00417 	ldw	r3,16(r2)
    a43c:	d8c00015 	stw	r3,0(sp)
    a440:	10c00517 	ldw	r3,20(r2)
    a444:	d8c00115 	stw	r3,4(sp)
    a448:	11000017 	ldw	r4,0(r2)
    a44c:	11400117 	ldw	r5,4(r2)
    a450:	11800217 	ldw	r6,8(r2)
    a454:	11c00317 	ldw	r7,12(r2)
    a458:	0008e000 	call	8e00 <getNumber>
    a45c:	e0bfe615 	stw	r2,-104(fp)
			num2 = getNumber(CurrentLevel);
    a460:	00800134 	movhi	r2,4
    a464:	109e6504 	addi	r2,r2,31124
    a468:	10c00417 	ldw	r3,16(r2)
    a46c:	d8c00015 	stw	r3,0(sp)
    a470:	10c00517 	ldw	r3,20(r2)
    a474:	d8c00115 	stw	r3,4(sp)
    a478:	11000017 	ldw	r4,0(r2)
    a47c:	11400117 	ldw	r5,4(r2)
    a480:	11800217 	ldw	r6,8(r2)
    a484:	11c00317 	ldw	r7,12(r2)
    a488:	0008e000 	call	8e00 <getNumber>
    a48c:	e0bfe715 	stw	r2,-100(fp)
		}
		CurrentCorrectAnswer = getAns(num1, op, num2);
    a490:	e0bfe817 	ldw	r2,-96(fp)
    a494:	10803fcc 	andi	r2,r2,255
    a498:	1080201c 	xori	r2,r2,128
    a49c:	10bfe004 	addi	r2,r2,-128
    a4a0:	e1bfe717 	ldw	r6,-100(fp)
    a4a4:	100b883a 	mov	r5,r2
    a4a8:	e13fe617 	ldw	r4,-104(fp)
    a4ac:	0008fd40 	call	8fd4 <getAns>
    a4b0:	d0a7c015 	stw	r2,-24832(gp)
		//printf("%u\n",CurrentCorrectAnswer); // DEBUG LINE
		// Display question posed in HEX?
		if (inHexMode()) {
    a4b4:	000909c0 	call	909c <inHexMode>
    a4b8:	10000a26 	beq	r2,zero,a4e4 <TaskUpdateQuestion+0x1cc>
			sprintf(questionPosed, "0x%X%c0x%X", num1, op_char, num2);
    a4bc:	e0ffea44 	addi	r3,fp,-87
    a4c0:	e0bfe717 	ldw	r2,-100(fp)
    a4c4:	d8800015 	stw	r2,0(sp)
    a4c8:	e1ffe917 	ldw	r7,-92(fp)
    a4cc:	e1bfe617 	ldw	r6,-104(fp)
    a4d0:	014000b4 	movhi	r5,2
    a4d4:	295d6104 	addi	r5,r5,30084
    a4d8:	1809883a 	mov	r4,r3
    a4dc:	000b6e40 	call	b6e4 <sprintf>
    a4e0:	00000906 	br	a508 <TaskUpdateQuestion+0x1f0>
		} else {
			sprintf(questionPosed, "%d%c%d", num1, op_char, num2);
    a4e4:	e0ffea44 	addi	r3,fp,-87
    a4e8:	e0bfe717 	ldw	r2,-100(fp)
    a4ec:	d8800015 	stw	r2,0(sp)
    a4f0:	e1ffe917 	ldw	r7,-92(fp)
    a4f4:	e1bfe617 	ldw	r6,-104(fp)
    a4f8:	014000b4 	movhi	r5,2
    a4fc:	295d6404 	addi	r5,r5,30096
    a500:	1809883a 	mov	r4,r3
    a504:	000b6e40 	call	b6e4 <sprintf>
		}
		// Question number string creation
		sprintf(questionNumber, "Q.%d", OnQuestionNum);
    a508:	d0e7b117 	ldw	r3,-24892(gp)
    a50c:	e0bff444 	addi	r2,fp,-47
    a510:	180d883a 	mov	r6,r3
    a514:	014000b4 	movhi	r5,2
    a518:	295d6604 	addi	r5,r5,30104
    a51c:	1009883a 	mov	r4,r2
    a520:	000b6e40 	call	b6e4 <sprintf>
		// Randomize?
		if (OnQuestionNum > 2) {
    a524:	d0a7b117 	ldw	r2,-24892(gp)
    a528:	108000d0 	cmplti	r2,r2,3
    a52c:	1000031e 	bne	r2,zero,a53c <TaskUpdateQuestion+0x224>
			srand((unsigned)OSTimeGet());
    a530:	00240c40 	call	240c4 <OSTimeGet>
    a534:	1009883a 	mov	r4,r2
    a538:	000b6140 	call	b614 <srand>
		}
		// Send away!
		OSMboxPost(QuestionPosedMbox, (void*)questionPosed);
    a53c:	d0a7b717 	ldw	r2,-24868(gp)
    a540:	e0ffea44 	addi	r3,fp,-87
    a544:	180b883a 	mov	r5,r3
    a548:	1009883a 	mov	r4,r2
    a54c:	001feec0 	call	1feec <OSMboxPost>
		OSMboxPost(QuestionNumberMbox, (void*)questionNumber);
    a550:	d0a7c417 	ldw	r2,-24816(gp)
    a554:	e0fff444 	addi	r3,fp,-47
    a558:	180b883a 	mov	r5,r3
    a55c:	1009883a 	mov	r4,r2
    a560:	001feec0 	call	1feec <OSMboxPost>
	}
    a564:	003f7106 	br	a32c <TaskUpdateQuestion+0x14>

0000a568 <TaskUpdateTimer>:
 * KeyPress3Sem to invoke TaskSubmit().
 * Priority Planning: This task may be low priority.
 * Timing Constraints: This task should be (in practice) no more than 5 atomic operations
 * without counting the DELAY. @50Mhz clock, this is 100ns.
 */
void TaskUpdateTimer(void* pdata) {
    a568:	defffc04 	addi	sp,sp,-16
    a56c:	dfc00315 	stw	ra,12(sp)
    a570:	df000215 	stw	fp,8(sp)
    a574:	df000204 	addi	fp,sp,8
    a578:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	for (;;) {
		OSTimeDlyHMSM(0,0,1,0);
    a57c:	000f883a 	mov	r7,zero
    a580:	01800044 	movi	r6,1
    a584:	000b883a 	mov	r5,zero
    a588:	0009883a 	mov	r4,zero
    a58c:	0023d900 	call	23d90 <OSTimeDlyHMSM>
		TimeRemaining--;
    a590:	d0a7b817 	ldw	r2,-24864(gp)
    a594:	10bfffc4 	addi	r2,r2,-1
    a598:	d0a7b815 	stw	r2,-24864(gp)
		if (TimeRemaining == TIME_TO_BE_WORRIED) {
    a59c:	d0a7b817 	ldw	r2,-24864(gp)
    a5a0:	10800258 	cmpnei	r2,r2,9
    a5a4:	1000081e 	bne	r2,zero,a5c8 <TaskUpdateTimer+0x60>
			AnimationState = 1;
    a5a8:	00800044 	movi	r2,1
    a5ac:	d0a00015 	stw	r2,-32768(gp)
			OSFlagPost(VGAAnimationCuesFlags, VGA_ANIMATION_CUES_WORRIED, OS_FLAG_SET, &err);
    a5b0:	d0a7ba17 	ldw	r2,-24856(gp)
    a5b4:	e1fffe04 	addi	r7,fp,-8
    a5b8:	01800044 	movi	r6,1
    a5bc:	01400044 	movi	r5,1
    a5c0:	1009883a 	mov	r4,r2
    a5c4:	001ef700 	call	1ef70 <OSFlagPost>
		}
		if (0 == TimeRemaining) {
    a5c8:	d0a7b817 	ldw	r2,-24864(gp)
    a5cc:	103feb1e 	bne	r2,zero,a57c <TaskUpdateTimer+0x14>
			OSSemPost(KeyPress3Sem);
    a5d0:	d0a7b517 	ldw	r2,-24876(gp)
    a5d4:	1009883a 	mov	r4,r2
    a5d8:	00222000 	call	22200 <OSSemPost>
		}
	}
    a5dc:	003fe706 	br	a57c <TaskUpdateTimer+0x14>

0000a5e0 <TaskDisplayTimer>:
 * Writes TimeRemaining on HEX[7:6]. HEXDisplaySem is used for guarding.
 * Priority Planning: This task may be low priority.
 * Timing Constraints: This task should be (in practice) no more than approximately 10 atomic
 * operations without counting the DELAY. @50Mhz clock, this is 200ns.
 */
void TaskDisplayTimer(void* pdata) {
    a5e0:	defffb04 	addi	sp,sp,-20
    a5e4:	dfc00415 	stw	ra,16(sp)
    a5e8:	df000315 	stw	fp,12(sp)
    a5ec:	df000304 	addi	fp,sp,12
    a5f0:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	int displayTimerAs; // Either 10 (DEC) or 16 (HEX) dependent on mode.
	for (;;) {
		OSSemPend(HEXDisplaySem, 0, &err);
    a5f4:	d0a7b317 	ldw	r2,-24884(gp)
    a5f8:	e0fffe04 	addi	r3,fp,-8
    a5fc:	180d883a 	mov	r6,r3
    a600:	000b883a 	mov	r5,zero
    a604:	1009883a 	mov	r4,r2
    a608:	0021e880 	call	21e88 <OSSemPend>
		if (inHexMode()) {
    a60c:	000909c0 	call	909c <inHexMode>
    a610:	10000326 	beq	r2,zero,a620 <TaskDisplayTimer+0x40>
			displayTimerAs = 16;
    a614:	00800404 	movi	r2,16
    a618:	e0bffd15 	stw	r2,-12(fp)
    a61c:	00000206 	br	a628 <TaskDisplayTimer+0x48>
		} else {
			displayTimerAs = 10;
    a620:	00800284 	movi	r2,10
    a624:	e0bffd15 	stw	r2,-12(fp)
		}
		display_hex_on_seven_segment(get_display_from_hex(TimeRemaining/displayTimerAs), 7);
    a628:	d0e7b817 	ldw	r3,-24864(gp)
    a62c:	e0bffd17 	ldw	r2,-12(fp)
    a630:	1885283a 	div	r2,r3,r2
    a634:	1009883a 	mov	r4,r2
    a638:	0000b940 	call	b94 <get_display_from_hex>
    a63c:	014001c4 	movi	r5,7
    a640:	1009883a 	mov	r4,r2
    a644:	00008bc0 	call	8bc <display_hex_on_seven_segment>
		display_hex_on_seven_segment(get_display_from_hex(TimeRemaining%displayTimerAs), 6);
    a648:	d0a7b817 	ldw	r2,-24864(gp)
    a64c:	e0fffd17 	ldw	r3,-12(fp)
    a650:	10c9283a 	div	r4,r2,r3
    a654:	e0fffd17 	ldw	r3,-12(fp)
    a658:	20c7383a 	mul	r3,r4,r3
    a65c:	10c5c83a 	sub	r2,r2,r3
    a660:	1009883a 	mov	r4,r2
    a664:	0000b940 	call	b94 <get_display_from_hex>
    a668:	01400184 	movi	r5,6
    a66c:	1009883a 	mov	r4,r2
    a670:	00008bc0 	call	8bc <display_hex_on_seven_segment>
		OSSemPost(HEXDisplaySem);
    a674:	d0a7b317 	ldw	r2,-24884(gp)
    a678:	1009883a 	mov	r4,r2
    a67c:	00222000 	call	22200 <OSSemPost>
		OSTimeDly(1);
    a680:	01000044 	movi	r4,1
    a684:	0023c8c0 	call	23c8c <OSTimeDly>
	}
    a688:	003fda06 	br	a5f4 <TaskDisplayTimer+0x14>

0000a68c <TaskDisplayLevel>:
 * Writes CurrentLevelNumber on HEX0. HEXDisplaySem is used for guarding.
 * Priority Planning: This task may be low priority.
 * Timing Constraints: This task should be (in practice) no more than approximately 10 atomic
 * operations without counting the DELAY. @50Mhz clock, this is 200ns.
 */
void TaskDisplayLevel(void* pdata) {
    a68c:	defffc04 	addi	sp,sp,-16
    a690:	dfc00315 	stw	ra,12(sp)
    a694:	df000215 	stw	fp,8(sp)
    a698:	df000204 	addi	fp,sp,8
    a69c:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	for (;;) {
		OSSemPend(HEXDisplaySem, 0, &err);
    a6a0:	d0a7b317 	ldw	r2,-24884(gp)
    a6a4:	e1bffe04 	addi	r6,fp,-8
    a6a8:	000b883a 	mov	r5,zero
    a6ac:	1009883a 	mov	r4,r2
    a6b0:	0021e880 	call	21e88 <OSSemPend>
		display_hex_on_seven_segment(get_display_from_hex(CurrentLevelNumber), 0);
    a6b4:	d0a7c117 	ldw	r2,-24828(gp)
    a6b8:	1009883a 	mov	r4,r2
    a6bc:	0000b940 	call	b94 <get_display_from_hex>
    a6c0:	000b883a 	mov	r5,zero
    a6c4:	1009883a 	mov	r4,r2
    a6c8:	00008bc0 	call	8bc <display_hex_on_seven_segment>
		OSSemPost(HEXDisplaySem);
    a6cc:	d0a7b317 	ldw	r2,-24884(gp)
    a6d0:	1009883a 	mov	r4,r2
    a6d4:	00222000 	call	22200 <OSSemPost>
		OSTimeDly(1);
    a6d8:	01000044 	movi	r4,1
    a6dc:	0023c8c0 	call	23c8c <OSTimeDly>
	}
    a6e0:	003fef06 	br	a6a0 <TaskDisplayLevel+0x14>

0000a6e4 <TaskUpdateQuestionPosedLCD>:
 * Priority Planning: This task may be low priority.
 * Timing Constraints: This task should be (in practice) no more than approximately 15 +
 * STRINGLENGTH(s) atomic operations without counting the DELAY. Assuming a worst-case
 * STRINGLENGTH(s) of 16 @50Mhz clock, this is 620ns.
 */
void TaskUpdateQuestionPosedLCD(void* pdata) {
    a6e4:	defffb04 	addi	sp,sp,-20
    a6e8:	dfc00415 	stw	ra,16(sp)
    a6ec:	df000315 	stw	fp,12(sp)
    a6f0:	df000304 	addi	fp,sp,12
    a6f4:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	char* questionPosed;
	for (;;) {
		questionPosed = (char*) OSMboxPend(QuestionPosedMbox, 0, &err);
    a6f8:	d0a7b717 	ldw	r2,-24868(gp)
    a6fc:	e0fffe04 	addi	r3,fp,-8
    a700:	180d883a 	mov	r6,r3
    a704:	000b883a 	mov	r5,zero
    a708:	1009883a 	mov	r4,r2
    a70c:	001fb4c0 	call	1fb4c <OSMboxPend>
    a710:	e0bffd15 	stw	r2,-12(fp)
		OSSemPend(LCDDisplaySem, 0, &err);
    a714:	d0a7b417 	ldw	r2,-24880(gp)
    a718:	e0fffe04 	addi	r3,fp,-8
    a71c:	180d883a 	mov	r6,r3
    a720:	000b883a 	mov	r5,zero
    a724:	1009883a 	mov	r4,r2
    a728:	0021e880 	call	21e88 <OSSemPend>
		LCD_cursor(0,0);
    a72c:	000b883a 	mov	r5,zero
    a730:	0009883a 	mov	r4,zero
    a734:	000045c0 	call	45c <LCD_cursor>
		LCD_text("What is: ");
    a738:	010000b4 	movhi	r4,2
    a73c:	211d6804 	addi	r4,r4,30112
    a740:	00004c80 	call	4c8 <LCD_text>
		LCD_cursor(0,1);
    a744:	01400044 	movi	r5,1
    a748:	0009883a 	mov	r4,zero
    a74c:	000045c0 	call	45c <LCD_cursor>
		LCD_text(questionPosed);
    a750:	e13ffd17 	ldw	r4,-12(fp)
    a754:	00004c80 	call	4c8 <LCD_text>
		OSSemPost(LCDDisplaySem);
    a758:	d0a7b417 	ldw	r2,-24880(gp)
    a75c:	1009883a 	mov	r4,r2
    a760:	00222000 	call	22200 <OSSemPost>
		OSTimeDly(1);
    a764:	01000044 	movi	r4,1
    a768:	0023c8c0 	call	23c8c <OSTimeDly>
	}
    a76c:	003fe206 	br	a6f8 <TaskUpdateQuestionPosedLCD+0x14>

0000a770 <TaskUpdateQuestionNumberLCD>:
 * Priority Planning: This task may be low priority.
 * Timing Constraints: This task should be (in practice) no more than approximately 10 +
 * STRINGLENGTH(s) atomic operations without counting the DELAY. Assuming a worst-case
 * STRINGLENGTH(s) of 4 @50Mhz clock, this is 280ns.
 */
void TaskUpdateQuestionNumberLCD(void* pdata) {
    a770:	defffb04 	addi	sp,sp,-20
    a774:	dfc00415 	stw	ra,16(sp)
    a778:	df000315 	stw	fp,12(sp)
    a77c:	df000304 	addi	fp,sp,12
    a780:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	char* questionNumber;
	for (;;) {
		questionNumber = (char*) OSMboxPend(QuestionNumberMbox, 0, &err);
    a784:	d0a7c417 	ldw	r2,-24816(gp)
    a788:	e0fffe04 	addi	r3,fp,-8
    a78c:	180d883a 	mov	r6,r3
    a790:	000b883a 	mov	r5,zero
    a794:	1009883a 	mov	r4,r2
    a798:	001fb4c0 	call	1fb4c <OSMboxPend>
    a79c:	e0bffd15 	stw	r2,-12(fp)
		OSSemPend(LCDDisplaySem, 0, &err);
    a7a0:	d0a7b417 	ldw	r2,-24880(gp)
    a7a4:	e0fffe04 	addi	r3,fp,-8
    a7a8:	180d883a 	mov	r6,r3
    a7ac:	000b883a 	mov	r5,zero
    a7b0:	1009883a 	mov	r4,r2
    a7b4:	0021e880 	call	21e88 <OSSemPend>
		LCD_cursor(13,0); // TODO position alright?
    a7b8:	000b883a 	mov	r5,zero
    a7bc:	01000344 	movi	r4,13
    a7c0:	000045c0 	call	45c <LCD_cursor>
		LCD_text(questionNumber);
    a7c4:	e13ffd17 	ldw	r4,-12(fp)
    a7c8:	00004c80 	call	4c8 <LCD_text>
		OSSemPost(LCDDisplaySem);
    a7cc:	d0a7b417 	ldw	r2,-24880(gp)
    a7d0:	1009883a 	mov	r4,r2
    a7d4:	00222000 	call	22200 <OSSemPost>
		OSTimeDly(1);
    a7d8:	01000044 	movi	r4,1
    a7dc:	0023c8c0 	call	23c8c <OSTimeDly>
	}
    a7e0:	003fe806 	br	a784 <TaskUpdateQuestionNumberLCD+0x14>

0000a7e4 <TaskDrawAnimationsVGA>:

/* VGA Display Task */
/**
 * TODO
 */
void TaskDrawAnimationsVGA(void* pdata) {
    a7e4:	defffb04 	addi	sp,sp,-20
    a7e8:	dfc00415 	stw	ra,16(sp)
    a7ec:	df000315 	stw	fp,12(sp)
    a7f0:	df000304 	addi	fp,sp,12
    a7f4:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	int value;
	for (;;) {
		value = OSFlagQuery(VGAAnimationCuesFlags, &err);
    a7f8:	d0a7ba17 	ldw	r2,-24856(gp)
    a7fc:	e0fffe04 	addi	r3,fp,-8
    a800:	180b883a 	mov	r5,r3
    a804:	1009883a 	mov	r4,r2
    a808:	001f3040 	call	1f304 <OSFlagQuery>
    a80c:	10bfffcc 	andi	r2,r2,65535
    a810:	e0bffd15 	stw	r2,-12(fp)
		// Reset bg before printing
		spencerBGReset();
    a814:	00012d40 	call	12d4 <spencerBGReset>
		// Print!
		if (value&VGA_ANIMATION_CUES_WIN) {
    a818:	e0bffd17 	ldw	r2,-12(fp)
    a81c:	1080008c 	andi	r2,r2,2
    a820:	10000c26 	beq	r2,zero,a854 <TaskDrawAnimationsVGA+0x70>
			if (1 == AnimationState) {
    a824:	d0a00017 	ldw	r2,-32768(gp)
    a828:	10800058 	cmpnei	r2,r2,1
    a82c:	1000021e 	bne	r2,zero,a838 <TaskDrawAnimationsVGA+0x54>
				spencerWinPose1();
    a830:	00025480 	call	2548 <spencerWinPose1>
    a834:	00003006 	br	a8f8 <TaskDrawAnimationsVGA+0x114>
			} else if (2 == AnimationState) {
    a838:	d0a00017 	ldw	r2,-32768(gp)
    a83c:	10800098 	cmpnei	r2,r2,2
    a840:	1000021e 	bne	r2,zero,a84c <TaskDrawAnimationsVGA+0x68>
				spencerWinPose2();
    a844:	0002fec0 	call	2fec <spencerWinPose2>
    a848:	00002b06 	br	a8f8 <TaskDrawAnimationsVGA+0x114>
			} else {
				spencerWinPose3();
    a84c:	0003b4c0 	call	3b4c <spencerWinPose3>
    a850:	00002906 	br	a8f8 <TaskDrawAnimationsVGA+0x114>
			}
		} else if (value&VGA_ANIMATION_CUES_LOSE) {
    a854:	e0bffd17 	ldw	r2,-12(fp)
    a858:	1080010c 	andi	r2,r2,4
    a85c:	10000c26 	beq	r2,zero,a890 <TaskDrawAnimationsVGA+0xac>
			if (1 == AnimationState) {
    a860:	d0a00017 	ldw	r2,-32768(gp)
    a864:	10800058 	cmpnei	r2,r2,1
    a868:	1000021e 	bne	r2,zero,a874 <TaskDrawAnimationsVGA+0x90>
				spencerLosePose1();
    a86c:	00046ac0 	call	46ac <spencerLosePose1>
    a870:	00002106 	br	a8f8 <TaskDrawAnimationsVGA+0x114>
			} else if (2 == AnimationState) {
    a874:	d0a00017 	ldw	r2,-32768(gp)
    a878:	10800098 	cmpnei	r2,r2,2
    a87c:	1000021e 	bne	r2,zero,a888 <TaskDrawAnimationsVGA+0xa4>
				spencerLosePose2();
    a880:	0004fe00 	call	4fe0 <spencerLosePose2>
    a884:	00001c06 	br	a8f8 <TaskDrawAnimationsVGA+0x114>
			} else {
				spencerLosePose3();
    a888:	00059d80 	call	59d8 <spencerLosePose3>
    a88c:	00001a06 	br	a8f8 <TaskDrawAnimationsVGA+0x114>
			}
		} else if (value&VGA_ANIMATION_CUES_WORRIED) {
    a890:	e0bffd17 	ldw	r2,-12(fp)
    a894:	1080004c 	andi	r2,r2,1
    a898:	10000c26 	beq	r2,zero,a8cc <TaskDrawAnimationsVGA+0xe8>
			if (1 == AnimationState) {
    a89c:	d0a00017 	ldw	r2,-32768(gp)
    a8a0:	10800058 	cmpnei	r2,r2,1
    a8a4:	1000021e 	bne	r2,zero,a8b0 <TaskDrawAnimationsVGA+0xcc>
				spencerTimeRunningOutPose1();
    a8a8:	00063d00 	call	63d0 <spencerTimeRunningOutPose1>
    a8ac:	00001206 	br	a8f8 <TaskDrawAnimationsVGA+0x114>
			} else if (2 == AnimationState) {
    a8b0:	d0a00017 	ldw	r2,-32768(gp)
    a8b4:	10800098 	cmpnei	r2,r2,2
    a8b8:	1000021e 	bne	r2,zero,a8c4 <TaskDrawAnimationsVGA+0xe0>
				spencerTimeRunningOutPose2();
    a8bc:	0006f540 	call	6f54 <spencerTimeRunningOutPose2>
    a8c0:	00000d06 	br	a8f8 <TaskDrawAnimationsVGA+0x114>
			} else {
				spencerTimeRunningOutPose3();
    a8c4:	0007bb00 	call	7bb0 <spencerTimeRunningOutPose3>
    a8c8:	00000b06 	br	a8f8 <TaskDrawAnimationsVGA+0x114>
			}
		} else {
			if (1 == AnimationState) {
    a8cc:	d0a00017 	ldw	r2,-32768(gp)
    a8d0:	10800058 	cmpnei	r2,r2,1
    a8d4:	1000021e 	bne	r2,zero,a8e0 <TaskDrawAnimationsVGA+0xfc>
				spencerNeutralPose1();
    a8d8:	00013180 	call	1318 <spencerNeutralPose1>
    a8dc:	00000606 	br	a8f8 <TaskDrawAnimationsVGA+0x114>
			} else if (2 == AnimationState) {
    a8e0:	d0a00017 	ldw	r2,-32768(gp)
    a8e4:	10800098 	cmpnei	r2,r2,2
    a8e8:	1000021e 	bne	r2,zero,a8f4 <TaskDrawAnimationsVGA+0x110>
				spencerNeutralPose2();
    a8ec:	0001c300 	call	1c30 <spencerNeutralPose2>
    a8f0:	00000106 	br	a8f8 <TaskDrawAnimationsVGA+0x114>
			} else {
				spencerNeutralPose1();
    a8f4:	00013180 	call	1318 <spencerNeutralPose1>
			}
		}
		AnimationState++;
    a8f8:	d0a00017 	ldw	r2,-32768(gp)
    a8fc:	10800044 	addi	r2,r2,1
    a900:	d0a00015 	stw	r2,-32768(gp)
		if (AnimationState > 3) AnimationState = 2;
    a904:	d0a00017 	ldw	r2,-32768(gp)
    a908:	10800110 	cmplti	r2,r2,4
    a90c:	1000021e 	bne	r2,zero,a918 <TaskDrawAnimationsVGA+0x134>
    a910:	00800084 	movi	r2,2
    a914:	d0a00015 	stw	r2,-32768(gp)
		OSTimeDly(4);
    a918:	01000104 	movi	r4,4
    a91c:	0023c8c0 	call	23c8c <OSTimeDly>
	}
    a920:	003fb506 	br	a7f8 <TaskDrawAnimationsVGA+0x14>

0000a924 <TaskDisplayEndOfLevelVGA>:
// Spencer additions start here

/**
 * TODO
 */
void TaskDisplayEndOfLevelVGA(void* pdata) {
    a924:	defff904 	addi	sp,sp,-28
    a928:	dfc00615 	stw	ra,24(sp)
    a92c:	df000515 	stw	fp,20(sp)
    a930:	df000504 	addi	fp,sp,20
    a934:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	double roundPercent;
	char roundPercentStr[5];
	for (;;) {
		OSSemPend(LevelDisplaySem, 0, &err);
    a938:	d0a7b917 	ldw	r2,-24860(gp)
    a93c:	e0fffd04 	addi	r3,fp,-12
    a940:	180d883a 	mov	r6,r3
    a944:	000b883a 	mov	r5,zero
    a948:	1009883a 	mov	r4,r2
    a94c:	0021e880 	call	21e88 <OSSemPend>
		// Reset timer to TIME_TO_DISPLAY_LEVEL_END
		TimeRemaining = TIME_TO_DISPLAY_LEVEL_END;
    a950:	00800284 	movi	r2,10
    a954:	d0a7b815 	stw	r2,-24864(gp)
		// Get percentage for round
		roundPercent = QuestionsCorrect*100.0/NUM_QUESTIONS_PER_LEVEL;
    a958:	d0a7b217 	ldw	r2,-24888(gp)
    a95c:	1009883a 	mov	r4,r2
    a960:	000b0ec0 	call	b0ec <__floatsisf>
    a964:	1007883a 	mov	r3,r2
    a968:	0090b234 	movhi	r2,17096
    a96c:	1887ff32 	custom	252,r3,r3,r2
    a970:	00904034 	movhi	r2,16640
    a974:	1885fff2 	custom	255,r2,r3,r2
    a978:	1009883a 	mov	r4,r2
    a97c:	000b2ec0 	call	b2ec <__extendsfdf2>
    a980:	1009883a 	mov	r4,r2
    a984:	180b883a 	mov	r5,r3
    a988:	e13ffb15 	stw	r4,-20(fp)
    a98c:	e17ffc15 	stw	r5,-16(fp)
		// Put its float value in roundPercentStr
		sprintf(roundPercentStr, "%.1f", roundPercent);
    a990:	e0bffd44 	addi	r2,fp,-11
    a994:	e1bffb17 	ldw	r6,-20(fp)
    a998:	e1fffc17 	ldw	r7,-16(fp)
    a99c:	014000b4 	movhi	r5,2
    a9a0:	295d4404 	addi	r5,r5,29968
    a9a4:	1009883a 	mov	r4,r2
    a9a8:	000b6e40 	call	b6e4 <sprintf>
		// Clear the LCD and reset cursor...?
		OSSemPend(LCDDisplaySem, 0, &err); // Acquire semaphore to write to LCD
    a9ac:	d0a7b417 	ldw	r2,-24880(gp)
    a9b0:	e0fffd04 	addi	r3,fp,-12
    a9b4:	180d883a 	mov	r6,r3
    a9b8:	000b883a 	mov	r5,zero
    a9bc:	1009883a 	mov	r4,r2
    a9c0:	0021e880 	call	21e88 <OSSemPend>
		LCD_clear();
    a9c4:	000056c0 	call	56c <LCD_clear>
		LCD_cursor(0,0);
    a9c8:	000b883a 	mov	r5,zero
    a9cc:	0009883a 	mov	r4,zero
    a9d0:	000045c0 	call	45c <LCD_cursor>
		// Print level score on line 1
		LCD_text("Lvl score: ");
    a9d4:	010000b4 	movhi	r4,2
    a9d8:	211d4604 	addi	r4,r4,29976
    a9dc:	00004c80 	call	4c8 <LCD_text>
		LCD_text(roundPercentStr);
    a9e0:	e0bffd44 	addi	r2,fp,-11
    a9e4:	1009883a 	mov	r4,r2
    a9e8:	00004c80 	call	4c8 <LCD_text>
		// Prepare to print result on line 2
		LCD_cursor(0,1);
    a9ec:	01400044 	movi	r5,1
    a9f0:	0009883a 	mov	r4,zero
    a9f4:	000045c0 	call	45c <LCD_cursor>
		// Get ready to display first frame
		AnimationState = 1;
    a9f8:	00800044 	movi	r2,1
    a9fc:	d0a00015 	stw	r2,-32768(gp)
		// Are we advancing or resetting the level?
		if (roundPercent >= MIN_PERCENTAGE_CORRECT_FOR_PROMOTION) {
    aa00:	000d883a 	mov	r6,zero
    aa04:	01d01274 	movhi	r7,16457
    aa08:	e13ffb17 	ldw	r4,-20(fp)
    aa0c:	e17ffc17 	ldw	r5,-16(fp)
    aa10:	000b2100 	call	b210 <__gedf2>
    aa14:	10001e16 	blt	r2,zero,aa90 <TaskDisplayEndOfLevelVGA+0x16c>
			// Normal next level case
			if (CurrentLevelNumber < MAX_NUMBER_OF_LEVELS - 1) {
    aa18:	d0a7c117 	ldw	r2,-24828(gp)
    aa1c:	10800148 	cmpgei	r2,r2,5
    aa20:	1000091e 	bne	r2,zero,aa48 <TaskDisplayEndOfLevelVGA+0x124>
				LCD_text("Next Lvl Ready!");
    aa24:	010000b4 	movhi	r4,2
    aa28:	211d4904 	addi	r4,r4,29988
    aa2c:	00004c80 	call	4c8 <LCD_text>
				OSSemPost(LCDDisplaySem); // Repost once done
    aa30:	d0a7b417 	ldw	r2,-24880(gp)
    aa34:	1009883a 	mov	r4,r2
    aa38:	00222000 	call	22200 <OSSemPost>
				getReadyGoForwardLevel();
    aa3c:	00091980 	call	9198 <getReadyGoForwardLevel>
				updateLevel();
    aa40:	00092900 	call	9290 <updateLevel>
    aa44:	00000a06 	br	aa70 <TaskDisplayEndOfLevelVGA+0x14c>
			} else { // Game over case
				LCD_text("You win! Replay?");
    aa48:	010000b4 	movhi	r4,2
    aa4c:	211d4d04 	addi	r4,r4,30004
    aa50:	00004c80 	call	4c8 <LCD_text>
				OSSemPost(LCDDisplaySem); // Repost once done
    aa54:	d0a7b417 	ldw	r2,-24880(gp)
    aa58:	1009883a 	mov	r4,r2
    aa5c:	00222000 	call	22200 <OSSemPost>
				// Specifically set the win screen to show for TIME_TO_DISPLAY_END_OF_GAME instead
				TimeRemaining = TIME_TO_DISPLAY_END_OF_GAME;
    aa60:	008018c4 	movi	r2,99
    aa64:	d0a7b815 	stw	r2,-24864(gp)
				getReadyGoForwardLevel();
    aa68:	00091980 	call	9198 <getReadyGoForwardLevel>
				updateLevel();
    aa6c:	00092900 	call	9290 <updateLevel>
			}
			OSFlagPost(VGAAnimationCuesFlags, VGA_ANIMATION_CUES_WIN, OS_FLAG_SET, &err);
    aa70:	d0a7ba17 	ldw	r2,-24856(gp)
    aa74:	e0fffd04 	addi	r3,fp,-12
    aa78:	180f883a 	mov	r7,r3
    aa7c:	01800044 	movi	r6,1
    aa80:	01400084 	movi	r5,2
    aa84:	1009883a 	mov	r4,r2
    aa88:	001ef700 	call	1ef70 <OSFlagPost>
    aa8c:	003faa06 	br	a938 <TaskDisplayEndOfLevelVGA+0x14>
		} else {
			LCD_text("Repeat Lvl...");
    aa90:	010000b4 	movhi	r4,2
    aa94:	211d5204 	addi	r4,r4,30024
    aa98:	00004c80 	call	4c8 <LCD_text>
			OSSemPost(LCDDisplaySem); // Repost once done
    aa9c:	d0a7b417 	ldw	r2,-24880(gp)
    aaa0:	1009883a 	mov	r4,r2
    aaa4:	00222000 	call	22200 <OSSemPost>
			OSFlagPost(VGAAnimationCuesFlags, VGA_ANIMATION_CUES_LOSE, OS_FLAG_SET, &err);
    aaa8:	d0a7ba17 	ldw	r2,-24856(gp)
    aaac:	e0fffd04 	addi	r3,fp,-12
    aab0:	180f883a 	mov	r7,r3
    aab4:	01800044 	movi	r6,1
    aab8:	01400104 	movi	r5,4
    aabc:	1009883a 	mov	r4,r2
    aac0:	001ef700 	call	1ef70 <OSFlagPost>
			clearLevel();
    aac4:	00092180 	call	9218 <clearLevel>
		}
	}
    aac8:	003f9b06 	br	a938 <TaskDisplayEndOfLevelVGA+0x14>

0000aacc <TaskDisplayResultVGA>:
 * Priority Planning: This task should be medium priority, but lower priority than TaskSubmit, and
 * higher priority than TaskUpdateQuestion.
 * Timing Constraints: This task should be (in practice) no more than 30 atomic operations
 * without counting the DELAY. @50Mhz clock, this is 600ns.
 */
void TaskDisplayResultVGA(void* pdata) {
    aacc:	defffa04 	addi	sp,sp,-24
    aad0:	dfc00515 	stw	ra,20(sp)
    aad4:	df000415 	stw	fp,16(sp)
    aad8:	df000404 	addi	fp,sp,16
    aadc:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	char currentCorrectAnswer[11];
	for (;;) {
		OSSemPend(DisplayResultSem, 0, &err);
    aae0:	d0a7c517 	ldw	r2,-24812(gp)
    aae4:	e1bffc04 	addi	r6,fp,-16
    aae8:	000b883a 	mov	r5,zero
    aaec:	1009883a 	mov	r4,r2
    aaf0:	0021e880 	call	21e88 <OSSemPend>
		// Reset timer to TIME_TO_DISPLAY_RESULT
		TimeRemaining = TIME_TO_DISPLAY_RESULT;
    aaf4:	00800144 	movi	r2,5
    aaf8:	d0a7b815 	stw	r2,-24864(gp)
		// Was the answer correct?
		//printf("%u\n",SwitchValue);
		//printf("A test");
		// Get ready to display first frame
		AnimationState = 1;
    aafc:	00800044 	movi	r2,1
    ab00:	d0a00015 	stw	r2,-32768(gp)
		if (CurrentCorrectAnswer == SwitchValue) {
    ab04:	d0e7c017 	ldw	r3,-24832(gp)
    ab08:	d0a7c617 	ldw	r2,-24808(gp)
    ab0c:	1880141e 	bne	r3,r2,ab60 <TaskDisplayResultVGA+0x94>
			// Set LEDG and print CORRECT message
			set_ledg_bit(NUM_QUESTIONS_PER_LEVEL-OnQuestionNum);
    ab10:	d0a7b117 	ldw	r2,-24892(gp)
    ab14:	00c00204 	movi	r3,8
    ab18:	1885c83a 	sub	r2,r3,r2
    ab1c:	1009883a 	mov	r4,r2
    ab20:	000065c0 	call	65c <set_ledg_bit>
			// Write to LCD display.
			VGA_text(45, 4, "CORRECT!");
    ab24:	018000b4 	movhi	r6,2
    ab28:	319d5604 	addi	r6,r6,30040
    ab2c:	01400104 	movi	r5,4
    ab30:	01000b44 	movi	r4,45
    ab34:	0008aa80 	call	8aa8 <VGA_text>
			OSFlagPost(VGAAnimationCuesFlags, VGA_ANIMATION_CUES_WIN, OS_FLAG_SET, &err);
    ab38:	d0a7ba17 	ldw	r2,-24856(gp)
    ab3c:	e1fffc04 	addi	r7,fp,-16
    ab40:	01800044 	movi	r6,1
    ab44:	01400084 	movi	r5,2
    ab48:	1009883a 	mov	r4,r2
    ab4c:	001ef700 	call	1ef70 <OSFlagPost>
			QuestionsCorrect++;
    ab50:	d0a7b217 	ldw	r2,-24888(gp)
    ab54:	10800044 	addi	r2,r2,1
    ab58:	d0a7b215 	stw	r2,-24888(gp)
    ab5c:	003fe006 	br	aae0 <TaskDisplayResultVGA+0x14>
		} else {
			// Print INCORRECT message
			VGA_text(45, 4, "INCORRECT");
    ab60:	018000b4 	movhi	r6,2
    ab64:	319d5904 	addi	r6,r6,30052
    ab68:	01400104 	movi	r5,4
    ab6c:	01000b44 	movi	r4,45
    ab70:	0008aa80 	call	8aa8 <VGA_text>
			OSFlagPost(VGAAnimationCuesFlags, VGA_ANIMATION_CUES_LOSE, OS_FLAG_SET, &err);
    ab74:	d0a7ba17 	ldw	r2,-24856(gp)
    ab78:	e1fffc04 	addi	r7,fp,-16
    ab7c:	01800044 	movi	r6,1
    ab80:	01400104 	movi	r5,4
    ab84:	1009883a 	mov	r4,r2
    ab88:	001ef700 	call	1ef70 <OSFlagPost>
			if (inHexMode()) {
    ab8c:	000909c0 	call	909c <inHexMode>
    ab90:	10000826 	beq	r2,zero,abb4 <TaskDisplayResultVGA+0xe8>
				sprintf(currentCorrectAnswer, "0x%X", CurrentCorrectAnswer);
    ab94:	d0e7c017 	ldw	r3,-24832(gp)
    ab98:	e0bffc44 	addi	r2,fp,-15
    ab9c:	180d883a 	mov	r6,r3
    aba0:	014000b4 	movhi	r5,2
    aba4:	295d5c04 	addi	r5,r5,30064
    aba8:	1009883a 	mov	r4,r2
    abac:	000b6e40 	call	b6e4 <sprintf>
			} else {
				sprintf(currentCorrectAnswer, "%d", CurrentCorrectAnswer);
			}	goto start;
    abb0:	00000706 	br	abd0 <TaskDisplayResultVGA+0x104>
			VGA_text(45, 4, "INCORRECT");
			OSFlagPost(VGAAnimationCuesFlags, VGA_ANIMATION_CUES_LOSE, OS_FLAG_SET, &err);
			if (inHexMode()) {
				sprintf(currentCorrectAnswer, "0x%X", CurrentCorrectAnswer);
			} else {
				sprintf(currentCorrectAnswer, "%d", CurrentCorrectAnswer);
    abb4:	d0e7c017 	ldw	r3,-24832(gp)
    abb8:	e0bffc44 	addi	r2,fp,-15
    abbc:	180d883a 	mov	r6,r3
    abc0:	014000b4 	movhi	r5,2
    abc4:	295d5e04 	addi	r5,r5,30072
    abc8:	1009883a 	mov	r4,r2
    abcc:	000b6e40 	call	b6e4 <sprintf>
			}	goto start;
    abd0:	0001883a 	nop
			start:
			VGA_text(35, 50, "Correct Answer: ");
    abd4:	018000b4 	movhi	r6,2
    abd8:	319d6b04 	addi	r6,r6,30124
    abdc:	01400c84 	movi	r5,50
    abe0:	010008c4 	movi	r4,35
    abe4:	0008aa80 	call	8aa8 <VGA_text>
			VGA_text(51, 50, currentCorrectAnswer);
    abe8:	e0bffc44 	addi	r2,fp,-15
    abec:	100d883a 	mov	r6,r2
    abf0:	01400c84 	movi	r5,50
    abf4:	01000cc4 	movi	r4,51
    abf8:	0008aa80 	call	8aa8 <VGA_text>
		}
	}
    abfc:	003fb806 	br	aae0 <TaskDisplayResultVGA+0x14>

0000ac00 <TaskDisplayTimerVGA>:
 * Writes TimeRemaining to VGA. HEXDisplaySem is used for guarding.
 * Priority Planning: This task may be low priority.
 * Timing Constraints: This task should be (in practice) no more than approximately 10 atomic
 * operations without counting the DELAY. @50Mhz clock, this is 200ns.
 */
void TaskDisplayTimerVGA(void* pdata) {
    ac00:	deffa304 	addi	sp,sp,-372
    ac04:	dfc05c15 	stw	ra,368(sp)
    ac08:	df005b15 	stw	fp,364(sp)
    ac0c:	df005b04 	addi	fp,sp,364
    ac10:	e13fff15 	stw	r4,-4(fp)
	char titleTestBasic2[79];
	char titleTestBasic3[78];
	char titleTestBasic4[79];

	for (;;) {
		OSSemPend(HEXDisplaySem, 0, &err);
    ac14:	d0a7b317 	ldw	r2,-24884(gp)
    ac18:	e0ffa604 	addi	r3,fp,-360
    ac1c:	180d883a 	mov	r6,r3
    ac20:	000b883a 	mov	r5,zero
    ac24:	1009883a 	mov	r4,r2
    ac28:	0021e880 	call	21e88 <OSSemPend>
		if (inHexMode()) {
    ac2c:	000909c0 	call	909c <inHexMode>
    ac30:	10000326 	beq	r2,zero,ac40 <TaskDisplayTimerVGA+0x40>
			displayTimerAs = 16;
    ac34:	00800404 	movi	r2,16
    ac38:	e0bfa515 	stw	r2,-364(fp)
    ac3c:	00000206 	br	ac48 <TaskDisplayTimerVGA+0x48>
		} else {
			displayTimerAs = 10;
    ac40:	00800284 	movi	r2,10
    ac44:	e0bfa515 	stw	r2,-364(fp)
		}
		display_hex_on_seven_segment(get_display_from_hex(TimeRemaining/displayTimerAs), 7);
    ac48:	d0e7b817 	ldw	r3,-24864(gp)
    ac4c:	e0bfa517 	ldw	r2,-364(fp)
    ac50:	1885283a 	div	r2,r3,r2
    ac54:	1009883a 	mov	r4,r2
    ac58:	0000b940 	call	b94 <get_display_from_hex>
    ac5c:	014001c4 	movi	r5,7
    ac60:	1009883a 	mov	r4,r2
    ac64:	00008bc0 	call	8bc <display_hex_on_seven_segment>
		display_hex_on_seven_segment(get_display_from_hex(TimeRemaining%displayTimerAs), 6);
    ac68:	d0a7b817 	ldw	r2,-24864(gp)
    ac6c:	e0ffa517 	ldw	r3,-364(fp)
    ac70:	10c9283a 	div	r4,r2,r3
    ac74:	e0ffa517 	ldw	r3,-364(fp)
    ac78:	20c7383a 	mul	r3,r4,r3
    ac7c:	10c5c83a 	sub	r2,r2,r3
    ac80:	1009883a 	mov	r4,r2
    ac84:	0000b940 	call	b94 <get_display_from_hex>
    ac88:	01400184 	movi	r5,6
    ac8c:	1009883a 	mov	r4,r2
    ac90:	00008bc0 	call	8bc <display_hex_on_seven_segment>

		// Defining position values (so that graphic can easily be repositioned later if necessary)

		sprintf(test, "Spencer was here");
    ac94:	e0ffa644 	addi	r3,fp,-359
    ac98:	008000b4 	movhi	r2,2
    ac9c:	109d7004 	addi	r2,r2,30144
    aca0:	1009883a 	mov	r4,r2
    aca4:	00800444 	movi	r2,17
    aca8:	100d883a 	mov	r6,r2
    acac:	200b883a 	mov	r5,r4
    acb0:	1809883a 	mov	r4,r3
    acb4:	000b4600 	call	b460 <memcpy>
		//VGA_text(32,40,test);

		// Move if you will, but DO NOT DELETE, NO MATTER WHAT
		// http://patorjk.com/software/taag/#p=display&f=Small&t=BINARY%20MATH%20GAME
		sprintf(titleTestBasic, " ___ ___ _  _   _   _____   __  __  __   _ _____ _  _    ___   _   __  __ ___ ");
    acb8:	008000b4 	movhi	r2,2
    acbc:	109d7504 	addi	r2,r2,30164
    acc0:	e0ffb044 	addi	r3,fp,-319
    acc4:	1009883a 	mov	r4,r2
    acc8:	008013c4 	movi	r2,79
    accc:	100d883a 	mov	r6,r2
    acd0:	200b883a 	mov	r5,r4
    acd4:	1809883a 	mov	r4,r3
    acd8:	000b4600 	call	b460 <memcpy>
		sprintf(titleTestBasic2, "| _ )_ _| \\| | /_\\ | _ \\ \\ / / |  \\/  | /_\\_   _| || |  / __| /_\\ |  \\/  | __|");
    acdc:	008000b4 	movhi	r2,2
    ace0:	109d8904 	addi	r2,r2,30244
    ace4:	e0ffc404 	addi	r3,fp,-240
    ace8:	1009883a 	mov	r4,r2
    acec:	008013c4 	movi	r2,79
    acf0:	100d883a 	mov	r6,r2
    acf4:	200b883a 	mov	r5,r4
    acf8:	1809883a 	mov	r4,r3
    acfc:	000b4600 	call	b460 <memcpy>
		sprintf(titleTestBasic3, "| _ \\| || .` |/ _ \\|   /\\ v /  | |\\/| |/ _ \\| | | __ | | (_ |/ _ \\| |\\/| | _|");
    ad00:	008000b4 	movhi	r2,2
    ad04:	109d9d04 	addi	r2,r2,30324
    ad08:	e0ffd7c4 	addi	r3,fp,-161
    ad0c:	1009883a 	mov	r4,r2
    ad10:	00801384 	movi	r2,78
    ad14:	100d883a 	mov	r6,r2
    ad18:	200b883a 	mov	r5,r4
    ad1c:	1809883a 	mov	r4,r3
    ad20:	000b4600 	call	b460 <memcpy>
		sprintf(titleTestBasic4, "|___/___|_|\\_/_/ \\_\\_|_\\ |_|   |_|  |_/_/ \\_\\_| |_||_|  \\___/_/ \\_\\_|  |_|___|");
    ad24:	008000b4 	movhi	r2,2
    ad28:	109db104 	addi	r2,r2,30404
    ad2c:	e0ffeb44 	addi	r3,fp,-83
    ad30:	1009883a 	mov	r4,r2
    ad34:	008013c4 	movi	r2,79
    ad38:	100d883a 	mov	r6,r2
    ad3c:	200b883a 	mov	r5,r4
    ad40:	1809883a 	mov	r4,r3
    ad44:	000b4600 	call	b460 <memcpy>
		//VGA_text(1, 10, titleTestBasic3);
		//VGA_text(1, 11, titleTestBasic4);



		OSSemPost(HEXDisplaySem);
    ad48:	d0a7b317 	ldw	r2,-24884(gp)
    ad4c:	1009883a 	mov	r4,r2
    ad50:	00222000 	call	22200 <OSSemPost>
		OSTimeDly(1);
    ad54:	01000044 	movi	r4,1
    ad58:	0023c8c0 	call	23c8c <OSTimeDly>
	}
    ad5c:	003fad06 	br	ac14 <TaskDisplayTimerVGA+0x14>

0000ad60 <TaskDisplayLevelVGA>:
 * Writes CurrentLevelNumber to the VGA. HEXDisplaySem is used for guarding.
 * Priority Planning: This task may be low priority.
 * Timing Constraints: This task should be (in practice) no more than approximately 10 atomic
 * operations without counting the DELAY. @50Mhz clock, this is 200ns.
 */
void TaskDisplayLevelVGA(void* pdata) {
    ad60:	defffc04 	addi	sp,sp,-16
    ad64:	dfc00315 	stw	ra,12(sp)
    ad68:	df000215 	stw	fp,8(sp)
    ad6c:	df000204 	addi	fp,sp,8
    ad70:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	for (;;) {
		OSSemPend(HEXDisplaySem, 0, &err);
    ad74:	d0a7b317 	ldw	r2,-24884(gp)
    ad78:	e1bffe04 	addi	r6,fp,-8
    ad7c:	000b883a 	mov	r5,zero
    ad80:	1009883a 	mov	r4,r2
    ad84:	0021e880 	call	21e88 <OSSemPend>
		display_hex_on_seven_segment(get_display_from_hex(CurrentLevelNumber), 0);
    ad88:	d0a7c117 	ldw	r2,-24828(gp)
    ad8c:	1009883a 	mov	r4,r2
    ad90:	0000b940 	call	b94 <get_display_from_hex>
    ad94:	000b883a 	mov	r5,zero
    ad98:	1009883a 	mov	r4,r2
    ad9c:	00008bc0 	call	8bc <display_hex_on_seven_segment>
		OSSemPost(HEXDisplaySem);
    ada0:	d0a7b317 	ldw	r2,-24884(gp)
    ada4:	1009883a 	mov	r4,r2
    ada8:	00222000 	call	22200 <OSSemPost>
		OSTimeDly(1);
    adac:	01000044 	movi	r4,1
    adb0:	0023c8c0 	call	23c8c <OSTimeDly>
	}
    adb4:	003fef06 	br	ad74 <TaskDisplayLevelVGA+0x14>

0000adb8 <TaskUpdateQuestionPosedVGA>:
 * Priority Planning: This task may be low priority.
 * Timing Constraints: This task should be (in practice) no more than approximately 15 +
 * STRINGLENGTH(s) atomic operations without counting the DELAY. Assuming a worst-case
 * STRINGLENGTH(s) of 16 @50Mhz clock, this is 620ns.
 */
void TaskUpdateQuestionPosedVGA(void* pdata) {
    adb8:	defffb04 	addi	sp,sp,-20
    adbc:	dfc00415 	stw	ra,16(sp)
    adc0:	df000315 	stw	fp,12(sp)
    adc4:	df000304 	addi	fp,sp,12
    adc8:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	char* questionPosed;
	for (;;) {
		questionPosed = (char*) OSMboxPend(QuestionPosedMbox, 0, &err);
    adcc:	d0a7b717 	ldw	r2,-24868(gp)
    add0:	e0fffe04 	addi	r3,fp,-8
    add4:	180d883a 	mov	r6,r3
    add8:	000b883a 	mov	r5,zero
    addc:	1009883a 	mov	r4,r2
    ade0:	001fb4c0 	call	1fb4c <OSMboxPend>
    ade4:	e0bffd15 	stw	r2,-12(fp)
		OSSemPend(VGADisplaySem, 0, &err);
    ade8:	d0a7be17 	ldw	r2,-24840(gp)
    adec:	e0fffe04 	addi	r3,fp,-8
    adf0:	180d883a 	mov	r6,r3
    adf4:	000b883a 	mov	r5,zero
    adf8:	1009883a 	mov	r4,r2
    adfc:	0021e880 	call	21e88 <OSSemPend>
		LCD_cursor(0,0);
    ae00:	000b883a 	mov	r5,zero
    ae04:	0009883a 	mov	r4,zero
    ae08:	000045c0 	call	45c <LCD_cursor>
		LCD_text("What is: ");
    ae0c:	010000b4 	movhi	r4,2
    ae10:	211d6804 	addi	r4,r4,30112
    ae14:	00004c80 	call	4c8 <LCD_text>
		LCD_cursor(0,1);
    ae18:	01400044 	movi	r5,1
    ae1c:	0009883a 	mov	r4,zero
    ae20:	000045c0 	call	45c <LCD_cursor>
		LCD_text(questionPosed);
    ae24:	e13ffd17 	ldw	r4,-12(fp)
    ae28:	00004c80 	call	4c8 <LCD_text>
		OSSemPost(VGADisplaySem);
    ae2c:	d0a7be17 	ldw	r2,-24840(gp)
    ae30:	1009883a 	mov	r4,r2
    ae34:	00222000 	call	22200 <OSSemPost>
		OSTimeDly(1);
    ae38:	01000044 	movi	r4,1
    ae3c:	0023c8c0 	call	23c8c <OSTimeDly>
	}
    ae40:	003fe206 	br	adcc <TaskUpdateQuestionPosedVGA+0x14>

0000ae44 <TaskUpdateQuestionNumberVGA>:
 * Priority Planning: This task may be low priority.
 * Timing Constraints: This task should be (in practice) no more than approximately 10 +
 * STRINGLENGTH(s) atomic operations without counting the DELAY. Assuming a worst-case
 * STRINGLENGTH(s) of 4 @50Mhz clock, this is 280ns.
 */
void TaskUpdateQuestionNumberVGA(void* pdata) {
    ae44:	defffb04 	addi	sp,sp,-20
    ae48:	dfc00415 	stw	ra,16(sp)
    ae4c:	df000315 	stw	fp,12(sp)
    ae50:	df000304 	addi	fp,sp,12
    ae54:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	char* questionNumber;
	for (;;) {
		questionNumber = (char*) OSMboxPend(QuestionNumberMbox, 0, &err);
    ae58:	d0a7c417 	ldw	r2,-24816(gp)
    ae5c:	e0fffe04 	addi	r3,fp,-8
    ae60:	180d883a 	mov	r6,r3
    ae64:	000b883a 	mov	r5,zero
    ae68:	1009883a 	mov	r4,r2
    ae6c:	001fb4c0 	call	1fb4c <OSMboxPend>
    ae70:	e0bffd15 	stw	r2,-12(fp)
		OSSemPend(VGADisplaySem, 0, &err);
    ae74:	d0a7be17 	ldw	r2,-24840(gp)
    ae78:	e0fffe04 	addi	r3,fp,-8
    ae7c:	180d883a 	mov	r6,r3
    ae80:	000b883a 	mov	r5,zero
    ae84:	1009883a 	mov	r4,r2
    ae88:	0021e880 	call	21e88 <OSSemPend>
		VGA_text(500, 64, questionNumber);
    ae8c:	e1bffd17 	ldw	r6,-12(fp)
    ae90:	01401004 	movi	r5,64
    ae94:	01007d04 	movi	r4,500
    ae98:	0008aa80 	call	8aa8 <VGA_text>
		OSSemPost(VGADisplaySem);
    ae9c:	d0a7be17 	ldw	r2,-24840(gp)
    aea0:	1009883a 	mov	r4,r2
    aea4:	00222000 	call	22200 <OSSemPost>
		OSTimeDly(1);
    aea8:	01000044 	movi	r4,1
    aeac:	0023c8c0 	call	23c8c <OSTimeDly>
	}
    aeb0:	003fe906 	br	ae58 <TaskUpdateQuestionNumberVGA+0x14>

0000aeb4 <main>:
}
// Spencer additions end here!


/* The main function creates two task and starts multi-tasking */
int main(void) {
    aeb4:	defff604 	addi	sp,sp,-40
    aeb8:	dfc00915 	stw	ra,36(sp)
    aebc:	df000815 	stw	fp,32(sp)
    aec0:	df000804 	addi	fp,sp,32
	// General error var...
	INT8U err;

	// Reset generalities...
	explode_seven_segment();
    aec4:	000129c0 	call	129c <explode_seven_segment>
	LCD_clear();
    aec8:	000056c0 	call	56c <LCD_clear>
	set_ledg(0);
    aecc:	0009883a 	mov	r4,zero
    aed0:	00005d40 	call	5d4 <set_ledg>
	set_ledr(0);
    aed4:	0009883a 	mov	r4,zero
    aed8:	00005a40 	call	5a4 <set_ledr>
	// Spencer additions start here
	// Clear the screen (render the entire screen black)
	VGA_box(0,0,640,480,0xFFFF);
    aedc:	00bfffc4 	movi	r2,-1
    aee0:	d8800015 	stw	r2,0(sp)
    aee4:	01c07804 	movi	r7,480
    aee8:	0180a004 	movi	r6,640
    aeec:	000b883a 	mov	r5,zero
    aef0:	0009883a 	mov	r4,zero
    aef4:	00089f00 	call	89f0 <VGA_box>
	// Clear the character buffer
	int i = 0;
    aef8:	e03ffd15 	stw	zero,-12(fp)
	int j = 0;
    aefc:	e03ffe15 	stw	zero,-8(fp)
	while (i <= 80)
    af00:	00001006 	br	af44 <main+0x90>
	{
		j = 0;
    af04:	e03ffe15 	stw	zero,-8(fp)
		while (j <= 60)
    af08:	00000806 	br	af2c <main+0x78>
		{
			VGA_text(i, j, " ");
    af0c:	018000b4 	movhi	r6,2
    af10:	319d3b04 	addi	r6,r6,29932
    af14:	e17ffe17 	ldw	r5,-8(fp)
    af18:	e13ffd17 	ldw	r4,-12(fp)
    af1c:	0008aa80 	call	8aa8 <VGA_text>
			j++;
    af20:	e0bffe17 	ldw	r2,-8(fp)
    af24:	10800044 	addi	r2,r2,1
    af28:	e0bffe15 	stw	r2,-8(fp)
	int i = 0;
	int j = 0;
	while (i <= 80)
	{
		j = 0;
		while (j <= 60)
    af2c:	e0bffe17 	ldw	r2,-8(fp)
    af30:	10800f50 	cmplti	r2,r2,61
    af34:	103ff51e 	bne	r2,zero,af0c <main+0x58>
		{
			VGA_text(i, j, " ");
			j++;
		}
		i++;
    af38:	e0bffd17 	ldw	r2,-12(fp)
    af3c:	10800044 	addi	r2,r2,1
    af40:	e0bffd15 	stw	r2,-12(fp)
	// Clear the screen (render the entire screen black)
	VGA_box(0,0,640,480,0xFFFF);
	// Clear the character buffer
	int i = 0;
	int j = 0;
	while (i <= 80)
    af44:	e0bffd17 	ldw	r2,-12(fp)
    af48:	10801450 	cmplti	r2,r2,81
    af4c:	103fed1e 	bne	r2,zero,af04 <main+0x50>
		i++;
	}
	// Spencer additions end here

	// Prepare randomization...
	srand((unsigned)OSTimeGet());
    af50:	00240c40 	call	240c4 <OSTimeGet>
    af54:	1009883a 	mov	r4,r2
    af58:	000b6140 	call	b614 <srand>

	// Make levels...
	populateLevels();
    af5c:	0008b3c0 	call	8b3c <populateLevels>

	// Set current level to Level 0 on startup
	CurrentLevelNumber = 0; // Normally start at 0, start at other levels for debugging
    af60:	d027c115 	stw	zero,-24828(gp)
	CurrentLevel = Levels[CurrentLevelNumber];
    af64:	d127c117 	ldw	r4,-24828(gp)
    af68:	00800134 	movhi	r2,4
    af6c:	109e6504 	addi	r2,r2,31124
    af70:	00c00174 	movhi	r3,5
    af74:	18e66b04 	addi	r3,r3,-26196
    af78:	21000624 	muli	r4,r4,24
    af7c:	1907883a 	add	r3,r3,r4
    af80:	19000017 	ldw	r4,0(r3)
    af84:	11000015 	stw	r4,0(r2)
    af88:	19000117 	ldw	r4,4(r3)
    af8c:	11000115 	stw	r4,4(r2)
    af90:	19000217 	ldw	r4,8(r3)
    af94:	11000215 	stw	r4,8(r2)
    af98:	19000317 	ldw	r4,12(r3)
    af9c:	11000315 	stw	r4,12(r2)
    afa0:	19000417 	ldw	r4,16(r3)
    afa4:	11000415 	stw	r4,16(r2)
    afa8:	18c00517 	ldw	r3,20(r3)
    afac:	10c00515 	stw	r3,20(r2)

	// Make Semaphores
	KeyPress1Sem = OSSemCreate(0);
    afb0:	0009883a 	mov	r4,zero
    afb4:	0021b700 	call	21b70 <OSSemCreate>
    afb8:	d0a7bf15 	stw	r2,-24836(gp)
	KeyPress2Sem = OSSemCreate(0);
    afbc:	0009883a 	mov	r4,zero
    afc0:	0021b700 	call	21b70 <OSSemCreate>
    afc4:	d0a7bd15 	stw	r2,-24844(gp)
	KeyPress3Sem = OSSemCreate(0);
    afc8:	0009883a 	mov	r4,zero
    afcc:	0021b700 	call	21b70 <OSSemCreate>
    afd0:	d0a7b515 	stw	r2,-24876(gp)
	SwitchValueSem = OSSemCreate(1);
    afd4:	01000044 	movi	r4,1
    afd8:	0021b700 	call	21b70 <OSSemCreate>
    afdc:	d0a7bb15 	stw	r2,-24852(gp)
	UpdateQuestionSem = OSSemCreate(1);
    afe0:	01000044 	movi	r4,1
    afe4:	0021b700 	call	21b70 <OSSemCreate>
    afe8:	d0a7b615 	stw	r2,-24872(gp)
	DisplayResultSem = OSSemCreate(0);
    afec:	0009883a 	mov	r4,zero
    aff0:	0021b700 	call	21b70 <OSSemCreate>
    aff4:	d0a7c515 	stw	r2,-24812(gp)
	LevelDisplaySem = OSSemCreate(0);
    aff8:	0009883a 	mov	r4,zero
    affc:	0021b700 	call	21b70 <OSSemCreate>
    b000:	d0a7b915 	stw	r2,-24860(gp)
	HEXDisplaySem = OSSemCreate(1);
    b004:	01000044 	movi	r4,1
    b008:	0021b700 	call	21b70 <OSSemCreate>
    b00c:	d0a7b315 	stw	r2,-24884(gp)
	VGADisplaySem = OSSemCreate(1);
    b010:	01000044 	movi	r4,1
    b014:	0021b700 	call	21b70 <OSSemCreate>
    b018:	d0a7be15 	stw	r2,-24840(gp)
	LCDDisplaySem = OSSemCreate(1);
    b01c:	01000044 	movi	r4,1
    b020:	0021b700 	call	21b70 <OSSemCreate>
    b024:	d0a7b415 	stw	r2,-24880(gp)

	// Make Mailboxes
	QuestionPosedMbox = OSMboxCreate((void*)0);
    b028:	0009883a 	mov	r4,zero
    b02c:	001f8380 	call	1f838 <OSMboxCreate>
    b030:	d0a7b715 	stw	r2,-24868(gp)
	QuestionNumberMbox = OSMboxCreate((void*)0);
    b034:	0009883a 	mov	r4,zero
    b038:	001f8380 	call	1f838 <OSMboxCreate>
    b03c:	d0a7c415 	stw	r2,-24816(gp)

	// Make Flags
	LevelGoFlags = OSFlagCreate(0x00, &err);
    b040:	e0bfff04 	addi	r2,fp,-4
    b044:	100b883a 	mov	r5,r2
    b048:	0009883a 	mov	r4,zero
    b04c:	001e3940 	call	1e394 <OSFlagCreate>
    b050:	d0a7c315 	stw	r2,-24820(gp)
	ProgramStateFlags = OSFlagCreate(0x00, &err);
    b054:	e0bfff04 	addi	r2,fp,-4
    b058:	100b883a 	mov	r5,r2
    b05c:	0009883a 	mov	r4,zero
    b060:	001e3940 	call	1e394 <OSFlagCreate>
    b064:	d0a7bc15 	stw	r2,-24848(gp)
	ResetStateFlags = OSFlagCreate(0x00, &err);
    b068:	e0bfff04 	addi	r2,fp,-4
    b06c:	100b883a 	mov	r5,r2
    b070:	0009883a 	mov	r4,zero
    b074:	001e3940 	call	1e394 <OSFlagCreate>
    b078:	d0a7c215 	stw	r2,-24824(gp)
	VGAAnimationCuesFlags = OSFlagCreate(0x00, &err);
    b07c:	e0bfff04 	addi	r2,fp,-4
    b080:	100b883a 	mov	r5,r2
    b084:	0009883a 	mov	r4,zero
    b088:	001e3940 	call	1e394 <OSFlagCreate>
    b08c:	d0a7ba15 	stw	r2,-24856(gp)

	// Create TaskStartup to start other tasks
	OSTaskCreateExt(TaskStartup,
    b090:	d8000415 	stw	zero,16(sp)
    b094:	d8000315 	stw	zero,12(sp)
    b098:	00820004 	movi	r2,2048
    b09c:	d8800215 	stw	r2,8(sp)
    b0a0:	008000f4 	movhi	r2,3
    b0a4:	10866504 	addi	r2,r2,6548
    b0a8:	d8800115 	stw	r2,4(sp)
    b0ac:	00800044 	movi	r2,1
    b0b0:	d8800015 	stw	r2,0(sp)
    b0b4:	01c00044 	movi	r7,1
    b0b8:	018000f4 	movhi	r6,3
    b0bc:	318e6404 	addi	r6,r6,14736
    b0c0:	000b883a 	mov	r5,zero
    b0c4:	01000074 	movhi	r4,1
    b0c8:	21278a04 	addi	r4,r4,-25048
    b0cc:	0022bbc0 	call	22bbc <OSTaskCreateExt>
			TASK_STACKSIZE,
			NULL,
			0);

	// START!
	OSStart();
    b0d0:	001ca4c0 	call	1ca4c <OSStart>
	return 0;
    b0d4:	0005883a 	mov	r2,zero
}
    b0d8:	e037883a 	mov	sp,fp
    b0dc:	dfc00117 	ldw	ra,4(sp)
    b0e0:	df000017 	ldw	fp,0(sp)
    b0e4:	dec00204 	addi	sp,sp,8
    b0e8:	f800283a 	ret

0000b0ec <__floatsisf>:
    b0ec:	defffd04 	addi	sp,sp,-12
    b0f0:	dfc00215 	stw	ra,8(sp)
    b0f4:	dc400115 	stw	r17,4(sp)
    b0f8:	dc000015 	stw	r16,0(sp)
    b0fc:	20003526 	beq	r4,zero,b1d4 <__floatsisf+0xe8>
    b100:	2021883a 	mov	r16,r4
    b104:	2022d7fa 	srli	r17,r4,31
    b108:	20003616 	blt	r4,zero,b1e4 <__floatsisf+0xf8>
    b10c:	8009883a 	mov	r4,r16
    b110:	000b3fc0 	call	b3fc <__clzsi2>
    b114:	00c02784 	movi	r3,158
    b118:	1887c83a 	sub	r3,r3,r2
    b11c:	01002584 	movi	r4,150
    b120:	20c01416 	blt	r4,r3,b174 <__floatsisf+0x88>
    b124:	20c9c83a 	sub	r4,r4,r3
    b128:	8120983a 	sll	r16,r16,r4
    b12c:	00802034 	movhi	r2,128
    b130:	10bfffc4 	addi	r2,r2,-1
    b134:	8809883a 	mov	r4,r17
    b138:	80a0703a 	and	r16,r16,r2
    b13c:	18803fcc 	andi	r2,r3,255
    b140:	100695fa 	slli	r3,r2,23
    b144:	20803fcc 	andi	r2,r4,255
    b148:	100897fa 	slli	r4,r2,31
    b14c:	00802034 	movhi	r2,128
    b150:	10bfffc4 	addi	r2,r2,-1
    b154:	8084703a 	and	r2,r16,r2
    b158:	10c4b03a 	or	r2,r2,r3
    b15c:	1104b03a 	or	r2,r2,r4
    b160:	dfc00217 	ldw	ra,8(sp)
    b164:	dc400117 	ldw	r17,4(sp)
    b168:	dc000017 	ldw	r16,0(sp)
    b16c:	dec00304 	addi	sp,sp,12
    b170:	f800283a 	ret
    b174:	01002644 	movi	r4,153
    b178:	20c01c16 	blt	r4,r3,b1ec <__floatsisf+0x100>
    b17c:	20c9c83a 	sub	r4,r4,r3
    b180:	8120983a 	sll	r16,r16,r4
    b184:	013f0034 	movhi	r4,64512
    b188:	213fffc4 	addi	r4,r4,-1
    b18c:	814001cc 	andi	r5,r16,7
    b190:	8108703a 	and	r4,r16,r4
    b194:	28000426 	beq	r5,zero,b1a8 <__floatsisf+0xbc>
    b198:	840003cc 	andi	r16,r16,15
    b19c:	01400104 	movi	r5,4
    b1a0:	81400126 	beq	r16,r5,b1a8 <__floatsisf+0xbc>
    b1a4:	2149883a 	add	r4,r4,r5
    b1a8:	2141002c 	andhi	r5,r4,1024
    b1ac:	28000526 	beq	r5,zero,b1c4 <__floatsisf+0xd8>
    b1b0:	00c027c4 	movi	r3,159
    b1b4:	1887c83a 	sub	r3,r3,r2
    b1b8:	00bf0034 	movhi	r2,64512
    b1bc:	10bfffc4 	addi	r2,r2,-1
    b1c0:	2088703a 	and	r4,r4,r2
    b1c4:	202091ba 	slli	r16,r4,6
    b1c8:	8809883a 	mov	r4,r17
    b1cc:	8020d27a 	srli	r16,r16,9
    b1d0:	003fda06 	br	b13c <__floatsisf+0x50>
    b1d4:	0009883a 	mov	r4,zero
    b1d8:	0007883a 	mov	r3,zero
    b1dc:	0021883a 	mov	r16,zero
    b1e0:	003fd606 	br	b13c <__floatsisf+0x50>
    b1e4:	0121c83a 	sub	r16,zero,r4
    b1e8:	003fc806 	br	b10c <__floatsisf+0x20>
    b1ec:	01002e44 	movi	r4,185
    b1f0:	20c9c83a 	sub	r4,r4,r3
    b1f4:	01400144 	movi	r5,5
    b1f8:	8108983a 	sll	r4,r16,r4
    b1fc:	288bc83a 	sub	r5,r5,r2
    b200:	8160d83a 	srl	r16,r16,r5
    b204:	2008c03a 	cmpne	r4,r4,zero
    b208:	8120b03a 	or	r16,r16,r4
    b20c:	003fdd06 	br	b184 <__floatsisf+0x98>

0000b210 <__gedf2>:
    b210:	2804d53a 	srli	r2,r5,20
    b214:	3806d53a 	srli	r3,r7,20
    b218:	02000434 	movhi	r8,16
    b21c:	423fffc4 	addi	r8,r8,-1
    b220:	1081ffcc 	andi	r2,r2,2047
    b224:	0241ffc4 	movi	r9,2047
    b228:	2a14703a 	and	r10,r5,r8
    b22c:	18c1ffcc 	andi	r3,r3,2047
    b230:	3a10703a 	and	r8,r7,r8
    b234:	280ad7fa 	srli	r5,r5,31
    b238:	380ed7fa 	srli	r7,r7,31
    b23c:	12401d26 	beq	r2,r9,b2b4 <__gedf2+0xa4>
    b240:	0241ffc4 	movi	r9,2047
    b244:	1a401226 	beq	r3,r9,b290 <__gedf2+0x80>
    b248:	1000081e 	bne	r2,zero,b26c <__gedf2+0x5c>
    b24c:	2296b03a 	or	r11,r4,r10
    b250:	5813003a 	cmpeq	r9,r11,zero
    b254:	1800091e 	bne	r3,zero,b27c <__gedf2+0x6c>
    b258:	3218b03a 	or	r12,r6,r8
    b25c:	6000071e 	bne	r12,zero,b27c <__gedf2+0x6c>
    b260:	0005883a 	mov	r2,zero
    b264:	5800101e 	bne	r11,zero,b2a8 <__gedf2+0x98>
    b268:	f800283a 	ret
    b26c:	18000c1e 	bne	r3,zero,b2a0 <__gedf2+0x90>
    b270:	3212b03a 	or	r9,r6,r8
    b274:	48000c26 	beq	r9,zero,b2a8 <__gedf2+0x98>
    b278:	0013883a 	mov	r9,zero
    b27c:	39c03fcc 	andi	r7,r7,255
    b280:	48000826 	beq	r9,zero,b2a4 <__gedf2+0x94>
    b284:	38000926 	beq	r7,zero,b2ac <__gedf2+0x9c>
    b288:	00800044 	movi	r2,1
    b28c:	f800283a 	ret
    b290:	3212b03a 	or	r9,r6,r8
    b294:	483fec26 	beq	r9,zero,b248 <__gedf2+0x38>
    b298:	00bfff84 	movi	r2,-2
    b29c:	f800283a 	ret
    b2a0:	39c03fcc 	andi	r7,r7,255
    b2a4:	29c00626 	beq	r5,r7,b2c0 <__gedf2+0xb0>
    b2a8:	283ff726 	beq	r5,zero,b288 <__gedf2+0x78>
    b2ac:	00bfffc4 	movi	r2,-1
    b2b0:	f800283a 	ret
    b2b4:	2292b03a 	or	r9,r4,r10
    b2b8:	483fe126 	beq	r9,zero,b240 <__gedf2+0x30>
    b2bc:	003ff606 	br	b298 <__gedf2+0x88>
    b2c0:	18bff916 	blt	r3,r2,b2a8 <__gedf2+0x98>
    b2c4:	10c00316 	blt	r2,r3,b2d4 <__gedf2+0xc4>
    b2c8:	42bff736 	bltu	r8,r10,b2a8 <__gedf2+0x98>
    b2cc:	52000326 	beq	r10,r8,b2dc <__gedf2+0xcc>
    b2d0:	5200042e 	bgeu	r10,r8,b2e4 <__gedf2+0xd4>
    b2d4:	283fec1e 	bne	r5,zero,b288 <__gedf2+0x78>
    b2d8:	003ff406 	br	b2ac <__gedf2+0x9c>
    b2dc:	313ff236 	bltu	r6,r4,b2a8 <__gedf2+0x98>
    b2e0:	21bffc36 	bltu	r4,r6,b2d4 <__gedf2+0xc4>
    b2e4:	0005883a 	mov	r2,zero
    b2e8:	f800283a 	ret

0000b2ec <__extendsfdf2>:
    b2ec:	200ad5fa 	srli	r5,r4,23
    b2f0:	defffd04 	addi	sp,sp,-12
    b2f4:	dc400115 	stw	r17,4(sp)
    b2f8:	29403fcc 	andi	r5,r5,255
    b2fc:	29800044 	addi	r6,r5,1
    b300:	04402034 	movhi	r17,128
    b304:	dc000015 	stw	r16,0(sp)
    b308:	8c7fffc4 	addi	r17,r17,-1
    b30c:	dfc00215 	stw	ra,8(sp)
    b310:	31803fcc 	andi	r6,r6,255
    b314:	00800044 	movi	r2,1
    b318:	8922703a 	and	r17,r17,r4
    b31c:	2020d7fa 	srli	r16,r4,31
    b320:	1180110e 	bge	r2,r6,b368 <__extendsfdf2+0x7c>
    b324:	880cd0fa 	srli	r6,r17,3
    b328:	8822977a 	slli	r17,r17,29
    b32c:	2940e004 	addi	r5,r5,896
    b330:	2941ffcc 	andi	r5,r5,2047
    b334:	2804953a 	slli	r2,r5,20
    b338:	01400434 	movhi	r5,16
    b33c:	800697fa 	slli	r3,r16,31
    b340:	297fffc4 	addi	r5,r5,-1
    b344:	314a703a 	and	r5,r6,r5
    b348:	288ab03a 	or	r5,r5,r2
    b34c:	28c6b03a 	or	r3,r5,r3
    b350:	8805883a 	mov	r2,r17
    b354:	dfc00217 	ldw	ra,8(sp)
    b358:	dc400117 	ldw	r17,4(sp)
    b35c:	dc000017 	ldw	r16,0(sp)
    b360:	dec00304 	addi	sp,sp,12
    b364:	f800283a 	ret
    b368:	2800111e 	bne	r5,zero,b3b0 <__extendsfdf2+0xc4>
    b36c:	88001c26 	beq	r17,zero,b3e0 <__extendsfdf2+0xf4>
    b370:	8809883a 	mov	r4,r17
    b374:	000b3fc0 	call	b3fc <__clzsi2>
    b378:	00c00284 	movi	r3,10
    b37c:	18801b16 	blt	r3,r2,b3ec <__extendsfdf2+0x100>
    b380:	018002c4 	movi	r6,11
    b384:	308dc83a 	sub	r6,r6,r2
    b388:	11000544 	addi	r4,r2,21
    b38c:	8986d83a 	srl	r3,r17,r6
    b390:	8922983a 	sll	r17,r17,r4
    b394:	0180e244 	movi	r6,905
    b398:	01400434 	movhi	r5,16
    b39c:	3085c83a 	sub	r2,r6,r2
    b3a0:	297fffc4 	addi	r5,r5,-1
    b3a4:	194c703a 	and	r6,r3,r5
    b3a8:	1141ffcc 	andi	r5,r2,2047
    b3ac:	003fe006 	br	b330 <__extendsfdf2+0x44>
    b3b0:	88000826 	beq	r17,zero,b3d4 <__extendsfdf2+0xe8>
    b3b4:	880cd0fa 	srli	r6,r17,3
    b3b8:	00800434 	movhi	r2,16
    b3bc:	10bfffc4 	addi	r2,r2,-1
    b3c0:	31800234 	orhi	r6,r6,8
    b3c4:	8822977a 	slli	r17,r17,29
    b3c8:	308c703a 	and	r6,r6,r2
    b3cc:	0141ffc4 	movi	r5,2047
    b3d0:	003fd706 	br	b330 <__extendsfdf2+0x44>
    b3d4:	0141ffc4 	movi	r5,2047
    b3d8:	000d883a 	mov	r6,zero
    b3dc:	003fd406 	br	b330 <__extendsfdf2+0x44>
    b3e0:	000b883a 	mov	r5,zero
    b3e4:	000d883a 	mov	r6,zero
    b3e8:	003fd106 	br	b330 <__extendsfdf2+0x44>
    b3ec:	11bffd44 	addi	r6,r2,-11
    b3f0:	8986983a 	sll	r3,r17,r6
    b3f4:	0023883a 	mov	r17,zero
    b3f8:	003fe606 	br	b394 <__extendsfdf2+0xa8>

0000b3fc <__clzsi2>:
    b3fc:	00bfffd4 	movui	r2,65535
    b400:	11000536 	bltu	r2,r4,b418 <__clzsi2+0x1c>
    b404:	00803fc4 	movi	r2,255
    b408:	11000f36 	bltu	r2,r4,b448 <__clzsi2+0x4c>
    b40c:	00800804 	movi	r2,32
    b410:	0007883a 	mov	r3,zero
    b414:	00000506 	br	b42c <__clzsi2+0x30>
    b418:	00804034 	movhi	r2,256
    b41c:	10bfffc4 	addi	r2,r2,-1
    b420:	11000c2e 	bgeu	r2,r4,b454 <__clzsi2+0x58>
    b424:	00800204 	movi	r2,8
    b428:	00c00604 	movi	r3,24
    b42c:	20c8d83a 	srl	r4,r4,r3
    b430:	00c000b4 	movhi	r3,2
    b434:	18ddc4c4 	addi	r3,r3,30483
    b438:	1909883a 	add	r4,r3,r4
    b43c:	20c00003 	ldbu	r3,0(r4)
    b440:	10c5c83a 	sub	r2,r2,r3
    b444:	f800283a 	ret
    b448:	00800604 	movi	r2,24
    b44c:	00c00204 	movi	r3,8
    b450:	003ff606 	br	b42c <__clzsi2+0x30>
    b454:	00800404 	movi	r2,16
    b458:	1007883a 	mov	r3,r2
    b45c:	003ff306 	br	b42c <__clzsi2+0x30>

0000b460 <memcpy>:
    b460:	defffd04 	addi	sp,sp,-12
    b464:	dfc00215 	stw	ra,8(sp)
    b468:	dc400115 	stw	r17,4(sp)
    b46c:	dc000015 	stw	r16,0(sp)
    b470:	00c003c4 	movi	r3,15
    b474:	2005883a 	mov	r2,r4
    b478:	1980452e 	bgeu	r3,r6,b590 <memcpy+0x130>
    b47c:	2906b03a 	or	r3,r5,r4
    b480:	18c000cc 	andi	r3,r3,3
    b484:	1800441e 	bne	r3,zero,b598 <memcpy+0x138>
    b488:	347ffc04 	addi	r17,r6,-16
    b48c:	8822d13a 	srli	r17,r17,4
    b490:	28c00104 	addi	r3,r5,4
    b494:	23400104 	addi	r13,r4,4
    b498:	8820913a 	slli	r16,r17,4
    b49c:	2b000204 	addi	r12,r5,8
    b4a0:	22c00204 	addi	r11,r4,8
    b4a4:	84000504 	addi	r16,r16,20
    b4a8:	2a800304 	addi	r10,r5,12
    b4ac:	22400304 	addi	r9,r4,12
    b4b0:	2c21883a 	add	r16,r5,r16
    b4b4:	2811883a 	mov	r8,r5
    b4b8:	200f883a 	mov	r7,r4
    b4bc:	41000017 	ldw	r4,0(r8)
    b4c0:	1fc00017 	ldw	ra,0(r3)
    b4c4:	63c00017 	ldw	r15,0(r12)
    b4c8:	39000015 	stw	r4,0(r7)
    b4cc:	53800017 	ldw	r14,0(r10)
    b4d0:	6fc00015 	stw	ra,0(r13)
    b4d4:	5bc00015 	stw	r15,0(r11)
    b4d8:	4b800015 	stw	r14,0(r9)
    b4dc:	18c00404 	addi	r3,r3,16
    b4e0:	39c00404 	addi	r7,r7,16
    b4e4:	42000404 	addi	r8,r8,16
    b4e8:	6b400404 	addi	r13,r13,16
    b4ec:	63000404 	addi	r12,r12,16
    b4f0:	5ac00404 	addi	r11,r11,16
    b4f4:	52800404 	addi	r10,r10,16
    b4f8:	4a400404 	addi	r9,r9,16
    b4fc:	1c3fef1e 	bne	r3,r16,b4bc <memcpy+0x5c>
    b500:	89c00044 	addi	r7,r17,1
    b504:	380e913a 	slli	r7,r7,4
    b508:	310003cc 	andi	r4,r6,15
    b50c:	02c000c4 	movi	r11,3
    b510:	11c7883a 	add	r3,r2,r7
    b514:	29cb883a 	add	r5,r5,r7
    b518:	5900212e 	bgeu	r11,r4,b5a0 <memcpy+0x140>
    b51c:	1813883a 	mov	r9,r3
    b520:	2811883a 	mov	r8,r5
    b524:	200f883a 	mov	r7,r4
    b528:	42800017 	ldw	r10,0(r8)
    b52c:	4a400104 	addi	r9,r9,4
    b530:	39ffff04 	addi	r7,r7,-4
    b534:	4abfff15 	stw	r10,-4(r9)
    b538:	42000104 	addi	r8,r8,4
    b53c:	59fffa36 	bltu	r11,r7,b528 <memcpy+0xc8>
    b540:	213fff04 	addi	r4,r4,-4
    b544:	2008d0ba 	srli	r4,r4,2
    b548:	318000cc 	andi	r6,r6,3
    b54c:	21000044 	addi	r4,r4,1
    b550:	2109883a 	add	r4,r4,r4
    b554:	2109883a 	add	r4,r4,r4
    b558:	1907883a 	add	r3,r3,r4
    b55c:	290b883a 	add	r5,r5,r4
    b560:	30000626 	beq	r6,zero,b57c <memcpy+0x11c>
    b564:	198d883a 	add	r6,r3,r6
    b568:	29c00003 	ldbu	r7,0(r5)
    b56c:	18c00044 	addi	r3,r3,1
    b570:	29400044 	addi	r5,r5,1
    b574:	19ffffc5 	stb	r7,-1(r3)
    b578:	19bffb1e 	bne	r3,r6,b568 <memcpy+0x108>
    b57c:	dfc00217 	ldw	ra,8(sp)
    b580:	dc400117 	ldw	r17,4(sp)
    b584:	dc000017 	ldw	r16,0(sp)
    b588:	dec00304 	addi	sp,sp,12
    b58c:	f800283a 	ret
    b590:	2007883a 	mov	r3,r4
    b594:	003ff206 	br	b560 <memcpy+0x100>
    b598:	2007883a 	mov	r3,r4
    b59c:	003ff106 	br	b564 <memcpy+0x104>
    b5a0:	200d883a 	mov	r6,r4
    b5a4:	003fee06 	br	b560 <memcpy+0x100>

0000b5a8 <_printf_r>:
    b5a8:	defffd04 	addi	sp,sp,-12
    b5ac:	2805883a 	mov	r2,r5
    b5b0:	dfc00015 	stw	ra,0(sp)
    b5b4:	d9800115 	stw	r6,4(sp)
    b5b8:	d9c00215 	stw	r7,8(sp)
    b5bc:	21400217 	ldw	r5,8(r4)
    b5c0:	d9c00104 	addi	r7,sp,4
    b5c4:	100d883a 	mov	r6,r2
    b5c8:	000d9280 	call	d928 <___vfprintf_internal_r>
    b5cc:	dfc00017 	ldw	ra,0(sp)
    b5d0:	dec00304 	addi	sp,sp,12
    b5d4:	f800283a 	ret

0000b5d8 <printf>:
    b5d8:	defffc04 	addi	sp,sp,-16
    b5dc:	dfc00015 	stw	ra,0(sp)
    b5e0:	d9400115 	stw	r5,4(sp)
    b5e4:	d9800215 	stw	r6,8(sp)
    b5e8:	d9c00315 	stw	r7,12(sp)
    b5ec:	008000f4 	movhi	r2,3
    b5f0:	10a66f04 	addi	r2,r2,-26180
    b5f4:	10800017 	ldw	r2,0(r2)
    b5f8:	200b883a 	mov	r5,r4
    b5fc:	d9800104 	addi	r6,sp,4
    b600:	11000217 	ldw	r4,8(r2)
    b604:	000fb200 	call	fb20 <__vfprintf_internal>
    b608:	dfc00017 	ldw	ra,0(sp)
    b60c:	dec00404 	addi	sp,sp,16
    b610:	f800283a 	ret

0000b614 <srand>:
    b614:	008000f4 	movhi	r2,3
    b618:	10a66f04 	addi	r2,r2,-26180
    b61c:	10800017 	ldw	r2,0(r2)
    b620:	11002915 	stw	r4,164(r2)
    b624:	10002a15 	stw	zero,168(r2)
    b628:	f800283a 	ret

0000b62c <rand>:
    b62c:	008000f4 	movhi	r2,3
    b630:	10a66f04 	addi	r2,r2,-26180
    b634:	11c00017 	ldw	r7,0(r2)
    b638:	01532574 	movhi	r5,19605
    b63c:	019614b4 	movhi	r6,22610
    b640:	38c02917 	ldw	r3,164(r7)
    b644:	39002a17 	ldw	r4,168(r7)
    b648:	295fcb44 	addi	r5,r5,32557
    b64c:	31bd0b44 	addi	r6,r6,-3027
    b650:	1951383a 	mul	r8,r3,r5
    b654:	2149383a 	mul	r4,r4,r5
    b658:	198d383a 	mul	r6,r3,r6
    b65c:	194a383a 	mulxuu	r5,r3,r5
    b660:	40800044 	addi	r2,r8,1
    b664:	2187883a 	add	r3,r4,r6
    b668:	1949883a 	add	r4,r3,r5
    b66c:	38802915 	stw	r2,164(r7)
    b670:	1207803a 	cmpltu	r3,r2,r8
    b674:	00a00034 	movhi	r2,32768
    b678:	1907883a 	add	r3,r3,r4
    b67c:	10bfffc4 	addi	r2,r2,-1
    b680:	38c02a15 	stw	r3,168(r7)
    b684:	1884703a 	and	r2,r3,r2
    b688:	f800283a 	ret

0000b68c <_sprintf_r>:
    b68c:	deffe404 	addi	sp,sp,-112
    b690:	2807883a 	mov	r3,r5
    b694:	dfc01a15 	stw	ra,104(sp)
    b698:	d9c01b15 	stw	r7,108(sp)
    b69c:	00a00034 	movhi	r2,32768
    b6a0:	10bfffc4 	addi	r2,r2,-1
    b6a4:	02008204 	movi	r8,520
    b6a8:	d8800215 	stw	r2,8(sp)
    b6ac:	d8800515 	stw	r2,20(sp)
    b6b0:	d9c01b04 	addi	r7,sp,108
    b6b4:	d80b883a 	mov	r5,sp
    b6b8:	00bfffc4 	movi	r2,-1
    b6bc:	d8c00015 	stw	r3,0(sp)
    b6c0:	d8c00415 	stw	r3,16(sp)
    b6c4:	da00030d 	sth	r8,12(sp)
    b6c8:	d880038d 	sth	r2,14(sp)
    b6cc:	000b7500 	call	b750 <___svfprintf_internal_r>
    b6d0:	d8c00017 	ldw	r3,0(sp)
    b6d4:	18000005 	stb	zero,0(r3)
    b6d8:	dfc01a17 	ldw	ra,104(sp)
    b6dc:	dec01c04 	addi	sp,sp,112
    b6e0:	f800283a 	ret

0000b6e4 <sprintf>:
    b6e4:	deffe304 	addi	sp,sp,-116
    b6e8:	2007883a 	mov	r3,r4
    b6ec:	dfc01a15 	stw	ra,104(sp)
    b6f0:	d9801b15 	stw	r6,108(sp)
    b6f4:	d9c01c15 	stw	r7,112(sp)
    b6f8:	010000f4 	movhi	r4,3
    b6fc:	21266f04 	addi	r4,r4,-26180
    b700:	21000017 	ldw	r4,0(r4)
    b704:	00a00034 	movhi	r2,32768
    b708:	10bfffc4 	addi	r2,r2,-1
    b70c:	280d883a 	mov	r6,r5
    b710:	02008204 	movi	r8,520
    b714:	d8800215 	stw	r2,8(sp)
    b718:	d8800515 	stw	r2,20(sp)
    b71c:	d9c01b04 	addi	r7,sp,108
    b720:	d80b883a 	mov	r5,sp
    b724:	00bfffc4 	movi	r2,-1
    b728:	d8c00015 	stw	r3,0(sp)
    b72c:	d8c00415 	stw	r3,16(sp)
    b730:	da00030d 	sth	r8,12(sp)
    b734:	d880038d 	sth	r2,14(sp)
    b738:	000b7500 	call	b750 <___svfprintf_internal_r>
    b73c:	d8c00017 	ldw	r3,0(sp)
    b740:	18000005 	stb	zero,0(r3)
    b744:	dfc01a17 	ldw	ra,104(sp)
    b748:	dec01d04 	addi	sp,sp,116
    b74c:	f800283a 	ret

0000b750 <___svfprintf_internal_r>:
    b750:	deffb704 	addi	sp,sp,-292
    b754:	dfc04815 	stw	ra,288(sp)
    b758:	ddc04615 	stw	r23,280(sp)
    b75c:	d9402c15 	stw	r5,176(sp)
    b760:	d9003915 	stw	r4,228(sp)
    b764:	302f883a 	mov	r23,r6
    b768:	d9c02d15 	stw	r7,180(sp)
    b76c:	df004715 	stw	fp,284(sp)
    b770:	dd804515 	stw	r22,276(sp)
    b774:	dd404415 	stw	r21,272(sp)
    b778:	dd004315 	stw	r20,268(sp)
    b77c:	dcc04215 	stw	r19,264(sp)
    b780:	dc804115 	stw	r18,260(sp)
    b784:	dc404015 	stw	r17,256(sp)
    b788:	dc003f15 	stw	r16,252(sp)
    b78c:	00122840 	call	12284 <_localeconv_r>
    b790:	10800017 	ldw	r2,0(r2)
    b794:	1009883a 	mov	r4,r2
    b798:	d8803415 	stw	r2,208(sp)
    b79c:	00141640 	call	14164 <strlen>
    b7a0:	d8c02c17 	ldw	r3,176(sp)
    b7a4:	d8803815 	stw	r2,224(sp)
    b7a8:	1880030b 	ldhu	r2,12(r3)
    b7ac:	1080200c 	andi	r2,r2,128
    b7b0:	10000226 	beq	r2,zero,b7bc <___svfprintf_internal_r+0x6c>
    b7b4:	18800417 	ldw	r2,16(r3)
    b7b8:	10067f26 	beq	r2,zero,d1b8 <___svfprintf_internal_r+0x1a68>
    b7bc:	dcc03917 	ldw	r19,228(sp)
    b7c0:	d8c00404 	addi	r3,sp,16
    b7c4:	054000b4 	movhi	r21,2
    b7c8:	d9001e04 	addi	r4,sp,120
    b7cc:	ad5e1584 	addi	r21,r21,30806
    b7d0:	d8c01e15 	stw	r3,120(sp)
    b7d4:	d8002015 	stw	zero,128(sp)
    b7d8:	d8001f15 	stw	zero,124(sp)
    b7dc:	d8003315 	stw	zero,204(sp)
    b7e0:	d8003615 	stw	zero,216(sp)
    b7e4:	d8003715 	stw	zero,220(sp)
    b7e8:	1811883a 	mov	r8,r3
    b7ec:	d8003a15 	stw	zero,232(sp)
    b7f0:	d8003b15 	stw	zero,236(sp)
    b7f4:	d8002f15 	stw	zero,188(sp)
    b7f8:	d9002815 	stw	r4,160(sp)
    b7fc:	b8800007 	ldb	r2,0(r23)
    b800:	10026726 	beq	r2,zero,c1a0 <___svfprintf_internal_r+0xa50>
    b804:	00c00944 	movi	r3,37
    b808:	b821883a 	mov	r16,r23
    b80c:	10c0021e 	bne	r2,r3,b818 <___svfprintf_internal_r+0xc8>
    b810:	00001406 	br	b864 <___svfprintf_internal_r+0x114>
    b814:	10c00326 	beq	r2,r3,b824 <___svfprintf_internal_r+0xd4>
    b818:	84000044 	addi	r16,r16,1
    b81c:	80800007 	ldb	r2,0(r16)
    b820:	103ffc1e 	bne	r2,zero,b814 <___svfprintf_internal_r+0xc4>
    b824:	85e3c83a 	sub	r17,r16,r23
    b828:	88000e26 	beq	r17,zero,b864 <___svfprintf_internal_r+0x114>
    b82c:	d8c02017 	ldw	r3,128(sp)
    b830:	d8801f17 	ldw	r2,124(sp)
    b834:	45c00015 	stw	r23,0(r8)
    b838:	1c47883a 	add	r3,r3,r17
    b83c:	10800044 	addi	r2,r2,1
    b840:	d8c02015 	stw	r3,128(sp)
    b844:	44400115 	stw	r17,4(r8)
    b848:	d8801f15 	stw	r2,124(sp)
    b84c:	00c001c4 	movi	r3,7
    b850:	18809716 	blt	r3,r2,bab0 <___svfprintf_internal_r+0x360>
    b854:	42000204 	addi	r8,r8,8
    b858:	d9402f17 	ldw	r5,188(sp)
    b85c:	2c4b883a 	add	r5,r5,r17
    b860:	d9402f15 	stw	r5,188(sp)
    b864:	80800007 	ldb	r2,0(r16)
    b868:	10009826 	beq	r2,zero,bacc <___svfprintf_internal_r+0x37c>
    b86c:	84400047 	ldb	r17,1(r16)
    b870:	00bfffc4 	movi	r2,-1
    b874:	85c00044 	addi	r23,r16,1
    b878:	d8002785 	stb	zero,158(sp)
    b87c:	0007883a 	mov	r3,zero
    b880:	000f883a 	mov	r7,zero
    b884:	d8802915 	stw	r2,164(sp)
    b888:	d8003115 	stw	zero,196(sp)
    b88c:	0025883a 	mov	r18,zero
    b890:	01401604 	movi	r5,88
    b894:	01800244 	movi	r6,9
    b898:	02800a84 	movi	r10,42
    b89c:	02401b04 	movi	r9,108
    b8a0:	bdc00044 	addi	r23,r23,1
    b8a4:	88bff804 	addi	r2,r17,-32
    b8a8:	2882f036 	bltu	r5,r2,c46c <___svfprintf_internal_r+0xd1c>
    b8ac:	100490ba 	slli	r2,r2,2
    b8b0:	01000074 	movhi	r4,1
    b8b4:	212e3104 	addi	r4,r4,-18236
    b8b8:	1105883a 	add	r2,r2,r4
    b8bc:	10800017 	ldw	r2,0(r2)
    b8c0:	1000683a 	jmp	r2
    b8c4:	0000c3d4 	movui	zero,783
    b8c8:	0000c46c 	andhi	zero,zero,785
    b8cc:	0000c46c 	andhi	zero,zero,785
    b8d0:	0000c3c8 	cmpgei	zero,zero,783
    b8d4:	0000c46c 	andhi	zero,zero,785
    b8d8:	0000c46c 	andhi	zero,zero,785
    b8dc:	0000c46c 	andhi	zero,zero,785
    b8e0:	0000c46c 	andhi	zero,zero,785
    b8e4:	0000c46c 	andhi	zero,zero,785
    b8e8:	0000c46c 	andhi	zero,zero,785
    b8ec:	0000bb28 	cmpgeui	zero,zero,748
    b8f0:	0000c304 	movi	zero,780
    b8f4:	0000c46c 	andhi	zero,zero,785
    b8f8:	0000ba38 	rdprs	zero,zero,744
    b8fc:	0000bb50 	cmplti	zero,zero,749
    b900:	0000c46c 	andhi	zero,zero,785
    b904:	0000bbc4 	movi	zero,751
    b908:	0000bb90 	cmplti	zero,zero,750
    b90c:	0000bb90 	cmplti	zero,zero,750
    b910:	0000bb90 	cmplti	zero,zero,750
    b914:	0000bb90 	cmplti	zero,zero,750
    b918:	0000bb90 	cmplti	zero,zero,750
    b91c:	0000bb90 	cmplti	zero,zero,750
    b920:	0000bb90 	cmplti	zero,zero,750
    b924:	0000bb90 	cmplti	zero,zero,750
    b928:	0000bb90 	cmplti	zero,zero,750
    b92c:	0000c46c 	andhi	zero,zero,785
    b930:	0000c46c 	andhi	zero,zero,785
    b934:	0000c46c 	andhi	zero,zero,785
    b938:	0000c46c 	andhi	zero,zero,785
    b93c:	0000c46c 	andhi	zero,zero,785
    b940:	0000c46c 	andhi	zero,zero,785
    b944:	0000c46c 	andhi	zero,zero,785
    b948:	0000c46c 	andhi	zero,zero,785
    b94c:	0000c46c 	andhi	zero,zero,785
    b950:	0000c46c 	andhi	zero,zero,785
    b954:	0000bc7c 	xorhi	zero,zero,753
    b958:	0000bbd0 	cmplti	zero,zero,751
    b95c:	0000c46c 	andhi	zero,zero,785
    b960:	0000bbd0 	cmplti	zero,zero,751
    b964:	0000c46c 	andhi	zero,zero,785
    b968:	0000c46c 	andhi	zero,zero,785
    b96c:	0000c46c 	andhi	zero,zero,785
    b970:	0000c46c 	andhi	zero,zero,785
    b974:	0000bc70 	cmpltui	zero,zero,753
    b978:	0000c46c 	andhi	zero,zero,785
    b97c:	0000c46c 	andhi	zero,zero,785
    b980:	0000bd38 	rdprs	zero,zero,756
    b984:	0000c46c 	andhi	zero,zero,785
    b988:	0000c46c 	andhi	zero,zero,785
    b98c:	0000c46c 	andhi	zero,zero,785
    b990:	0000c46c 	andhi	zero,zero,785
    b994:	0000c46c 	andhi	zero,zero,785
    b998:	0000c1a8 	cmpgeui	zero,zero,774
    b99c:	0000c46c 	andhi	zero,zero,785
    b9a0:	0000c46c 	andhi	zero,zero,785
    b9a4:	0000c208 	cmpgei	zero,zero,776
    b9a8:	0000c46c 	andhi	zero,zero,785
    b9ac:	0000c46c 	andhi	zero,zero,785
    b9b0:	0000c46c 	andhi	zero,zero,785
    b9b4:	0000c46c 	andhi	zero,zero,785
    b9b8:	0000c46c 	andhi	zero,zero,785
    b9bc:	0000c46c 	andhi	zero,zero,785
    b9c0:	0000c46c 	andhi	zero,zero,785
    b9c4:	0000c46c 	andhi	zero,zero,785
    b9c8:	0000c46c 	andhi	zero,zero,785
    b9cc:	0000c46c 	andhi	zero,zero,785
    b9d0:	0000c2b8 	rdprs	zero,zero,778
    b9d4:	0000c3f4 	movhi	zero,783
    b9d8:	0000bbd0 	cmplti	zero,zero,751
    b9dc:	0000bbd0 	cmplti	zero,zero,751
    b9e0:	0000bbd0 	cmplti	zero,zero,751
    b9e4:	0000c448 	cmpgei	zero,zero,785
    b9e8:	0000c3f4 	movhi	zero,783
    b9ec:	0000c46c 	andhi	zero,zero,785
    b9f0:	0000c46c 	andhi	zero,zero,785
    b9f4:	0000c404 	movi	zero,784
    b9f8:	0000c46c 	andhi	zero,zero,785
    b9fc:	0000c414 	movui	zero,784
    ba00:	0000c2f4 	movhi	zero,779
    ba04:	0000ba44 	movi	zero,745
    ba08:	0000c314 	movui	zero,780
    ba0c:	0000c46c 	andhi	zero,zero,785
    ba10:	0000c320 	cmpeqi	zero,zero,780
    ba14:	0000c46c 	andhi	zero,zero,785
    ba18:	0000c37c 	xorhi	zero,zero,781
    ba1c:	0000c46c 	andhi	zero,zero,785
    ba20:	0000c46c 	andhi	zero,zero,785
    ba24:	0000c38c 	andi	zero,zero,782
    ba28:	d9003117 	ldw	r4,196(sp)
    ba2c:	d8802d15 	stw	r2,180(sp)
    ba30:	0109c83a 	sub	r4,zero,r4
    ba34:	d9003115 	stw	r4,196(sp)
    ba38:	94800114 	ori	r18,r18,4
    ba3c:	bc400007 	ldb	r17,0(r23)
    ba40:	003f9706 	br	b8a0 <___svfprintf_internal_r+0x150>
    ba44:	00800c04 	movi	r2,48
    ba48:	d9002d17 	ldw	r4,180(sp)
    ba4c:	d9402917 	ldw	r5,164(sp)
    ba50:	d8802705 	stb	r2,156(sp)
    ba54:	00801e04 	movi	r2,120
    ba58:	d8802745 	stb	r2,157(sp)
    ba5c:	d8002785 	stb	zero,158(sp)
    ba60:	20c00104 	addi	r3,r4,4
    ba64:	25000017 	ldw	r20,0(r4)
    ba68:	002d883a 	mov	r22,zero
    ba6c:	90800094 	ori	r2,r18,2
    ba70:	28028616 	blt	r5,zero,c48c <___svfprintf_internal_r+0xd3c>
    ba74:	00bfdfc4 	movi	r2,-129
    ba78:	90a4703a 	and	r18,r18,r2
    ba7c:	d8c02d15 	stw	r3,180(sp)
    ba80:	94800094 	ori	r18,r18,2
    ba84:	a002731e 	bne	r20,zero,c454 <___svfprintf_internal_r+0xd04>
    ba88:	008000b4 	movhi	r2,2
    ba8c:	109e0e04 	addi	r2,r2,30776
    ba90:	d8803a15 	stw	r2,232(sp)
    ba94:	04401e04 	movi	r17,120
    ba98:	d8c02917 	ldw	r3,164(sp)
    ba9c:	0039883a 	mov	fp,zero
    baa0:	1801d526 	beq	r3,zero,c1f8 <___svfprintf_internal_r+0xaa8>
    baa4:	0029883a 	mov	r20,zero
    baa8:	002d883a 	mov	r22,zero
    baac:	0001f106 	br	c274 <___svfprintf_internal_r+0xb24>
    bab0:	d9402c17 	ldw	r5,176(sp)
    bab4:	d9801e04 	addi	r6,sp,120
    bab8:	9809883a 	mov	r4,r19
    babc:	00141fc0 	call	141fc <__ssprint_r>
    bac0:	1000081e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    bac4:	da000404 	addi	r8,sp,16
    bac8:	003f6306 	br	b858 <___svfprintf_internal_r+0x108>
    bacc:	d8802017 	ldw	r2,128(sp)
    bad0:	10000426 	beq	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    bad4:	d9402c17 	ldw	r5,176(sp)
    bad8:	d9003917 	ldw	r4,228(sp)
    badc:	d9801e04 	addi	r6,sp,120
    bae0:	00141fc0 	call	141fc <__ssprint_r>
    bae4:	d8802c17 	ldw	r2,176(sp)
    bae8:	10c0030b 	ldhu	r3,12(r2)
    baec:	d8802f17 	ldw	r2,188(sp)
    baf0:	18c0100c 	andi	r3,r3,64
    baf4:	1805f51e 	bne	r3,zero,d2cc <___svfprintf_internal_r+0x1b7c>
    baf8:	dfc04817 	ldw	ra,288(sp)
    bafc:	df004717 	ldw	fp,284(sp)
    bb00:	ddc04617 	ldw	r23,280(sp)
    bb04:	dd804517 	ldw	r22,276(sp)
    bb08:	dd404417 	ldw	r21,272(sp)
    bb0c:	dd004317 	ldw	r20,268(sp)
    bb10:	dcc04217 	ldw	r19,264(sp)
    bb14:	dc804117 	ldw	r18,260(sp)
    bb18:	dc404017 	ldw	r17,256(sp)
    bb1c:	dc003f17 	ldw	r16,252(sp)
    bb20:	dec04904 	addi	sp,sp,292
    bb24:	f800283a 	ret
    bb28:	d8802d17 	ldw	r2,180(sp)
    bb2c:	d9002d17 	ldw	r4,180(sp)
    bb30:	10800017 	ldw	r2,0(r2)
    bb34:	d8803115 	stw	r2,196(sp)
    bb38:	20800104 	addi	r2,r4,4
    bb3c:	d9003117 	ldw	r4,196(sp)
    bb40:	203fb916 	blt	r4,zero,ba28 <___svfprintf_internal_r+0x2d8>
    bb44:	d8802d15 	stw	r2,180(sp)
    bb48:	bc400007 	ldb	r17,0(r23)
    bb4c:	003f5406 	br	b8a0 <___svfprintf_internal_r+0x150>
    bb50:	bc400007 	ldb	r17,0(r23)
    bb54:	bac00044 	addi	r11,r23,1
    bb58:	8a873926 	beq	r17,r10,d840 <___svfprintf_internal_r+0x20f0>
    bb5c:	88bff404 	addi	r2,r17,-48
    bb60:	0009883a 	mov	r4,zero
    bb64:	30868836 	bltu	r6,r2,d588 <___svfprintf_internal_r+0x1e38>
    bb68:	5c400007 	ldb	r17,0(r11)
    bb6c:	210002a4 	muli	r4,r4,10
    bb70:	5dc00044 	addi	r23,r11,1
    bb74:	b817883a 	mov	r11,r23
    bb78:	2089883a 	add	r4,r4,r2
    bb7c:	88bff404 	addi	r2,r17,-48
    bb80:	30bff92e 	bgeu	r6,r2,bb68 <___svfprintf_internal_r+0x418>
    bb84:	2005d716 	blt	r4,zero,d2e4 <___svfprintf_internal_r+0x1b94>
    bb88:	d9002915 	stw	r4,164(sp)
    bb8c:	003f4506 	br	b8a4 <___svfprintf_internal_r+0x154>
    bb90:	b809883a 	mov	r4,r23
    bb94:	d8003115 	stw	zero,196(sp)
    bb98:	88bff404 	addi	r2,r17,-48
    bb9c:	0017883a 	mov	r11,zero
    bba0:	24400007 	ldb	r17,0(r4)
    bba4:	5ac002a4 	muli	r11,r11,10
    bba8:	bdc00044 	addi	r23,r23,1
    bbac:	b809883a 	mov	r4,r23
    bbb0:	12d7883a 	add	r11,r2,r11
    bbb4:	88bff404 	addi	r2,r17,-48
    bbb8:	30bff92e 	bgeu	r6,r2,bba0 <___svfprintf_internal_r+0x450>
    bbbc:	dac03115 	stw	r11,196(sp)
    bbc0:	003f3806 	br	b8a4 <___svfprintf_internal_r+0x154>
    bbc4:	94802014 	ori	r18,r18,128
    bbc8:	bc400007 	ldb	r17,0(r23)
    bbcc:	003f3406 	br	b8a0 <___svfprintf_internal_r+0x150>
    bbd0:	18c03fcc 	andi	r3,r3,255
    bbd4:	1807471e 	bne	r3,zero,d8f4 <___svfprintf_internal_r+0x21a4>
    bbd8:	9080020c 	andi	r2,r18,8
    bbdc:	10047d26 	beq	r2,zero,cdd4 <___svfprintf_internal_r+0x1684>
    bbe0:	d8c02d17 	ldw	r3,180(sp)
    bbe4:	d9002d17 	ldw	r4,180(sp)
    bbe8:	d9402d17 	ldw	r5,180(sp)
    bbec:	18c00017 	ldw	r3,0(r3)
    bbf0:	21000117 	ldw	r4,4(r4)
    bbf4:	29400204 	addi	r5,r5,8
    bbf8:	d8c03615 	stw	r3,216(sp)
    bbfc:	d9003715 	stw	r4,220(sp)
    bc00:	d9402d15 	stw	r5,180(sp)
    bc04:	d9003617 	ldw	r4,216(sp)
    bc08:	d9403717 	ldw	r5,220(sp)
    bc0c:	da003e15 	stw	r8,248(sp)
    bc10:	04000044 	movi	r16,1
    bc14:	0013e840 	call	13e84 <__fpclassifyd>
    bc18:	da003e17 	ldw	r8,248(sp)
    bc1c:	14044b1e 	bne	r2,r16,cd4c <___svfprintf_internal_r+0x15fc>
    bc20:	d9003617 	ldw	r4,216(sp)
    bc24:	d9403717 	ldw	r5,220(sp)
    bc28:	000d883a 	mov	r6,zero
    bc2c:	000f883a 	mov	r7,zero
    bc30:	0019f800 	call	19f80 <__ledf2>
    bc34:	da003e17 	ldw	r8,248(sp)
    bc38:	1005f316 	blt	r2,zero,d408 <___svfprintf_internal_r+0x1cb8>
    bc3c:	df002783 	ldbu	fp,158(sp)
    bc40:	008011c4 	movi	r2,71
    bc44:	1445590e 	bge	r2,r17,d1ac <___svfprintf_internal_r+0x1a5c>
    bc48:	040000b4 	movhi	r16,2
    bc4c:	841e0604 	addi	r16,r16,30744
    bc50:	00c000c4 	movi	r3,3
    bc54:	00bfdfc4 	movi	r2,-129
    bc58:	d8c02a15 	stw	r3,168(sp)
    bc5c:	90a4703a 	and	r18,r18,r2
    bc60:	d8c02e15 	stw	r3,184(sp)
    bc64:	d8002915 	stw	zero,164(sp)
    bc68:	d8003215 	stw	zero,200(sp)
    bc6c:	00006606 	br	be08 <___svfprintf_internal_r+0x6b8>
    bc70:	94800214 	ori	r18,r18,8
    bc74:	bc400007 	ldb	r17,0(r23)
    bc78:	003f0906 	br	b8a0 <___svfprintf_internal_r+0x150>
    bc7c:	18c03fcc 	andi	r3,r3,255
    bc80:	1807181e 	bne	r3,zero,d8e4 <___svfprintf_internal_r+0x2194>
    bc84:	94800414 	ori	r18,r18,16
    bc88:	9080080c 	andi	r2,r18,32
    bc8c:	10039626 	beq	r2,zero,cae8 <___svfprintf_internal_r+0x1398>
    bc90:	d9402d17 	ldw	r5,180(sp)
    bc94:	28800117 	ldw	r2,4(r5)
    bc98:	2d000017 	ldw	r20,0(r5)
    bc9c:	29400204 	addi	r5,r5,8
    bca0:	d9402d15 	stw	r5,180(sp)
    bca4:	102d883a 	mov	r22,r2
    bca8:	10039816 	blt	r2,zero,cb0c <___svfprintf_internal_r+0x13bc>
    bcac:	d9402917 	ldw	r5,164(sp)
    bcb0:	df002783 	ldbu	fp,158(sp)
    bcb4:	2803ab16 	blt	r5,zero,cb64 <___svfprintf_internal_r+0x1414>
    bcb8:	00ffdfc4 	movi	r3,-129
    bcbc:	a584b03a 	or	r2,r20,r22
    bcc0:	90e4703a 	and	r18,r18,r3
    bcc4:	10014a26 	beq	r2,zero,c1f0 <___svfprintf_internal_r+0xaa0>
    bcc8:	b0034b26 	beq	r22,zero,c9f8 <___svfprintf_internal_r+0x12a8>
    bccc:	dc402a15 	stw	r17,168(sp)
    bcd0:	dc001e04 	addi	r16,sp,120
    bcd4:	b023883a 	mov	r17,r22
    bcd8:	402d883a 	mov	r22,r8
    bcdc:	a009883a 	mov	r4,r20
    bce0:	880b883a 	mov	r5,r17
    bce4:	01800284 	movi	r6,10
    bce8:	000f883a 	mov	r7,zero
    bcec:	00186780 	call	18678 <__umoddi3>
    bcf0:	10800c04 	addi	r2,r2,48
    bcf4:	843fffc4 	addi	r16,r16,-1
    bcf8:	a009883a 	mov	r4,r20
    bcfc:	880b883a 	mov	r5,r17
    bd00:	80800005 	stb	r2,0(r16)
    bd04:	01800284 	movi	r6,10
    bd08:	000f883a 	mov	r7,zero
    bd0c:	00181000 	call	18100 <__udivdi3>
    bd10:	1029883a 	mov	r20,r2
    bd14:	10c4b03a 	or	r2,r2,r3
    bd18:	1823883a 	mov	r17,r3
    bd1c:	103fef1e 	bne	r2,zero,bcdc <___svfprintf_internal_r+0x58c>
    bd20:	d8c02817 	ldw	r3,160(sp)
    bd24:	dc402a17 	ldw	r17,168(sp)
    bd28:	b011883a 	mov	r8,r22
    bd2c:	1c07c83a 	sub	r3,r3,r16
    bd30:	d8c02e15 	stw	r3,184(sp)
    bd34:	00002e06 	br	bdf0 <___svfprintf_internal_r+0x6a0>
    bd38:	18c03fcc 	andi	r3,r3,255
    bd3c:	1806e71e 	bne	r3,zero,d8dc <___svfprintf_internal_r+0x218c>
    bd40:	94800414 	ori	r18,r18,16
    bd44:	9080080c 	andi	r2,r18,32
    bd48:	1002d426 	beq	r2,zero,c89c <___svfprintf_internal_r+0x114c>
    bd4c:	d9402d17 	ldw	r5,180(sp)
    bd50:	d8c02917 	ldw	r3,164(sp)
    bd54:	d8002785 	stb	zero,158(sp)
    bd58:	28800204 	addi	r2,r5,8
    bd5c:	2d000017 	ldw	r20,0(r5)
    bd60:	2d800117 	ldw	r22,4(r5)
    bd64:	18041516 	blt	r3,zero,cdbc <___svfprintf_internal_r+0x166c>
    bd68:	013fdfc4 	movi	r4,-129
    bd6c:	a586b03a 	or	r3,r20,r22
    bd70:	d8802d15 	stw	r2,180(sp)
    bd74:	9124703a 	and	r18,r18,r4
    bd78:	1802d51e 	bne	r3,zero,c8d0 <___svfprintf_internal_r+0x1180>
    bd7c:	d9402917 	ldw	r5,164(sp)
    bd80:	0039883a 	mov	fp,zero
    bd84:	2806be26 	beq	r5,zero,d880 <___svfprintf_internal_r+0x2130>
    bd88:	0029883a 	mov	r20,zero
    bd8c:	002d883a 	mov	r22,zero
    bd90:	dc001e04 	addi	r16,sp,120
    bd94:	a006d0fa 	srli	r3,r20,3
    bd98:	b008977a 	slli	r4,r22,29
    bd9c:	b02cd0fa 	srli	r22,r22,3
    bda0:	a50001cc 	andi	r20,r20,7
    bda4:	a0800c04 	addi	r2,r20,48
    bda8:	843fffc4 	addi	r16,r16,-1
    bdac:	20e8b03a 	or	r20,r4,r3
    bdb0:	80800005 	stb	r2,0(r16)
    bdb4:	a586b03a 	or	r3,r20,r22
    bdb8:	183ff61e 	bne	r3,zero,bd94 <___svfprintf_internal_r+0x644>
    bdbc:	90c0004c 	andi	r3,r18,1
    bdc0:	18013926 	beq	r3,zero,c2a8 <___svfprintf_internal_r+0xb58>
    bdc4:	10803fcc 	andi	r2,r2,255
    bdc8:	1080201c 	xori	r2,r2,128
    bdcc:	10bfe004 	addi	r2,r2,-128
    bdd0:	00c00c04 	movi	r3,48
    bdd4:	10c13426 	beq	r2,r3,c2a8 <___svfprintf_internal_r+0xb58>
    bdd8:	80ffffc5 	stb	r3,-1(r16)
    bddc:	d8c02817 	ldw	r3,160(sp)
    bde0:	80bfffc4 	addi	r2,r16,-1
    bde4:	1021883a 	mov	r16,r2
    bde8:	1887c83a 	sub	r3,r3,r2
    bdec:	d8c02e15 	stw	r3,184(sp)
    bdf0:	d8802e17 	ldw	r2,184(sp)
    bdf4:	d9002917 	ldw	r4,164(sp)
    bdf8:	1100010e 	bge	r2,r4,be00 <___svfprintf_internal_r+0x6b0>
    bdfc:	2005883a 	mov	r2,r4
    be00:	d8802a15 	stw	r2,168(sp)
    be04:	d8003215 	stw	zero,200(sp)
    be08:	e7003fcc 	andi	fp,fp,255
    be0c:	e700201c 	xori	fp,fp,128
    be10:	e73fe004 	addi	fp,fp,-128
    be14:	e0000326 	beq	fp,zero,be24 <___svfprintf_internal_r+0x6d4>
    be18:	d8c02a17 	ldw	r3,168(sp)
    be1c:	18c00044 	addi	r3,r3,1
    be20:	d8c02a15 	stw	r3,168(sp)
    be24:	90c0008c 	andi	r3,r18,2
    be28:	d8c02b15 	stw	r3,172(sp)
    be2c:	18000326 	beq	r3,zero,be3c <___svfprintf_internal_r+0x6ec>
    be30:	d8c02a17 	ldw	r3,168(sp)
    be34:	18c00084 	addi	r3,r3,2
    be38:	d8c02a15 	stw	r3,168(sp)
    be3c:	90c0210c 	andi	r3,r18,132
    be40:	d8c03015 	stw	r3,192(sp)
    be44:	1801a11e 	bne	r3,zero,c4cc <___svfprintf_internal_r+0xd7c>
    be48:	d9003117 	ldw	r4,196(sp)
    be4c:	d8c02a17 	ldw	r3,168(sp)
    be50:	20e9c83a 	sub	r20,r4,r3
    be54:	05019d0e 	bge	zero,r20,c4cc <___svfprintf_internal_r+0xd7c>
    be58:	02400404 	movi	r9,16
    be5c:	d8c02017 	ldw	r3,128(sp)
    be60:	d8801f17 	ldw	r2,124(sp)
    be64:	4d051b0e 	bge	r9,r20,d2d4 <___svfprintf_internal_r+0x1b84>
    be68:	014000b4 	movhi	r5,2
    be6c:	295e1984 	addi	r5,r5,30822
    be70:	dc403c15 	stw	r17,240(sp)
    be74:	d9403515 	stw	r5,212(sp)
    be78:	a023883a 	mov	r17,r20
    be7c:	482d883a 	mov	r22,r9
    be80:	9029883a 	mov	r20,r18
    be84:	070001c4 	movi	fp,7
    be88:	8025883a 	mov	r18,r16
    be8c:	dc002c17 	ldw	r16,176(sp)
    be90:	00000306 	br	bea0 <___svfprintf_internal_r+0x750>
    be94:	8c7ffc04 	addi	r17,r17,-16
    be98:	42000204 	addi	r8,r8,8
    be9c:	b440130e 	bge	r22,r17,beec <___svfprintf_internal_r+0x79c>
    bea0:	010000b4 	movhi	r4,2
    bea4:	18c00404 	addi	r3,r3,16
    bea8:	10800044 	addi	r2,r2,1
    beac:	211e1984 	addi	r4,r4,30822
    beb0:	41000015 	stw	r4,0(r8)
    beb4:	45800115 	stw	r22,4(r8)
    beb8:	d8c02015 	stw	r3,128(sp)
    bebc:	d8801f15 	stw	r2,124(sp)
    bec0:	e0bff40e 	bge	fp,r2,be94 <___svfprintf_internal_r+0x744>
    bec4:	d9801e04 	addi	r6,sp,120
    bec8:	800b883a 	mov	r5,r16
    becc:	9809883a 	mov	r4,r19
    bed0:	00141fc0 	call	141fc <__ssprint_r>
    bed4:	103f031e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    bed8:	8c7ffc04 	addi	r17,r17,-16
    bedc:	d8c02017 	ldw	r3,128(sp)
    bee0:	d8801f17 	ldw	r2,124(sp)
    bee4:	da000404 	addi	r8,sp,16
    bee8:	b47fed16 	blt	r22,r17,bea0 <___svfprintf_internal_r+0x750>
    beec:	9021883a 	mov	r16,r18
    bef0:	a025883a 	mov	r18,r20
    bef4:	8829883a 	mov	r20,r17
    bef8:	dc403c17 	ldw	r17,240(sp)
    befc:	d9403517 	ldw	r5,212(sp)
    bf00:	a0c7883a 	add	r3,r20,r3
    bf04:	10800044 	addi	r2,r2,1
    bf08:	41400015 	stw	r5,0(r8)
    bf0c:	45000115 	stw	r20,4(r8)
    bf10:	d8c02015 	stw	r3,128(sp)
    bf14:	d8801f15 	stw	r2,124(sp)
    bf18:	010001c4 	movi	r4,7
    bf1c:	20829f16 	blt	r4,r2,c99c <___svfprintf_internal_r+0x124c>
    bf20:	df002787 	ldb	fp,158(sp)
    bf24:	42000204 	addi	r8,r8,8
    bf28:	e0000c26 	beq	fp,zero,bf5c <___svfprintf_internal_r+0x80c>
    bf2c:	d8801f17 	ldw	r2,124(sp)
    bf30:	d9002784 	addi	r4,sp,158
    bf34:	18c00044 	addi	r3,r3,1
    bf38:	10800044 	addi	r2,r2,1
    bf3c:	41000015 	stw	r4,0(r8)
    bf40:	01000044 	movi	r4,1
    bf44:	41000115 	stw	r4,4(r8)
    bf48:	d8c02015 	stw	r3,128(sp)
    bf4c:	d8801f15 	stw	r2,124(sp)
    bf50:	010001c4 	movi	r4,7
    bf54:	20823816 	blt	r4,r2,c838 <___svfprintf_internal_r+0x10e8>
    bf58:	42000204 	addi	r8,r8,8
    bf5c:	d8802b17 	ldw	r2,172(sp)
    bf60:	10000c26 	beq	r2,zero,bf94 <___svfprintf_internal_r+0x844>
    bf64:	d8801f17 	ldw	r2,124(sp)
    bf68:	d9002704 	addi	r4,sp,156
    bf6c:	18c00084 	addi	r3,r3,2
    bf70:	10800044 	addi	r2,r2,1
    bf74:	41000015 	stw	r4,0(r8)
    bf78:	01000084 	movi	r4,2
    bf7c:	41000115 	stw	r4,4(r8)
    bf80:	d8c02015 	stw	r3,128(sp)
    bf84:	d8801f15 	stw	r2,124(sp)
    bf88:	010001c4 	movi	r4,7
    bf8c:	20823216 	blt	r4,r2,c858 <___svfprintf_internal_r+0x1108>
    bf90:	42000204 	addi	r8,r8,8
    bf94:	d9003017 	ldw	r4,192(sp)
    bf98:	00802004 	movi	r2,128
    bf9c:	20819726 	beq	r4,r2,c5fc <___svfprintf_internal_r+0xeac>
    bfa0:	d9402917 	ldw	r5,164(sp)
    bfa4:	d8802e17 	ldw	r2,184(sp)
    bfa8:	28adc83a 	sub	r22,r5,r2
    bfac:	05802f0e 	bge	zero,r22,c06c <___svfprintf_internal_r+0x91c>
    bfb0:	07000404 	movi	fp,16
    bfb4:	d8801f17 	ldw	r2,124(sp)
    bfb8:	e583c00e 	bge	fp,r22,cebc <___svfprintf_internal_r+0x176c>
    bfbc:	014000b4 	movhi	r5,2
    bfc0:	295e1584 	addi	r5,r5,30806
    bfc4:	dc402915 	stw	r17,164(sp)
    bfc8:	d9402b15 	stw	r5,172(sp)
    bfcc:	b023883a 	mov	r17,r22
    bfd0:	050001c4 	movi	r20,7
    bfd4:	902d883a 	mov	r22,r18
    bfd8:	8025883a 	mov	r18,r16
    bfdc:	dc002c17 	ldw	r16,176(sp)
    bfe0:	00000306 	br	bff0 <___svfprintf_internal_r+0x8a0>
    bfe4:	8c7ffc04 	addi	r17,r17,-16
    bfe8:	42000204 	addi	r8,r8,8
    bfec:	e440110e 	bge	fp,r17,c034 <___svfprintf_internal_r+0x8e4>
    bff0:	18c00404 	addi	r3,r3,16
    bff4:	10800044 	addi	r2,r2,1
    bff8:	45400015 	stw	r21,0(r8)
    bffc:	47000115 	stw	fp,4(r8)
    c000:	d8c02015 	stw	r3,128(sp)
    c004:	d8801f15 	stw	r2,124(sp)
    c008:	a0bff60e 	bge	r20,r2,bfe4 <___svfprintf_internal_r+0x894>
    c00c:	d9801e04 	addi	r6,sp,120
    c010:	800b883a 	mov	r5,r16
    c014:	9809883a 	mov	r4,r19
    c018:	00141fc0 	call	141fc <__ssprint_r>
    c01c:	103eb11e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    c020:	8c7ffc04 	addi	r17,r17,-16
    c024:	d8c02017 	ldw	r3,128(sp)
    c028:	d8801f17 	ldw	r2,124(sp)
    c02c:	da000404 	addi	r8,sp,16
    c030:	e47fef16 	blt	fp,r17,bff0 <___svfprintf_internal_r+0x8a0>
    c034:	9021883a 	mov	r16,r18
    c038:	b025883a 	mov	r18,r22
    c03c:	882d883a 	mov	r22,r17
    c040:	dc402917 	ldw	r17,164(sp)
    c044:	d9002b17 	ldw	r4,172(sp)
    c048:	1d87883a 	add	r3,r3,r22
    c04c:	10800044 	addi	r2,r2,1
    c050:	41000015 	stw	r4,0(r8)
    c054:	45800115 	stw	r22,4(r8)
    c058:	d8c02015 	stw	r3,128(sp)
    c05c:	d8801f15 	stw	r2,124(sp)
    c060:	010001c4 	movi	r4,7
    c064:	2081ec16 	blt	r4,r2,c818 <___svfprintf_internal_r+0x10c8>
    c068:	42000204 	addi	r8,r8,8
    c06c:	9080400c 	andi	r2,r18,256
    c070:	1001181e 	bne	r2,zero,c4d4 <___svfprintf_internal_r+0xd84>
    c074:	d9402e17 	ldw	r5,184(sp)
    c078:	d8801f17 	ldw	r2,124(sp)
    c07c:	44000015 	stw	r16,0(r8)
    c080:	1947883a 	add	r3,r3,r5
    c084:	10800044 	addi	r2,r2,1
    c088:	41400115 	stw	r5,4(r8)
    c08c:	d8c02015 	stw	r3,128(sp)
    c090:	d8801f15 	stw	r2,124(sp)
    c094:	010001c4 	movi	r4,7
    c098:	2081d116 	blt	r4,r2,c7e0 <___svfprintf_internal_r+0x1090>
    c09c:	42000204 	addi	r8,r8,8
    c0a0:	9480010c 	andi	r18,r18,4
    c0a4:	90003226 	beq	r18,zero,c170 <___svfprintf_internal_r+0xa20>
    c0a8:	d9403117 	ldw	r5,196(sp)
    c0ac:	d8802a17 	ldw	r2,168(sp)
    c0b0:	28a1c83a 	sub	r16,r5,r2
    c0b4:	04002e0e 	bge	zero,r16,c170 <___svfprintf_internal_r+0xa20>
    c0b8:	04400404 	movi	r17,16
    c0bc:	d8801f17 	ldw	r2,124(sp)
    c0c0:	8c04b90e 	bge	r17,r16,d3a8 <___svfprintf_internal_r+0x1c58>
    c0c4:	014000b4 	movhi	r5,2
    c0c8:	295e1984 	addi	r5,r5,30822
    c0cc:	d9403515 	stw	r5,212(sp)
    c0d0:	048001c4 	movi	r18,7
    c0d4:	dd002c17 	ldw	r20,176(sp)
    c0d8:	00000306 	br	c0e8 <___svfprintf_internal_r+0x998>
    c0dc:	843ffc04 	addi	r16,r16,-16
    c0e0:	42000204 	addi	r8,r8,8
    c0e4:	8c00130e 	bge	r17,r16,c134 <___svfprintf_internal_r+0x9e4>
    c0e8:	010000b4 	movhi	r4,2
    c0ec:	18c00404 	addi	r3,r3,16
    c0f0:	10800044 	addi	r2,r2,1
    c0f4:	211e1984 	addi	r4,r4,30822
    c0f8:	41000015 	stw	r4,0(r8)
    c0fc:	44400115 	stw	r17,4(r8)
    c100:	d8c02015 	stw	r3,128(sp)
    c104:	d8801f15 	stw	r2,124(sp)
    c108:	90bff40e 	bge	r18,r2,c0dc <___svfprintf_internal_r+0x98c>
    c10c:	d9801e04 	addi	r6,sp,120
    c110:	a00b883a 	mov	r5,r20
    c114:	9809883a 	mov	r4,r19
    c118:	00141fc0 	call	141fc <__ssprint_r>
    c11c:	103e711e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    c120:	843ffc04 	addi	r16,r16,-16
    c124:	d8c02017 	ldw	r3,128(sp)
    c128:	d8801f17 	ldw	r2,124(sp)
    c12c:	da000404 	addi	r8,sp,16
    c130:	8c3fed16 	blt	r17,r16,c0e8 <___svfprintf_internal_r+0x998>
    c134:	d9403517 	ldw	r5,212(sp)
    c138:	1c07883a 	add	r3,r3,r16
    c13c:	10800044 	addi	r2,r2,1
    c140:	41400015 	stw	r5,0(r8)
    c144:	44000115 	stw	r16,4(r8)
    c148:	d8c02015 	stw	r3,128(sp)
    c14c:	d8801f15 	stw	r2,124(sp)
    c150:	010001c4 	movi	r4,7
    c154:	2080060e 	bge	r4,r2,c170 <___svfprintf_internal_r+0xa20>
    c158:	d9402c17 	ldw	r5,176(sp)
    c15c:	d9801e04 	addi	r6,sp,120
    c160:	9809883a 	mov	r4,r19
    c164:	00141fc0 	call	141fc <__ssprint_r>
    c168:	103e5e1e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    c16c:	d8c02017 	ldw	r3,128(sp)
    c170:	d8803117 	ldw	r2,196(sp)
    c174:	d9002a17 	ldw	r4,168(sp)
    c178:	1100010e 	bge	r2,r4,c180 <___svfprintf_internal_r+0xa30>
    c17c:	2005883a 	mov	r2,r4
    c180:	d9402f17 	ldw	r5,188(sp)
    c184:	288b883a 	add	r5,r5,r2
    c188:	d9402f15 	stw	r5,188(sp)
    c18c:	18019c1e 	bne	r3,zero,c800 <___svfprintf_internal_r+0x10b0>
    c190:	b8800007 	ldb	r2,0(r23)
    c194:	d8001f15 	stw	zero,124(sp)
    c198:	da000404 	addi	r8,sp,16
    c19c:	103d991e 	bne	r2,zero,b804 <___svfprintf_internal_r+0xb4>
    c1a0:	b821883a 	mov	r16,r23
    c1a4:	003daf06 	br	b864 <___svfprintf_internal_r+0x114>
    c1a8:	18c03fcc 	andi	r3,r3,255
    c1ac:	1805c71e 	bne	r3,zero,d8cc <___svfprintf_internal_r+0x217c>
    c1b0:	94800414 	ori	r18,r18,16
    c1b4:	9080080c 	andi	r2,r18,32
    c1b8:	10020126 	beq	r2,zero,c9c0 <___svfprintf_internal_r+0x1270>
    c1bc:	d8802d17 	ldw	r2,180(sp)
    c1c0:	d9002917 	ldw	r4,164(sp)
    c1c4:	d8002785 	stb	zero,158(sp)
    c1c8:	10c00204 	addi	r3,r2,8
    c1cc:	15000017 	ldw	r20,0(r2)
    c1d0:	15800117 	ldw	r22,4(r2)
    c1d4:	20038e16 	blt	r4,zero,d010 <___svfprintf_internal_r+0x18c0>
    c1d8:	013fdfc4 	movi	r4,-129
    c1dc:	a584b03a 	or	r2,r20,r22
    c1e0:	d8c02d15 	stw	r3,180(sp)
    c1e4:	9124703a 	and	r18,r18,r4
    c1e8:	0039883a 	mov	fp,zero
    c1ec:	103eb61e 	bne	r2,zero,bcc8 <___svfprintf_internal_r+0x578>
    c1f0:	d8802917 	ldw	r2,164(sp)
    c1f4:	1002c81e 	bne	r2,zero,cd18 <___svfprintf_internal_r+0x15c8>
    c1f8:	d8002915 	stw	zero,164(sp)
    c1fc:	d8002e15 	stw	zero,184(sp)
    c200:	dc001e04 	addi	r16,sp,120
    c204:	003efa06 	br	bdf0 <___svfprintf_internal_r+0x6a0>
    c208:	18c03fcc 	andi	r3,r3,255
    c20c:	1805ad1e 	bne	r3,zero,d8c4 <___svfprintf_internal_r+0x2174>
    c210:	014000b4 	movhi	r5,2
    c214:	295e0904 	addi	r5,r5,30756
    c218:	d9403a15 	stw	r5,232(sp)
    c21c:	9080080c 	andi	r2,r18,32
    c220:	10006126 	beq	r2,zero,c3a8 <___svfprintf_internal_r+0xc58>
    c224:	d8802d17 	ldw	r2,180(sp)
    c228:	15000017 	ldw	r20,0(r2)
    c22c:	15800117 	ldw	r22,4(r2)
    c230:	10800204 	addi	r2,r2,8
    c234:	d8802d15 	stw	r2,180(sp)
    c238:	9080004c 	andi	r2,r18,1
    c23c:	10018e26 	beq	r2,zero,c878 <___svfprintf_internal_r+0x1128>
    c240:	a584b03a 	or	r2,r20,r22
    c244:	10030926 	beq	r2,zero,ce6c <___svfprintf_internal_r+0x171c>
    c248:	d8c02917 	ldw	r3,164(sp)
    c24c:	00800c04 	movi	r2,48
    c250:	d8802705 	stb	r2,156(sp)
    c254:	dc402745 	stb	r17,157(sp)
    c258:	d8002785 	stb	zero,158(sp)
    c25c:	90800094 	ori	r2,r18,2
    c260:	18048716 	blt	r3,zero,d480 <___svfprintf_internal_r+0x1d30>
    c264:	00bfdfc4 	movi	r2,-129
    c268:	90a4703a 	and	r18,r18,r2
    c26c:	94800094 	ori	r18,r18,2
    c270:	0039883a 	mov	fp,zero
    c274:	d9003a17 	ldw	r4,232(sp)
    c278:	dc001e04 	addi	r16,sp,120
    c27c:	a08003cc 	andi	r2,r20,15
    c280:	b006973a 	slli	r3,r22,28
    c284:	2085883a 	add	r2,r4,r2
    c288:	a028d13a 	srli	r20,r20,4
    c28c:	10800003 	ldbu	r2,0(r2)
    c290:	b02cd13a 	srli	r22,r22,4
    c294:	843fffc4 	addi	r16,r16,-1
    c298:	1d28b03a 	or	r20,r3,r20
    c29c:	80800005 	stb	r2,0(r16)
    c2a0:	a584b03a 	or	r2,r20,r22
    c2a4:	103ff51e 	bne	r2,zero,c27c <___svfprintf_internal_r+0xb2c>
    c2a8:	d8c02817 	ldw	r3,160(sp)
    c2ac:	1c07c83a 	sub	r3,r3,r16
    c2b0:	d8c02e15 	stw	r3,184(sp)
    c2b4:	003ece06 	br	bdf0 <___svfprintf_internal_r+0x6a0>
    c2b8:	d8c02d17 	ldw	r3,180(sp)
    c2bc:	d9002d17 	ldw	r4,180(sp)
    c2c0:	d8002785 	stb	zero,158(sp)
    c2c4:	18800017 	ldw	r2,0(r3)
    c2c8:	21000104 	addi	r4,r4,4
    c2cc:	00c00044 	movi	r3,1
    c2d0:	d8c02a15 	stw	r3,168(sp)
    c2d4:	d8801405 	stb	r2,80(sp)
    c2d8:	d9002d15 	stw	r4,180(sp)
    c2dc:	d8c02e15 	stw	r3,184(sp)
    c2e0:	d8002915 	stw	zero,164(sp)
    c2e4:	d8003215 	stw	zero,200(sp)
    c2e8:	dc001404 	addi	r16,sp,80
    c2ec:	0039883a 	mov	fp,zero
    c2f0:	003ecc06 	br	be24 <___svfprintf_internal_r+0x6d4>
    c2f4:	18c03fcc 	andi	r3,r3,255
    c2f8:	183e9226 	beq	r3,zero,bd44 <___svfprintf_internal_r+0x5f4>
    c2fc:	d9c02785 	stb	r7,158(sp)
    c300:	003e9006 	br	bd44 <___svfprintf_internal_r+0x5f4>
    c304:	00c00044 	movi	r3,1
    c308:	01c00ac4 	movi	r7,43
    c30c:	bc400007 	ldb	r17,0(r23)
    c310:	003d6306 	br	b8a0 <___svfprintf_internal_r+0x150>
    c314:	94800814 	ori	r18,r18,32
    c318:	bc400007 	ldb	r17,0(r23)
    c31c:	003d6006 	br	b8a0 <___svfprintf_internal_r+0x150>
    c320:	d8c02d17 	ldw	r3,180(sp)
    c324:	d8002785 	stb	zero,158(sp)
    c328:	1c000017 	ldw	r16,0(r3)
    c32c:	1d000104 	addi	r20,r3,4
    c330:	80040f26 	beq	r16,zero,d370 <___svfprintf_internal_r+0x1c20>
    c334:	d9002917 	ldw	r4,164(sp)
    c338:	2003dc16 	blt	r4,zero,d2ac <___svfprintf_internal_r+0x1b5c>
    c33c:	200d883a 	mov	r6,r4
    c340:	000b883a 	mov	r5,zero
    c344:	8009883a 	mov	r4,r16
    c348:	da003e15 	stw	r8,248(sp)
    c34c:	0012c7c0 	call	12c7c <memchr>
    c350:	da003e17 	ldw	r8,248(sp)
    c354:	10045826 	beq	r2,zero,d4b8 <___svfprintf_internal_r+0x1d68>
    c358:	1405c83a 	sub	r2,r2,r16
    c35c:	d8802e15 	stw	r2,184(sp)
    c360:	1003d816 	blt	r2,zero,d2c4 <___svfprintf_internal_r+0x1b74>
    c364:	df002783 	ldbu	fp,158(sp)
    c368:	d8802a15 	stw	r2,168(sp)
    c36c:	dd002d15 	stw	r20,180(sp)
    c370:	d8002915 	stw	zero,164(sp)
    c374:	d8003215 	stw	zero,200(sp)
    c378:	003ea306 	br	be08 <___svfprintf_internal_r+0x6b8>
    c37c:	18c03fcc 	andi	r3,r3,255
    c380:	183f8c26 	beq	r3,zero,c1b4 <___svfprintf_internal_r+0xa64>
    c384:	d9c02785 	stb	r7,158(sp)
    c388:	003f8a06 	br	c1b4 <___svfprintf_internal_r+0xa64>
    c38c:	18c03fcc 	andi	r3,r3,255
    c390:	1805631e 	bne	r3,zero,d920 <___svfprintf_internal_r+0x21d0>
    c394:	014000b4 	movhi	r5,2
    c398:	295e0e04 	addi	r5,r5,30776
    c39c:	d9403a15 	stw	r5,232(sp)
    c3a0:	9080080c 	andi	r2,r18,32
    c3a4:	103f9f1e 	bne	r2,zero,c224 <___svfprintf_internal_r+0xad4>
    c3a8:	9080040c 	andi	r2,r18,16
    c3ac:	10029c26 	beq	r2,zero,ce20 <___svfprintf_internal_r+0x16d0>
    c3b0:	d8c02d17 	ldw	r3,180(sp)
    c3b4:	002d883a 	mov	r22,zero
    c3b8:	1d000017 	ldw	r20,0(r3)
    c3bc:	18c00104 	addi	r3,r3,4
    c3c0:	d8c02d15 	stw	r3,180(sp)
    c3c4:	003f9c06 	br	c238 <___svfprintf_internal_r+0xae8>
    c3c8:	94800054 	ori	r18,r18,1
    c3cc:	bc400007 	ldb	r17,0(r23)
    c3d0:	003d3306 	br	b8a0 <___svfprintf_internal_r+0x150>
    c3d4:	38803fcc 	andi	r2,r7,255
    c3d8:	1080201c 	xori	r2,r2,128
    c3dc:	10bfe004 	addi	r2,r2,-128
    c3e0:	1002971e 	bne	r2,zero,ce40 <___svfprintf_internal_r+0x16f0>
    c3e4:	00c00044 	movi	r3,1
    c3e8:	01c00804 	movi	r7,32
    c3ec:	bc400007 	ldb	r17,0(r23)
    c3f0:	003d2b06 	br	b8a0 <___svfprintf_internal_r+0x150>
    c3f4:	18c03fcc 	andi	r3,r3,255
    c3f8:	183e2326 	beq	r3,zero,bc88 <___svfprintf_internal_r+0x538>
    c3fc:	d9c02785 	stb	r7,158(sp)
    c400:	003e2106 	br	bc88 <___svfprintf_internal_r+0x538>
    c404:	bc400007 	ldb	r17,0(r23)
    c408:	8a430426 	beq	r17,r9,d01c <___svfprintf_internal_r+0x18cc>
    c40c:	94800414 	ori	r18,r18,16
    c410:	003d2306 	br	b8a0 <___svfprintf_internal_r+0x150>
    c414:	18c03fcc 	andi	r3,r3,255
    c418:	18053f1e 	bne	r3,zero,d918 <___svfprintf_internal_r+0x21c8>
    c41c:	9080080c 	andi	r2,r18,32
    c420:	10028926 	beq	r2,zero,ce48 <___svfprintf_internal_r+0x16f8>
    c424:	d9402d17 	ldw	r5,180(sp)
    c428:	d9002f17 	ldw	r4,188(sp)
    c42c:	28800017 	ldw	r2,0(r5)
    c430:	2007d7fa 	srai	r3,r4,31
    c434:	29400104 	addi	r5,r5,4
    c438:	d9402d15 	stw	r5,180(sp)
    c43c:	11000015 	stw	r4,0(r2)
    c440:	10c00115 	stw	r3,4(r2)
    c444:	003ced06 	br	b7fc <___svfprintf_internal_r+0xac>
    c448:	94801014 	ori	r18,r18,64
    c44c:	bc400007 	ldb	r17,0(r23)
    c450:	003d1306 	br	b8a0 <___svfprintf_internal_r+0x150>
    c454:	010000b4 	movhi	r4,2
    c458:	211e0e04 	addi	r4,r4,30776
    c45c:	0039883a 	mov	fp,zero
    c460:	d9003a15 	stw	r4,232(sp)
    c464:	04401e04 	movi	r17,120
    c468:	003f8206 	br	c274 <___svfprintf_internal_r+0xb24>
    c46c:	18c03fcc 	andi	r3,r3,255
    c470:	1805221e 	bne	r3,zero,d8fc <___svfprintf_internal_r+0x21ac>
    c474:	883d9526 	beq	r17,zero,bacc <___svfprintf_internal_r+0x37c>
    c478:	00c00044 	movi	r3,1
    c47c:	d8c02a15 	stw	r3,168(sp)
    c480:	dc401405 	stb	r17,80(sp)
    c484:	d8002785 	stb	zero,158(sp)
    c488:	003f9406 	br	c2dc <___svfprintf_internal_r+0xb8c>
    c48c:	010000b4 	movhi	r4,2
    c490:	211e0e04 	addi	r4,r4,30776
    c494:	d9003a15 	stw	r4,232(sp)
    c498:	d8c02d15 	stw	r3,180(sp)
    c49c:	1025883a 	mov	r18,r2
    c4a0:	04401e04 	movi	r17,120
    c4a4:	a584b03a 	or	r2,r20,r22
    c4a8:	1000fa1e 	bne	r2,zero,c894 <___svfprintf_internal_r+0x1144>
    c4ac:	0039883a 	mov	fp,zero
    c4b0:	00800084 	movi	r2,2
    c4b4:	10803fcc 	andi	r2,r2,255
    c4b8:	00c00044 	movi	r3,1
    c4bc:	10c21626 	beq	r2,r3,cd18 <___svfprintf_internal_r+0x15c8>
    c4c0:	00c00084 	movi	r3,2
    c4c4:	10fe301e 	bne	r2,r3,bd88 <___svfprintf_internal_r+0x638>
    c4c8:	003d7606 	br	baa4 <___svfprintf_internal_r+0x354>
    c4cc:	d8c02017 	ldw	r3,128(sp)
    c4d0:	003e9506 	br	bf28 <___svfprintf_internal_r+0x7d8>
    c4d4:	00801944 	movi	r2,101
    c4d8:	14407c0e 	bge	r2,r17,c6cc <___svfprintf_internal_r+0xf7c>
    c4dc:	d9003617 	ldw	r4,216(sp)
    c4e0:	d9403717 	ldw	r5,220(sp)
    c4e4:	000d883a 	mov	r6,zero
    c4e8:	000f883a 	mov	r7,zero
    c4ec:	d8c03d15 	stw	r3,244(sp)
    c4f0:	da003e15 	stw	r8,248(sp)
    c4f4:	0019ef80 	call	19ef8 <__eqdf2>
    c4f8:	d8c03d17 	ldw	r3,244(sp)
    c4fc:	da003e17 	ldw	r8,248(sp)
    c500:	1000f51e 	bne	r2,zero,c8d8 <___svfprintf_internal_r+0x1188>
    c504:	d8801f17 	ldw	r2,124(sp)
    c508:	010000b4 	movhi	r4,2
    c50c:	211e1504 	addi	r4,r4,30804
    c510:	18c00044 	addi	r3,r3,1
    c514:	10800044 	addi	r2,r2,1
    c518:	41000015 	stw	r4,0(r8)
    c51c:	01000044 	movi	r4,1
    c520:	41000115 	stw	r4,4(r8)
    c524:	d8c02015 	stw	r3,128(sp)
    c528:	d8801f15 	stw	r2,124(sp)
    c52c:	010001c4 	movi	r4,7
    c530:	20826616 	blt	r4,r2,cecc <___svfprintf_internal_r+0x177c>
    c534:	42000204 	addi	r8,r8,8
    c538:	d8802617 	ldw	r2,152(sp)
    c53c:	d9403317 	ldw	r5,204(sp)
    c540:	11400216 	blt	r2,r5,c54c <___svfprintf_internal_r+0xdfc>
    c544:	9080004c 	andi	r2,r18,1
    c548:	103ed526 	beq	r2,zero,c0a0 <___svfprintf_internal_r+0x950>
    c54c:	d8803817 	ldw	r2,224(sp)
    c550:	d9003417 	ldw	r4,208(sp)
    c554:	d9403817 	ldw	r5,224(sp)
    c558:	1887883a 	add	r3,r3,r2
    c55c:	d8801f17 	ldw	r2,124(sp)
    c560:	41000015 	stw	r4,0(r8)
    c564:	41400115 	stw	r5,4(r8)
    c568:	10800044 	addi	r2,r2,1
    c56c:	d8c02015 	stw	r3,128(sp)
    c570:	d8801f15 	stw	r2,124(sp)
    c574:	010001c4 	movi	r4,7
    c578:	2082af16 	blt	r4,r2,d038 <___svfprintf_internal_r+0x18e8>
    c57c:	42000204 	addi	r8,r8,8
    c580:	d8803317 	ldw	r2,204(sp)
    c584:	143fffc4 	addi	r16,r2,-1
    c588:	043ec50e 	bge	zero,r16,c0a0 <___svfprintf_internal_r+0x950>
    c58c:	04400404 	movi	r17,16
    c590:	d8801f17 	ldw	r2,124(sp)
    c594:	8c00860e 	bge	r17,r16,c7b0 <___svfprintf_internal_r+0x1060>
    c598:	014000b4 	movhi	r5,2
    c59c:	295e1584 	addi	r5,r5,30806
    c5a0:	d9402b15 	stw	r5,172(sp)
    c5a4:	058001c4 	movi	r22,7
    c5a8:	dd002c17 	ldw	r20,176(sp)
    c5ac:	00000306 	br	c5bc <___svfprintf_internal_r+0xe6c>
    c5b0:	42000204 	addi	r8,r8,8
    c5b4:	843ffc04 	addi	r16,r16,-16
    c5b8:	8c00800e 	bge	r17,r16,c7bc <___svfprintf_internal_r+0x106c>
    c5bc:	18c00404 	addi	r3,r3,16
    c5c0:	10800044 	addi	r2,r2,1
    c5c4:	45400015 	stw	r21,0(r8)
    c5c8:	44400115 	stw	r17,4(r8)
    c5cc:	d8c02015 	stw	r3,128(sp)
    c5d0:	d8801f15 	stw	r2,124(sp)
    c5d4:	b0bff60e 	bge	r22,r2,c5b0 <___svfprintf_internal_r+0xe60>
    c5d8:	d9801e04 	addi	r6,sp,120
    c5dc:	a00b883a 	mov	r5,r20
    c5e0:	9809883a 	mov	r4,r19
    c5e4:	00141fc0 	call	141fc <__ssprint_r>
    c5e8:	103d3e1e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    c5ec:	d8c02017 	ldw	r3,128(sp)
    c5f0:	d8801f17 	ldw	r2,124(sp)
    c5f4:	da000404 	addi	r8,sp,16
    c5f8:	003fee06 	br	c5b4 <___svfprintf_internal_r+0xe64>
    c5fc:	d9403117 	ldw	r5,196(sp)
    c600:	d8802a17 	ldw	r2,168(sp)
    c604:	28adc83a 	sub	r22,r5,r2
    c608:	05be650e 	bge	zero,r22,bfa0 <___svfprintf_internal_r+0x850>
    c60c:	07000404 	movi	fp,16
    c610:	d8801f17 	ldw	r2,124(sp)
    c614:	e583a20e 	bge	fp,r22,d4a0 <___svfprintf_internal_r+0x1d50>
    c618:	014000b4 	movhi	r5,2
    c61c:	295e1584 	addi	r5,r5,30806
    c620:	dc403015 	stw	r17,192(sp)
    c624:	d9402b15 	stw	r5,172(sp)
    c628:	b023883a 	mov	r17,r22
    c62c:	050001c4 	movi	r20,7
    c630:	902d883a 	mov	r22,r18
    c634:	8025883a 	mov	r18,r16
    c638:	dc002c17 	ldw	r16,176(sp)
    c63c:	00000306 	br	c64c <___svfprintf_internal_r+0xefc>
    c640:	8c7ffc04 	addi	r17,r17,-16
    c644:	42000204 	addi	r8,r8,8
    c648:	e440110e 	bge	fp,r17,c690 <___svfprintf_internal_r+0xf40>
    c64c:	18c00404 	addi	r3,r3,16
    c650:	10800044 	addi	r2,r2,1
    c654:	45400015 	stw	r21,0(r8)
    c658:	47000115 	stw	fp,4(r8)
    c65c:	d8c02015 	stw	r3,128(sp)
    c660:	d8801f15 	stw	r2,124(sp)
    c664:	a0bff60e 	bge	r20,r2,c640 <___svfprintf_internal_r+0xef0>
    c668:	d9801e04 	addi	r6,sp,120
    c66c:	800b883a 	mov	r5,r16
    c670:	9809883a 	mov	r4,r19
    c674:	00141fc0 	call	141fc <__ssprint_r>
    c678:	103d1a1e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    c67c:	8c7ffc04 	addi	r17,r17,-16
    c680:	d8c02017 	ldw	r3,128(sp)
    c684:	d8801f17 	ldw	r2,124(sp)
    c688:	da000404 	addi	r8,sp,16
    c68c:	e47fef16 	blt	fp,r17,c64c <___svfprintf_internal_r+0xefc>
    c690:	9021883a 	mov	r16,r18
    c694:	b025883a 	mov	r18,r22
    c698:	882d883a 	mov	r22,r17
    c69c:	dc403017 	ldw	r17,192(sp)
    c6a0:	d9002b17 	ldw	r4,172(sp)
    c6a4:	1d87883a 	add	r3,r3,r22
    c6a8:	10800044 	addi	r2,r2,1
    c6ac:	41000015 	stw	r4,0(r8)
    c6b0:	45800115 	stw	r22,4(r8)
    c6b4:	d8c02015 	stw	r3,128(sp)
    c6b8:	d8801f15 	stw	r2,124(sp)
    c6bc:	010001c4 	movi	r4,7
    c6c0:	20819a16 	blt	r4,r2,cd2c <___svfprintf_internal_r+0x15dc>
    c6c4:	42000204 	addi	r8,r8,8
    c6c8:	003e3506 	br	bfa0 <___svfprintf_internal_r+0x850>
    c6cc:	d9403317 	ldw	r5,204(sp)
    c6d0:	00800044 	movi	r2,1
    c6d4:	18c00044 	addi	r3,r3,1
    c6d8:	1141710e 	bge	r2,r5,cca0 <___svfprintf_internal_r+0x1550>
    c6dc:	dc401f17 	ldw	r17,124(sp)
    c6e0:	00800044 	movi	r2,1
    c6e4:	40800115 	stw	r2,4(r8)
    c6e8:	8c400044 	addi	r17,r17,1
    c6ec:	44000015 	stw	r16,0(r8)
    c6f0:	d8c02015 	stw	r3,128(sp)
    c6f4:	dc401f15 	stw	r17,124(sp)
    c6f8:	008001c4 	movi	r2,7
    c6fc:	14417416 	blt	r2,r17,ccd0 <___svfprintf_internal_r+0x1580>
    c700:	42000204 	addi	r8,r8,8
    c704:	d8803817 	ldw	r2,224(sp)
    c708:	d9003417 	ldw	r4,208(sp)
    c70c:	8c400044 	addi	r17,r17,1
    c710:	10c7883a 	add	r3,r2,r3
    c714:	40800115 	stw	r2,4(r8)
    c718:	41000015 	stw	r4,0(r8)
    c71c:	d8c02015 	stw	r3,128(sp)
    c720:	dc401f15 	stw	r17,124(sp)
    c724:	008001c4 	movi	r2,7
    c728:	14417216 	blt	r2,r17,ccf4 <___svfprintf_internal_r+0x15a4>
    c72c:	45800204 	addi	r22,r8,8
    c730:	d9003617 	ldw	r4,216(sp)
    c734:	d9403717 	ldw	r5,220(sp)
    c738:	000d883a 	mov	r6,zero
    c73c:	000f883a 	mov	r7,zero
    c740:	d8c03d15 	stw	r3,244(sp)
    c744:	0019ef80 	call	19ef8 <__eqdf2>
    c748:	d8c03d17 	ldw	r3,244(sp)
    c74c:	1000b326 	beq	r2,zero,ca1c <___svfprintf_internal_r+0x12cc>
    c750:	d9403317 	ldw	r5,204(sp)
    c754:	84000044 	addi	r16,r16,1
    c758:	8c400044 	addi	r17,r17,1
    c75c:	28bfffc4 	addi	r2,r5,-1
    c760:	1887883a 	add	r3,r3,r2
    c764:	b0800115 	stw	r2,4(r22)
    c768:	b4000015 	stw	r16,0(r22)
    c76c:	d8c02015 	stw	r3,128(sp)
    c770:	dc401f15 	stw	r17,124(sp)
    c774:	008001c4 	movi	r2,7
    c778:	1440d216 	blt	r2,r17,cac4 <___svfprintf_internal_r+0x1374>
    c77c:	b5800204 	addi	r22,r22,8
    c780:	d9003b17 	ldw	r4,236(sp)
    c784:	df0022c4 	addi	fp,sp,139
    c788:	8c400044 	addi	r17,r17,1
    c78c:	20c7883a 	add	r3,r4,r3
    c790:	b7000015 	stw	fp,0(r22)
    c794:	b1000115 	stw	r4,4(r22)
    c798:	d8c02015 	stw	r3,128(sp)
    c79c:	dc401f15 	stw	r17,124(sp)
    c7a0:	008001c4 	movi	r2,7
    c7a4:	14400e16 	blt	r2,r17,c7e0 <___svfprintf_internal_r+0x1090>
    c7a8:	b2000204 	addi	r8,r22,8
    c7ac:	003e3c06 	br	c0a0 <___svfprintf_internal_r+0x950>
    c7b0:	010000b4 	movhi	r4,2
    c7b4:	211e1584 	addi	r4,r4,30806
    c7b8:	d9002b15 	stw	r4,172(sp)
    c7bc:	d9002b17 	ldw	r4,172(sp)
    c7c0:	1c07883a 	add	r3,r3,r16
    c7c4:	44000115 	stw	r16,4(r8)
    c7c8:	41000015 	stw	r4,0(r8)
    c7cc:	10800044 	addi	r2,r2,1
    c7d0:	d8c02015 	stw	r3,128(sp)
    c7d4:	d8801f15 	stw	r2,124(sp)
    c7d8:	010001c4 	movi	r4,7
    c7dc:	20be2f0e 	bge	r4,r2,c09c <___svfprintf_internal_r+0x94c>
    c7e0:	d9402c17 	ldw	r5,176(sp)
    c7e4:	d9801e04 	addi	r6,sp,120
    c7e8:	9809883a 	mov	r4,r19
    c7ec:	00141fc0 	call	141fc <__ssprint_r>
    c7f0:	103cbc1e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    c7f4:	d8c02017 	ldw	r3,128(sp)
    c7f8:	da000404 	addi	r8,sp,16
    c7fc:	003e2806 	br	c0a0 <___svfprintf_internal_r+0x950>
    c800:	d9402c17 	ldw	r5,176(sp)
    c804:	d9801e04 	addi	r6,sp,120
    c808:	9809883a 	mov	r4,r19
    c80c:	00141fc0 	call	141fc <__ssprint_r>
    c810:	103e5f26 	beq	r2,zero,c190 <___svfprintf_internal_r+0xa40>
    c814:	003cb306 	br	bae4 <___svfprintf_internal_r+0x394>
    c818:	d9402c17 	ldw	r5,176(sp)
    c81c:	d9801e04 	addi	r6,sp,120
    c820:	9809883a 	mov	r4,r19
    c824:	00141fc0 	call	141fc <__ssprint_r>
    c828:	103cae1e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    c82c:	d8c02017 	ldw	r3,128(sp)
    c830:	da000404 	addi	r8,sp,16
    c834:	003e0d06 	br	c06c <___svfprintf_internal_r+0x91c>
    c838:	d9402c17 	ldw	r5,176(sp)
    c83c:	d9801e04 	addi	r6,sp,120
    c840:	9809883a 	mov	r4,r19
    c844:	00141fc0 	call	141fc <__ssprint_r>
    c848:	103ca61e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    c84c:	d8c02017 	ldw	r3,128(sp)
    c850:	da000404 	addi	r8,sp,16
    c854:	003dc106 	br	bf5c <___svfprintf_internal_r+0x80c>
    c858:	d9402c17 	ldw	r5,176(sp)
    c85c:	d9801e04 	addi	r6,sp,120
    c860:	9809883a 	mov	r4,r19
    c864:	00141fc0 	call	141fc <__ssprint_r>
    c868:	103c9e1e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    c86c:	d8c02017 	ldw	r3,128(sp)
    c870:	da000404 	addi	r8,sp,16
    c874:	003dc706 	br	bf94 <___svfprintf_internal_r+0x844>
    c878:	d8802917 	ldw	r2,164(sp)
    c87c:	d8002785 	stb	zero,158(sp)
    c880:	103f0816 	blt	r2,zero,c4a4 <___svfprintf_internal_r+0xd54>
    c884:	00ffdfc4 	movi	r3,-129
    c888:	a584b03a 	or	r2,r20,r22
    c88c:	90e4703a 	and	r18,r18,r3
    c890:	103c8126 	beq	r2,zero,ba98 <___svfprintf_internal_r+0x348>
    c894:	0039883a 	mov	fp,zero
    c898:	003e7606 	br	c274 <___svfprintf_internal_r+0xb24>
    c89c:	9080040c 	andi	r2,r18,16
    c8a0:	10013d26 	beq	r2,zero,cd98 <___svfprintf_internal_r+0x1648>
    c8a4:	d9002d17 	ldw	r4,180(sp)
    c8a8:	d9402917 	ldw	r5,164(sp)
    c8ac:	d8002785 	stb	zero,158(sp)
    c8b0:	20800104 	addi	r2,r4,4
    c8b4:	25000017 	ldw	r20,0(r4)
    c8b8:	002d883a 	mov	r22,zero
    c8bc:	28013f16 	blt	r5,zero,cdbc <___svfprintf_internal_r+0x166c>
    c8c0:	00ffdfc4 	movi	r3,-129
    c8c4:	d8802d15 	stw	r2,180(sp)
    c8c8:	90e4703a 	and	r18,r18,r3
    c8cc:	a03d2b26 	beq	r20,zero,bd7c <___svfprintf_internal_r+0x62c>
    c8d0:	0039883a 	mov	fp,zero
    c8d4:	003d2e06 	br	bd90 <___svfprintf_internal_r+0x640>
    c8d8:	dc402617 	ldw	r17,152(sp)
    c8dc:	0441830e 	bge	zero,r17,ceec <___svfprintf_internal_r+0x179c>
    c8e0:	dc403217 	ldw	r17,200(sp)
    c8e4:	d8803317 	ldw	r2,204(sp)
    c8e8:	1440010e 	bge	r2,r17,c8f0 <___svfprintf_internal_r+0x11a0>
    c8ec:	1023883a 	mov	r17,r2
    c8f0:	04400a0e 	bge	zero,r17,c91c <___svfprintf_internal_r+0x11cc>
    c8f4:	d8801f17 	ldw	r2,124(sp)
    c8f8:	1c47883a 	add	r3,r3,r17
    c8fc:	44000015 	stw	r16,0(r8)
    c900:	10800044 	addi	r2,r2,1
    c904:	44400115 	stw	r17,4(r8)
    c908:	d8c02015 	stw	r3,128(sp)
    c90c:	d8801f15 	stw	r2,124(sp)
    c910:	010001c4 	movi	r4,7
    c914:	20827516 	blt	r4,r2,d2ec <___svfprintf_internal_r+0x1b9c>
    c918:	42000204 	addi	r8,r8,8
    c91c:	88027b16 	blt	r17,zero,d30c <___svfprintf_internal_r+0x1bbc>
    c920:	d9003217 	ldw	r4,200(sp)
    c924:	2463c83a 	sub	r17,r4,r17
    c928:	0440990e 	bge	zero,r17,cb90 <___svfprintf_internal_r+0x1440>
    c92c:	05800404 	movi	r22,16
    c930:	d8801f17 	ldw	r2,124(sp)
    c934:	b441530e 	bge	r22,r17,ce84 <___svfprintf_internal_r+0x1734>
    c938:	010000b4 	movhi	r4,2
    c93c:	211e1584 	addi	r4,r4,30806
    c940:	d9002b15 	stw	r4,172(sp)
    c944:	070001c4 	movi	fp,7
    c948:	dd002c17 	ldw	r20,176(sp)
    c94c:	00000306 	br	c95c <___svfprintf_internal_r+0x120c>
    c950:	42000204 	addi	r8,r8,8
    c954:	8c7ffc04 	addi	r17,r17,-16
    c958:	b4414d0e 	bge	r22,r17,ce90 <___svfprintf_internal_r+0x1740>
    c95c:	18c00404 	addi	r3,r3,16
    c960:	10800044 	addi	r2,r2,1
    c964:	45400015 	stw	r21,0(r8)
    c968:	45800115 	stw	r22,4(r8)
    c96c:	d8c02015 	stw	r3,128(sp)
    c970:	d8801f15 	stw	r2,124(sp)
    c974:	e0bff60e 	bge	fp,r2,c950 <___svfprintf_internal_r+0x1200>
    c978:	d9801e04 	addi	r6,sp,120
    c97c:	a00b883a 	mov	r5,r20
    c980:	9809883a 	mov	r4,r19
    c984:	00141fc0 	call	141fc <__ssprint_r>
    c988:	103c561e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    c98c:	d8c02017 	ldw	r3,128(sp)
    c990:	d8801f17 	ldw	r2,124(sp)
    c994:	da000404 	addi	r8,sp,16
    c998:	003fee06 	br	c954 <___svfprintf_internal_r+0x1204>
    c99c:	d9402c17 	ldw	r5,176(sp)
    c9a0:	d9801e04 	addi	r6,sp,120
    c9a4:	9809883a 	mov	r4,r19
    c9a8:	00141fc0 	call	141fc <__ssprint_r>
    c9ac:	103c4d1e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    c9b0:	d8c02017 	ldw	r3,128(sp)
    c9b4:	df002787 	ldb	fp,158(sp)
    c9b8:	da000404 	addi	r8,sp,16
    c9bc:	003d5a06 	br	bf28 <___svfprintf_internal_r+0x7d8>
    c9c0:	9080040c 	andi	r2,r18,16
    c9c4:	10005c26 	beq	r2,zero,cb38 <___svfprintf_internal_r+0x13e8>
    c9c8:	d9402d17 	ldw	r5,180(sp)
    c9cc:	d8c02917 	ldw	r3,164(sp)
    c9d0:	d8002785 	stb	zero,158(sp)
    c9d4:	28800104 	addi	r2,r5,4
    c9d8:	2d000017 	ldw	r20,0(r5)
    c9dc:	002d883a 	mov	r22,zero
    c9e0:	18005e16 	blt	r3,zero,cb5c <___svfprintf_internal_r+0x140c>
    c9e4:	00ffdfc4 	movi	r3,-129
    c9e8:	d8802d15 	stw	r2,180(sp)
    c9ec:	90e4703a 	and	r18,r18,r3
    c9f0:	0039883a 	mov	fp,zero
    c9f4:	a03dfe26 	beq	r20,zero,c1f0 <___svfprintf_internal_r+0xaa0>
    c9f8:	00800244 	movi	r2,9
    c9fc:	153cb336 	bltu	r2,r20,bccc <___svfprintf_internal_r+0x57c>
    ca00:	a5000c04 	addi	r20,r20,48
    ca04:	dc001dc4 	addi	r16,sp,119
    ca08:	dd001dc5 	stb	r20,119(sp)
    ca0c:	d8c02817 	ldw	r3,160(sp)
    ca10:	1c07c83a 	sub	r3,r3,r16
    ca14:	d8c02e15 	stw	r3,184(sp)
    ca18:	003cf506 	br	bdf0 <___svfprintf_internal_r+0x6a0>
    ca1c:	d8803317 	ldw	r2,204(sp)
    ca20:	143fffc4 	addi	r16,r2,-1
    ca24:	043f560e 	bge	zero,r16,c780 <___svfprintf_internal_r+0x1030>
    ca28:	07000404 	movi	fp,16
    ca2c:	e403530e 	bge	fp,r16,d77c <___svfprintf_internal_r+0x202c>
    ca30:	014000b4 	movhi	r5,2
    ca34:	295e1584 	addi	r5,r5,30806
    ca38:	d9402b15 	stw	r5,172(sp)
    ca3c:	01c001c4 	movi	r7,7
    ca40:	dd002c17 	ldw	r20,176(sp)
    ca44:	00000306 	br	ca54 <___svfprintf_internal_r+0x1304>
    ca48:	843ffc04 	addi	r16,r16,-16
    ca4c:	b5800204 	addi	r22,r22,8
    ca50:	e400130e 	bge	fp,r16,caa0 <___svfprintf_internal_r+0x1350>
    ca54:	18c00404 	addi	r3,r3,16
    ca58:	8c400044 	addi	r17,r17,1
    ca5c:	b5400015 	stw	r21,0(r22)
    ca60:	b7000115 	stw	fp,4(r22)
    ca64:	d8c02015 	stw	r3,128(sp)
    ca68:	dc401f15 	stw	r17,124(sp)
    ca6c:	3c7ff60e 	bge	r7,r17,ca48 <___svfprintf_internal_r+0x12f8>
    ca70:	d9801e04 	addi	r6,sp,120
    ca74:	a00b883a 	mov	r5,r20
    ca78:	9809883a 	mov	r4,r19
    ca7c:	d9c03d15 	stw	r7,244(sp)
    ca80:	00141fc0 	call	141fc <__ssprint_r>
    ca84:	d9c03d17 	ldw	r7,244(sp)
    ca88:	103c161e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    ca8c:	843ffc04 	addi	r16,r16,-16
    ca90:	d8c02017 	ldw	r3,128(sp)
    ca94:	dc401f17 	ldw	r17,124(sp)
    ca98:	dd800404 	addi	r22,sp,16
    ca9c:	e43fed16 	blt	fp,r16,ca54 <___svfprintf_internal_r+0x1304>
    caa0:	d8802b17 	ldw	r2,172(sp)
    caa4:	1c07883a 	add	r3,r3,r16
    caa8:	8c400044 	addi	r17,r17,1
    caac:	b0800015 	stw	r2,0(r22)
    cab0:	b4000115 	stw	r16,4(r22)
    cab4:	d8c02015 	stw	r3,128(sp)
    cab8:	dc401f15 	stw	r17,124(sp)
    cabc:	008001c4 	movi	r2,7
    cac0:	147f2e0e 	bge	r2,r17,c77c <___svfprintf_internal_r+0x102c>
    cac4:	d9402c17 	ldw	r5,176(sp)
    cac8:	d9801e04 	addi	r6,sp,120
    cacc:	9809883a 	mov	r4,r19
    cad0:	00141fc0 	call	141fc <__ssprint_r>
    cad4:	103c031e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    cad8:	d8c02017 	ldw	r3,128(sp)
    cadc:	dc401f17 	ldw	r17,124(sp)
    cae0:	dd800404 	addi	r22,sp,16
    cae4:	003f2606 	br	c780 <___svfprintf_internal_r+0x1030>
    cae8:	9080040c 	andi	r2,r18,16
    caec:	1000c326 	beq	r2,zero,cdfc <___svfprintf_internal_r+0x16ac>
    caf0:	d8802d17 	ldw	r2,180(sp)
    caf4:	15000017 	ldw	r20,0(r2)
    caf8:	10800104 	addi	r2,r2,4
    cafc:	d8802d15 	stw	r2,180(sp)
    cb00:	a02dd7fa 	srai	r22,r20,31
    cb04:	b005883a 	mov	r2,r22
    cb08:	103c680e 	bge	r2,zero,bcac <___svfprintf_internal_r+0x55c>
    cb0c:	0529c83a 	sub	r20,zero,r20
    cb10:	a004c03a 	cmpne	r2,r20,zero
    cb14:	05adc83a 	sub	r22,zero,r22
    cb18:	b0adc83a 	sub	r22,r22,r2
    cb1c:	d8802917 	ldw	r2,164(sp)
    cb20:	07000b44 	movi	fp,45
    cb24:	df002785 	stb	fp,158(sp)
    cb28:	10022e16 	blt	r2,zero,d3e4 <___svfprintf_internal_r+0x1c94>
    cb2c:	00bfdfc4 	movi	r2,-129
    cb30:	90a4703a 	and	r18,r18,r2
    cb34:	003c6406 	br	bcc8 <___svfprintf_internal_r+0x578>
    cb38:	9080100c 	andi	r2,r18,64
    cb3c:	d8002785 	stb	zero,158(sp)
    cb40:	10012526 	beq	r2,zero,cfd8 <___svfprintf_internal_r+0x1888>
    cb44:	d9002d17 	ldw	r4,180(sp)
    cb48:	d9402917 	ldw	r5,164(sp)
    cb4c:	002d883a 	mov	r22,zero
    cb50:	20800104 	addi	r2,r4,4
    cb54:	2500000b 	ldhu	r20,0(r4)
    cb58:	283fa20e 	bge	r5,zero,c9e4 <___svfprintf_internal_r+0x1294>
    cb5c:	d8802d15 	stw	r2,180(sp)
    cb60:	0039883a 	mov	fp,zero
    cb64:	a584b03a 	or	r2,r20,r22
    cb68:	103c571e 	bne	r2,zero,bcc8 <___svfprintf_internal_r+0x578>
    cb6c:	00800044 	movi	r2,1
    cb70:	003e5006 	br	c4b4 <___svfprintf_internal_r+0xd64>
    cb74:	d9402c17 	ldw	r5,176(sp)
    cb78:	d9801e04 	addi	r6,sp,120
    cb7c:	9809883a 	mov	r4,r19
    cb80:	00141fc0 	call	141fc <__ssprint_r>
    cb84:	103bd71e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    cb88:	d8c02017 	ldw	r3,128(sp)
    cb8c:	da000404 	addi	r8,sp,16
    cb90:	d9003217 	ldw	r4,200(sp)
    cb94:	d8802617 	ldw	r2,152(sp)
    cb98:	d9403317 	ldw	r5,204(sp)
    cb9c:	8123883a 	add	r17,r16,r4
    cba0:	11400216 	blt	r2,r5,cbac <___svfprintf_internal_r+0x145c>
    cba4:	9100004c 	andi	r4,r18,1
    cba8:	20000d26 	beq	r4,zero,cbe0 <___svfprintf_internal_r+0x1490>
    cbac:	d9003817 	ldw	r4,224(sp)
    cbb0:	d9403417 	ldw	r5,208(sp)
    cbb4:	1907883a 	add	r3,r3,r4
    cbb8:	d9001f17 	ldw	r4,124(sp)
    cbbc:	41400015 	stw	r5,0(r8)
    cbc0:	d9403817 	ldw	r5,224(sp)
    cbc4:	21000044 	addi	r4,r4,1
    cbc8:	d8c02015 	stw	r3,128(sp)
    cbcc:	41400115 	stw	r5,4(r8)
    cbd0:	d9001f15 	stw	r4,124(sp)
    cbd4:	014001c4 	movi	r5,7
    cbd8:	2901dc16 	blt	r5,r4,d34c <___svfprintf_internal_r+0x1bfc>
    cbdc:	42000204 	addi	r8,r8,8
    cbe0:	d9003317 	ldw	r4,204(sp)
    cbe4:	8121883a 	add	r16,r16,r4
    cbe8:	2085c83a 	sub	r2,r4,r2
    cbec:	8461c83a 	sub	r16,r16,r17
    cbf0:	1400010e 	bge	r2,r16,cbf8 <___svfprintf_internal_r+0x14a8>
    cbf4:	1021883a 	mov	r16,r2
    cbf8:	04000a0e 	bge	zero,r16,cc24 <___svfprintf_internal_r+0x14d4>
    cbfc:	d9001f17 	ldw	r4,124(sp)
    cc00:	1c07883a 	add	r3,r3,r16
    cc04:	44400015 	stw	r17,0(r8)
    cc08:	21000044 	addi	r4,r4,1
    cc0c:	44000115 	stw	r16,4(r8)
    cc10:	d8c02015 	stw	r3,128(sp)
    cc14:	d9001f15 	stw	r4,124(sp)
    cc18:	014001c4 	movi	r5,7
    cc1c:	2901e616 	blt	r5,r4,d3b8 <___svfprintf_internal_r+0x1c68>
    cc20:	42000204 	addi	r8,r8,8
    cc24:	8001f616 	blt	r16,zero,d400 <___svfprintf_internal_r+0x1cb0>
    cc28:	1421c83a 	sub	r16,r2,r16
    cc2c:	043d1c0e 	bge	zero,r16,c0a0 <___svfprintf_internal_r+0x950>
    cc30:	04400404 	movi	r17,16
    cc34:	d8801f17 	ldw	r2,124(sp)
    cc38:	8c3edd0e 	bge	r17,r16,c7b0 <___svfprintf_internal_r+0x1060>
    cc3c:	014000b4 	movhi	r5,2
    cc40:	295e1584 	addi	r5,r5,30806
    cc44:	d9402b15 	stw	r5,172(sp)
    cc48:	058001c4 	movi	r22,7
    cc4c:	dd002c17 	ldw	r20,176(sp)
    cc50:	00000306 	br	cc60 <___svfprintf_internal_r+0x1510>
    cc54:	42000204 	addi	r8,r8,8
    cc58:	843ffc04 	addi	r16,r16,-16
    cc5c:	8c3ed70e 	bge	r17,r16,c7bc <___svfprintf_internal_r+0x106c>
    cc60:	18c00404 	addi	r3,r3,16
    cc64:	10800044 	addi	r2,r2,1
    cc68:	45400015 	stw	r21,0(r8)
    cc6c:	44400115 	stw	r17,4(r8)
    cc70:	d8c02015 	stw	r3,128(sp)
    cc74:	d8801f15 	stw	r2,124(sp)
    cc78:	b0bff60e 	bge	r22,r2,cc54 <___svfprintf_internal_r+0x1504>
    cc7c:	d9801e04 	addi	r6,sp,120
    cc80:	a00b883a 	mov	r5,r20
    cc84:	9809883a 	mov	r4,r19
    cc88:	00141fc0 	call	141fc <__ssprint_r>
    cc8c:	103b951e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    cc90:	d8c02017 	ldw	r3,128(sp)
    cc94:	d8801f17 	ldw	r2,124(sp)
    cc98:	da000404 	addi	r8,sp,16
    cc9c:	003fee06 	br	cc58 <___svfprintf_internal_r+0x1508>
    cca0:	9088703a 	and	r4,r18,r2
    cca4:	203e8d1e 	bne	r4,zero,c6dc <___svfprintf_internal_r+0xf8c>
    cca8:	dc401f17 	ldw	r17,124(sp)
    ccac:	40800115 	stw	r2,4(r8)
    ccb0:	44000015 	stw	r16,0(r8)
    ccb4:	8c400044 	addi	r17,r17,1
    ccb8:	d8c02015 	stw	r3,128(sp)
    ccbc:	dc401f15 	stw	r17,124(sp)
    ccc0:	008001c4 	movi	r2,7
    ccc4:	147f7f16 	blt	r2,r17,cac4 <___svfprintf_internal_r+0x1374>
    ccc8:	45800204 	addi	r22,r8,8
    cccc:	003eac06 	br	c780 <___svfprintf_internal_r+0x1030>
    ccd0:	d9402c17 	ldw	r5,176(sp)
    ccd4:	d9801e04 	addi	r6,sp,120
    ccd8:	9809883a 	mov	r4,r19
    ccdc:	00141fc0 	call	141fc <__ssprint_r>
    cce0:	103b801e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    cce4:	d8c02017 	ldw	r3,128(sp)
    cce8:	dc401f17 	ldw	r17,124(sp)
    ccec:	da000404 	addi	r8,sp,16
    ccf0:	003e8406 	br	c704 <___svfprintf_internal_r+0xfb4>
    ccf4:	d9402c17 	ldw	r5,176(sp)
    ccf8:	d9801e04 	addi	r6,sp,120
    ccfc:	9809883a 	mov	r4,r19
    cd00:	00141fc0 	call	141fc <__ssprint_r>
    cd04:	103b771e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    cd08:	d8c02017 	ldw	r3,128(sp)
    cd0c:	dc401f17 	ldw	r17,124(sp)
    cd10:	dd800404 	addi	r22,sp,16
    cd14:	003e8606 	br	c730 <___svfprintf_internal_r+0xfe0>
    cd18:	0029883a 	mov	r20,zero
    cd1c:	a5000c04 	addi	r20,r20,48
    cd20:	dc001dc4 	addi	r16,sp,119
    cd24:	dd001dc5 	stb	r20,119(sp)
    cd28:	003f3806 	br	ca0c <___svfprintf_internal_r+0x12bc>
    cd2c:	d9402c17 	ldw	r5,176(sp)
    cd30:	d9801e04 	addi	r6,sp,120
    cd34:	9809883a 	mov	r4,r19
    cd38:	00141fc0 	call	141fc <__ssprint_r>
    cd3c:	103b691e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    cd40:	d8c02017 	ldw	r3,128(sp)
    cd44:	da000404 	addi	r8,sp,16
    cd48:	003c9506 	br	bfa0 <___svfprintf_internal_r+0x850>
    cd4c:	d9003617 	ldw	r4,216(sp)
    cd50:	d9403717 	ldw	r5,220(sp)
    cd54:	da003e15 	stw	r8,248(sp)
    cd58:	0013e840 	call	13e84 <__fpclassifyd>
    cd5c:	da003e17 	ldw	r8,248(sp)
    cd60:	1000bd1e 	bne	r2,zero,d058 <___svfprintf_internal_r+0x1908>
    cd64:	008011c4 	movi	r2,71
    cd68:	14411e0e 	bge	r2,r17,d1e4 <___svfprintf_internal_r+0x1a94>
    cd6c:	040000b4 	movhi	r16,2
    cd70:	841e0804 	addi	r16,r16,30752
    cd74:	00c000c4 	movi	r3,3
    cd78:	00bfdfc4 	movi	r2,-129
    cd7c:	d8c02a15 	stw	r3,168(sp)
    cd80:	90a4703a 	and	r18,r18,r2
    cd84:	df002783 	ldbu	fp,158(sp)
    cd88:	d8c02e15 	stw	r3,184(sp)
    cd8c:	d8002915 	stw	zero,164(sp)
    cd90:	d8003215 	stw	zero,200(sp)
    cd94:	003c1c06 	br	be08 <___svfprintf_internal_r+0x6b8>
    cd98:	9080100c 	andi	r2,r18,64
    cd9c:	d8002785 	stb	zero,158(sp)
    cda0:	10009426 	beq	r2,zero,cff4 <___svfprintf_internal_r+0x18a4>
    cda4:	d8c02d17 	ldw	r3,180(sp)
    cda8:	d9002917 	ldw	r4,164(sp)
    cdac:	002d883a 	mov	r22,zero
    cdb0:	18800104 	addi	r2,r3,4
    cdb4:	1d00000b 	ldhu	r20,0(r3)
    cdb8:	203ec10e 	bge	r4,zero,c8c0 <___svfprintf_internal_r+0x1170>
    cdbc:	a586b03a 	or	r3,r20,r22
    cdc0:	d8802d15 	stw	r2,180(sp)
    cdc4:	183ec21e 	bne	r3,zero,c8d0 <___svfprintf_internal_r+0x1180>
    cdc8:	0039883a 	mov	fp,zero
    cdcc:	0005883a 	mov	r2,zero
    cdd0:	003db806 	br	c4b4 <___svfprintf_internal_r+0xd64>
    cdd4:	d8802d17 	ldw	r2,180(sp)
    cdd8:	d8c02d17 	ldw	r3,180(sp)
    cddc:	d9002d17 	ldw	r4,180(sp)
    cde0:	10800017 	ldw	r2,0(r2)
    cde4:	18c00117 	ldw	r3,4(r3)
    cde8:	21000204 	addi	r4,r4,8
    cdec:	d8803615 	stw	r2,216(sp)
    cdf0:	d8c03715 	stw	r3,220(sp)
    cdf4:	d9002d15 	stw	r4,180(sp)
    cdf8:	003b8206 	br	bc04 <___svfprintf_internal_r+0x4b4>
    cdfc:	9080100c 	andi	r2,r18,64
    ce00:	10010726 	beq	r2,zero,d220 <___svfprintf_internal_r+0x1ad0>
    ce04:	d8c02d17 	ldw	r3,180(sp)
    ce08:	1d00000f 	ldh	r20,0(r3)
    ce0c:	18c00104 	addi	r3,r3,4
    ce10:	d8c02d15 	stw	r3,180(sp)
    ce14:	a02dd7fa 	srai	r22,r20,31
    ce18:	b005883a 	mov	r2,r22
    ce1c:	003ba206 	br	bca8 <___svfprintf_internal_r+0x558>
    ce20:	9080100c 	andi	r2,r18,64
    ce24:	10010526 	beq	r2,zero,d23c <___svfprintf_internal_r+0x1aec>
    ce28:	d9002d17 	ldw	r4,180(sp)
    ce2c:	002d883a 	mov	r22,zero
    ce30:	2500000b 	ldhu	r20,0(r4)
    ce34:	21000104 	addi	r4,r4,4
    ce38:	d9002d15 	stw	r4,180(sp)
    ce3c:	003cfe06 	br	c238 <___svfprintf_internal_r+0xae8>
    ce40:	bc400007 	ldb	r17,0(r23)
    ce44:	003a9606 	br	b8a0 <___svfprintf_internal_r+0x150>
    ce48:	9080040c 	andi	r2,r18,16
    ce4c:	10010126 	beq	r2,zero,d254 <___svfprintf_internal_r+0x1b04>
    ce50:	d9402d17 	ldw	r5,180(sp)
    ce54:	d8c02f17 	ldw	r3,188(sp)
    ce58:	28800017 	ldw	r2,0(r5)
    ce5c:	29400104 	addi	r5,r5,4
    ce60:	d9402d15 	stw	r5,180(sp)
    ce64:	10c00015 	stw	r3,0(r2)
    ce68:	003a6406 	br	b7fc <___svfprintf_internal_r+0xac>
    ce6c:	d9002917 	ldw	r4,164(sp)
    ce70:	d8002785 	stb	zero,158(sp)
    ce74:	203d8d16 	blt	r4,zero,c4ac <___svfprintf_internal_r+0xd5c>
    ce78:	00bfdfc4 	movi	r2,-129
    ce7c:	90a4703a 	and	r18,r18,r2
    ce80:	003b0506 	br	ba98 <___svfprintf_internal_r+0x348>
    ce84:	014000b4 	movhi	r5,2
    ce88:	295e1584 	addi	r5,r5,30806
    ce8c:	d9402b15 	stw	r5,172(sp)
    ce90:	d9402b17 	ldw	r5,172(sp)
    ce94:	1c47883a 	add	r3,r3,r17
    ce98:	10800044 	addi	r2,r2,1
    ce9c:	41400015 	stw	r5,0(r8)
    cea0:	44400115 	stw	r17,4(r8)
    cea4:	d8c02015 	stw	r3,128(sp)
    cea8:	d8801f15 	stw	r2,124(sp)
    ceac:	010001c4 	movi	r4,7
    ceb0:	20bf3016 	blt	r4,r2,cb74 <___svfprintf_internal_r+0x1424>
    ceb4:	42000204 	addi	r8,r8,8
    ceb8:	003f3506 	br	cb90 <___svfprintf_internal_r+0x1440>
    cebc:	010000b4 	movhi	r4,2
    cec0:	211e1584 	addi	r4,r4,30806
    cec4:	d9002b15 	stw	r4,172(sp)
    cec8:	003c5e06 	br	c044 <___svfprintf_internal_r+0x8f4>
    cecc:	d9402c17 	ldw	r5,176(sp)
    ced0:	d9801e04 	addi	r6,sp,120
    ced4:	9809883a 	mov	r4,r19
    ced8:	00141fc0 	call	141fc <__ssprint_r>
    cedc:	103b011e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    cee0:	d8c02017 	ldw	r3,128(sp)
    cee4:	da000404 	addi	r8,sp,16
    cee8:	003d9306 	br	c538 <___svfprintf_internal_r+0xde8>
    ceec:	d8801f17 	ldw	r2,124(sp)
    cef0:	014000b4 	movhi	r5,2
    cef4:	01000044 	movi	r4,1
    cef8:	18c00044 	addi	r3,r3,1
    cefc:	10800044 	addi	r2,r2,1
    cf00:	295e1504 	addi	r5,r5,30804
    cf04:	41000115 	stw	r4,4(r8)
    cf08:	41400015 	stw	r5,0(r8)
    cf0c:	d8c02015 	stw	r3,128(sp)
    cf10:	d8801f15 	stw	r2,124(sp)
    cf14:	010001c4 	movi	r4,7
    cf18:	2080b516 	blt	r4,r2,d1f0 <___svfprintf_internal_r+0x1aa0>
    cf1c:	42000204 	addi	r8,r8,8
    cf20:	8800041e 	bne	r17,zero,cf34 <___svfprintf_internal_r+0x17e4>
    cf24:	d8803317 	ldw	r2,204(sp)
    cf28:	1000021e 	bne	r2,zero,cf34 <___svfprintf_internal_r+0x17e4>
    cf2c:	9080004c 	andi	r2,r18,1
    cf30:	103c5b26 	beq	r2,zero,c0a0 <___svfprintf_internal_r+0x950>
    cf34:	d9003817 	ldw	r4,224(sp)
    cf38:	d8801f17 	ldw	r2,124(sp)
    cf3c:	d9403417 	ldw	r5,208(sp)
    cf40:	20c7883a 	add	r3,r4,r3
    cf44:	10800044 	addi	r2,r2,1
    cf48:	41000115 	stw	r4,4(r8)
    cf4c:	41400015 	stw	r5,0(r8)
    cf50:	d8c02015 	stw	r3,128(sp)
    cf54:	d8801f15 	stw	r2,124(sp)
    cf58:	010001c4 	movi	r4,7
    cf5c:	20818016 	blt	r4,r2,d560 <___svfprintf_internal_r+0x1e10>
    cf60:	42000204 	addi	r8,r8,8
    cf64:	0463c83a 	sub	r17,zero,r17
    cf68:	0440cb0e 	bge	zero,r17,d298 <___svfprintf_internal_r+0x1b48>
    cf6c:	05800404 	movi	r22,16
    cf70:	b440e80e 	bge	r22,r17,d314 <___svfprintf_internal_r+0x1bc4>
    cf74:	014000b4 	movhi	r5,2
    cf78:	295e1584 	addi	r5,r5,30806
    cf7c:	d9402b15 	stw	r5,172(sp)
    cf80:	070001c4 	movi	fp,7
    cf84:	dd002c17 	ldw	r20,176(sp)
    cf88:	00000306 	br	cf98 <___svfprintf_internal_r+0x1848>
    cf8c:	42000204 	addi	r8,r8,8
    cf90:	8c7ffc04 	addi	r17,r17,-16
    cf94:	b440e20e 	bge	r22,r17,d320 <___svfprintf_internal_r+0x1bd0>
    cf98:	18c00404 	addi	r3,r3,16
    cf9c:	10800044 	addi	r2,r2,1
    cfa0:	45400015 	stw	r21,0(r8)
    cfa4:	45800115 	stw	r22,4(r8)
    cfa8:	d8c02015 	stw	r3,128(sp)
    cfac:	d8801f15 	stw	r2,124(sp)
    cfb0:	e0bff60e 	bge	fp,r2,cf8c <___svfprintf_internal_r+0x183c>
    cfb4:	d9801e04 	addi	r6,sp,120
    cfb8:	a00b883a 	mov	r5,r20
    cfbc:	9809883a 	mov	r4,r19
    cfc0:	00141fc0 	call	141fc <__ssprint_r>
    cfc4:	103ac71e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    cfc8:	d8c02017 	ldw	r3,128(sp)
    cfcc:	d8801f17 	ldw	r2,124(sp)
    cfd0:	da000404 	addi	r8,sp,16
    cfd4:	003fee06 	br	cf90 <___svfprintf_internal_r+0x1840>
    cfd8:	d8c02d17 	ldw	r3,180(sp)
    cfdc:	d9002917 	ldw	r4,164(sp)
    cfe0:	002d883a 	mov	r22,zero
    cfe4:	18800104 	addi	r2,r3,4
    cfe8:	1d000017 	ldw	r20,0(r3)
    cfec:	203e7d0e 	bge	r4,zero,c9e4 <___svfprintf_internal_r+0x1294>
    cff0:	003eda06 	br	cb5c <___svfprintf_internal_r+0x140c>
    cff4:	d9402d17 	ldw	r5,180(sp)
    cff8:	d8c02917 	ldw	r3,164(sp)
    cffc:	002d883a 	mov	r22,zero
    d000:	28800104 	addi	r2,r5,4
    d004:	2d000017 	ldw	r20,0(r5)
    d008:	183e2d0e 	bge	r3,zero,c8c0 <___svfprintf_internal_r+0x1170>
    d00c:	003f6b06 	br	cdbc <___svfprintf_internal_r+0x166c>
    d010:	d8c02d15 	stw	r3,180(sp)
    d014:	0039883a 	mov	fp,zero
    d018:	003ed206 	br	cb64 <___svfprintf_internal_r+0x1414>
    d01c:	bc400043 	ldbu	r17,1(r23)
    d020:	94800814 	ori	r18,r18,32
    d024:	bdc00044 	addi	r23,r23,1
    d028:	8c403fcc 	andi	r17,r17,255
    d02c:	8c40201c 	xori	r17,r17,128
    d030:	8c7fe004 	addi	r17,r17,-128
    d034:	003a1a06 	br	b8a0 <___svfprintf_internal_r+0x150>
    d038:	d9402c17 	ldw	r5,176(sp)
    d03c:	d9801e04 	addi	r6,sp,120
    d040:	9809883a 	mov	r4,r19
    d044:	00141fc0 	call	141fc <__ssprint_r>
    d048:	103aa61e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    d04c:	d8c02017 	ldw	r3,128(sp)
    d050:	da000404 	addi	r8,sp,16
    d054:	003d4a06 	br	c580 <___svfprintf_internal_r+0xe30>
    d058:	d9002917 	ldw	r4,164(sp)
    d05c:	05bff7c4 	movi	r22,-33
    d060:	00bfffc4 	movi	r2,-1
    d064:	8dac703a 	and	r22,r17,r22
    d068:	20806a26 	beq	r4,r2,d214 <___svfprintf_internal_r+0x1ac4>
    d06c:	008011c4 	movi	r2,71
    d070:	b0813726 	beq	r22,r2,d550 <___svfprintf_internal_r+0x1e00>
    d074:	d9003717 	ldw	r4,220(sp)
    d078:	90c04014 	ori	r3,r18,256
    d07c:	d8c02b15 	stw	r3,172(sp)
    d080:	20015d16 	blt	r4,zero,d5f8 <___svfprintf_internal_r+0x1ea8>
    d084:	dd003717 	ldw	r20,220(sp)
    d088:	d8002a05 	stb	zero,168(sp)
    d08c:	00801984 	movi	r2,102
    d090:	88814026 	beq	r17,r2,d594 <___svfprintf_internal_r+0x1e44>
    d094:	00801184 	movi	r2,70
    d098:	88817126 	beq	r17,r2,d660 <___svfprintf_internal_r+0x1f10>
    d09c:	00801144 	movi	r2,69
    d0a0:	b0816226 	beq	r22,r2,d62c <___svfprintf_internal_r+0x1edc>
    d0a4:	d8c02917 	ldw	r3,164(sp)
    d0a8:	d8802104 	addi	r2,sp,132
    d0ac:	d8800315 	stw	r2,12(sp)
    d0b0:	d9403617 	ldw	r5,216(sp)
    d0b4:	d8802504 	addi	r2,sp,148
    d0b8:	d8800215 	stw	r2,8(sp)
    d0bc:	d8802604 	addi	r2,sp,152
    d0c0:	d8c00015 	stw	r3,0(sp)
    d0c4:	d8800115 	stw	r2,4(sp)
    d0c8:	01c00084 	movi	r7,2
    d0cc:	a00d883a 	mov	r6,r20
    d0d0:	9809883a 	mov	r4,r19
    d0d4:	d8c03d15 	stw	r3,244(sp)
    d0d8:	da003e15 	stw	r8,248(sp)
    d0dc:	000ff4c0 	call	ff4c <_dtoa_r>
    d0e0:	1021883a 	mov	r16,r2
    d0e4:	008019c4 	movi	r2,103
    d0e8:	d8c03d17 	ldw	r3,244(sp)
    d0ec:	da003e17 	ldw	r8,248(sp)
    d0f0:	8880e726 	beq	r17,r2,d490 <___svfprintf_internal_r+0x1d40>
    d0f4:	008011c4 	movi	r2,71
    d0f8:	8880d426 	beq	r17,r2,d44c <___svfprintf_internal_r+0x1cfc>
    d0fc:	80f9883a 	add	fp,r16,r3
    d100:	d9003617 	ldw	r4,216(sp)
    d104:	000d883a 	mov	r6,zero
    d108:	000f883a 	mov	r7,zero
    d10c:	a00b883a 	mov	r5,r20
    d110:	da003e15 	stw	r8,248(sp)
    d114:	0019ef80 	call	19ef8 <__eqdf2>
    d118:	da003e17 	ldw	r8,248(sp)
    d11c:	1000e426 	beq	r2,zero,d4b0 <___svfprintf_internal_r+0x1d60>
    d120:	d8802117 	ldw	r2,132(sp)
    d124:	1700062e 	bgeu	r2,fp,d140 <___svfprintf_internal_r+0x19f0>
    d128:	01000c04 	movi	r4,48
    d12c:	10c00044 	addi	r3,r2,1
    d130:	d8c02115 	stw	r3,132(sp)
    d134:	11000005 	stb	r4,0(r2)
    d138:	d8802117 	ldw	r2,132(sp)
    d13c:	173ffb36 	bltu	r2,fp,d12c <___svfprintf_internal_r+0x19dc>
    d140:	1405c83a 	sub	r2,r2,r16
    d144:	d8803315 	stw	r2,204(sp)
    d148:	008011c4 	movi	r2,71
    d14c:	b080c526 	beq	r22,r2,d464 <___svfprintf_internal_r+0x1d14>
    d150:	00801944 	movi	r2,101
    d154:	1441d90e 	bge	r2,r17,d8bc <___svfprintf_internal_r+0x216c>
    d158:	d8c02617 	ldw	r3,152(sp)
    d15c:	00801984 	movi	r2,102
    d160:	d8c03215 	stw	r3,200(sp)
    d164:	88813426 	beq	r17,r2,d638 <___svfprintf_internal_r+0x1ee8>
    d168:	d8c03217 	ldw	r3,200(sp)
    d16c:	d9003317 	ldw	r4,204(sp)
    d170:	19012516 	blt	r3,r4,d608 <___svfprintf_internal_r+0x1eb8>
    d174:	9480004c 	andi	r18,r18,1
    d178:	9001841e 	bne	r18,zero,d78c <___svfprintf_internal_r+0x203c>
    d17c:	1805883a 	mov	r2,r3
    d180:	1801cc16 	blt	r3,zero,d8b4 <___svfprintf_internal_r+0x2164>
    d184:	d8c03217 	ldw	r3,200(sp)
    d188:	044019c4 	movi	r17,103
    d18c:	d8c02e15 	stw	r3,184(sp)
    d190:	df002a07 	ldb	fp,168(sp)
    d194:	e000a61e 	bne	fp,zero,d430 <___svfprintf_internal_r+0x1ce0>
    d198:	df002783 	ldbu	fp,158(sp)
    d19c:	d8802a15 	stw	r2,168(sp)
    d1a0:	dc802b17 	ldw	r18,172(sp)
    d1a4:	d8002915 	stw	zero,164(sp)
    d1a8:	003b1706 	br	be08 <___svfprintf_internal_r+0x6b8>
    d1ac:	040000b4 	movhi	r16,2
    d1b0:	841e0504 	addi	r16,r16,30740
    d1b4:	003aa606 	br	bc50 <___svfprintf_internal_r+0x500>
    d1b8:	d9003917 	ldw	r4,228(sp)
    d1bc:	04001004 	movi	r16,64
    d1c0:	800b883a 	mov	r5,r16
    d1c4:	00124700 	call	12470 <_malloc_r>
    d1c8:	d9002c17 	ldw	r4,176(sp)
    d1cc:	20800015 	stw	r2,0(r4)
    d1d0:	20800415 	stw	r2,16(r4)
    d1d4:	1001cb26 	beq	r2,zero,d904 <___svfprintf_internal_r+0x21b4>
    d1d8:	d8802c17 	ldw	r2,176(sp)
    d1dc:	14000515 	stw	r16,20(r2)
    d1e0:	00397606 	br	b7bc <___svfprintf_internal_r+0x6c>
    d1e4:	040000b4 	movhi	r16,2
    d1e8:	841e0704 	addi	r16,r16,30748
    d1ec:	003ee106 	br	cd74 <___svfprintf_internal_r+0x1624>
    d1f0:	d9402c17 	ldw	r5,176(sp)
    d1f4:	d9801e04 	addi	r6,sp,120
    d1f8:	9809883a 	mov	r4,r19
    d1fc:	00141fc0 	call	141fc <__ssprint_r>
    d200:	103a381e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    d204:	dc402617 	ldw	r17,152(sp)
    d208:	d8c02017 	ldw	r3,128(sp)
    d20c:	da000404 	addi	r8,sp,16
    d210:	003f4306 	br	cf20 <___svfprintf_internal_r+0x17d0>
    d214:	01400184 	movi	r5,6
    d218:	d9402915 	stw	r5,164(sp)
    d21c:	003f9506 	br	d074 <___svfprintf_internal_r+0x1924>
    d220:	d9002d17 	ldw	r4,180(sp)
    d224:	25000017 	ldw	r20,0(r4)
    d228:	21000104 	addi	r4,r4,4
    d22c:	d9002d15 	stw	r4,180(sp)
    d230:	a02dd7fa 	srai	r22,r20,31
    d234:	b005883a 	mov	r2,r22
    d238:	003a9b06 	br	bca8 <___svfprintf_internal_r+0x558>
    d23c:	d9402d17 	ldw	r5,180(sp)
    d240:	002d883a 	mov	r22,zero
    d244:	2d000017 	ldw	r20,0(r5)
    d248:	29400104 	addi	r5,r5,4
    d24c:	d9402d15 	stw	r5,180(sp)
    d250:	003bf906 	br	c238 <___svfprintf_internal_r+0xae8>
    d254:	9480100c 	andi	r18,r18,64
    d258:	90006e26 	beq	r18,zero,d414 <___svfprintf_internal_r+0x1cc4>
    d25c:	d9002d17 	ldw	r4,180(sp)
    d260:	d9402f17 	ldw	r5,188(sp)
    d264:	20800017 	ldw	r2,0(r4)
    d268:	21000104 	addi	r4,r4,4
    d26c:	d9002d15 	stw	r4,180(sp)
    d270:	1140000d 	sth	r5,0(r2)
    d274:	00396106 	br	b7fc <___svfprintf_internal_r+0xac>
    d278:	d9402c17 	ldw	r5,176(sp)
    d27c:	d9801e04 	addi	r6,sp,120
    d280:	9809883a 	mov	r4,r19
    d284:	00141fc0 	call	141fc <__ssprint_r>
    d288:	103a161e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    d28c:	d8c02017 	ldw	r3,128(sp)
    d290:	d8801f17 	ldw	r2,124(sp)
    d294:	da000404 	addi	r8,sp,16
    d298:	d9403317 	ldw	r5,204(sp)
    d29c:	10800044 	addi	r2,r2,1
    d2a0:	44000015 	stw	r16,0(r8)
    d2a4:	28c7883a 	add	r3,r5,r3
    d2a8:	003b7706 	br	c088 <___svfprintf_internal_r+0x938>
    d2ac:	8009883a 	mov	r4,r16
    d2b0:	da003e15 	stw	r8,248(sp)
    d2b4:	00141640 	call	14164 <strlen>
    d2b8:	d8802e15 	stw	r2,184(sp)
    d2bc:	da003e17 	ldw	r8,248(sp)
    d2c0:	103c280e 	bge	r2,zero,c364 <___svfprintf_internal_r+0xc14>
    d2c4:	0005883a 	mov	r2,zero
    d2c8:	003c2606 	br	c364 <___svfprintf_internal_r+0xc14>
    d2cc:	00bfffc4 	movi	r2,-1
    d2d0:	003a0906 	br	baf8 <___svfprintf_internal_r+0x3a8>
    d2d4:	010000b4 	movhi	r4,2
    d2d8:	211e1984 	addi	r4,r4,30822
    d2dc:	d9003515 	stw	r4,212(sp)
    d2e0:	003b0606 	br	befc <___svfprintf_internal_r+0x7ac>
    d2e4:	013fffc4 	movi	r4,-1
    d2e8:	003a2706 	br	bb88 <___svfprintf_internal_r+0x438>
    d2ec:	d9402c17 	ldw	r5,176(sp)
    d2f0:	d9801e04 	addi	r6,sp,120
    d2f4:	9809883a 	mov	r4,r19
    d2f8:	00141fc0 	call	141fc <__ssprint_r>
    d2fc:	1039f91e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    d300:	d8c02017 	ldw	r3,128(sp)
    d304:	da000404 	addi	r8,sp,16
    d308:	003d8406 	br	c91c <___svfprintf_internal_r+0x11cc>
    d30c:	0023883a 	mov	r17,zero
    d310:	003d8306 	br	c920 <___svfprintf_internal_r+0x11d0>
    d314:	010000b4 	movhi	r4,2
    d318:	211e1584 	addi	r4,r4,30806
    d31c:	d9002b15 	stw	r4,172(sp)
    d320:	d9002b17 	ldw	r4,172(sp)
    d324:	1c47883a 	add	r3,r3,r17
    d328:	10800044 	addi	r2,r2,1
    d32c:	41000015 	stw	r4,0(r8)
    d330:	44400115 	stw	r17,4(r8)
    d334:	d8c02015 	stw	r3,128(sp)
    d338:	d8801f15 	stw	r2,124(sp)
    d33c:	010001c4 	movi	r4,7
    d340:	20bfcd16 	blt	r4,r2,d278 <___svfprintf_internal_r+0x1b28>
    d344:	42000204 	addi	r8,r8,8
    d348:	003fd306 	br	d298 <___svfprintf_internal_r+0x1b48>
    d34c:	d9402c17 	ldw	r5,176(sp)
    d350:	d9801e04 	addi	r6,sp,120
    d354:	9809883a 	mov	r4,r19
    d358:	00141fc0 	call	141fc <__ssprint_r>
    d35c:	1039e11e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    d360:	d8802617 	ldw	r2,152(sp)
    d364:	d8c02017 	ldw	r3,128(sp)
    d368:	da000404 	addi	r8,sp,16
    d36c:	003e1c06 	br	cbe0 <___svfprintf_internal_r+0x1490>
    d370:	d8802917 	ldw	r2,164(sp)
    d374:	00c00184 	movi	r3,6
    d378:	1880012e 	bgeu	r3,r2,d380 <___svfprintf_internal_r+0x1c30>
    d37c:	1805883a 	mov	r2,r3
    d380:	d8802e15 	stw	r2,184(sp)
    d384:	1000f316 	blt	r2,zero,d754 <___svfprintf_internal_r+0x2004>
    d388:	040000b4 	movhi	r16,2
    d38c:	d8802a15 	stw	r2,168(sp)
    d390:	dd002d15 	stw	r20,180(sp)
    d394:	d8002915 	stw	zero,164(sp)
    d398:	d8003215 	stw	zero,200(sp)
    d39c:	841e1304 	addi	r16,r16,30796
    d3a0:	0039883a 	mov	fp,zero
    d3a4:	003a9f06 	br	be24 <___svfprintf_internal_r+0x6d4>
    d3a8:	010000b4 	movhi	r4,2
    d3ac:	211e1984 	addi	r4,r4,30822
    d3b0:	d9003515 	stw	r4,212(sp)
    d3b4:	003b5f06 	br	c134 <___svfprintf_internal_r+0x9e4>
    d3b8:	d9402c17 	ldw	r5,176(sp)
    d3bc:	d9801e04 	addi	r6,sp,120
    d3c0:	9809883a 	mov	r4,r19
    d3c4:	00141fc0 	call	141fc <__ssprint_r>
    d3c8:	1039c61e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    d3cc:	d8802617 	ldw	r2,152(sp)
    d3d0:	d9403317 	ldw	r5,204(sp)
    d3d4:	d8c02017 	ldw	r3,128(sp)
    d3d8:	da000404 	addi	r8,sp,16
    d3dc:	2885c83a 	sub	r2,r5,r2
    d3e0:	003e1006 	br	cc24 <___svfprintf_internal_r+0x14d4>
    d3e4:	00800044 	movi	r2,1
    d3e8:	10803fcc 	andi	r2,r2,255
    d3ec:	00c00044 	movi	r3,1
    d3f0:	10fa3526 	beq	r2,r3,bcc8 <___svfprintf_internal_r+0x578>
    d3f4:	00c00084 	movi	r3,2
    d3f8:	10fb9e26 	beq	r2,r3,c274 <___svfprintf_internal_r+0xb24>
    d3fc:	003a6406 	br	bd90 <___svfprintf_internal_r+0x640>
    d400:	0021883a 	mov	r16,zero
    d404:	003e0806 	br	cc28 <___svfprintf_internal_r+0x14d8>
    d408:	07000b44 	movi	fp,45
    d40c:	df002785 	stb	fp,158(sp)
    d410:	003a0b06 	br	bc40 <___svfprintf_internal_r+0x4f0>
    d414:	d8c02d17 	ldw	r3,180(sp)
    d418:	d9002f17 	ldw	r4,188(sp)
    d41c:	18800017 	ldw	r2,0(r3)
    d420:	18c00104 	addi	r3,r3,4
    d424:	d8c02d15 	stw	r3,180(sp)
    d428:	11000015 	stw	r4,0(r2)
    d42c:	0038f306 	br	b7fc <___svfprintf_internal_r+0xac>
    d430:	00c00b44 	movi	r3,45
    d434:	d8c02785 	stb	r3,158(sp)
    d438:	d8802a15 	stw	r2,168(sp)
    d43c:	dc802b17 	ldw	r18,172(sp)
    d440:	d8002915 	stw	zero,164(sp)
    d444:	07000b44 	movi	fp,45
    d448:	003a7306 	br	be18 <___svfprintf_internal_r+0x6c8>
    d44c:	9080004c 	andi	r2,r18,1
    d450:	1000941e 	bne	r2,zero,d6a4 <___svfprintf_internal_r+0x1f54>
    d454:	d8802117 	ldw	r2,132(sp)
    d458:	1405c83a 	sub	r2,r2,r16
    d45c:	d8803315 	stw	r2,204(sp)
    d460:	b441161e 	bne	r22,r17,d8bc <___svfprintf_internal_r+0x216c>
    d464:	dd802617 	ldw	r22,152(sp)
    d468:	00bfff44 	movi	r2,-3
    d46c:	b0801a16 	blt	r22,r2,d4d8 <___svfprintf_internal_r+0x1d88>
    d470:	d9402917 	ldw	r5,164(sp)
    d474:	2d801816 	blt	r5,r22,d4d8 <___svfprintf_internal_r+0x1d88>
    d478:	dd803215 	stw	r22,200(sp)
    d47c:	003f3a06 	br	d168 <___svfprintf_internal_r+0x1a18>
    d480:	1025883a 	mov	r18,r2
    d484:	0039883a 	mov	fp,zero
    d488:	00800084 	movi	r2,2
    d48c:	003fd606 	br	d3e8 <___svfprintf_internal_r+0x1c98>
    d490:	9080004c 	andi	r2,r18,1
    d494:	103f191e 	bne	r2,zero,d0fc <___svfprintf_internal_r+0x19ac>
    d498:	d8802117 	ldw	r2,132(sp)
    d49c:	003f2806 	br	d140 <___svfprintf_internal_r+0x19f0>
    d4a0:	010000b4 	movhi	r4,2
    d4a4:	211e1584 	addi	r4,r4,30806
    d4a8:	d9002b15 	stw	r4,172(sp)
    d4ac:	003c7c06 	br	c6a0 <___svfprintf_internal_r+0xf50>
    d4b0:	e005883a 	mov	r2,fp
    d4b4:	003f2206 	br	d140 <___svfprintf_internal_r+0x19f0>
    d4b8:	d9402917 	ldw	r5,164(sp)
    d4bc:	df002783 	ldbu	fp,158(sp)
    d4c0:	dd002d15 	stw	r20,180(sp)
    d4c4:	d9402a15 	stw	r5,168(sp)
    d4c8:	d9402e15 	stw	r5,184(sp)
    d4cc:	d8002915 	stw	zero,164(sp)
    d4d0:	d8003215 	stw	zero,200(sp)
    d4d4:	003a4c06 	br	be08 <___svfprintf_internal_r+0x6b8>
    d4d8:	8c7fff84 	addi	r17,r17,-2
    d4dc:	b5bfffc4 	addi	r22,r22,-1
    d4e0:	dd802615 	stw	r22,152(sp)
    d4e4:	dc4022c5 	stb	r17,139(sp)
    d4e8:	b000c316 	blt	r22,zero,d7f8 <___svfprintf_internal_r+0x20a8>
    d4ec:	00800ac4 	movi	r2,43
    d4f0:	d8802305 	stb	r2,140(sp)
    d4f4:	00800244 	movi	r2,9
    d4f8:	15806e16 	blt	r2,r22,d6b4 <___svfprintf_internal_r+0x1f64>
    d4fc:	00800c04 	movi	r2,48
    d500:	b5800c04 	addi	r22,r22,48
    d504:	d8802345 	stb	r2,141(sp)
    d508:	dd802385 	stb	r22,142(sp)
    d50c:	d88023c4 	addi	r2,sp,143
    d510:	df0022c4 	addi	fp,sp,139
    d514:	d8c03317 	ldw	r3,204(sp)
    d518:	1739c83a 	sub	fp,r2,fp
    d51c:	d9003317 	ldw	r4,204(sp)
    d520:	e0c7883a 	add	r3,fp,r3
    d524:	df003b15 	stw	fp,236(sp)
    d528:	d8c02e15 	stw	r3,184(sp)
    d52c:	00800044 	movi	r2,1
    d530:	1100b70e 	bge	r2,r4,d810 <___svfprintf_internal_r+0x20c0>
    d534:	d8c02e17 	ldw	r3,184(sp)
    d538:	18c00044 	addi	r3,r3,1
    d53c:	d8c02e15 	stw	r3,184(sp)
    d540:	1805883a 	mov	r2,r3
    d544:	1800b016 	blt	r3,zero,d808 <___svfprintf_internal_r+0x20b8>
    d548:	d8003215 	stw	zero,200(sp)
    d54c:	003f1006 	br	d190 <___svfprintf_internal_r+0x1a40>
    d550:	d8802917 	ldw	r2,164(sp)
    d554:	103ec71e 	bne	r2,zero,d074 <___svfprintf_internal_r+0x1924>
    d558:	dc002915 	stw	r16,164(sp)
    d55c:	003ec506 	br	d074 <___svfprintf_internal_r+0x1924>
    d560:	d9402c17 	ldw	r5,176(sp)
    d564:	d9801e04 	addi	r6,sp,120
    d568:	9809883a 	mov	r4,r19
    d56c:	00141fc0 	call	141fc <__ssprint_r>
    d570:	10395c1e 	bne	r2,zero,bae4 <___svfprintf_internal_r+0x394>
    d574:	dc402617 	ldw	r17,152(sp)
    d578:	d8c02017 	ldw	r3,128(sp)
    d57c:	d8801f17 	ldw	r2,124(sp)
    d580:	da000404 	addi	r8,sp,16
    d584:	003e7706 	br	cf64 <___svfprintf_internal_r+0x1814>
    d588:	582f883a 	mov	r23,r11
    d58c:	d8002915 	stw	zero,164(sp)
    d590:	0038c406 	br	b8a4 <___svfprintf_internal_r+0x154>
    d594:	d8c02917 	ldw	r3,164(sp)
    d598:	d8802104 	addi	r2,sp,132
    d59c:	d8800315 	stw	r2,12(sp)
    d5a0:	d9403617 	ldw	r5,216(sp)
    d5a4:	d8802504 	addi	r2,sp,148
    d5a8:	d8800215 	stw	r2,8(sp)
    d5ac:	d8802604 	addi	r2,sp,152
    d5b0:	d8c00015 	stw	r3,0(sp)
    d5b4:	9809883a 	mov	r4,r19
    d5b8:	d8800115 	stw	r2,4(sp)
    d5bc:	01c000c4 	movi	r7,3
    d5c0:	a00d883a 	mov	r6,r20
    d5c4:	da003e15 	stw	r8,248(sp)
    d5c8:	000ff4c0 	call	ff4c <_dtoa_r>
    d5cc:	d9002917 	ldw	r4,164(sp)
    d5d0:	da003e17 	ldw	r8,248(sp)
    d5d4:	1021883a 	mov	r16,r2
    d5d8:	1139883a 	add	fp,r2,r4
    d5dc:	2007883a 	mov	r3,r4
    d5e0:	81000007 	ldb	r4,0(r16)
    d5e4:	00800c04 	movi	r2,48
    d5e8:	20806f26 	beq	r4,r2,d7a8 <___svfprintf_internal_r+0x2058>
    d5ec:	d8c02617 	ldw	r3,152(sp)
    d5f0:	e0f9883a 	add	fp,fp,r3
    d5f4:	003ec206 	br	d100 <___svfprintf_internal_r+0x19b0>
    d5f8:	00c00b44 	movi	r3,45
    d5fc:	2520003c 	xorhi	r20,r4,32768
    d600:	d8c02a05 	stb	r3,168(sp)
    d604:	003ea106 	br	d08c <___svfprintf_internal_r+0x193c>
    d608:	d8c03217 	ldw	r3,200(sp)
    d60c:	00c0890e 	bge	zero,r3,d834 <___svfprintf_internal_r+0x20e4>
    d610:	00800044 	movi	r2,1
    d614:	d9003317 	ldw	r4,204(sp)
    d618:	1105883a 	add	r2,r2,r4
    d61c:	d8802e15 	stw	r2,184(sp)
    d620:	10005f16 	blt	r2,zero,d7a0 <___svfprintf_internal_r+0x2050>
    d624:	044019c4 	movi	r17,103
    d628:	003ed906 	br	d190 <___svfprintf_internal_r+0x1a40>
    d62c:	d9002917 	ldw	r4,164(sp)
    d630:	20c00044 	addi	r3,r4,1
    d634:	003e9c06 	br	d0a8 <___svfprintf_internal_r+0x1958>
    d638:	d9002917 	ldw	r4,164(sp)
    d63c:	00c0680e 	bge	zero,r3,d7e0 <___svfprintf_internal_r+0x2090>
    d640:	2000461e 	bne	r4,zero,d75c <___svfprintf_internal_r+0x200c>
    d644:	9480004c 	andi	r18,r18,1
    d648:	9000441e 	bne	r18,zero,d75c <___svfprintf_internal_r+0x200c>
    d64c:	1805883a 	mov	r2,r3
    d650:	1800a016 	blt	r3,zero,d8d4 <___svfprintf_internal_r+0x2184>
    d654:	d8c03217 	ldw	r3,200(sp)
    d658:	d8c02e15 	stw	r3,184(sp)
    d65c:	003ecc06 	br	d190 <___svfprintf_internal_r+0x1a40>
    d660:	d9402917 	ldw	r5,164(sp)
    d664:	d8802104 	addi	r2,sp,132
    d668:	d8800315 	stw	r2,12(sp)
    d66c:	d9400015 	stw	r5,0(sp)
    d670:	d8802504 	addi	r2,sp,148
    d674:	d9403617 	ldw	r5,216(sp)
    d678:	d8800215 	stw	r2,8(sp)
    d67c:	d8802604 	addi	r2,sp,152
    d680:	d8800115 	stw	r2,4(sp)
    d684:	01c000c4 	movi	r7,3
    d688:	a00d883a 	mov	r6,r20
    d68c:	9809883a 	mov	r4,r19
    d690:	da003e15 	stw	r8,248(sp)
    d694:	000ff4c0 	call	ff4c <_dtoa_r>
    d698:	d8c02917 	ldw	r3,164(sp)
    d69c:	da003e17 	ldw	r8,248(sp)
    d6a0:	1021883a 	mov	r16,r2
    d6a4:	00801184 	movi	r2,70
    d6a8:	80f9883a 	add	fp,r16,r3
    d6ac:	88bfcc26 	beq	r17,r2,d5e0 <___svfprintf_internal_r+0x1e90>
    d6b0:	003e9306 	br	d100 <___svfprintf_internal_r+0x19b0>
    d6b4:	df0022c4 	addi	fp,sp,139
    d6b8:	dc002915 	stw	r16,164(sp)
    d6bc:	9829883a 	mov	r20,r19
    d6c0:	e021883a 	mov	r16,fp
    d6c4:	4027883a 	mov	r19,r8
    d6c8:	b009883a 	mov	r4,r22
    d6cc:	01400284 	movi	r5,10
    d6d0:	0018c340 	call	18c34 <__modsi3>
    d6d4:	10800c04 	addi	r2,r2,48
    d6d8:	843fffc4 	addi	r16,r16,-1
    d6dc:	b009883a 	mov	r4,r22
    d6e0:	01400284 	movi	r5,10
    d6e4:	80800005 	stb	r2,0(r16)
    d6e8:	0018bb00 	call	18bb0 <__divsi3>
    d6ec:	102d883a 	mov	r22,r2
    d6f0:	00800244 	movi	r2,9
    d6f4:	15bff416 	blt	r2,r22,d6c8 <___svfprintf_internal_r+0x1f78>
    d6f8:	9811883a 	mov	r8,r19
    d6fc:	b0800c04 	addi	r2,r22,48
    d700:	a027883a 	mov	r19,r20
    d704:	8029883a 	mov	r20,r16
    d708:	a17fffc4 	addi	r5,r20,-1
    d70c:	a0bfffc5 	stb	r2,-1(r20)
    d710:	dc002917 	ldw	r16,164(sp)
    d714:	2f00752e 	bgeu	r5,fp,d8ec <___svfprintf_internal_r+0x219c>
    d718:	d9c02384 	addi	r7,sp,142
    d71c:	3d0fc83a 	sub	r7,r7,r20
    d720:	d9002344 	addi	r4,sp,141
    d724:	e1cf883a 	add	r7,fp,r7
    d728:	00000106 	br	d730 <___svfprintf_internal_r+0x1fe0>
    d72c:	28800003 	ldbu	r2,0(r5)
    d730:	20800005 	stb	r2,0(r4)
    d734:	21000044 	addi	r4,r4,1
    d738:	29400044 	addi	r5,r5,1
    d73c:	21fffb1e 	bne	r4,r7,d72c <___svfprintf_internal_r+0x1fdc>
    d740:	d8802304 	addi	r2,sp,140
    d744:	1505c83a 	sub	r2,r2,r20
    d748:	d8c02344 	addi	r3,sp,141
    d74c:	1885883a 	add	r2,r3,r2
    d750:	003f7006 	br	d514 <___svfprintf_internal_r+0x1dc4>
    d754:	0005883a 	mov	r2,zero
    d758:	003f0b06 	br	d388 <___svfprintf_internal_r+0x1c38>
    d75c:	d9002917 	ldw	r4,164(sp)
    d760:	d8c03217 	ldw	r3,200(sp)
    d764:	20800044 	addi	r2,r4,1
    d768:	1885883a 	add	r2,r3,r2
    d76c:	d8802e15 	stw	r2,184(sp)
    d770:	103e870e 	bge	r2,zero,d190 <___svfprintf_internal_r+0x1a40>
    d774:	0005883a 	mov	r2,zero
    d778:	003e8506 	br	d190 <___svfprintf_internal_r+0x1a40>
    d77c:	010000b4 	movhi	r4,2
    d780:	211e1584 	addi	r4,r4,30806
    d784:	d9002b15 	stw	r4,172(sp)
    d788:	003cc506 	br	caa0 <___svfprintf_internal_r+0x1350>
    d78c:	d8c03217 	ldw	r3,200(sp)
    d790:	18c00044 	addi	r3,r3,1
    d794:	d8c02e15 	stw	r3,184(sp)
    d798:	1805883a 	mov	r2,r3
    d79c:	183fa10e 	bge	r3,zero,d624 <___svfprintf_internal_r+0x1ed4>
    d7a0:	0005883a 	mov	r2,zero
    d7a4:	003f9f06 	br	d624 <___svfprintf_internal_r+0x1ed4>
    d7a8:	d9003617 	ldw	r4,216(sp)
    d7ac:	000d883a 	mov	r6,zero
    d7b0:	000f883a 	mov	r7,zero
    d7b4:	a00b883a 	mov	r5,r20
    d7b8:	d8c03d15 	stw	r3,244(sp)
    d7bc:	da003e15 	stw	r8,248(sp)
    d7c0:	0019ef80 	call	19ef8 <__eqdf2>
    d7c4:	d8c03d17 	ldw	r3,244(sp)
    d7c8:	da003e17 	ldw	r8,248(sp)
    d7cc:	103f8726 	beq	r2,zero,d5ec <___svfprintf_internal_r+0x1e9c>
    d7d0:	00800044 	movi	r2,1
    d7d4:	10c7c83a 	sub	r3,r2,r3
    d7d8:	d8c02615 	stw	r3,152(sp)
    d7dc:	003f8406 	br	d5f0 <___svfprintf_internal_r+0x1ea0>
    d7e0:	20000e1e 	bne	r4,zero,d81c <___svfprintf_internal_r+0x20cc>
    d7e4:	9480004c 	andi	r18,r18,1
    d7e8:	90000c1e 	bne	r18,zero,d81c <___svfprintf_internal_r+0x20cc>
    d7ec:	00800044 	movi	r2,1
    d7f0:	d8802e15 	stw	r2,184(sp)
    d7f4:	003e6606 	br	d190 <___svfprintf_internal_r+0x1a40>
    d7f8:	00800b44 	movi	r2,45
    d7fc:	05adc83a 	sub	r22,zero,r22
    d800:	d8802305 	stb	r2,140(sp)
    d804:	003f3b06 	br	d4f4 <___svfprintf_internal_r+0x1da4>
    d808:	0005883a 	mov	r2,zero
    d80c:	003f4e06 	br	d548 <___svfprintf_internal_r+0x1df8>
    d810:	90a4703a 	and	r18,r18,r2
    d814:	903f4a26 	beq	r18,zero,d540 <___svfprintf_internal_r+0x1df0>
    d818:	003f4606 	br	d534 <___svfprintf_internal_r+0x1de4>
    d81c:	d8c02917 	ldw	r3,164(sp)
    d820:	18c00084 	addi	r3,r3,2
    d824:	d8c02e15 	stw	r3,184(sp)
    d828:	1805883a 	mov	r2,r3
    d82c:	183e580e 	bge	r3,zero,d190 <___svfprintf_internal_r+0x1a40>
    d830:	003fd006 	br	d774 <___svfprintf_internal_r+0x2024>
    d834:	00800084 	movi	r2,2
    d838:	10c5c83a 	sub	r2,r2,r3
    d83c:	003f7506 	br	d614 <___svfprintf_internal_r+0x1ec4>
    d840:	d8802d17 	ldw	r2,180(sp)
    d844:	d9002d17 	ldw	r4,180(sp)
    d848:	bc400043 	ldbu	r17,1(r23)
    d84c:	10800017 	ldw	r2,0(r2)
    d850:	582f883a 	mov	r23,r11
    d854:	d8802915 	stw	r2,164(sp)
    d858:	20800104 	addi	r2,r4,4
    d85c:	d9002917 	ldw	r4,164(sp)
    d860:	d8802d15 	stw	r2,180(sp)
    d864:	203df00e 	bge	r4,zero,d028 <___svfprintf_internal_r+0x18d8>
    d868:	8c403fcc 	andi	r17,r17,255
    d86c:	00bfffc4 	movi	r2,-1
    d870:	8c40201c 	xori	r17,r17,128
    d874:	d8802915 	stw	r2,164(sp)
    d878:	8c7fe004 	addi	r17,r17,-128
    d87c:	00380806 	br	b8a0 <___svfprintf_internal_r+0x150>
    d880:	9080004c 	andi	r2,r18,1
    d884:	0039883a 	mov	fp,zero
    d888:	10000726 	beq	r2,zero,d8a8 <___svfprintf_internal_r+0x2158>
    d88c:	d8c02817 	ldw	r3,160(sp)
    d890:	dc001dc4 	addi	r16,sp,119
    d894:	00800c04 	movi	r2,48
    d898:	1c07c83a 	sub	r3,r3,r16
    d89c:	d8801dc5 	stb	r2,119(sp)
    d8a0:	d8c02e15 	stw	r3,184(sp)
    d8a4:	00395206 	br	bdf0 <___svfprintf_internal_r+0x6a0>
    d8a8:	d8002e15 	stw	zero,184(sp)
    d8ac:	dc001e04 	addi	r16,sp,120
    d8b0:	00394f06 	br	bdf0 <___svfprintf_internal_r+0x6a0>
    d8b4:	0005883a 	mov	r2,zero
    d8b8:	003e3206 	br	d184 <___svfprintf_internal_r+0x1a34>
    d8bc:	dd802617 	ldw	r22,152(sp)
    d8c0:	003f0606 	br	d4dc <___svfprintf_internal_r+0x1d8c>
    d8c4:	d9c02785 	stb	r7,158(sp)
    d8c8:	003a5106 	br	c210 <___svfprintf_internal_r+0xac0>
    d8cc:	d9c02785 	stb	r7,158(sp)
    d8d0:	003a3706 	br	c1b0 <___svfprintf_internal_r+0xa60>
    d8d4:	0005883a 	mov	r2,zero
    d8d8:	003f5e06 	br	d654 <___svfprintf_internal_r+0x1f04>
    d8dc:	d9c02785 	stb	r7,158(sp)
    d8e0:	00391706 	br	bd40 <___svfprintf_internal_r+0x5f0>
    d8e4:	d9c02785 	stb	r7,158(sp)
    d8e8:	0038e606 	br	bc84 <___svfprintf_internal_r+0x534>
    d8ec:	d8802344 	addi	r2,sp,141
    d8f0:	003f0806 	br	d514 <___svfprintf_internal_r+0x1dc4>
    d8f4:	d9c02785 	stb	r7,158(sp)
    d8f8:	0038b706 	br	bbd8 <___svfprintf_internal_r+0x488>
    d8fc:	d9c02785 	stb	r7,158(sp)
    d900:	003adc06 	br	c474 <___svfprintf_internal_r+0xd24>
    d904:	d9403917 	ldw	r5,228(sp)
    d908:	00800304 	movi	r2,12
    d90c:	28800015 	stw	r2,0(r5)
    d910:	00bfffc4 	movi	r2,-1
    d914:	00387806 	br	baf8 <___svfprintf_internal_r+0x3a8>
    d918:	d9c02785 	stb	r7,158(sp)
    d91c:	003abf06 	br	c41c <___svfprintf_internal_r+0xccc>
    d920:	d9c02785 	stb	r7,158(sp)
    d924:	003a9b06 	br	c394 <___svfprintf_internal_r+0xc44>

0000d928 <___vfprintf_internal_r>:
    d928:	deffb804 	addi	sp,sp,-288
    d92c:	dfc04715 	stw	ra,284(sp)
    d930:	ddc04515 	stw	r23,276(sp)
    d934:	dd404315 	stw	r21,268(sp)
    d938:	d9002c15 	stw	r4,176(sp)
    d93c:	282f883a 	mov	r23,r5
    d940:	302b883a 	mov	r21,r6
    d944:	d9c02d15 	stw	r7,180(sp)
    d948:	df004615 	stw	fp,280(sp)
    d94c:	dd804415 	stw	r22,272(sp)
    d950:	dd004215 	stw	r20,264(sp)
    d954:	dcc04115 	stw	r19,260(sp)
    d958:	dc804015 	stw	r18,256(sp)
    d95c:	dc403f15 	stw	r17,252(sp)
    d960:	dc003e15 	stw	r16,248(sp)
    d964:	00122840 	call	12284 <_localeconv_r>
    d968:	10800017 	ldw	r2,0(r2)
    d96c:	1009883a 	mov	r4,r2
    d970:	d8803415 	stw	r2,208(sp)
    d974:	00141640 	call	14164 <strlen>
    d978:	d8803715 	stw	r2,220(sp)
    d97c:	d8802c17 	ldw	r2,176(sp)
    d980:	10000226 	beq	r2,zero,d98c <___vfprintf_internal_r+0x64>
    d984:	10800e17 	ldw	r2,56(r2)
    d988:	1000f926 	beq	r2,zero,dd70 <___vfprintf_internal_r+0x448>
    d98c:	b880030b 	ldhu	r2,12(r23)
    d990:	10c8000c 	andi	r3,r2,8192
    d994:	1800061e 	bne	r3,zero,d9b0 <___vfprintf_internal_r+0x88>
    d998:	b9001917 	ldw	r4,100(r23)
    d99c:	00f7ffc4 	movi	r3,-8193
    d9a0:	10880014 	ori	r2,r2,8192
    d9a4:	20c6703a 	and	r3,r4,r3
    d9a8:	b880030d 	sth	r2,12(r23)
    d9ac:	b8c01915 	stw	r3,100(r23)
    d9b0:	10c0020c 	andi	r3,r2,8
    d9b4:	1800c126 	beq	r3,zero,dcbc <___vfprintf_internal_r+0x394>
    d9b8:	b8c00417 	ldw	r3,16(r23)
    d9bc:	1800bf26 	beq	r3,zero,dcbc <___vfprintf_internal_r+0x394>
    d9c0:	1080068c 	andi	r2,r2,26
    d9c4:	00c00284 	movi	r3,10
    d9c8:	10c0c426 	beq	r2,r3,dcdc <___vfprintf_internal_r+0x3b4>
    d9cc:	d8c00404 	addi	r3,sp,16
    d9d0:	050000b4 	movhi	r20,2
    d9d4:	d9001e04 	addi	r4,sp,120
    d9d8:	a51e1d84 	addi	r20,r20,30838
    d9dc:	d8c01e15 	stw	r3,120(sp)
    d9e0:	d8002015 	stw	zero,128(sp)
    d9e4:	d8001f15 	stw	zero,124(sp)
    d9e8:	d8003315 	stw	zero,204(sp)
    d9ec:	d8003615 	stw	zero,216(sp)
    d9f0:	d8003815 	stw	zero,224(sp)
    d9f4:	1811883a 	mov	r8,r3
    d9f8:	d8003915 	stw	zero,228(sp)
    d9fc:	d8003a15 	stw	zero,232(sp)
    da00:	d8002f15 	stw	zero,188(sp)
    da04:	d9002815 	stw	r4,160(sp)
    da08:	a8800007 	ldb	r2,0(r21)
    da0c:	10027b26 	beq	r2,zero,e3fc <___vfprintf_internal_r+0xad4>
    da10:	00c00944 	movi	r3,37
    da14:	a821883a 	mov	r16,r21
    da18:	10c0021e 	bne	r2,r3,da24 <___vfprintf_internal_r+0xfc>
    da1c:	00001406 	br	da70 <___vfprintf_internal_r+0x148>
    da20:	10c00326 	beq	r2,r3,da30 <___vfprintf_internal_r+0x108>
    da24:	84000044 	addi	r16,r16,1
    da28:	80800007 	ldb	r2,0(r16)
    da2c:	103ffc1e 	bne	r2,zero,da20 <___vfprintf_internal_r+0xf8>
    da30:	8563c83a 	sub	r17,r16,r21
    da34:	88000e26 	beq	r17,zero,da70 <___vfprintf_internal_r+0x148>
    da38:	d8c02017 	ldw	r3,128(sp)
    da3c:	d8801f17 	ldw	r2,124(sp)
    da40:	45400015 	stw	r21,0(r8)
    da44:	1c47883a 	add	r3,r3,r17
    da48:	10800044 	addi	r2,r2,1
    da4c:	d8c02015 	stw	r3,128(sp)
    da50:	44400115 	stw	r17,4(r8)
    da54:	d8801f15 	stw	r2,124(sp)
    da58:	00c001c4 	movi	r3,7
    da5c:	1880a716 	blt	r3,r2,dcfc <___vfprintf_internal_r+0x3d4>
    da60:	42000204 	addi	r8,r8,8
    da64:	d9402f17 	ldw	r5,188(sp)
    da68:	2c4b883a 	add	r5,r5,r17
    da6c:	d9402f15 	stw	r5,188(sp)
    da70:	80800007 	ldb	r2,0(r16)
    da74:	1000a826 	beq	r2,zero,dd18 <___vfprintf_internal_r+0x3f0>
    da78:	84400047 	ldb	r17,1(r16)
    da7c:	00bfffc4 	movi	r2,-1
    da80:	85400044 	addi	r21,r16,1
    da84:	d8002785 	stb	zero,158(sp)
    da88:	0007883a 	mov	r3,zero
    da8c:	000f883a 	mov	r7,zero
    da90:	d8802915 	stw	r2,164(sp)
    da94:	d8003115 	stw	zero,196(sp)
    da98:	0025883a 	mov	r18,zero
    da9c:	01401604 	movi	r5,88
    daa0:	01800244 	movi	r6,9
    daa4:	02800a84 	movi	r10,42
    daa8:	02401b04 	movi	r9,108
    daac:	ad400044 	addi	r21,r21,1
    dab0:	88bff804 	addi	r2,r17,-32
    dab4:	28830436 	bltu	r5,r2,e6c8 <___vfprintf_internal_r+0xda0>
    dab8:	100490ba 	slli	r2,r2,2
    dabc:	01000074 	movhi	r4,1
    dac0:	2136b404 	addi	r4,r4,-9520
    dac4:	1105883a 	add	r2,r2,r4
    dac8:	10800017 	ldw	r2,0(r2)
    dacc:	1000683a 	jmp	r2
    dad0:	0000e5e8 	cmpgeui	zero,zero,919
    dad4:	0000e6c8 	cmpgei	zero,zero,923
    dad8:	0000e6c8 	cmpgei	zero,zero,923
    dadc:	0000e608 	cmpgei	zero,zero,920
    dae0:	0000e6c8 	cmpgei	zero,zero,923
    dae4:	0000e6c8 	cmpgei	zero,zero,923
    dae8:	0000e6c8 	cmpgei	zero,zero,923
    daec:	0000e6c8 	cmpgei	zero,zero,923
    daf0:	0000e6c8 	cmpgei	zero,zero,923
    daf4:	0000e6c8 	cmpgei	zero,zero,923
    daf8:	0000dd7c 	xorhi	zero,zero,885
    dafc:	0000e524 	muli	zero,zero,916
    db00:	0000e6c8 	cmpgei	zero,zero,923
    db04:	0000dc44 	movi	zero,881
    db08:	0000dda4 	muli	zero,zero,886
    db0c:	0000e6c8 	cmpgei	zero,zero,923
    db10:	0000dde4 	muli	zero,zero,887
    db14:	0000ddf0 	cmpltui	zero,zero,887
    db18:	0000ddf0 	cmpltui	zero,zero,887
    db1c:	0000ddf0 	cmpltui	zero,zero,887
    db20:	0000ddf0 	cmpltui	zero,zero,887
    db24:	0000ddf0 	cmpltui	zero,zero,887
    db28:	0000ddf0 	cmpltui	zero,zero,887
    db2c:	0000ddf0 	cmpltui	zero,zero,887
    db30:	0000ddf0 	cmpltui	zero,zero,887
    db34:	0000ddf0 	cmpltui	zero,zero,887
    db38:	0000e6c8 	cmpgei	zero,zero,923
    db3c:	0000e6c8 	cmpgei	zero,zero,923
    db40:	0000e6c8 	cmpgei	zero,zero,923
    db44:	0000e6c8 	cmpgei	zero,zero,923
    db48:	0000e6c8 	cmpgei	zero,zero,923
    db4c:	0000e6c8 	cmpgei	zero,zero,923
    db50:	0000e6c8 	cmpgei	zero,zero,923
    db54:	0000e6c8 	cmpgei	zero,zero,923
    db58:	0000e6c8 	cmpgei	zero,zero,923
    db5c:	0000e6c8 	cmpgei	zero,zero,923
    db60:	0000de24 	muli	zero,zero,888
    db64:	0000dee0 	cmpeqi	zero,zero,891
    db68:	0000e6c8 	cmpgei	zero,zero,923
    db6c:	0000dee0 	cmpeqi	zero,zero,891
    db70:	0000e6c8 	cmpgei	zero,zero,923
    db74:	0000e6c8 	cmpgei	zero,zero,923
    db78:	0000e6c8 	cmpgei	zero,zero,923
    db7c:	0000e6c8 	cmpgei	zero,zero,923
    db80:	0000df80 	call	df8 <display_a_decimal_number_starting_on_any_seven_segment+0x118>
    db84:	0000e6c8 	cmpgei	zero,zero,923
    db88:	0000e6c8 	cmpgei	zero,zero,923
    db8c:	0000df8c 	andi	zero,zero,894
    db90:	0000e6c8 	cmpgei	zero,zero,923
    db94:	0000e6c8 	cmpgei	zero,zero,923
    db98:	0000e6c8 	cmpgei	zero,zero,923
    db9c:	0000e6c8 	cmpgei	zero,zero,923
    dba0:	0000e6c8 	cmpgei	zero,zero,923
    dba4:	0000e404 	movi	zero,912
    dba8:	0000e6c8 	cmpgei	zero,zero,923
    dbac:	0000e6c8 	cmpgei	zero,zero,923
    dbb0:	0000e464 	muli	zero,zero,913
    dbb4:	0000e6c8 	cmpgei	zero,zero,923
    dbb8:	0000e6c8 	cmpgei	zero,zero,923
    dbbc:	0000e6c8 	cmpgei	zero,zero,923
    dbc0:	0000e6c8 	cmpgei	zero,zero,923
    dbc4:	0000e6c8 	cmpgei	zero,zero,923
    dbc8:	0000e6c8 	cmpgei	zero,zero,923
    dbcc:	0000e6c8 	cmpgei	zero,zero,923
    dbd0:	0000e6c8 	cmpgei	zero,zero,923
    dbd4:	0000e6c8 	cmpgei	zero,zero,923
    dbd8:	0000e6c8 	cmpgei	zero,zero,923
    dbdc:	0000e674 	movhi	zero,921
    dbe0:	0000e614 	movui	zero,920
    dbe4:	0000dee0 	cmpeqi	zero,zero,891
    dbe8:	0000dee0 	cmpeqi	zero,zero,891
    dbec:	0000dee0 	cmpeqi	zero,zero,891
    dbf0:	0000e624 	muli	zero,zero,920
    dbf4:	0000e614 	movui	zero,920
    dbf8:	0000e6c8 	cmpgei	zero,zero,923
    dbfc:	0000e6c8 	cmpgei	zero,zero,923
    dc00:	0000e630 	cmpltui	zero,zero,920
    dc04:	0000e6c8 	cmpgei	zero,zero,923
    dc08:	0000e640 	call	e64 <display_a_decimal_number_starting_on_any_seven_segment+0x184>
    dc0c:	0000e514 	movui	zero,916
    dc10:	0000dc50 	cmplti	zero,zero,881
    dc14:	0000e534 	movhi	zero,916
    dc18:	0000e6c8 	cmpgei	zero,zero,923
    dc1c:	0000e540 	call	e54 <display_a_decimal_number_starting_on_any_seven_segment+0x174>
    dc20:	0000e6c8 	cmpgei	zero,zero,923
    dc24:	0000e59c 	xori	zero,zero,918
    dc28:	0000e6c8 	cmpgei	zero,zero,923
    dc2c:	0000e6c8 	cmpgei	zero,zero,923
    dc30:	0000e5ac 	andhi	zero,zero,918
    dc34:	d9003117 	ldw	r4,196(sp)
    dc38:	d8802d15 	stw	r2,180(sp)
    dc3c:	0109c83a 	sub	r4,zero,r4
    dc40:	d9003115 	stw	r4,196(sp)
    dc44:	94800114 	ori	r18,r18,4
    dc48:	ac400007 	ldb	r17,0(r21)
    dc4c:	003f9706 	br	daac <___vfprintf_internal_r+0x184>
    dc50:	00800c04 	movi	r2,48
    dc54:	d9002d17 	ldw	r4,180(sp)
    dc58:	d9402917 	ldw	r5,164(sp)
    dc5c:	d8802705 	stb	r2,156(sp)
    dc60:	00801e04 	movi	r2,120
    dc64:	d8802745 	stb	r2,157(sp)
    dc68:	d8002785 	stb	zero,158(sp)
    dc6c:	20c00104 	addi	r3,r4,4
    dc70:	24c00017 	ldw	r19,0(r4)
    dc74:	002d883a 	mov	r22,zero
    dc78:	90800094 	ori	r2,r18,2
    dc7c:	28029a16 	blt	r5,zero,e6e8 <___vfprintf_internal_r+0xdc0>
    dc80:	00bfdfc4 	movi	r2,-129
    dc84:	90a4703a 	and	r18,r18,r2
    dc88:	d8c02d15 	stw	r3,180(sp)
    dc8c:	94800094 	ori	r18,r18,2
    dc90:	9802871e 	bne	r19,zero,e6b0 <___vfprintf_internal_r+0xd88>
    dc94:	008000b4 	movhi	r2,2
    dc98:	109e0e04 	addi	r2,r2,30776
    dc9c:	d8803915 	stw	r2,228(sp)
    dca0:	04401e04 	movi	r17,120
    dca4:	d8802917 	ldw	r2,164(sp)
    dca8:	0039883a 	mov	fp,zero
    dcac:	1001e926 	beq	r2,zero,e454 <___vfprintf_internal_r+0xb2c>
    dcb0:	0027883a 	mov	r19,zero
    dcb4:	002d883a 	mov	r22,zero
    dcb8:	00020506 	br	e4d0 <___vfprintf_internal_r+0xba8>
    dcbc:	d9002c17 	ldw	r4,176(sp)
    dcc0:	b80b883a 	mov	r5,r23
    dcc4:	000fbf80 	call	fbf8 <__swsetup_r>
    dcc8:	1005ac1e 	bne	r2,zero,f37c <___vfprintf_internal_r+0x1a54>
    dccc:	b880030b 	ldhu	r2,12(r23)
    dcd0:	00c00284 	movi	r3,10
    dcd4:	1080068c 	andi	r2,r2,26
    dcd8:	10ff3c1e 	bne	r2,r3,d9cc <___vfprintf_internal_r+0xa4>
    dcdc:	b880038f 	ldh	r2,14(r23)
    dce0:	103f3a16 	blt	r2,zero,d9cc <___vfprintf_internal_r+0xa4>
    dce4:	d9c02d17 	ldw	r7,180(sp)
    dce8:	d9002c17 	ldw	r4,176(sp)
    dcec:	a80d883a 	mov	r6,r21
    dcf0:	b80b883a 	mov	r5,r23
    dcf4:	000fb3c0 	call	fb3c <__sbprintf>
    dcf8:	00001106 	br	dd40 <___vfprintf_internal_r+0x418>
    dcfc:	d9002c17 	ldw	r4,176(sp)
    dd00:	d9801e04 	addi	r6,sp,120
    dd04:	b80b883a 	mov	r5,r23
    dd08:	00157040 	call	15704 <__sprint_r>
    dd0c:	1000081e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    dd10:	da000404 	addi	r8,sp,16
    dd14:	003f5306 	br	da64 <___vfprintf_internal_r+0x13c>
    dd18:	d8802017 	ldw	r2,128(sp)
    dd1c:	10000426 	beq	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    dd20:	d9002c17 	ldw	r4,176(sp)
    dd24:	d9801e04 	addi	r6,sp,120
    dd28:	b80b883a 	mov	r5,r23
    dd2c:	00157040 	call	15704 <__sprint_r>
    dd30:	b880030b 	ldhu	r2,12(r23)
    dd34:	1080100c 	andi	r2,r2,64
    dd38:	1005901e 	bne	r2,zero,f37c <___vfprintf_internal_r+0x1a54>
    dd3c:	d8802f17 	ldw	r2,188(sp)
    dd40:	dfc04717 	ldw	ra,284(sp)
    dd44:	df004617 	ldw	fp,280(sp)
    dd48:	ddc04517 	ldw	r23,276(sp)
    dd4c:	dd804417 	ldw	r22,272(sp)
    dd50:	dd404317 	ldw	r21,268(sp)
    dd54:	dd004217 	ldw	r20,264(sp)
    dd58:	dcc04117 	ldw	r19,260(sp)
    dd5c:	dc804017 	ldw	r18,256(sp)
    dd60:	dc403f17 	ldw	r17,252(sp)
    dd64:	dc003e17 	ldw	r16,248(sp)
    dd68:	dec04804 	addi	sp,sp,288
    dd6c:	f800283a 	ret
    dd70:	d9002c17 	ldw	r4,176(sp)
    dd74:	0011bcc0 	call	11bcc <__sinit>
    dd78:	003f0406 	br	d98c <___vfprintf_internal_r+0x64>
    dd7c:	d8802d17 	ldw	r2,180(sp)
    dd80:	d9002d17 	ldw	r4,180(sp)
    dd84:	10800017 	ldw	r2,0(r2)
    dd88:	d8803115 	stw	r2,196(sp)
    dd8c:	20800104 	addi	r2,r4,4
    dd90:	d9003117 	ldw	r4,196(sp)
    dd94:	203fa716 	blt	r4,zero,dc34 <___vfprintf_internal_r+0x30c>
    dd98:	d8802d15 	stw	r2,180(sp)
    dd9c:	ac400007 	ldb	r17,0(r21)
    dda0:	003f4206 	br	daac <___vfprintf_internal_r+0x184>
    dda4:	ac400007 	ldb	r17,0(r21)
    dda8:	aac00044 	addi	r11,r21,1
    ddac:	8a872826 	beq	r17,r10,fa50 <___vfprintf_internal_r+0x2128>
    ddb0:	88bff404 	addi	r2,r17,-48
    ddb4:	0009883a 	mov	r4,zero
    ddb8:	30867d36 	bltu	r6,r2,f7b0 <___vfprintf_internal_r+0x1e88>
    ddbc:	5c400007 	ldb	r17,0(r11)
    ddc0:	210002a4 	muli	r4,r4,10
    ddc4:	5d400044 	addi	r21,r11,1
    ddc8:	a817883a 	mov	r11,r21
    ddcc:	2089883a 	add	r4,r4,r2
    ddd0:	88bff404 	addi	r2,r17,-48
    ddd4:	30bff92e 	bgeu	r6,r2,ddbc <___vfprintf_internal_r+0x494>
    ddd8:	2005c916 	blt	r4,zero,f500 <___vfprintf_internal_r+0x1bd8>
    dddc:	d9002915 	stw	r4,164(sp)
    dde0:	003f3306 	br	dab0 <___vfprintf_internal_r+0x188>
    dde4:	94802014 	ori	r18,r18,128
    dde8:	ac400007 	ldb	r17,0(r21)
    ddec:	003f2f06 	br	daac <___vfprintf_internal_r+0x184>
    ddf0:	a809883a 	mov	r4,r21
    ddf4:	d8003115 	stw	zero,196(sp)
    ddf8:	88bff404 	addi	r2,r17,-48
    ddfc:	0017883a 	mov	r11,zero
    de00:	24400007 	ldb	r17,0(r4)
    de04:	5ac002a4 	muli	r11,r11,10
    de08:	ad400044 	addi	r21,r21,1
    de0c:	a809883a 	mov	r4,r21
    de10:	12d7883a 	add	r11,r2,r11
    de14:	88bff404 	addi	r2,r17,-48
    de18:	30bff92e 	bgeu	r6,r2,de00 <___vfprintf_internal_r+0x4d8>
    de1c:	dac03115 	stw	r11,196(sp)
    de20:	003f2306 	br	dab0 <___vfprintf_internal_r+0x188>
    de24:	18c03fcc 	andi	r3,r3,255
    de28:	18072b1e 	bne	r3,zero,fad8 <___vfprintf_internal_r+0x21b0>
    de2c:	94800414 	ori	r18,r18,16
    de30:	9080080c 	andi	r2,r18,32
    de34:	10037b26 	beq	r2,zero,ec24 <___vfprintf_internal_r+0x12fc>
    de38:	d9402d17 	ldw	r5,180(sp)
    de3c:	28800117 	ldw	r2,4(r5)
    de40:	2cc00017 	ldw	r19,0(r5)
    de44:	29400204 	addi	r5,r5,8
    de48:	d9402d15 	stw	r5,180(sp)
    de4c:	102d883a 	mov	r22,r2
    de50:	10044b16 	blt	r2,zero,ef80 <___vfprintf_internal_r+0x1658>
    de54:	d9402917 	ldw	r5,164(sp)
    de58:	df002783 	ldbu	fp,158(sp)
    de5c:	2803bc16 	blt	r5,zero,ed50 <___vfprintf_internal_r+0x1428>
    de60:	00ffdfc4 	movi	r3,-129
    de64:	9d84b03a 	or	r2,r19,r22
    de68:	90e4703a 	and	r18,r18,r3
    de6c:	10017726 	beq	r2,zero,e44c <___vfprintf_internal_r+0xb24>
    de70:	b0038326 	beq	r22,zero,ec80 <___vfprintf_internal_r+0x1358>
    de74:	dc402a15 	stw	r17,168(sp)
    de78:	dc001e04 	addi	r16,sp,120
    de7c:	b023883a 	mov	r17,r22
    de80:	402d883a 	mov	r22,r8
    de84:	9809883a 	mov	r4,r19
    de88:	880b883a 	mov	r5,r17
    de8c:	01800284 	movi	r6,10
    de90:	000f883a 	mov	r7,zero
    de94:	00186780 	call	18678 <__umoddi3>
    de98:	10800c04 	addi	r2,r2,48
    de9c:	843fffc4 	addi	r16,r16,-1
    dea0:	9809883a 	mov	r4,r19
    dea4:	880b883a 	mov	r5,r17
    dea8:	80800005 	stb	r2,0(r16)
    deac:	01800284 	movi	r6,10
    deb0:	000f883a 	mov	r7,zero
    deb4:	00181000 	call	18100 <__udivdi3>
    deb8:	1027883a 	mov	r19,r2
    debc:	10c4b03a 	or	r2,r2,r3
    dec0:	1823883a 	mov	r17,r3
    dec4:	103fef1e 	bne	r2,zero,de84 <___vfprintf_internal_r+0x55c>
    dec8:	d8c02817 	ldw	r3,160(sp)
    decc:	dc402a17 	ldw	r17,168(sp)
    ded0:	b011883a 	mov	r8,r22
    ded4:	1c07c83a 	sub	r3,r3,r16
    ded8:	d8c02e15 	stw	r3,184(sp)
    dedc:	00005906 	br	e044 <___vfprintf_internal_r+0x71c>
    dee0:	18c03fcc 	andi	r3,r3,255
    dee4:	1806fa1e 	bne	r3,zero,fad0 <___vfprintf_internal_r+0x21a8>
    dee8:	9080020c 	andi	r2,r18,8
    deec:	10048a26 	beq	r2,zero,f118 <___vfprintf_internal_r+0x17f0>
    def0:	d8c02d17 	ldw	r3,180(sp)
    def4:	d9002d17 	ldw	r4,180(sp)
    def8:	d9402d17 	ldw	r5,180(sp)
    defc:	18c00017 	ldw	r3,0(r3)
    df00:	21000117 	ldw	r4,4(r4)
    df04:	29400204 	addi	r5,r5,8
    df08:	d8c03615 	stw	r3,216(sp)
    df0c:	d9003815 	stw	r4,224(sp)
    df10:	d9402d15 	stw	r5,180(sp)
    df14:	d9003617 	ldw	r4,216(sp)
    df18:	d9403817 	ldw	r5,224(sp)
    df1c:	da003d15 	stw	r8,244(sp)
    df20:	04000044 	movi	r16,1
    df24:	0013e840 	call	13e84 <__fpclassifyd>
    df28:	da003d17 	ldw	r8,244(sp)
    df2c:	14041f1e 	bne	r2,r16,efac <___vfprintf_internal_r+0x1684>
    df30:	d9003617 	ldw	r4,216(sp)
    df34:	d9403817 	ldw	r5,224(sp)
    df38:	000d883a 	mov	r6,zero
    df3c:	000f883a 	mov	r7,zero
    df40:	0019f800 	call	19f80 <__ledf2>
    df44:	da003d17 	ldw	r8,244(sp)
    df48:	1005be16 	blt	r2,zero,f644 <___vfprintf_internal_r+0x1d1c>
    df4c:	df002783 	ldbu	fp,158(sp)
    df50:	008011c4 	movi	r2,71
    df54:	1445330e 	bge	r2,r17,f424 <___vfprintf_internal_r+0x1afc>
    df58:	040000b4 	movhi	r16,2
    df5c:	841e0604 	addi	r16,r16,30744
    df60:	00c000c4 	movi	r3,3
    df64:	00bfdfc4 	movi	r2,-129
    df68:	d8c02a15 	stw	r3,168(sp)
    df6c:	90a4703a 	and	r18,r18,r2
    df70:	d8c02e15 	stw	r3,184(sp)
    df74:	d8002915 	stw	zero,164(sp)
    df78:	d8003215 	stw	zero,200(sp)
    df7c:	00003706 	br	e05c <___vfprintf_internal_r+0x734>
    df80:	94800214 	ori	r18,r18,8
    df84:	ac400007 	ldb	r17,0(r21)
    df88:	003ec806 	br	daac <___vfprintf_internal_r+0x184>
    df8c:	18c03fcc 	andi	r3,r3,255
    df90:	1806db1e 	bne	r3,zero,fb00 <___vfprintf_internal_r+0x21d8>
    df94:	94800414 	ori	r18,r18,16
    df98:	9080080c 	andi	r2,r18,32
    df9c:	1002d826 	beq	r2,zero,eb00 <___vfprintf_internal_r+0x11d8>
    dfa0:	d9402d17 	ldw	r5,180(sp)
    dfa4:	d8c02917 	ldw	r3,164(sp)
    dfa8:	d8002785 	stb	zero,158(sp)
    dfac:	28800204 	addi	r2,r5,8
    dfb0:	2cc00017 	ldw	r19,0(r5)
    dfb4:	2d800117 	ldw	r22,4(r5)
    dfb8:	18048f16 	blt	r3,zero,f1f8 <___vfprintf_internal_r+0x18d0>
    dfbc:	013fdfc4 	movi	r4,-129
    dfc0:	9d86b03a 	or	r3,r19,r22
    dfc4:	d8802d15 	stw	r2,180(sp)
    dfc8:	9124703a 	and	r18,r18,r4
    dfcc:	1802d91e 	bne	r3,zero,eb34 <___vfprintf_internal_r+0x120c>
    dfd0:	d8c02917 	ldw	r3,164(sp)
    dfd4:	0039883a 	mov	fp,zero
    dfd8:	1805c326 	beq	r3,zero,f6e8 <___vfprintf_internal_r+0x1dc0>
    dfdc:	0027883a 	mov	r19,zero
    dfe0:	002d883a 	mov	r22,zero
    dfe4:	dc001e04 	addi	r16,sp,120
    dfe8:	9806d0fa 	srli	r3,r19,3
    dfec:	b008977a 	slli	r4,r22,29
    dff0:	b02cd0fa 	srli	r22,r22,3
    dff4:	9cc001cc 	andi	r19,r19,7
    dff8:	98800c04 	addi	r2,r19,48
    dffc:	843fffc4 	addi	r16,r16,-1
    e000:	20e6b03a 	or	r19,r4,r3
    e004:	80800005 	stb	r2,0(r16)
    e008:	9d86b03a 	or	r3,r19,r22
    e00c:	183ff61e 	bne	r3,zero,dfe8 <___vfprintf_internal_r+0x6c0>
    e010:	90c0004c 	andi	r3,r18,1
    e014:	18013b26 	beq	r3,zero,e504 <___vfprintf_internal_r+0xbdc>
    e018:	10803fcc 	andi	r2,r2,255
    e01c:	1080201c 	xori	r2,r2,128
    e020:	10bfe004 	addi	r2,r2,-128
    e024:	00c00c04 	movi	r3,48
    e028:	10c13626 	beq	r2,r3,e504 <___vfprintf_internal_r+0xbdc>
    e02c:	80ffffc5 	stb	r3,-1(r16)
    e030:	d8c02817 	ldw	r3,160(sp)
    e034:	80bfffc4 	addi	r2,r16,-1
    e038:	1021883a 	mov	r16,r2
    e03c:	1887c83a 	sub	r3,r3,r2
    e040:	d8c02e15 	stw	r3,184(sp)
    e044:	d8802e17 	ldw	r2,184(sp)
    e048:	d9002917 	ldw	r4,164(sp)
    e04c:	1100010e 	bge	r2,r4,e054 <___vfprintf_internal_r+0x72c>
    e050:	2005883a 	mov	r2,r4
    e054:	d8802a15 	stw	r2,168(sp)
    e058:	d8003215 	stw	zero,200(sp)
    e05c:	e7003fcc 	andi	fp,fp,255
    e060:	e700201c 	xori	fp,fp,128
    e064:	e73fe004 	addi	fp,fp,-128
    e068:	e0000326 	beq	fp,zero,e078 <___vfprintf_internal_r+0x750>
    e06c:	d8c02a17 	ldw	r3,168(sp)
    e070:	18c00044 	addi	r3,r3,1
    e074:	d8c02a15 	stw	r3,168(sp)
    e078:	90c0008c 	andi	r3,r18,2
    e07c:	d8c02b15 	stw	r3,172(sp)
    e080:	18000326 	beq	r3,zero,e090 <___vfprintf_internal_r+0x768>
    e084:	d8c02a17 	ldw	r3,168(sp)
    e088:	18c00084 	addi	r3,r3,2
    e08c:	d8c02a15 	stw	r3,168(sp)
    e090:	90c0210c 	andi	r3,r18,132
    e094:	d8c03015 	stw	r3,192(sp)
    e098:	1801a31e 	bne	r3,zero,e728 <___vfprintf_internal_r+0xe00>
    e09c:	d9003117 	ldw	r4,196(sp)
    e0a0:	d8c02a17 	ldw	r3,168(sp)
    e0a4:	20e7c83a 	sub	r19,r4,r3
    e0a8:	04c19f0e 	bge	zero,r19,e728 <___vfprintf_internal_r+0xe00>
    e0ac:	02400404 	movi	r9,16
    e0b0:	d8c02017 	ldw	r3,128(sp)
    e0b4:	d8801f17 	ldw	r2,124(sp)
    e0b8:	4cc50d0e 	bge	r9,r19,f4f0 <___vfprintf_internal_r+0x1bc8>
    e0bc:	014000b4 	movhi	r5,2
    e0c0:	295e2184 	addi	r5,r5,30854
    e0c4:	dc403b15 	stw	r17,236(sp)
    e0c8:	d9403515 	stw	r5,212(sp)
    e0cc:	9823883a 	mov	r17,r19
    e0d0:	482d883a 	mov	r22,r9
    e0d4:	9027883a 	mov	r19,r18
    e0d8:	070001c4 	movi	fp,7
    e0dc:	8025883a 	mov	r18,r16
    e0e0:	dc002c17 	ldw	r16,176(sp)
    e0e4:	00000306 	br	e0f4 <___vfprintf_internal_r+0x7cc>
    e0e8:	8c7ffc04 	addi	r17,r17,-16
    e0ec:	42000204 	addi	r8,r8,8
    e0f0:	b440130e 	bge	r22,r17,e140 <___vfprintf_internal_r+0x818>
    e0f4:	010000b4 	movhi	r4,2
    e0f8:	18c00404 	addi	r3,r3,16
    e0fc:	10800044 	addi	r2,r2,1
    e100:	211e2184 	addi	r4,r4,30854
    e104:	41000015 	stw	r4,0(r8)
    e108:	45800115 	stw	r22,4(r8)
    e10c:	d8c02015 	stw	r3,128(sp)
    e110:	d8801f15 	stw	r2,124(sp)
    e114:	e0bff40e 	bge	fp,r2,e0e8 <___vfprintf_internal_r+0x7c0>
    e118:	d9801e04 	addi	r6,sp,120
    e11c:	b80b883a 	mov	r5,r23
    e120:	8009883a 	mov	r4,r16
    e124:	00157040 	call	15704 <__sprint_r>
    e128:	103f011e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    e12c:	8c7ffc04 	addi	r17,r17,-16
    e130:	d8c02017 	ldw	r3,128(sp)
    e134:	d8801f17 	ldw	r2,124(sp)
    e138:	da000404 	addi	r8,sp,16
    e13c:	b47fed16 	blt	r22,r17,e0f4 <___vfprintf_internal_r+0x7cc>
    e140:	9021883a 	mov	r16,r18
    e144:	9825883a 	mov	r18,r19
    e148:	8827883a 	mov	r19,r17
    e14c:	dc403b17 	ldw	r17,236(sp)
    e150:	d9403517 	ldw	r5,212(sp)
    e154:	98c7883a 	add	r3,r19,r3
    e158:	10800044 	addi	r2,r2,1
    e15c:	41400015 	stw	r5,0(r8)
    e160:	44c00115 	stw	r19,4(r8)
    e164:	d8c02015 	stw	r3,128(sp)
    e168:	d8801f15 	stw	r2,124(sp)
    e16c:	010001c4 	movi	r4,7
    e170:	2082a316 	blt	r4,r2,ec00 <___vfprintf_internal_r+0x12d8>
    e174:	df002787 	ldb	fp,158(sp)
    e178:	42000204 	addi	r8,r8,8
    e17c:	e0000c26 	beq	fp,zero,e1b0 <___vfprintf_internal_r+0x888>
    e180:	d8801f17 	ldw	r2,124(sp)
    e184:	d9002784 	addi	r4,sp,158
    e188:	18c00044 	addi	r3,r3,1
    e18c:	10800044 	addi	r2,r2,1
    e190:	41000015 	stw	r4,0(r8)
    e194:	01000044 	movi	r4,1
    e198:	41000115 	stw	r4,4(r8)
    e19c:	d8c02015 	stw	r3,128(sp)
    e1a0:	d8801f15 	stw	r2,124(sp)
    e1a4:	010001c4 	movi	r4,7
    e1a8:	20823c16 	blt	r4,r2,ea9c <___vfprintf_internal_r+0x1174>
    e1ac:	42000204 	addi	r8,r8,8
    e1b0:	d8802b17 	ldw	r2,172(sp)
    e1b4:	10000c26 	beq	r2,zero,e1e8 <___vfprintf_internal_r+0x8c0>
    e1b8:	d8801f17 	ldw	r2,124(sp)
    e1bc:	d9002704 	addi	r4,sp,156
    e1c0:	18c00084 	addi	r3,r3,2
    e1c4:	10800044 	addi	r2,r2,1
    e1c8:	41000015 	stw	r4,0(r8)
    e1cc:	01000084 	movi	r4,2
    e1d0:	41000115 	stw	r4,4(r8)
    e1d4:	d8c02015 	stw	r3,128(sp)
    e1d8:	d8801f15 	stw	r2,124(sp)
    e1dc:	010001c4 	movi	r4,7
    e1e0:	20823616 	blt	r4,r2,eabc <___vfprintf_internal_r+0x1194>
    e1e4:	42000204 	addi	r8,r8,8
    e1e8:	d9003017 	ldw	r4,192(sp)
    e1ec:	00802004 	movi	r2,128
    e1f0:	20819926 	beq	r4,r2,e858 <___vfprintf_internal_r+0xf30>
    e1f4:	d9402917 	ldw	r5,164(sp)
    e1f8:	d8802e17 	ldw	r2,184(sp)
    e1fc:	28adc83a 	sub	r22,r5,r2
    e200:	0580310e 	bge	zero,r22,e2c8 <___vfprintf_internal_r+0x9a0>
    e204:	07000404 	movi	fp,16
    e208:	d8801f17 	ldw	r2,124(sp)
    e20c:	e584140e 	bge	fp,r22,f260 <___vfprintf_internal_r+0x1938>
    e210:	014000b4 	movhi	r5,2
    e214:	295e1d84 	addi	r5,r5,30838
    e218:	dc402915 	stw	r17,164(sp)
    e21c:	d9402b15 	stw	r5,172(sp)
    e220:	b023883a 	mov	r17,r22
    e224:	04c001c4 	movi	r19,7
    e228:	a82d883a 	mov	r22,r21
    e22c:	902b883a 	mov	r21,r18
    e230:	8025883a 	mov	r18,r16
    e234:	dc002c17 	ldw	r16,176(sp)
    e238:	00000306 	br	e248 <___vfprintf_internal_r+0x920>
    e23c:	8c7ffc04 	addi	r17,r17,-16
    e240:	42000204 	addi	r8,r8,8
    e244:	e440110e 	bge	fp,r17,e28c <___vfprintf_internal_r+0x964>
    e248:	18c00404 	addi	r3,r3,16
    e24c:	10800044 	addi	r2,r2,1
    e250:	45000015 	stw	r20,0(r8)
    e254:	47000115 	stw	fp,4(r8)
    e258:	d8c02015 	stw	r3,128(sp)
    e25c:	d8801f15 	stw	r2,124(sp)
    e260:	98bff60e 	bge	r19,r2,e23c <___vfprintf_internal_r+0x914>
    e264:	d9801e04 	addi	r6,sp,120
    e268:	b80b883a 	mov	r5,r23
    e26c:	8009883a 	mov	r4,r16
    e270:	00157040 	call	15704 <__sprint_r>
    e274:	103eae1e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    e278:	8c7ffc04 	addi	r17,r17,-16
    e27c:	d8c02017 	ldw	r3,128(sp)
    e280:	d8801f17 	ldw	r2,124(sp)
    e284:	da000404 	addi	r8,sp,16
    e288:	e47fef16 	blt	fp,r17,e248 <___vfprintf_internal_r+0x920>
    e28c:	9021883a 	mov	r16,r18
    e290:	a825883a 	mov	r18,r21
    e294:	b02b883a 	mov	r21,r22
    e298:	882d883a 	mov	r22,r17
    e29c:	dc402917 	ldw	r17,164(sp)
    e2a0:	d9002b17 	ldw	r4,172(sp)
    e2a4:	1d87883a 	add	r3,r3,r22
    e2a8:	10800044 	addi	r2,r2,1
    e2ac:	41000015 	stw	r4,0(r8)
    e2b0:	45800115 	stw	r22,4(r8)
    e2b4:	d8c02015 	stw	r3,128(sp)
    e2b8:	d8801f15 	stw	r2,124(sp)
    e2bc:	010001c4 	movi	r4,7
    e2c0:	2081ee16 	blt	r4,r2,ea7c <___vfprintf_internal_r+0x1154>
    e2c4:	42000204 	addi	r8,r8,8
    e2c8:	9080400c 	andi	r2,r18,256
    e2cc:	1001181e 	bne	r2,zero,e730 <___vfprintf_internal_r+0xe08>
    e2d0:	d9402e17 	ldw	r5,184(sp)
    e2d4:	d8801f17 	ldw	r2,124(sp)
    e2d8:	44000015 	stw	r16,0(r8)
    e2dc:	1947883a 	add	r3,r3,r5
    e2e0:	10800044 	addi	r2,r2,1
    e2e4:	41400115 	stw	r5,4(r8)
    e2e8:	d8c02015 	stw	r3,128(sp)
    e2ec:	d8801f15 	stw	r2,124(sp)
    e2f0:	010001c4 	movi	r4,7
    e2f4:	2081d316 	blt	r4,r2,ea44 <___vfprintf_internal_r+0x111c>
    e2f8:	42000204 	addi	r8,r8,8
    e2fc:	9480010c 	andi	r18,r18,4
    e300:	90003226 	beq	r18,zero,e3cc <___vfprintf_internal_r+0xaa4>
    e304:	d9403117 	ldw	r5,196(sp)
    e308:	d8802a17 	ldw	r2,168(sp)
    e30c:	28a1c83a 	sub	r16,r5,r2
    e310:	04002e0e 	bge	zero,r16,e3cc <___vfprintf_internal_r+0xaa4>
    e314:	04400404 	movi	r17,16
    e318:	d8801f17 	ldw	r2,124(sp)
    e31c:	8c04a20e 	bge	r17,r16,f5a8 <___vfprintf_internal_r+0x1c80>
    e320:	014000b4 	movhi	r5,2
    e324:	295e2184 	addi	r5,r5,30854
    e328:	d9403515 	stw	r5,212(sp)
    e32c:	048001c4 	movi	r18,7
    e330:	dcc02c17 	ldw	r19,176(sp)
    e334:	00000306 	br	e344 <___vfprintf_internal_r+0xa1c>
    e338:	843ffc04 	addi	r16,r16,-16
    e33c:	42000204 	addi	r8,r8,8
    e340:	8c00130e 	bge	r17,r16,e390 <___vfprintf_internal_r+0xa68>
    e344:	010000b4 	movhi	r4,2
    e348:	18c00404 	addi	r3,r3,16
    e34c:	10800044 	addi	r2,r2,1
    e350:	211e2184 	addi	r4,r4,30854
    e354:	41000015 	stw	r4,0(r8)
    e358:	44400115 	stw	r17,4(r8)
    e35c:	d8c02015 	stw	r3,128(sp)
    e360:	d8801f15 	stw	r2,124(sp)
    e364:	90bff40e 	bge	r18,r2,e338 <___vfprintf_internal_r+0xa10>
    e368:	d9801e04 	addi	r6,sp,120
    e36c:	b80b883a 	mov	r5,r23
    e370:	9809883a 	mov	r4,r19
    e374:	00157040 	call	15704 <__sprint_r>
    e378:	103e6d1e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    e37c:	843ffc04 	addi	r16,r16,-16
    e380:	d8c02017 	ldw	r3,128(sp)
    e384:	d8801f17 	ldw	r2,124(sp)
    e388:	da000404 	addi	r8,sp,16
    e38c:	8c3fed16 	blt	r17,r16,e344 <___vfprintf_internal_r+0xa1c>
    e390:	d9403517 	ldw	r5,212(sp)
    e394:	1c07883a 	add	r3,r3,r16
    e398:	10800044 	addi	r2,r2,1
    e39c:	41400015 	stw	r5,0(r8)
    e3a0:	44000115 	stw	r16,4(r8)
    e3a4:	d8c02015 	stw	r3,128(sp)
    e3a8:	d8801f15 	stw	r2,124(sp)
    e3ac:	010001c4 	movi	r4,7
    e3b0:	2080060e 	bge	r4,r2,e3cc <___vfprintf_internal_r+0xaa4>
    e3b4:	d9002c17 	ldw	r4,176(sp)
    e3b8:	d9801e04 	addi	r6,sp,120
    e3bc:	b80b883a 	mov	r5,r23
    e3c0:	00157040 	call	15704 <__sprint_r>
    e3c4:	103e5a1e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    e3c8:	d8c02017 	ldw	r3,128(sp)
    e3cc:	d8803117 	ldw	r2,196(sp)
    e3d0:	d9002a17 	ldw	r4,168(sp)
    e3d4:	1100010e 	bge	r2,r4,e3dc <___vfprintf_internal_r+0xab4>
    e3d8:	2005883a 	mov	r2,r4
    e3dc:	d9402f17 	ldw	r5,188(sp)
    e3e0:	288b883a 	add	r5,r5,r2
    e3e4:	d9402f15 	stw	r5,188(sp)
    e3e8:	18019e1e 	bne	r3,zero,ea64 <___vfprintf_internal_r+0x113c>
    e3ec:	a8800007 	ldb	r2,0(r21)
    e3f0:	d8001f15 	stw	zero,124(sp)
    e3f4:	da000404 	addi	r8,sp,16
    e3f8:	103d851e 	bne	r2,zero,da10 <___vfprintf_internal_r+0xe8>
    e3fc:	a821883a 	mov	r16,r21
    e400:	003d9b06 	br	da70 <___vfprintf_internal_r+0x148>
    e404:	18c03fcc 	andi	r3,r3,255
    e408:	1805c11e 	bne	r3,zero,fb10 <___vfprintf_internal_r+0x21e8>
    e40c:	94800414 	ori	r18,r18,16
    e410:	9080080c 	andi	r2,r18,32
    e414:	10020c26 	beq	r2,zero,ec48 <___vfprintf_internal_r+0x1320>
    e418:	d8802d17 	ldw	r2,180(sp)
    e41c:	d9002917 	ldw	r4,164(sp)
    e420:	d8002785 	stb	zero,158(sp)
    e424:	10c00204 	addi	r3,r2,8
    e428:	14c00017 	ldw	r19,0(r2)
    e42c:	15800117 	ldw	r22,4(r2)
    e430:	20040f16 	blt	r4,zero,f470 <___vfprintf_internal_r+0x1b48>
    e434:	013fdfc4 	movi	r4,-129
    e438:	9d84b03a 	or	r2,r19,r22
    e43c:	d8c02d15 	stw	r3,180(sp)
    e440:	9124703a 	and	r18,r18,r4
    e444:	0039883a 	mov	fp,zero
    e448:	103e891e 	bne	r2,zero,de70 <___vfprintf_internal_r+0x548>
    e44c:	d9002917 	ldw	r4,164(sp)
    e450:	2002c11e 	bne	r4,zero,ef58 <___vfprintf_internal_r+0x1630>
    e454:	d8002915 	stw	zero,164(sp)
    e458:	d8002e15 	stw	zero,184(sp)
    e45c:	dc001e04 	addi	r16,sp,120
    e460:	003ef806 	br	e044 <___vfprintf_internal_r+0x71c>
    e464:	18c03fcc 	andi	r3,r3,255
    e468:	18059d1e 	bne	r3,zero,fae0 <___vfprintf_internal_r+0x21b8>
    e46c:	014000b4 	movhi	r5,2
    e470:	295e0904 	addi	r5,r5,30756
    e474:	d9403915 	stw	r5,228(sp)
    e478:	9080080c 	andi	r2,r18,32
    e47c:	10005226 	beq	r2,zero,e5c8 <___vfprintf_internal_r+0xca0>
    e480:	d8802d17 	ldw	r2,180(sp)
    e484:	14c00017 	ldw	r19,0(r2)
    e488:	15800117 	ldw	r22,4(r2)
    e48c:	10800204 	addi	r2,r2,8
    e490:	d8802d15 	stw	r2,180(sp)
    e494:	9080004c 	andi	r2,r18,1
    e498:	10019026 	beq	r2,zero,eadc <___vfprintf_internal_r+0x11b4>
    e49c:	9d84b03a 	or	r2,r19,r22
    e4a0:	10036926 	beq	r2,zero,f248 <___vfprintf_internal_r+0x1920>
    e4a4:	d8c02917 	ldw	r3,164(sp)
    e4a8:	00800c04 	movi	r2,48
    e4ac:	d8802705 	stb	r2,156(sp)
    e4b0:	dc402745 	stb	r17,157(sp)
    e4b4:	d8002785 	stb	zero,158(sp)
    e4b8:	90800094 	ori	r2,r18,2
    e4bc:	18045d16 	blt	r3,zero,f634 <___vfprintf_internal_r+0x1d0c>
    e4c0:	00bfdfc4 	movi	r2,-129
    e4c4:	90a4703a 	and	r18,r18,r2
    e4c8:	94800094 	ori	r18,r18,2
    e4cc:	0039883a 	mov	fp,zero
    e4d0:	d9003917 	ldw	r4,228(sp)
    e4d4:	dc001e04 	addi	r16,sp,120
    e4d8:	988003cc 	andi	r2,r19,15
    e4dc:	b006973a 	slli	r3,r22,28
    e4e0:	2085883a 	add	r2,r4,r2
    e4e4:	9826d13a 	srli	r19,r19,4
    e4e8:	10800003 	ldbu	r2,0(r2)
    e4ec:	b02cd13a 	srli	r22,r22,4
    e4f0:	843fffc4 	addi	r16,r16,-1
    e4f4:	1ce6b03a 	or	r19,r3,r19
    e4f8:	80800005 	stb	r2,0(r16)
    e4fc:	9d84b03a 	or	r2,r19,r22
    e500:	103ff51e 	bne	r2,zero,e4d8 <___vfprintf_internal_r+0xbb0>
    e504:	d8c02817 	ldw	r3,160(sp)
    e508:	1c07c83a 	sub	r3,r3,r16
    e50c:	d8c02e15 	stw	r3,184(sp)
    e510:	003ecc06 	br	e044 <___vfprintf_internal_r+0x71c>
    e514:	18c03fcc 	andi	r3,r3,255
    e518:	183e9f26 	beq	r3,zero,df98 <___vfprintf_internal_r+0x670>
    e51c:	d9c02785 	stb	r7,158(sp)
    e520:	003e9d06 	br	df98 <___vfprintf_internal_r+0x670>
    e524:	00c00044 	movi	r3,1
    e528:	01c00ac4 	movi	r7,43
    e52c:	ac400007 	ldb	r17,0(r21)
    e530:	003d5e06 	br	daac <___vfprintf_internal_r+0x184>
    e534:	94800814 	ori	r18,r18,32
    e538:	ac400007 	ldb	r17,0(r21)
    e53c:	003d5b06 	br	daac <___vfprintf_internal_r+0x184>
    e540:	d8c02d17 	ldw	r3,180(sp)
    e544:	d8002785 	stb	zero,158(sp)
    e548:	1c000017 	ldw	r16,0(r3)
    e54c:	1cc00104 	addi	r19,r3,4
    e550:	80041926 	beq	r16,zero,f5b8 <___vfprintf_internal_r+0x1c90>
    e554:	d9002917 	ldw	r4,164(sp)
    e558:	2003d016 	blt	r4,zero,f49c <___vfprintf_internal_r+0x1b74>
    e55c:	200d883a 	mov	r6,r4
    e560:	000b883a 	mov	r5,zero
    e564:	8009883a 	mov	r4,r16
    e568:	da003d15 	stw	r8,244(sp)
    e56c:	0012c7c0 	call	12c7c <memchr>
    e570:	da003d17 	ldw	r8,244(sp)
    e574:	10045426 	beq	r2,zero,f6c8 <___vfprintf_internal_r+0x1da0>
    e578:	1405c83a 	sub	r2,r2,r16
    e57c:	d8802e15 	stw	r2,184(sp)
    e580:	1003cc16 	blt	r2,zero,f4b4 <___vfprintf_internal_r+0x1b8c>
    e584:	df002783 	ldbu	fp,158(sp)
    e588:	d8802a15 	stw	r2,168(sp)
    e58c:	dcc02d15 	stw	r19,180(sp)
    e590:	d8002915 	stw	zero,164(sp)
    e594:	d8003215 	stw	zero,200(sp)
    e598:	003eb006 	br	e05c <___vfprintf_internal_r+0x734>
    e59c:	18c03fcc 	andi	r3,r3,255
    e5a0:	183f9b26 	beq	r3,zero,e410 <___vfprintf_internal_r+0xae8>
    e5a4:	d9c02785 	stb	r7,158(sp)
    e5a8:	003f9906 	br	e410 <___vfprintf_internal_r+0xae8>
    e5ac:	18c03fcc 	andi	r3,r3,255
    e5b0:	1805551e 	bne	r3,zero,fb08 <___vfprintf_internal_r+0x21e0>
    e5b4:	014000b4 	movhi	r5,2
    e5b8:	295e0e04 	addi	r5,r5,30776
    e5bc:	d9403915 	stw	r5,228(sp)
    e5c0:	9080080c 	andi	r2,r18,32
    e5c4:	103fae1e 	bne	r2,zero,e480 <___vfprintf_internal_r+0xb58>
    e5c8:	9080040c 	andi	r2,r18,16
    e5cc:	1002de26 	beq	r2,zero,f148 <___vfprintf_internal_r+0x1820>
    e5d0:	d8c02d17 	ldw	r3,180(sp)
    e5d4:	002d883a 	mov	r22,zero
    e5d8:	1cc00017 	ldw	r19,0(r3)
    e5dc:	18c00104 	addi	r3,r3,4
    e5e0:	d8c02d15 	stw	r3,180(sp)
    e5e4:	003fab06 	br	e494 <___vfprintf_internal_r+0xb6c>
    e5e8:	38803fcc 	andi	r2,r7,255
    e5ec:	1080201c 	xori	r2,r2,128
    e5f0:	10bfe004 	addi	r2,r2,-128
    e5f4:	1002d21e 	bne	r2,zero,f140 <___vfprintf_internal_r+0x1818>
    e5f8:	00c00044 	movi	r3,1
    e5fc:	01c00804 	movi	r7,32
    e600:	ac400007 	ldb	r17,0(r21)
    e604:	003d2906 	br	daac <___vfprintf_internal_r+0x184>
    e608:	94800054 	ori	r18,r18,1
    e60c:	ac400007 	ldb	r17,0(r21)
    e610:	003d2606 	br	daac <___vfprintf_internal_r+0x184>
    e614:	18c03fcc 	andi	r3,r3,255
    e618:	183e0526 	beq	r3,zero,de30 <___vfprintf_internal_r+0x508>
    e61c:	d9c02785 	stb	r7,158(sp)
    e620:	003e0306 	br	de30 <___vfprintf_internal_r+0x508>
    e624:	94801014 	ori	r18,r18,64
    e628:	ac400007 	ldb	r17,0(r21)
    e62c:	003d1f06 	br	daac <___vfprintf_internal_r+0x184>
    e630:	ac400007 	ldb	r17,0(r21)
    e634:	8a438726 	beq	r17,r9,f454 <___vfprintf_internal_r+0x1b2c>
    e638:	94800414 	ori	r18,r18,16
    e63c:	003d1b06 	br	daac <___vfprintf_internal_r+0x184>
    e640:	18c03fcc 	andi	r3,r3,255
    e644:	1805341e 	bne	r3,zero,fb18 <___vfprintf_internal_r+0x21f0>
    e648:	9080080c 	andi	r2,r18,32
    e64c:	1002cd26 	beq	r2,zero,f184 <___vfprintf_internal_r+0x185c>
    e650:	d9402d17 	ldw	r5,180(sp)
    e654:	d9002f17 	ldw	r4,188(sp)
    e658:	28800017 	ldw	r2,0(r5)
    e65c:	2007d7fa 	srai	r3,r4,31
    e660:	29400104 	addi	r5,r5,4
    e664:	d9402d15 	stw	r5,180(sp)
    e668:	11000015 	stw	r4,0(r2)
    e66c:	10c00115 	stw	r3,4(r2)
    e670:	003ce506 	br	da08 <___vfprintf_internal_r+0xe0>
    e674:	d8c02d17 	ldw	r3,180(sp)
    e678:	d9002d17 	ldw	r4,180(sp)
    e67c:	d8002785 	stb	zero,158(sp)
    e680:	18800017 	ldw	r2,0(r3)
    e684:	21000104 	addi	r4,r4,4
    e688:	00c00044 	movi	r3,1
    e68c:	d8c02a15 	stw	r3,168(sp)
    e690:	d8801405 	stb	r2,80(sp)
    e694:	d9002d15 	stw	r4,180(sp)
    e698:	d8c02e15 	stw	r3,184(sp)
    e69c:	d8002915 	stw	zero,164(sp)
    e6a0:	d8003215 	stw	zero,200(sp)
    e6a4:	dc001404 	addi	r16,sp,80
    e6a8:	0039883a 	mov	fp,zero
    e6ac:	003e7206 	br	e078 <___vfprintf_internal_r+0x750>
    e6b0:	010000b4 	movhi	r4,2
    e6b4:	211e0e04 	addi	r4,r4,30776
    e6b8:	0039883a 	mov	fp,zero
    e6bc:	d9003915 	stw	r4,228(sp)
    e6c0:	04401e04 	movi	r17,120
    e6c4:	003f8206 	br	e4d0 <___vfprintf_internal_r+0xba8>
    e6c8:	18c03fcc 	andi	r3,r3,255
    e6cc:	1805061e 	bne	r3,zero,fae8 <___vfprintf_internal_r+0x21c0>
    e6d0:	883d9126 	beq	r17,zero,dd18 <___vfprintf_internal_r+0x3f0>
    e6d4:	00c00044 	movi	r3,1
    e6d8:	d8c02a15 	stw	r3,168(sp)
    e6dc:	dc401405 	stb	r17,80(sp)
    e6e0:	d8002785 	stb	zero,158(sp)
    e6e4:	003fec06 	br	e698 <___vfprintf_internal_r+0xd70>
    e6e8:	014000b4 	movhi	r5,2
    e6ec:	295e0e04 	addi	r5,r5,30776
    e6f0:	d9403915 	stw	r5,228(sp)
    e6f4:	d8c02d15 	stw	r3,180(sp)
    e6f8:	1025883a 	mov	r18,r2
    e6fc:	04401e04 	movi	r17,120
    e700:	9d84b03a 	or	r2,r19,r22
    e704:	1000fc1e 	bne	r2,zero,eaf8 <___vfprintf_internal_r+0x11d0>
    e708:	0039883a 	mov	fp,zero
    e70c:	00800084 	movi	r2,2
    e710:	10803fcc 	andi	r2,r2,255
    e714:	00c00044 	movi	r3,1
    e718:	10c20f26 	beq	r2,r3,ef58 <___vfprintf_internal_r+0x1630>
    e71c:	00c00084 	movi	r3,2
    e720:	10fd6326 	beq	r2,r3,dcb0 <___vfprintf_internal_r+0x388>
    e724:	003e2d06 	br	dfdc <___vfprintf_internal_r+0x6b4>
    e728:	d8c02017 	ldw	r3,128(sp)
    e72c:	003e9306 	br	e17c <___vfprintf_internal_r+0x854>
    e730:	00801944 	movi	r2,101
    e734:	14407e0e 	bge	r2,r17,e930 <___vfprintf_internal_r+0x1008>
    e738:	d9003617 	ldw	r4,216(sp)
    e73c:	d9403817 	ldw	r5,224(sp)
    e740:	000d883a 	mov	r6,zero
    e744:	000f883a 	mov	r7,zero
    e748:	d8c03c15 	stw	r3,240(sp)
    e74c:	da003d15 	stw	r8,244(sp)
    e750:	0019ef80 	call	19ef8 <__eqdf2>
    e754:	d8c03c17 	ldw	r3,240(sp)
    e758:	da003d17 	ldw	r8,244(sp)
    e75c:	1000f71e 	bne	r2,zero,eb3c <___vfprintf_internal_r+0x1214>
    e760:	d8801f17 	ldw	r2,124(sp)
    e764:	010000b4 	movhi	r4,2
    e768:	211e1504 	addi	r4,r4,30804
    e76c:	18c00044 	addi	r3,r3,1
    e770:	10800044 	addi	r2,r2,1
    e774:	41000015 	stw	r4,0(r8)
    e778:	01000044 	movi	r4,1
    e77c:	41000115 	stw	r4,4(r8)
    e780:	d8c02015 	stw	r3,128(sp)
    e784:	d8801f15 	stw	r2,124(sp)
    e788:	010001c4 	movi	r4,7
    e78c:	2082b816 	blt	r4,r2,f270 <___vfprintf_internal_r+0x1948>
    e790:	42000204 	addi	r8,r8,8
    e794:	d8802617 	ldw	r2,152(sp)
    e798:	d9403317 	ldw	r5,204(sp)
    e79c:	11400216 	blt	r2,r5,e7a8 <___vfprintf_internal_r+0xe80>
    e7a0:	9080004c 	andi	r2,r18,1
    e7a4:	103ed526 	beq	r2,zero,e2fc <___vfprintf_internal_r+0x9d4>
    e7a8:	d8803717 	ldw	r2,220(sp)
    e7ac:	d9003417 	ldw	r4,208(sp)
    e7b0:	d9403717 	ldw	r5,220(sp)
    e7b4:	1887883a 	add	r3,r3,r2
    e7b8:	d8801f17 	ldw	r2,124(sp)
    e7bc:	41000015 	stw	r4,0(r8)
    e7c0:	41400115 	stw	r5,4(r8)
    e7c4:	10800044 	addi	r2,r2,1
    e7c8:	d8c02015 	stw	r3,128(sp)
    e7cc:	d8801f15 	stw	r2,124(sp)
    e7d0:	010001c4 	movi	r4,7
    e7d4:	20832916 	blt	r4,r2,f47c <___vfprintf_internal_r+0x1b54>
    e7d8:	42000204 	addi	r8,r8,8
    e7dc:	d8803317 	ldw	r2,204(sp)
    e7e0:	143fffc4 	addi	r16,r2,-1
    e7e4:	043ec50e 	bge	zero,r16,e2fc <___vfprintf_internal_r+0x9d4>
    e7e8:	04400404 	movi	r17,16
    e7ec:	d8801f17 	ldw	r2,124(sp)
    e7f0:	8c00880e 	bge	r17,r16,ea14 <___vfprintf_internal_r+0x10ec>
    e7f4:	014000b4 	movhi	r5,2
    e7f8:	295e1d84 	addi	r5,r5,30838
    e7fc:	d9402b15 	stw	r5,172(sp)
    e800:	058001c4 	movi	r22,7
    e804:	dcc02c17 	ldw	r19,176(sp)
    e808:	00000306 	br	e818 <___vfprintf_internal_r+0xef0>
    e80c:	42000204 	addi	r8,r8,8
    e810:	843ffc04 	addi	r16,r16,-16
    e814:	8c00820e 	bge	r17,r16,ea20 <___vfprintf_internal_r+0x10f8>
    e818:	18c00404 	addi	r3,r3,16
    e81c:	10800044 	addi	r2,r2,1
    e820:	45000015 	stw	r20,0(r8)
    e824:	44400115 	stw	r17,4(r8)
    e828:	d8c02015 	stw	r3,128(sp)
    e82c:	d8801f15 	stw	r2,124(sp)
    e830:	b0bff60e 	bge	r22,r2,e80c <___vfprintf_internal_r+0xee4>
    e834:	d9801e04 	addi	r6,sp,120
    e838:	b80b883a 	mov	r5,r23
    e83c:	9809883a 	mov	r4,r19
    e840:	00157040 	call	15704 <__sprint_r>
    e844:	103d3a1e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    e848:	d8c02017 	ldw	r3,128(sp)
    e84c:	d8801f17 	ldw	r2,124(sp)
    e850:	da000404 	addi	r8,sp,16
    e854:	003fee06 	br	e810 <___vfprintf_internal_r+0xee8>
    e858:	d9403117 	ldw	r5,196(sp)
    e85c:	d8802a17 	ldw	r2,168(sp)
    e860:	28adc83a 	sub	r22,r5,r2
    e864:	05be630e 	bge	zero,r22,e1f4 <___vfprintf_internal_r+0x8cc>
    e868:	07000404 	movi	fp,16
    e86c:	d8801f17 	ldw	r2,124(sp)
    e870:	e5838f0e 	bge	fp,r22,f6b0 <___vfprintf_internal_r+0x1d88>
    e874:	014000b4 	movhi	r5,2
    e878:	295e1d84 	addi	r5,r5,30838
    e87c:	dc403015 	stw	r17,192(sp)
    e880:	d9402b15 	stw	r5,172(sp)
    e884:	b023883a 	mov	r17,r22
    e888:	04c001c4 	movi	r19,7
    e88c:	a82d883a 	mov	r22,r21
    e890:	902b883a 	mov	r21,r18
    e894:	8025883a 	mov	r18,r16
    e898:	dc002c17 	ldw	r16,176(sp)
    e89c:	00000306 	br	e8ac <___vfprintf_internal_r+0xf84>
    e8a0:	8c7ffc04 	addi	r17,r17,-16
    e8a4:	42000204 	addi	r8,r8,8
    e8a8:	e440110e 	bge	fp,r17,e8f0 <___vfprintf_internal_r+0xfc8>
    e8ac:	18c00404 	addi	r3,r3,16
    e8b0:	10800044 	addi	r2,r2,1
    e8b4:	45000015 	stw	r20,0(r8)
    e8b8:	47000115 	stw	fp,4(r8)
    e8bc:	d8c02015 	stw	r3,128(sp)
    e8c0:	d8801f15 	stw	r2,124(sp)
    e8c4:	98bff60e 	bge	r19,r2,e8a0 <___vfprintf_internal_r+0xf78>
    e8c8:	d9801e04 	addi	r6,sp,120
    e8cc:	b80b883a 	mov	r5,r23
    e8d0:	8009883a 	mov	r4,r16
    e8d4:	00157040 	call	15704 <__sprint_r>
    e8d8:	103d151e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    e8dc:	8c7ffc04 	addi	r17,r17,-16
    e8e0:	d8c02017 	ldw	r3,128(sp)
    e8e4:	d8801f17 	ldw	r2,124(sp)
    e8e8:	da000404 	addi	r8,sp,16
    e8ec:	e47fef16 	blt	fp,r17,e8ac <___vfprintf_internal_r+0xf84>
    e8f0:	9021883a 	mov	r16,r18
    e8f4:	a825883a 	mov	r18,r21
    e8f8:	b02b883a 	mov	r21,r22
    e8fc:	882d883a 	mov	r22,r17
    e900:	dc403017 	ldw	r17,192(sp)
    e904:	d9002b17 	ldw	r4,172(sp)
    e908:	1d87883a 	add	r3,r3,r22
    e90c:	10800044 	addi	r2,r2,1
    e910:	41000015 	stw	r4,0(r8)
    e914:	45800115 	stw	r22,4(r8)
    e918:	d8c02015 	stw	r3,128(sp)
    e91c:	d8801f15 	stw	r2,124(sp)
    e920:	010001c4 	movi	r4,7
    e924:	20818e16 	blt	r4,r2,ef60 <___vfprintf_internal_r+0x1638>
    e928:	42000204 	addi	r8,r8,8
    e92c:	003e3106 	br	e1f4 <___vfprintf_internal_r+0x8cc>
    e930:	d9403317 	ldw	r5,204(sp)
    e934:	00800044 	movi	r2,1
    e938:	18c00044 	addi	r3,r3,1
    e93c:	1141530e 	bge	r2,r5,ee8c <___vfprintf_internal_r+0x1564>
    e940:	dc401f17 	ldw	r17,124(sp)
    e944:	00800044 	movi	r2,1
    e948:	40800115 	stw	r2,4(r8)
    e94c:	8c400044 	addi	r17,r17,1
    e950:	44000015 	stw	r16,0(r8)
    e954:	d8c02015 	stw	r3,128(sp)
    e958:	dc401f15 	stw	r17,124(sp)
    e95c:	008001c4 	movi	r2,7
    e960:	14416b16 	blt	r2,r17,ef10 <___vfprintf_internal_r+0x15e8>
    e964:	42000204 	addi	r8,r8,8
    e968:	d8803717 	ldw	r2,220(sp)
    e96c:	d9003417 	ldw	r4,208(sp)
    e970:	8c400044 	addi	r17,r17,1
    e974:	10c7883a 	add	r3,r2,r3
    e978:	40800115 	stw	r2,4(r8)
    e97c:	41000015 	stw	r4,0(r8)
    e980:	d8c02015 	stw	r3,128(sp)
    e984:	dc401f15 	stw	r17,124(sp)
    e988:	008001c4 	movi	r2,7
    e98c:	14416916 	blt	r2,r17,ef34 <___vfprintf_internal_r+0x160c>
    e990:	45800204 	addi	r22,r8,8
    e994:	d9003617 	ldw	r4,216(sp)
    e998:	d9403817 	ldw	r5,224(sp)
    e99c:	000d883a 	mov	r6,zero
    e9a0:	000f883a 	mov	r7,zero
    e9a4:	d8c03c15 	stw	r3,240(sp)
    e9a8:	0019ef80 	call	19ef8 <__eqdf2>
    e9ac:	d8c03c17 	ldw	r3,240(sp)
    e9b0:	1000bc26 	beq	r2,zero,eca4 <___vfprintf_internal_r+0x137c>
    e9b4:	d9403317 	ldw	r5,204(sp)
    e9b8:	84000044 	addi	r16,r16,1
    e9bc:	8c400044 	addi	r17,r17,1
    e9c0:	28bfffc4 	addi	r2,r5,-1
    e9c4:	1887883a 	add	r3,r3,r2
    e9c8:	b0800115 	stw	r2,4(r22)
    e9cc:	b4000015 	stw	r16,0(r22)
    e9d0:	d8c02015 	stw	r3,128(sp)
    e9d4:	dc401f15 	stw	r17,124(sp)
    e9d8:	008001c4 	movi	r2,7
    e9dc:	14414316 	blt	r2,r17,eeec <___vfprintf_internal_r+0x15c4>
    e9e0:	b5800204 	addi	r22,r22,8
    e9e4:	d9003a17 	ldw	r4,232(sp)
    e9e8:	df0022c4 	addi	fp,sp,139
    e9ec:	8c400044 	addi	r17,r17,1
    e9f0:	20c7883a 	add	r3,r4,r3
    e9f4:	b7000015 	stw	fp,0(r22)
    e9f8:	b1000115 	stw	r4,4(r22)
    e9fc:	d8c02015 	stw	r3,128(sp)
    ea00:	dc401f15 	stw	r17,124(sp)
    ea04:	008001c4 	movi	r2,7
    ea08:	14400e16 	blt	r2,r17,ea44 <___vfprintf_internal_r+0x111c>
    ea0c:	b2000204 	addi	r8,r22,8
    ea10:	003e3a06 	br	e2fc <___vfprintf_internal_r+0x9d4>
    ea14:	010000b4 	movhi	r4,2
    ea18:	211e1d84 	addi	r4,r4,30838
    ea1c:	d9002b15 	stw	r4,172(sp)
    ea20:	d9002b17 	ldw	r4,172(sp)
    ea24:	1c07883a 	add	r3,r3,r16
    ea28:	44000115 	stw	r16,4(r8)
    ea2c:	41000015 	stw	r4,0(r8)
    ea30:	10800044 	addi	r2,r2,1
    ea34:	d8c02015 	stw	r3,128(sp)
    ea38:	d8801f15 	stw	r2,124(sp)
    ea3c:	010001c4 	movi	r4,7
    ea40:	20be2d0e 	bge	r4,r2,e2f8 <___vfprintf_internal_r+0x9d0>
    ea44:	d9002c17 	ldw	r4,176(sp)
    ea48:	d9801e04 	addi	r6,sp,120
    ea4c:	b80b883a 	mov	r5,r23
    ea50:	00157040 	call	15704 <__sprint_r>
    ea54:	103cb61e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    ea58:	d8c02017 	ldw	r3,128(sp)
    ea5c:	da000404 	addi	r8,sp,16
    ea60:	003e2606 	br	e2fc <___vfprintf_internal_r+0x9d4>
    ea64:	d9002c17 	ldw	r4,176(sp)
    ea68:	d9801e04 	addi	r6,sp,120
    ea6c:	b80b883a 	mov	r5,r23
    ea70:	00157040 	call	15704 <__sprint_r>
    ea74:	103e5d26 	beq	r2,zero,e3ec <___vfprintf_internal_r+0xac4>
    ea78:	003cad06 	br	dd30 <___vfprintf_internal_r+0x408>
    ea7c:	d9002c17 	ldw	r4,176(sp)
    ea80:	d9801e04 	addi	r6,sp,120
    ea84:	b80b883a 	mov	r5,r23
    ea88:	00157040 	call	15704 <__sprint_r>
    ea8c:	103ca81e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    ea90:	d8c02017 	ldw	r3,128(sp)
    ea94:	da000404 	addi	r8,sp,16
    ea98:	003e0b06 	br	e2c8 <___vfprintf_internal_r+0x9a0>
    ea9c:	d9002c17 	ldw	r4,176(sp)
    eaa0:	d9801e04 	addi	r6,sp,120
    eaa4:	b80b883a 	mov	r5,r23
    eaa8:	00157040 	call	15704 <__sprint_r>
    eaac:	103ca01e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    eab0:	d8c02017 	ldw	r3,128(sp)
    eab4:	da000404 	addi	r8,sp,16
    eab8:	003dbd06 	br	e1b0 <___vfprintf_internal_r+0x888>
    eabc:	d9002c17 	ldw	r4,176(sp)
    eac0:	d9801e04 	addi	r6,sp,120
    eac4:	b80b883a 	mov	r5,r23
    eac8:	00157040 	call	15704 <__sprint_r>
    eacc:	103c981e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    ead0:	d8c02017 	ldw	r3,128(sp)
    ead4:	da000404 	addi	r8,sp,16
    ead8:	003dc306 	br	e1e8 <___vfprintf_internal_r+0x8c0>
    eadc:	d8802917 	ldw	r2,164(sp)
    eae0:	d8002785 	stb	zero,158(sp)
    eae4:	103f0616 	blt	r2,zero,e700 <___vfprintf_internal_r+0xdd8>
    eae8:	00ffdfc4 	movi	r3,-129
    eaec:	9d84b03a 	or	r2,r19,r22
    eaf0:	90e4703a 	and	r18,r18,r3
    eaf4:	103c6b26 	beq	r2,zero,dca4 <___vfprintf_internal_r+0x37c>
    eaf8:	0039883a 	mov	fp,zero
    eafc:	003e7406 	br	e4d0 <___vfprintf_internal_r+0xba8>
    eb00:	9080040c 	andi	r2,r18,16
    eb04:	1001b326 	beq	r2,zero,f1d4 <___vfprintf_internal_r+0x18ac>
    eb08:	d9002d17 	ldw	r4,180(sp)
    eb0c:	d9402917 	ldw	r5,164(sp)
    eb10:	d8002785 	stb	zero,158(sp)
    eb14:	20800104 	addi	r2,r4,4
    eb18:	24c00017 	ldw	r19,0(r4)
    eb1c:	002d883a 	mov	r22,zero
    eb20:	2801b516 	blt	r5,zero,f1f8 <___vfprintf_internal_r+0x18d0>
    eb24:	00ffdfc4 	movi	r3,-129
    eb28:	d8802d15 	stw	r2,180(sp)
    eb2c:	90e4703a 	and	r18,r18,r3
    eb30:	983d2726 	beq	r19,zero,dfd0 <___vfprintf_internal_r+0x6a8>
    eb34:	0039883a 	mov	fp,zero
    eb38:	003d2a06 	br	dfe4 <___vfprintf_internal_r+0x6bc>
    eb3c:	dc402617 	ldw	r17,152(sp)
    eb40:	0441d30e 	bge	zero,r17,f290 <___vfprintf_internal_r+0x1968>
    eb44:	dc403217 	ldw	r17,200(sp)
    eb48:	d8803317 	ldw	r2,204(sp)
    eb4c:	1440010e 	bge	r2,r17,eb54 <___vfprintf_internal_r+0x122c>
    eb50:	1023883a 	mov	r17,r2
    eb54:	04400a0e 	bge	zero,r17,eb80 <___vfprintf_internal_r+0x1258>
    eb58:	d8801f17 	ldw	r2,124(sp)
    eb5c:	1c47883a 	add	r3,r3,r17
    eb60:	44000015 	stw	r16,0(r8)
    eb64:	10800044 	addi	r2,r2,1
    eb68:	44400115 	stw	r17,4(r8)
    eb6c:	d8c02015 	stw	r3,128(sp)
    eb70:	d8801f15 	stw	r2,124(sp)
    eb74:	010001c4 	movi	r4,7
    eb78:	20826516 	blt	r4,r2,f510 <___vfprintf_internal_r+0x1be8>
    eb7c:	42000204 	addi	r8,r8,8
    eb80:	88026116 	blt	r17,zero,f508 <___vfprintf_internal_r+0x1be0>
    eb84:	d9003217 	ldw	r4,200(sp)
    eb88:	2463c83a 	sub	r17,r4,r17
    eb8c:	04407b0e 	bge	zero,r17,ed7c <___vfprintf_internal_r+0x1454>
    eb90:	05800404 	movi	r22,16
    eb94:	d8801f17 	ldw	r2,124(sp)
    eb98:	b4419d0e 	bge	r22,r17,f210 <___vfprintf_internal_r+0x18e8>
    eb9c:	010000b4 	movhi	r4,2
    eba0:	211e1d84 	addi	r4,r4,30838
    eba4:	d9002b15 	stw	r4,172(sp)
    eba8:	070001c4 	movi	fp,7
    ebac:	dcc02c17 	ldw	r19,176(sp)
    ebb0:	00000306 	br	ebc0 <___vfprintf_internal_r+0x1298>
    ebb4:	42000204 	addi	r8,r8,8
    ebb8:	8c7ffc04 	addi	r17,r17,-16
    ebbc:	b441970e 	bge	r22,r17,f21c <___vfprintf_internal_r+0x18f4>
    ebc0:	18c00404 	addi	r3,r3,16
    ebc4:	10800044 	addi	r2,r2,1
    ebc8:	45000015 	stw	r20,0(r8)
    ebcc:	45800115 	stw	r22,4(r8)
    ebd0:	d8c02015 	stw	r3,128(sp)
    ebd4:	d8801f15 	stw	r2,124(sp)
    ebd8:	e0bff60e 	bge	fp,r2,ebb4 <___vfprintf_internal_r+0x128c>
    ebdc:	d9801e04 	addi	r6,sp,120
    ebe0:	b80b883a 	mov	r5,r23
    ebe4:	9809883a 	mov	r4,r19
    ebe8:	00157040 	call	15704 <__sprint_r>
    ebec:	103c501e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    ebf0:	d8c02017 	ldw	r3,128(sp)
    ebf4:	d8801f17 	ldw	r2,124(sp)
    ebf8:	da000404 	addi	r8,sp,16
    ebfc:	003fee06 	br	ebb8 <___vfprintf_internal_r+0x1290>
    ec00:	d9002c17 	ldw	r4,176(sp)
    ec04:	d9801e04 	addi	r6,sp,120
    ec08:	b80b883a 	mov	r5,r23
    ec0c:	00157040 	call	15704 <__sprint_r>
    ec10:	103c471e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    ec14:	d8c02017 	ldw	r3,128(sp)
    ec18:	df002787 	ldb	fp,158(sp)
    ec1c:	da000404 	addi	r8,sp,16
    ec20:	003d5606 	br	e17c <___vfprintf_internal_r+0x854>
    ec24:	9080040c 	andi	r2,r18,16
    ec28:	10016126 	beq	r2,zero,f1b0 <___vfprintf_internal_r+0x1888>
    ec2c:	d8802d17 	ldw	r2,180(sp)
    ec30:	14c00017 	ldw	r19,0(r2)
    ec34:	10800104 	addi	r2,r2,4
    ec38:	d8802d15 	stw	r2,180(sp)
    ec3c:	982dd7fa 	srai	r22,r19,31
    ec40:	b005883a 	mov	r2,r22
    ec44:	003c8206 	br	de50 <___vfprintf_internal_r+0x528>
    ec48:	9080040c 	andi	r2,r18,16
    ec4c:	10003526 	beq	r2,zero,ed24 <___vfprintf_internal_r+0x13fc>
    ec50:	d9402d17 	ldw	r5,180(sp)
    ec54:	d8c02917 	ldw	r3,164(sp)
    ec58:	d8002785 	stb	zero,158(sp)
    ec5c:	28800104 	addi	r2,r5,4
    ec60:	2cc00017 	ldw	r19,0(r5)
    ec64:	002d883a 	mov	r22,zero
    ec68:	18003716 	blt	r3,zero,ed48 <___vfprintf_internal_r+0x1420>
    ec6c:	00ffdfc4 	movi	r3,-129
    ec70:	d8802d15 	stw	r2,180(sp)
    ec74:	90e4703a 	and	r18,r18,r3
    ec78:	0039883a 	mov	fp,zero
    ec7c:	983df326 	beq	r19,zero,e44c <___vfprintf_internal_r+0xb24>
    ec80:	00800244 	movi	r2,9
    ec84:	14fc7b36 	bltu	r2,r19,de74 <___vfprintf_internal_r+0x54c>
    ec88:	d8c02817 	ldw	r3,160(sp)
    ec8c:	dc001dc4 	addi	r16,sp,119
    ec90:	9cc00c04 	addi	r19,r19,48
    ec94:	1c07c83a 	sub	r3,r3,r16
    ec98:	dcc01dc5 	stb	r19,119(sp)
    ec9c:	d8c02e15 	stw	r3,184(sp)
    eca0:	003ce806 	br	e044 <___vfprintf_internal_r+0x71c>
    eca4:	d8803317 	ldw	r2,204(sp)
    eca8:	143fffc4 	addi	r16,r2,-1
    ecac:	043f4d0e 	bge	zero,r16,e9e4 <___vfprintf_internal_r+0x10bc>
    ecb0:	07000404 	movi	fp,16
    ecb4:	e400810e 	bge	fp,r16,eebc <___vfprintf_internal_r+0x1594>
    ecb8:	014000b4 	movhi	r5,2
    ecbc:	295e1d84 	addi	r5,r5,30838
    ecc0:	d9402b15 	stw	r5,172(sp)
    ecc4:	01c001c4 	movi	r7,7
    ecc8:	dcc02c17 	ldw	r19,176(sp)
    eccc:	00000306 	br	ecdc <___vfprintf_internal_r+0x13b4>
    ecd0:	b5800204 	addi	r22,r22,8
    ecd4:	843ffc04 	addi	r16,r16,-16
    ecd8:	e4007b0e 	bge	fp,r16,eec8 <___vfprintf_internal_r+0x15a0>
    ecdc:	18c00404 	addi	r3,r3,16
    ece0:	8c400044 	addi	r17,r17,1
    ece4:	b5000015 	stw	r20,0(r22)
    ece8:	b7000115 	stw	fp,4(r22)
    ecec:	d8c02015 	stw	r3,128(sp)
    ecf0:	dc401f15 	stw	r17,124(sp)
    ecf4:	3c7ff60e 	bge	r7,r17,ecd0 <___vfprintf_internal_r+0x13a8>
    ecf8:	d9801e04 	addi	r6,sp,120
    ecfc:	b80b883a 	mov	r5,r23
    ed00:	9809883a 	mov	r4,r19
    ed04:	d9c03c15 	stw	r7,240(sp)
    ed08:	00157040 	call	15704 <__sprint_r>
    ed0c:	d9c03c17 	ldw	r7,240(sp)
    ed10:	103c071e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    ed14:	d8c02017 	ldw	r3,128(sp)
    ed18:	dc401f17 	ldw	r17,124(sp)
    ed1c:	dd800404 	addi	r22,sp,16
    ed20:	003fec06 	br	ecd4 <___vfprintf_internal_r+0x13ac>
    ed24:	9080100c 	andi	r2,r18,64
    ed28:	d8002785 	stb	zero,158(sp)
    ed2c:	10010e26 	beq	r2,zero,f168 <___vfprintf_internal_r+0x1840>
    ed30:	d9002d17 	ldw	r4,180(sp)
    ed34:	d9402917 	ldw	r5,164(sp)
    ed38:	002d883a 	mov	r22,zero
    ed3c:	20800104 	addi	r2,r4,4
    ed40:	24c0000b 	ldhu	r19,0(r4)
    ed44:	283fc90e 	bge	r5,zero,ec6c <___vfprintf_internal_r+0x1344>
    ed48:	d8802d15 	stw	r2,180(sp)
    ed4c:	0039883a 	mov	fp,zero
    ed50:	9d84b03a 	or	r2,r19,r22
    ed54:	103c461e 	bne	r2,zero,de70 <___vfprintf_internal_r+0x548>
    ed58:	00800044 	movi	r2,1
    ed5c:	003e6c06 	br	e710 <___vfprintf_internal_r+0xde8>
    ed60:	d9002c17 	ldw	r4,176(sp)
    ed64:	d9801e04 	addi	r6,sp,120
    ed68:	b80b883a 	mov	r5,r23
    ed6c:	00157040 	call	15704 <__sprint_r>
    ed70:	103bef1e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    ed74:	d8c02017 	ldw	r3,128(sp)
    ed78:	da000404 	addi	r8,sp,16
    ed7c:	d9003217 	ldw	r4,200(sp)
    ed80:	d8802617 	ldw	r2,152(sp)
    ed84:	d9403317 	ldw	r5,204(sp)
    ed88:	8123883a 	add	r17,r16,r4
    ed8c:	11400216 	blt	r2,r5,ed98 <___vfprintf_internal_r+0x1470>
    ed90:	9100004c 	andi	r4,r18,1
    ed94:	20000d26 	beq	r4,zero,edcc <___vfprintf_internal_r+0x14a4>
    ed98:	d9003717 	ldw	r4,220(sp)
    ed9c:	d9403417 	ldw	r5,208(sp)
    eda0:	1907883a 	add	r3,r3,r4
    eda4:	d9001f17 	ldw	r4,124(sp)
    eda8:	41400015 	stw	r5,0(r8)
    edac:	d9403717 	ldw	r5,220(sp)
    edb0:	21000044 	addi	r4,r4,1
    edb4:	d8c02015 	stw	r3,128(sp)
    edb8:	41400115 	stw	r5,4(r8)
    edbc:	d9001f15 	stw	r4,124(sp)
    edc0:	014001c4 	movi	r5,7
    edc4:	2901e816 	blt	r5,r4,f568 <___vfprintf_internal_r+0x1c40>
    edc8:	42000204 	addi	r8,r8,8
    edcc:	d9003317 	ldw	r4,204(sp)
    edd0:	8121883a 	add	r16,r16,r4
    edd4:	2085c83a 	sub	r2,r4,r2
    edd8:	8461c83a 	sub	r16,r16,r17
    eddc:	1400010e 	bge	r2,r16,ede4 <___vfprintf_internal_r+0x14bc>
    ede0:	1021883a 	mov	r16,r2
    ede4:	04000a0e 	bge	zero,r16,ee10 <___vfprintf_internal_r+0x14e8>
    ede8:	d9001f17 	ldw	r4,124(sp)
    edec:	1c07883a 	add	r3,r3,r16
    edf0:	44400015 	stw	r17,0(r8)
    edf4:	21000044 	addi	r4,r4,1
    edf8:	44000115 	stw	r16,4(r8)
    edfc:	d8c02015 	stw	r3,128(sp)
    ee00:	d9001f15 	stw	r4,124(sp)
    ee04:	014001c4 	movi	r5,7
    ee08:	2901fb16 	blt	r5,r4,f5f8 <___vfprintf_internal_r+0x1cd0>
    ee0c:	42000204 	addi	r8,r8,8
    ee10:	8001f716 	blt	r16,zero,f5f0 <___vfprintf_internal_r+0x1cc8>
    ee14:	1421c83a 	sub	r16,r2,r16
    ee18:	043d380e 	bge	zero,r16,e2fc <___vfprintf_internal_r+0x9d4>
    ee1c:	04400404 	movi	r17,16
    ee20:	d8801f17 	ldw	r2,124(sp)
    ee24:	8c3efb0e 	bge	r17,r16,ea14 <___vfprintf_internal_r+0x10ec>
    ee28:	014000b4 	movhi	r5,2
    ee2c:	295e1d84 	addi	r5,r5,30838
    ee30:	d9402b15 	stw	r5,172(sp)
    ee34:	058001c4 	movi	r22,7
    ee38:	dcc02c17 	ldw	r19,176(sp)
    ee3c:	00000306 	br	ee4c <___vfprintf_internal_r+0x1524>
    ee40:	42000204 	addi	r8,r8,8
    ee44:	843ffc04 	addi	r16,r16,-16
    ee48:	8c3ef50e 	bge	r17,r16,ea20 <___vfprintf_internal_r+0x10f8>
    ee4c:	18c00404 	addi	r3,r3,16
    ee50:	10800044 	addi	r2,r2,1
    ee54:	45000015 	stw	r20,0(r8)
    ee58:	44400115 	stw	r17,4(r8)
    ee5c:	d8c02015 	stw	r3,128(sp)
    ee60:	d8801f15 	stw	r2,124(sp)
    ee64:	b0bff60e 	bge	r22,r2,ee40 <___vfprintf_internal_r+0x1518>
    ee68:	d9801e04 	addi	r6,sp,120
    ee6c:	b80b883a 	mov	r5,r23
    ee70:	9809883a 	mov	r4,r19
    ee74:	00157040 	call	15704 <__sprint_r>
    ee78:	103bad1e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    ee7c:	d8c02017 	ldw	r3,128(sp)
    ee80:	d8801f17 	ldw	r2,124(sp)
    ee84:	da000404 	addi	r8,sp,16
    ee88:	003fee06 	br	ee44 <___vfprintf_internal_r+0x151c>
    ee8c:	9088703a 	and	r4,r18,r2
    ee90:	203eab1e 	bne	r4,zero,e940 <___vfprintf_internal_r+0x1018>
    ee94:	dc401f17 	ldw	r17,124(sp)
    ee98:	40800115 	stw	r2,4(r8)
    ee9c:	44000015 	stw	r16,0(r8)
    eea0:	8c400044 	addi	r17,r17,1
    eea4:	d8c02015 	stw	r3,128(sp)
    eea8:	dc401f15 	stw	r17,124(sp)
    eeac:	008001c4 	movi	r2,7
    eeb0:	14400e16 	blt	r2,r17,eeec <___vfprintf_internal_r+0x15c4>
    eeb4:	45800204 	addi	r22,r8,8
    eeb8:	003eca06 	br	e9e4 <___vfprintf_internal_r+0x10bc>
    eebc:	010000b4 	movhi	r4,2
    eec0:	211e1d84 	addi	r4,r4,30838
    eec4:	d9002b15 	stw	r4,172(sp)
    eec8:	d8802b17 	ldw	r2,172(sp)
    eecc:	1c07883a 	add	r3,r3,r16
    eed0:	8c400044 	addi	r17,r17,1
    eed4:	b0800015 	stw	r2,0(r22)
    eed8:	b4000115 	stw	r16,4(r22)
    eedc:	d8c02015 	stw	r3,128(sp)
    eee0:	dc401f15 	stw	r17,124(sp)
    eee4:	008001c4 	movi	r2,7
    eee8:	147ebd0e 	bge	r2,r17,e9e0 <___vfprintf_internal_r+0x10b8>
    eeec:	d9002c17 	ldw	r4,176(sp)
    eef0:	d9801e04 	addi	r6,sp,120
    eef4:	b80b883a 	mov	r5,r23
    eef8:	00157040 	call	15704 <__sprint_r>
    eefc:	103b8c1e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    ef00:	d8c02017 	ldw	r3,128(sp)
    ef04:	dc401f17 	ldw	r17,124(sp)
    ef08:	dd800404 	addi	r22,sp,16
    ef0c:	003eb506 	br	e9e4 <___vfprintf_internal_r+0x10bc>
    ef10:	d9002c17 	ldw	r4,176(sp)
    ef14:	d9801e04 	addi	r6,sp,120
    ef18:	b80b883a 	mov	r5,r23
    ef1c:	00157040 	call	15704 <__sprint_r>
    ef20:	103b831e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    ef24:	d8c02017 	ldw	r3,128(sp)
    ef28:	dc401f17 	ldw	r17,124(sp)
    ef2c:	da000404 	addi	r8,sp,16
    ef30:	003e8d06 	br	e968 <___vfprintf_internal_r+0x1040>
    ef34:	d9002c17 	ldw	r4,176(sp)
    ef38:	d9801e04 	addi	r6,sp,120
    ef3c:	b80b883a 	mov	r5,r23
    ef40:	00157040 	call	15704 <__sprint_r>
    ef44:	103b7a1e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    ef48:	d8c02017 	ldw	r3,128(sp)
    ef4c:	dc401f17 	ldw	r17,124(sp)
    ef50:	dd800404 	addi	r22,sp,16
    ef54:	003e8f06 	br	e994 <___vfprintf_internal_r+0x106c>
    ef58:	0027883a 	mov	r19,zero
    ef5c:	003f4a06 	br	ec88 <___vfprintf_internal_r+0x1360>
    ef60:	d9002c17 	ldw	r4,176(sp)
    ef64:	d9801e04 	addi	r6,sp,120
    ef68:	b80b883a 	mov	r5,r23
    ef6c:	00157040 	call	15704 <__sprint_r>
    ef70:	103b6f1e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    ef74:	d8c02017 	ldw	r3,128(sp)
    ef78:	da000404 	addi	r8,sp,16
    ef7c:	003c9d06 	br	e1f4 <___vfprintf_internal_r+0x8cc>
    ef80:	04e7c83a 	sub	r19,zero,r19
    ef84:	9804c03a 	cmpne	r2,r19,zero
    ef88:	05adc83a 	sub	r22,zero,r22
    ef8c:	b0adc83a 	sub	r22,r22,r2
    ef90:	d8802917 	ldw	r2,164(sp)
    ef94:	07000b44 	movi	fp,45
    ef98:	df002785 	stb	fp,158(sp)
    ef9c:	10017b16 	blt	r2,zero,f58c <___vfprintf_internal_r+0x1c64>
    efa0:	00bfdfc4 	movi	r2,-129
    efa4:	90a4703a 	and	r18,r18,r2
    efa8:	003bb106 	br	de70 <___vfprintf_internal_r+0x548>
    efac:	d9003617 	ldw	r4,216(sp)
    efb0:	d9403817 	ldw	r5,224(sp)
    efb4:	da003d15 	stw	r8,244(sp)
    efb8:	0013e840 	call	13e84 <__fpclassifyd>
    efbc:	da003d17 	ldw	r8,244(sp)
    efc0:	1000f026 	beq	r2,zero,f384 <___vfprintf_internal_r+0x1a5c>
    efc4:	d9002917 	ldw	r4,164(sp)
    efc8:	05bff7c4 	movi	r22,-33
    efcc:	00bfffc4 	movi	r2,-1
    efd0:	8dac703a 	and	r22,r17,r22
    efd4:	20820026 	beq	r4,r2,f7d8 <___vfprintf_internal_r+0x1eb0>
    efd8:	008011c4 	movi	r2,71
    efdc:	b081f726 	beq	r22,r2,f7bc <___vfprintf_internal_r+0x1e94>
    efe0:	d9003817 	ldw	r4,224(sp)
    efe4:	90c04014 	ori	r3,r18,256
    efe8:	d8c02b15 	stw	r3,172(sp)
    efec:	20021516 	blt	r4,zero,f844 <___vfprintf_internal_r+0x1f1c>
    eff0:	dcc03817 	ldw	r19,224(sp)
    eff4:	d8002a05 	stb	zero,168(sp)
    eff8:	00801984 	movi	r2,102
    effc:	8881f926 	beq	r17,r2,f7e4 <___vfprintf_internal_r+0x1ebc>
    f000:	00801184 	movi	r2,70
    f004:	88821c26 	beq	r17,r2,f878 <___vfprintf_internal_r+0x1f50>
    f008:	00801144 	movi	r2,69
    f00c:	b081ef26 	beq	r22,r2,f7cc <___vfprintf_internal_r+0x1ea4>
    f010:	d8c02917 	ldw	r3,164(sp)
    f014:	d8802104 	addi	r2,sp,132
    f018:	d8800315 	stw	r2,12(sp)
    f01c:	d9403617 	ldw	r5,216(sp)
    f020:	d8802504 	addi	r2,sp,148
    f024:	d9002c17 	ldw	r4,176(sp)
    f028:	d8800215 	stw	r2,8(sp)
    f02c:	d8802604 	addi	r2,sp,152
    f030:	d8c00015 	stw	r3,0(sp)
    f034:	d8800115 	stw	r2,4(sp)
    f038:	01c00084 	movi	r7,2
    f03c:	980d883a 	mov	r6,r19
    f040:	d8c03c15 	stw	r3,240(sp)
    f044:	da003d15 	stw	r8,244(sp)
    f048:	000ff4c0 	call	ff4c <_dtoa_r>
    f04c:	1021883a 	mov	r16,r2
    f050:	008019c4 	movi	r2,103
    f054:	d8c03c17 	ldw	r3,240(sp)
    f058:	da003d17 	ldw	r8,244(sp)
    f05c:	88817126 	beq	r17,r2,f624 <___vfprintf_internal_r+0x1cfc>
    f060:	008011c4 	movi	r2,71
    f064:	88829226 	beq	r17,r2,fab0 <___vfprintf_internal_r+0x2188>
    f068:	80f9883a 	add	fp,r16,r3
    f06c:	d9003617 	ldw	r4,216(sp)
    f070:	000d883a 	mov	r6,zero
    f074:	000f883a 	mov	r7,zero
    f078:	980b883a 	mov	r5,r19
    f07c:	da003d15 	stw	r8,244(sp)
    f080:	0019ef80 	call	19ef8 <__eqdf2>
    f084:	da003d17 	ldw	r8,244(sp)
    f088:	10018d26 	beq	r2,zero,f6c0 <___vfprintf_internal_r+0x1d98>
    f08c:	d8802117 	ldw	r2,132(sp)
    f090:	1700062e 	bgeu	r2,fp,f0ac <___vfprintf_internal_r+0x1784>
    f094:	01000c04 	movi	r4,48
    f098:	10c00044 	addi	r3,r2,1
    f09c:	d8c02115 	stw	r3,132(sp)
    f0a0:	11000005 	stb	r4,0(r2)
    f0a4:	d8802117 	ldw	r2,132(sp)
    f0a8:	173ffb36 	bltu	r2,fp,f098 <___vfprintf_internal_r+0x1770>
    f0ac:	1405c83a 	sub	r2,r2,r16
    f0b0:	d8803315 	stw	r2,204(sp)
    f0b4:	008011c4 	movi	r2,71
    f0b8:	b0817626 	beq	r22,r2,f694 <___vfprintf_internal_r+0x1d6c>
    f0bc:	00801944 	movi	r2,101
    f0c0:	1442810e 	bge	r2,r17,fac8 <___vfprintf_internal_r+0x21a0>
    f0c4:	d8c02617 	ldw	r3,152(sp)
    f0c8:	00801984 	movi	r2,102
    f0cc:	d8c03215 	stw	r3,200(sp)
    f0d0:	8881fe26 	beq	r17,r2,f8cc <___vfprintf_internal_r+0x1fa4>
    f0d4:	d8c03217 	ldw	r3,200(sp)
    f0d8:	d9003317 	ldw	r4,204(sp)
    f0dc:	1901dd16 	blt	r3,r4,f854 <___vfprintf_internal_r+0x1f2c>
    f0e0:	9480004c 	andi	r18,r18,1
    f0e4:	90022b1e 	bne	r18,zero,f994 <___vfprintf_internal_r+0x206c>
    f0e8:	1805883a 	mov	r2,r3
    f0ec:	18028016 	blt	r3,zero,faf0 <___vfprintf_internal_r+0x21c8>
    f0f0:	d8c03217 	ldw	r3,200(sp)
    f0f4:	044019c4 	movi	r17,103
    f0f8:	d8c02e15 	stw	r3,184(sp)
    f0fc:	df002a07 	ldb	fp,168(sp)
    f100:	e001531e 	bne	fp,zero,f650 <___vfprintf_internal_r+0x1d28>
    f104:	df002783 	ldbu	fp,158(sp)
    f108:	d8802a15 	stw	r2,168(sp)
    f10c:	dc802b17 	ldw	r18,172(sp)
    f110:	d8002915 	stw	zero,164(sp)
    f114:	003bd106 	br	e05c <___vfprintf_internal_r+0x734>
    f118:	d8802d17 	ldw	r2,180(sp)
    f11c:	d8c02d17 	ldw	r3,180(sp)
    f120:	d9002d17 	ldw	r4,180(sp)
    f124:	10800017 	ldw	r2,0(r2)
    f128:	18c00117 	ldw	r3,4(r3)
    f12c:	21000204 	addi	r4,r4,8
    f130:	d8803615 	stw	r2,216(sp)
    f134:	d8c03815 	stw	r3,224(sp)
    f138:	d9002d15 	stw	r4,180(sp)
    f13c:	003b7506 	br	df14 <___vfprintf_internal_r+0x5ec>
    f140:	ac400007 	ldb	r17,0(r21)
    f144:	003a5906 	br	daac <___vfprintf_internal_r+0x184>
    f148:	9080100c 	andi	r2,r18,64
    f14c:	1000a826 	beq	r2,zero,f3f0 <___vfprintf_internal_r+0x1ac8>
    f150:	d9002d17 	ldw	r4,180(sp)
    f154:	002d883a 	mov	r22,zero
    f158:	24c0000b 	ldhu	r19,0(r4)
    f15c:	21000104 	addi	r4,r4,4
    f160:	d9002d15 	stw	r4,180(sp)
    f164:	003ccb06 	br	e494 <___vfprintf_internal_r+0xb6c>
    f168:	d8c02d17 	ldw	r3,180(sp)
    f16c:	d9002917 	ldw	r4,164(sp)
    f170:	002d883a 	mov	r22,zero
    f174:	18800104 	addi	r2,r3,4
    f178:	1cc00017 	ldw	r19,0(r3)
    f17c:	203ebb0e 	bge	r4,zero,ec6c <___vfprintf_internal_r+0x1344>
    f180:	003ef106 	br	ed48 <___vfprintf_internal_r+0x1420>
    f184:	9080040c 	andi	r2,r18,16
    f188:	1000921e 	bne	r2,zero,f3d4 <___vfprintf_internal_r+0x1aac>
    f18c:	9480100c 	andi	r18,r18,64
    f190:	90013926 	beq	r18,zero,f678 <___vfprintf_internal_r+0x1d50>
    f194:	d9002d17 	ldw	r4,180(sp)
    f198:	d9402f17 	ldw	r5,188(sp)
    f19c:	20800017 	ldw	r2,0(r4)
    f1a0:	21000104 	addi	r4,r4,4
    f1a4:	d9002d15 	stw	r4,180(sp)
    f1a8:	1140000d 	sth	r5,0(r2)
    f1ac:	003a1606 	br	da08 <___vfprintf_internal_r+0xe0>
    f1b0:	9080100c 	andi	r2,r18,64
    f1b4:	10008026 	beq	r2,zero,f3b8 <___vfprintf_internal_r+0x1a90>
    f1b8:	d8c02d17 	ldw	r3,180(sp)
    f1bc:	1cc0000f 	ldh	r19,0(r3)
    f1c0:	18c00104 	addi	r3,r3,4
    f1c4:	d8c02d15 	stw	r3,180(sp)
    f1c8:	982dd7fa 	srai	r22,r19,31
    f1cc:	b005883a 	mov	r2,r22
    f1d0:	003b1f06 	br	de50 <___vfprintf_internal_r+0x528>
    f1d4:	9080100c 	andi	r2,r18,64
    f1d8:	d8002785 	stb	zero,158(sp)
    f1dc:	10008a1e 	bne	r2,zero,f408 <___vfprintf_internal_r+0x1ae0>
    f1e0:	d9402d17 	ldw	r5,180(sp)
    f1e4:	d8c02917 	ldw	r3,164(sp)
    f1e8:	002d883a 	mov	r22,zero
    f1ec:	28800104 	addi	r2,r5,4
    f1f0:	2cc00017 	ldw	r19,0(r5)
    f1f4:	183e4b0e 	bge	r3,zero,eb24 <___vfprintf_internal_r+0x11fc>
    f1f8:	9d86b03a 	or	r3,r19,r22
    f1fc:	d8802d15 	stw	r2,180(sp)
    f200:	183e4c1e 	bne	r3,zero,eb34 <___vfprintf_internal_r+0x120c>
    f204:	0039883a 	mov	fp,zero
    f208:	0005883a 	mov	r2,zero
    f20c:	003d4006 	br	e710 <___vfprintf_internal_r+0xde8>
    f210:	014000b4 	movhi	r5,2
    f214:	295e1d84 	addi	r5,r5,30838
    f218:	d9402b15 	stw	r5,172(sp)
    f21c:	d9402b17 	ldw	r5,172(sp)
    f220:	1c47883a 	add	r3,r3,r17
    f224:	10800044 	addi	r2,r2,1
    f228:	41400015 	stw	r5,0(r8)
    f22c:	44400115 	stw	r17,4(r8)
    f230:	d8c02015 	stw	r3,128(sp)
    f234:	d8801f15 	stw	r2,124(sp)
    f238:	010001c4 	movi	r4,7
    f23c:	20bec816 	blt	r4,r2,ed60 <___vfprintf_internal_r+0x1438>
    f240:	42000204 	addi	r8,r8,8
    f244:	003ecd06 	br	ed7c <___vfprintf_internal_r+0x1454>
    f248:	d9002917 	ldw	r4,164(sp)
    f24c:	d8002785 	stb	zero,158(sp)
    f250:	203d2d16 	blt	r4,zero,e708 <___vfprintf_internal_r+0xde0>
    f254:	00bfdfc4 	movi	r2,-129
    f258:	90a4703a 	and	r18,r18,r2
    f25c:	003a9106 	br	dca4 <___vfprintf_internal_r+0x37c>
    f260:	010000b4 	movhi	r4,2
    f264:	211e1d84 	addi	r4,r4,30838
    f268:	d9002b15 	stw	r4,172(sp)
    f26c:	003c0c06 	br	e2a0 <___vfprintf_internal_r+0x978>
    f270:	d9002c17 	ldw	r4,176(sp)
    f274:	d9801e04 	addi	r6,sp,120
    f278:	b80b883a 	mov	r5,r23
    f27c:	00157040 	call	15704 <__sprint_r>
    f280:	103aab1e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    f284:	d8c02017 	ldw	r3,128(sp)
    f288:	da000404 	addi	r8,sp,16
    f28c:	003d4106 	br	e794 <___vfprintf_internal_r+0xe6c>
    f290:	d8801f17 	ldw	r2,124(sp)
    f294:	014000b4 	movhi	r5,2
    f298:	01000044 	movi	r4,1
    f29c:	18c00044 	addi	r3,r3,1
    f2a0:	10800044 	addi	r2,r2,1
    f2a4:	295e1504 	addi	r5,r5,30804
    f2a8:	41000115 	stw	r4,4(r8)
    f2ac:	41400015 	stw	r5,0(r8)
    f2b0:	d8c02015 	stw	r3,128(sp)
    f2b4:	d8801f15 	stw	r2,124(sp)
    f2b8:	010001c4 	movi	r4,7
    f2bc:	20805c16 	blt	r4,r2,f430 <___vfprintf_internal_r+0x1b08>
    f2c0:	42000204 	addi	r8,r8,8
    f2c4:	8800041e 	bne	r17,zero,f2d8 <___vfprintf_internal_r+0x19b0>
    f2c8:	d8803317 	ldw	r2,204(sp)
    f2cc:	1000021e 	bne	r2,zero,f2d8 <___vfprintf_internal_r+0x19b0>
    f2d0:	9080004c 	andi	r2,r18,1
    f2d4:	103c0926 	beq	r2,zero,e2fc <___vfprintf_internal_r+0x9d4>
    f2d8:	d9003717 	ldw	r4,220(sp)
    f2dc:	d8801f17 	ldw	r2,124(sp)
    f2e0:	d9403417 	ldw	r5,208(sp)
    f2e4:	20c7883a 	add	r3,r4,r3
    f2e8:	10800044 	addi	r2,r2,1
    f2ec:	41000115 	stw	r4,4(r8)
    f2f0:	41400015 	stw	r5,0(r8)
    f2f4:	d8c02015 	stw	r3,128(sp)
    f2f8:	d8801f15 	stw	r2,124(sp)
    f2fc:	010001c4 	movi	r4,7
    f300:	20812116 	blt	r4,r2,f788 <___vfprintf_internal_r+0x1e60>
    f304:	42000204 	addi	r8,r8,8
    f308:	0463c83a 	sub	r17,zero,r17
    f30c:	0440730e 	bge	zero,r17,f4dc <___vfprintf_internal_r+0x1bb4>
    f310:	05800404 	movi	r22,16
    f314:	b440860e 	bge	r22,r17,f530 <___vfprintf_internal_r+0x1c08>
    f318:	014000b4 	movhi	r5,2
    f31c:	295e1d84 	addi	r5,r5,30838
    f320:	d9402b15 	stw	r5,172(sp)
    f324:	070001c4 	movi	fp,7
    f328:	dcc02c17 	ldw	r19,176(sp)
    f32c:	00000306 	br	f33c <___vfprintf_internal_r+0x1a14>
    f330:	42000204 	addi	r8,r8,8
    f334:	8c7ffc04 	addi	r17,r17,-16
    f338:	b440800e 	bge	r22,r17,f53c <___vfprintf_internal_r+0x1c14>
    f33c:	18c00404 	addi	r3,r3,16
    f340:	10800044 	addi	r2,r2,1
    f344:	45000015 	stw	r20,0(r8)
    f348:	45800115 	stw	r22,4(r8)
    f34c:	d8c02015 	stw	r3,128(sp)
    f350:	d8801f15 	stw	r2,124(sp)
    f354:	e0bff60e 	bge	fp,r2,f330 <___vfprintf_internal_r+0x1a08>
    f358:	d9801e04 	addi	r6,sp,120
    f35c:	b80b883a 	mov	r5,r23
    f360:	9809883a 	mov	r4,r19
    f364:	00157040 	call	15704 <__sprint_r>
    f368:	103a711e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    f36c:	d8c02017 	ldw	r3,128(sp)
    f370:	d8801f17 	ldw	r2,124(sp)
    f374:	da000404 	addi	r8,sp,16
    f378:	003fee06 	br	f334 <___vfprintf_internal_r+0x1a0c>
    f37c:	00bfffc4 	movi	r2,-1
    f380:	003a6f06 	br	dd40 <___vfprintf_internal_r+0x418>
    f384:	008011c4 	movi	r2,71
    f388:	1440b816 	blt	r2,r17,f66c <___vfprintf_internal_r+0x1d44>
    f38c:	040000b4 	movhi	r16,2
    f390:	841e0704 	addi	r16,r16,30748
    f394:	00c000c4 	movi	r3,3
    f398:	00bfdfc4 	movi	r2,-129
    f39c:	d8c02a15 	stw	r3,168(sp)
    f3a0:	90a4703a 	and	r18,r18,r2
    f3a4:	df002783 	ldbu	fp,158(sp)
    f3a8:	d8c02e15 	stw	r3,184(sp)
    f3ac:	d8002915 	stw	zero,164(sp)
    f3b0:	d8003215 	stw	zero,200(sp)
    f3b4:	003b2906 	br	e05c <___vfprintf_internal_r+0x734>
    f3b8:	d9002d17 	ldw	r4,180(sp)
    f3bc:	24c00017 	ldw	r19,0(r4)
    f3c0:	21000104 	addi	r4,r4,4
    f3c4:	d9002d15 	stw	r4,180(sp)
    f3c8:	982dd7fa 	srai	r22,r19,31
    f3cc:	b005883a 	mov	r2,r22
    f3d0:	003a9f06 	br	de50 <___vfprintf_internal_r+0x528>
    f3d4:	d9402d17 	ldw	r5,180(sp)
    f3d8:	d8c02f17 	ldw	r3,188(sp)
    f3dc:	28800017 	ldw	r2,0(r5)
    f3e0:	29400104 	addi	r5,r5,4
    f3e4:	d9402d15 	stw	r5,180(sp)
    f3e8:	10c00015 	stw	r3,0(r2)
    f3ec:	00398606 	br	da08 <___vfprintf_internal_r+0xe0>
    f3f0:	d9402d17 	ldw	r5,180(sp)
    f3f4:	002d883a 	mov	r22,zero
    f3f8:	2cc00017 	ldw	r19,0(r5)
    f3fc:	29400104 	addi	r5,r5,4
    f400:	d9402d15 	stw	r5,180(sp)
    f404:	003c2306 	br	e494 <___vfprintf_internal_r+0xb6c>
    f408:	d8c02d17 	ldw	r3,180(sp)
    f40c:	d9002917 	ldw	r4,164(sp)
    f410:	002d883a 	mov	r22,zero
    f414:	18800104 	addi	r2,r3,4
    f418:	1cc0000b 	ldhu	r19,0(r3)
    f41c:	203dc10e 	bge	r4,zero,eb24 <___vfprintf_internal_r+0x11fc>
    f420:	003f7506 	br	f1f8 <___vfprintf_internal_r+0x18d0>
    f424:	040000b4 	movhi	r16,2
    f428:	841e0504 	addi	r16,r16,30740
    f42c:	003acc06 	br	df60 <___vfprintf_internal_r+0x638>
    f430:	d9002c17 	ldw	r4,176(sp)
    f434:	d9801e04 	addi	r6,sp,120
    f438:	b80b883a 	mov	r5,r23
    f43c:	00157040 	call	15704 <__sprint_r>
    f440:	103a3b1e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    f444:	dc402617 	ldw	r17,152(sp)
    f448:	d8c02017 	ldw	r3,128(sp)
    f44c:	da000404 	addi	r8,sp,16
    f450:	003f9c06 	br	f2c4 <___vfprintf_internal_r+0x199c>
    f454:	ac400043 	ldbu	r17,1(r21)
    f458:	94800814 	ori	r18,r18,32
    f45c:	ad400044 	addi	r21,r21,1
    f460:	8c403fcc 	andi	r17,r17,255
    f464:	8c40201c 	xori	r17,r17,128
    f468:	8c7fe004 	addi	r17,r17,-128
    f46c:	00398f06 	br	daac <___vfprintf_internal_r+0x184>
    f470:	d8c02d15 	stw	r3,180(sp)
    f474:	0039883a 	mov	fp,zero
    f478:	003e3506 	br	ed50 <___vfprintf_internal_r+0x1428>
    f47c:	d9002c17 	ldw	r4,176(sp)
    f480:	d9801e04 	addi	r6,sp,120
    f484:	b80b883a 	mov	r5,r23
    f488:	00157040 	call	15704 <__sprint_r>
    f48c:	103a281e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    f490:	d8c02017 	ldw	r3,128(sp)
    f494:	da000404 	addi	r8,sp,16
    f498:	003cd006 	br	e7dc <___vfprintf_internal_r+0xeb4>
    f49c:	8009883a 	mov	r4,r16
    f4a0:	da003d15 	stw	r8,244(sp)
    f4a4:	00141640 	call	14164 <strlen>
    f4a8:	d8802e15 	stw	r2,184(sp)
    f4ac:	da003d17 	ldw	r8,244(sp)
    f4b0:	103c340e 	bge	r2,zero,e584 <___vfprintf_internal_r+0xc5c>
    f4b4:	0005883a 	mov	r2,zero
    f4b8:	003c3206 	br	e584 <___vfprintf_internal_r+0xc5c>
    f4bc:	d9002c17 	ldw	r4,176(sp)
    f4c0:	d9801e04 	addi	r6,sp,120
    f4c4:	b80b883a 	mov	r5,r23
    f4c8:	00157040 	call	15704 <__sprint_r>
    f4cc:	103a181e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    f4d0:	d8c02017 	ldw	r3,128(sp)
    f4d4:	d8801f17 	ldw	r2,124(sp)
    f4d8:	da000404 	addi	r8,sp,16
    f4dc:	d9403317 	ldw	r5,204(sp)
    f4e0:	10800044 	addi	r2,r2,1
    f4e4:	44000015 	stw	r16,0(r8)
    f4e8:	28c7883a 	add	r3,r5,r3
    f4ec:	003b7d06 	br	e2e4 <___vfprintf_internal_r+0x9bc>
    f4f0:	010000b4 	movhi	r4,2
    f4f4:	211e2184 	addi	r4,r4,30854
    f4f8:	d9003515 	stw	r4,212(sp)
    f4fc:	003b1406 	br	e150 <___vfprintf_internal_r+0x828>
    f500:	013fffc4 	movi	r4,-1
    f504:	003a3506 	br	dddc <___vfprintf_internal_r+0x4b4>
    f508:	0023883a 	mov	r17,zero
    f50c:	003d9d06 	br	eb84 <___vfprintf_internal_r+0x125c>
    f510:	d9002c17 	ldw	r4,176(sp)
    f514:	d9801e04 	addi	r6,sp,120
    f518:	b80b883a 	mov	r5,r23
    f51c:	00157040 	call	15704 <__sprint_r>
    f520:	103a031e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    f524:	d8c02017 	ldw	r3,128(sp)
    f528:	da000404 	addi	r8,sp,16
    f52c:	003d9406 	br	eb80 <___vfprintf_internal_r+0x1258>
    f530:	010000b4 	movhi	r4,2
    f534:	211e1d84 	addi	r4,r4,30838
    f538:	d9002b15 	stw	r4,172(sp)
    f53c:	d9002b17 	ldw	r4,172(sp)
    f540:	1c47883a 	add	r3,r3,r17
    f544:	10800044 	addi	r2,r2,1
    f548:	41000015 	stw	r4,0(r8)
    f54c:	44400115 	stw	r17,4(r8)
    f550:	d8c02015 	stw	r3,128(sp)
    f554:	d8801f15 	stw	r2,124(sp)
    f558:	010001c4 	movi	r4,7
    f55c:	20bfd716 	blt	r4,r2,f4bc <___vfprintf_internal_r+0x1b94>
    f560:	42000204 	addi	r8,r8,8
    f564:	003fdd06 	br	f4dc <___vfprintf_internal_r+0x1bb4>
    f568:	d9002c17 	ldw	r4,176(sp)
    f56c:	d9801e04 	addi	r6,sp,120
    f570:	b80b883a 	mov	r5,r23
    f574:	00157040 	call	15704 <__sprint_r>
    f578:	1039ed1e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    f57c:	d8802617 	ldw	r2,152(sp)
    f580:	d8c02017 	ldw	r3,128(sp)
    f584:	da000404 	addi	r8,sp,16
    f588:	003e1006 	br	edcc <___vfprintf_internal_r+0x14a4>
    f58c:	00800044 	movi	r2,1
    f590:	10803fcc 	andi	r2,r2,255
    f594:	00c00044 	movi	r3,1
    f598:	10fa3526 	beq	r2,r3,de70 <___vfprintf_internal_r+0x548>
    f59c:	00c00084 	movi	r3,2
    f5a0:	10fbcb26 	beq	r2,r3,e4d0 <___vfprintf_internal_r+0xba8>
    f5a4:	003a8f06 	br	dfe4 <___vfprintf_internal_r+0x6bc>
    f5a8:	010000b4 	movhi	r4,2
    f5ac:	211e2184 	addi	r4,r4,30854
    f5b0:	d9003515 	stw	r4,212(sp)
    f5b4:	003b7606 	br	e390 <___vfprintf_internal_r+0xa68>
    f5b8:	d8802917 	ldw	r2,164(sp)
    f5bc:	00c00184 	movi	r3,6
    f5c0:	1880012e 	bgeu	r3,r2,f5c8 <___vfprintf_internal_r+0x1ca0>
    f5c4:	1805883a 	mov	r2,r3
    f5c8:	d8802e15 	stw	r2,184(sp)
    f5cc:	1000ef16 	blt	r2,zero,f98c <___vfprintf_internal_r+0x2064>
    f5d0:	040000b4 	movhi	r16,2
    f5d4:	d8802a15 	stw	r2,168(sp)
    f5d8:	dcc02d15 	stw	r19,180(sp)
    f5dc:	d8002915 	stw	zero,164(sp)
    f5e0:	d8003215 	stw	zero,200(sp)
    f5e4:	841e1304 	addi	r16,r16,30796
    f5e8:	0039883a 	mov	fp,zero
    f5ec:	003aa206 	br	e078 <___vfprintf_internal_r+0x750>
    f5f0:	0021883a 	mov	r16,zero
    f5f4:	003e0706 	br	ee14 <___vfprintf_internal_r+0x14ec>
    f5f8:	d9002c17 	ldw	r4,176(sp)
    f5fc:	d9801e04 	addi	r6,sp,120
    f600:	b80b883a 	mov	r5,r23
    f604:	00157040 	call	15704 <__sprint_r>
    f608:	1039c91e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    f60c:	d8802617 	ldw	r2,152(sp)
    f610:	d9403317 	ldw	r5,204(sp)
    f614:	d8c02017 	ldw	r3,128(sp)
    f618:	da000404 	addi	r8,sp,16
    f61c:	2885c83a 	sub	r2,r5,r2
    f620:	003dfb06 	br	ee10 <___vfprintf_internal_r+0x14e8>
    f624:	9080004c 	andi	r2,r18,1
    f628:	103e8f1e 	bne	r2,zero,f068 <___vfprintf_internal_r+0x1740>
    f62c:	d8802117 	ldw	r2,132(sp)
    f630:	003e9e06 	br	f0ac <___vfprintf_internal_r+0x1784>
    f634:	1025883a 	mov	r18,r2
    f638:	0039883a 	mov	fp,zero
    f63c:	00800084 	movi	r2,2
    f640:	003fd306 	br	f590 <___vfprintf_internal_r+0x1c68>
    f644:	07000b44 	movi	fp,45
    f648:	df002785 	stb	fp,158(sp)
    f64c:	003a4006 	br	df50 <___vfprintf_internal_r+0x628>
    f650:	00c00b44 	movi	r3,45
    f654:	d8c02785 	stb	r3,158(sp)
    f658:	d8802a15 	stw	r2,168(sp)
    f65c:	dc802b17 	ldw	r18,172(sp)
    f660:	d8002915 	stw	zero,164(sp)
    f664:	07000b44 	movi	fp,45
    f668:	003a8006 	br	e06c <___vfprintf_internal_r+0x744>
    f66c:	040000b4 	movhi	r16,2
    f670:	841e0804 	addi	r16,r16,30752
    f674:	003f4706 	br	f394 <___vfprintf_internal_r+0x1a6c>
    f678:	d8c02d17 	ldw	r3,180(sp)
    f67c:	d9002f17 	ldw	r4,188(sp)
    f680:	18800017 	ldw	r2,0(r3)
    f684:	18c00104 	addi	r3,r3,4
    f688:	d8c02d15 	stw	r3,180(sp)
    f68c:	11000015 	stw	r4,0(r2)
    f690:	0038dd06 	br	da08 <___vfprintf_internal_r+0xe0>
    f694:	dd802617 	ldw	r22,152(sp)
    f698:	00bfff44 	movi	r2,-3
    f69c:	b0801c16 	blt	r22,r2,f710 <___vfprintf_internal_r+0x1de8>
    f6a0:	d9402917 	ldw	r5,164(sp)
    f6a4:	2d801a16 	blt	r5,r22,f710 <___vfprintf_internal_r+0x1de8>
    f6a8:	dd803215 	stw	r22,200(sp)
    f6ac:	003e8906 	br	f0d4 <___vfprintf_internal_r+0x17ac>
    f6b0:	010000b4 	movhi	r4,2
    f6b4:	211e1d84 	addi	r4,r4,30838
    f6b8:	d9002b15 	stw	r4,172(sp)
    f6bc:	003c9106 	br	e904 <___vfprintf_internal_r+0xfdc>
    f6c0:	e005883a 	mov	r2,fp
    f6c4:	003e7906 	br	f0ac <___vfprintf_internal_r+0x1784>
    f6c8:	d9402917 	ldw	r5,164(sp)
    f6cc:	df002783 	ldbu	fp,158(sp)
    f6d0:	dcc02d15 	stw	r19,180(sp)
    f6d4:	d9402a15 	stw	r5,168(sp)
    f6d8:	d9402e15 	stw	r5,184(sp)
    f6dc:	d8002915 	stw	zero,164(sp)
    f6e0:	d8003215 	stw	zero,200(sp)
    f6e4:	003a5d06 	br	e05c <___vfprintf_internal_r+0x734>
    f6e8:	9080004c 	andi	r2,r18,1
    f6ec:	0039883a 	mov	fp,zero
    f6f0:	10000426 	beq	r2,zero,f704 <___vfprintf_internal_r+0x1ddc>
    f6f4:	00800c04 	movi	r2,48
    f6f8:	dc001dc4 	addi	r16,sp,119
    f6fc:	d8801dc5 	stb	r2,119(sp)
    f700:	003b8006 	br	e504 <___vfprintf_internal_r+0xbdc>
    f704:	d8002e15 	stw	zero,184(sp)
    f708:	dc001e04 	addi	r16,sp,120
    f70c:	003a4d06 	br	e044 <___vfprintf_internal_r+0x71c>
    f710:	8c7fff84 	addi	r17,r17,-2
    f714:	b5bfffc4 	addi	r22,r22,-1
    f718:	dd802615 	stw	r22,152(sp)
    f71c:	dc4022c5 	stb	r17,139(sp)
    f720:	b000bf16 	blt	r22,zero,fa20 <___vfprintf_internal_r+0x20f8>
    f724:	00800ac4 	movi	r2,43
    f728:	d8802305 	stb	r2,140(sp)
    f72c:	00800244 	movi	r2,9
    f730:	15807016 	blt	r2,r22,f8f4 <___vfprintf_internal_r+0x1fcc>
    f734:	00800c04 	movi	r2,48
    f738:	b5800c04 	addi	r22,r22,48
    f73c:	d8802345 	stb	r2,141(sp)
    f740:	dd802385 	stb	r22,142(sp)
    f744:	d88023c4 	addi	r2,sp,143
    f748:	df0022c4 	addi	fp,sp,139
    f74c:	d8c03317 	ldw	r3,204(sp)
    f750:	1739c83a 	sub	fp,r2,fp
    f754:	d9003317 	ldw	r4,204(sp)
    f758:	e0c7883a 	add	r3,fp,r3
    f75c:	df003a15 	stw	fp,232(sp)
    f760:	d8c02e15 	stw	r3,184(sp)
    f764:	00800044 	movi	r2,1
    f768:	1100b30e 	bge	r2,r4,fa38 <___vfprintf_internal_r+0x2110>
    f76c:	d8c02e17 	ldw	r3,184(sp)
    f770:	18c00044 	addi	r3,r3,1
    f774:	d8c02e15 	stw	r3,184(sp)
    f778:	1805883a 	mov	r2,r3
    f77c:	1800ac16 	blt	r3,zero,fa30 <___vfprintf_internal_r+0x2108>
    f780:	d8003215 	stw	zero,200(sp)
    f784:	003e5d06 	br	f0fc <___vfprintf_internal_r+0x17d4>
    f788:	d9002c17 	ldw	r4,176(sp)
    f78c:	d9801e04 	addi	r6,sp,120
    f790:	b80b883a 	mov	r5,r23
    f794:	00157040 	call	15704 <__sprint_r>
    f798:	1039651e 	bne	r2,zero,dd30 <___vfprintf_internal_r+0x408>
    f79c:	dc402617 	ldw	r17,152(sp)
    f7a0:	d8c02017 	ldw	r3,128(sp)
    f7a4:	d8801f17 	ldw	r2,124(sp)
    f7a8:	da000404 	addi	r8,sp,16
    f7ac:	003ed606 	br	f308 <___vfprintf_internal_r+0x19e0>
    f7b0:	582b883a 	mov	r21,r11
    f7b4:	d8002915 	stw	zero,164(sp)
    f7b8:	0038bd06 	br	dab0 <___vfprintf_internal_r+0x188>
    f7bc:	d8802917 	ldw	r2,164(sp)
    f7c0:	103e071e 	bne	r2,zero,efe0 <___vfprintf_internal_r+0x16b8>
    f7c4:	dc002915 	stw	r16,164(sp)
    f7c8:	003e0506 	br	efe0 <___vfprintf_internal_r+0x16b8>
    f7cc:	d9002917 	ldw	r4,164(sp)
    f7d0:	20c00044 	addi	r3,r4,1
    f7d4:	003e0f06 	br	f014 <___vfprintf_internal_r+0x16ec>
    f7d8:	01400184 	movi	r5,6
    f7dc:	d9402915 	stw	r5,164(sp)
    f7e0:	003dff06 	br	efe0 <___vfprintf_internal_r+0x16b8>
    f7e4:	d8802104 	addi	r2,sp,132
    f7e8:	d8800315 	stw	r2,12(sp)
    f7ec:	d8802504 	addi	r2,sp,148
    f7f0:	d8800215 	stw	r2,8(sp)
    f7f4:	d8802604 	addi	r2,sp,152
    f7f8:	d8800115 	stw	r2,4(sp)
    f7fc:	d8802917 	ldw	r2,164(sp)
    f800:	d9403617 	ldw	r5,216(sp)
    f804:	d9002c17 	ldw	r4,176(sp)
    f808:	d8800015 	stw	r2,0(sp)
    f80c:	01c000c4 	movi	r7,3
    f810:	980d883a 	mov	r6,r19
    f814:	da003d15 	stw	r8,244(sp)
    f818:	000ff4c0 	call	ff4c <_dtoa_r>
    f81c:	d8c02917 	ldw	r3,164(sp)
    f820:	da003d17 	ldw	r8,244(sp)
    f824:	1021883a 	mov	r16,r2
    f828:	10f9883a 	add	fp,r2,r3
    f82c:	81000007 	ldb	r4,0(r16)
    f830:	00800c04 	movi	r2,48
    f834:	20805e26 	beq	r4,r2,f9b0 <___vfprintf_internal_r+0x2088>
    f838:	d8c02617 	ldw	r3,152(sp)
    f83c:	e0f9883a 	add	fp,fp,r3
    f840:	003e0a06 	br	f06c <___vfprintf_internal_r+0x1744>
    f844:	00c00b44 	movi	r3,45
    f848:	24e0003c 	xorhi	r19,r4,32768
    f84c:	d8c02a05 	stb	r3,168(sp)
    f850:	003de906 	br	eff8 <___vfprintf_internal_r+0x16d0>
    f854:	d8c03217 	ldw	r3,200(sp)
    f858:	00c07a0e 	bge	zero,r3,fa44 <___vfprintf_internal_r+0x211c>
    f85c:	00800044 	movi	r2,1
    f860:	d9003317 	ldw	r4,204(sp)
    f864:	1105883a 	add	r2,r2,r4
    f868:	d8802e15 	stw	r2,184(sp)
    f86c:	10004e16 	blt	r2,zero,f9a8 <___vfprintf_internal_r+0x2080>
    f870:	044019c4 	movi	r17,103
    f874:	003e2106 	br	f0fc <___vfprintf_internal_r+0x17d4>
    f878:	d9002917 	ldw	r4,164(sp)
    f87c:	d8802104 	addi	r2,sp,132
    f880:	d8800315 	stw	r2,12(sp)
    f884:	d9000015 	stw	r4,0(sp)
    f888:	d8802504 	addi	r2,sp,148
    f88c:	d9403617 	ldw	r5,216(sp)
    f890:	d9002c17 	ldw	r4,176(sp)
    f894:	d8800215 	stw	r2,8(sp)
    f898:	d8802604 	addi	r2,sp,152
    f89c:	d8800115 	stw	r2,4(sp)
    f8a0:	01c000c4 	movi	r7,3
    f8a4:	980d883a 	mov	r6,r19
    f8a8:	da003d15 	stw	r8,244(sp)
    f8ac:	000ff4c0 	call	ff4c <_dtoa_r>
    f8b0:	d8c02917 	ldw	r3,164(sp)
    f8b4:	da003d17 	ldw	r8,244(sp)
    f8b8:	1021883a 	mov	r16,r2
    f8bc:	00801184 	movi	r2,70
    f8c0:	80f9883a 	add	fp,r16,r3
    f8c4:	88bfd926 	beq	r17,r2,f82c <___vfprintf_internal_r+0x1f04>
    f8c8:	003de806 	br	f06c <___vfprintf_internal_r+0x1744>
    f8cc:	d9002917 	ldw	r4,164(sp)
    f8d0:	00c04d0e 	bge	zero,r3,fa08 <___vfprintf_internal_r+0x20e0>
    f8d4:	2000441e 	bne	r4,zero,f9e8 <___vfprintf_internal_r+0x20c0>
    f8d8:	9480004c 	andi	r18,r18,1
    f8dc:	9000421e 	bne	r18,zero,f9e8 <___vfprintf_internal_r+0x20c0>
    f8e0:	1805883a 	mov	r2,r3
    f8e4:	18007016 	blt	r3,zero,faa8 <___vfprintf_internal_r+0x2180>
    f8e8:	d8c03217 	ldw	r3,200(sp)
    f8ec:	d8c02e15 	stw	r3,184(sp)
    f8f0:	003e0206 	br	f0fc <___vfprintf_internal_r+0x17d4>
    f8f4:	df0022c4 	addi	fp,sp,139
    f8f8:	dc002915 	stw	r16,164(sp)
    f8fc:	4027883a 	mov	r19,r8
    f900:	e021883a 	mov	r16,fp
    f904:	b009883a 	mov	r4,r22
    f908:	01400284 	movi	r5,10
    f90c:	0018c340 	call	18c34 <__modsi3>
    f910:	10800c04 	addi	r2,r2,48
    f914:	843fffc4 	addi	r16,r16,-1
    f918:	b009883a 	mov	r4,r22
    f91c:	01400284 	movi	r5,10
    f920:	80800005 	stb	r2,0(r16)
    f924:	0018bb00 	call	18bb0 <__divsi3>
    f928:	102d883a 	mov	r22,r2
    f92c:	00800244 	movi	r2,9
    f930:	15bff416 	blt	r2,r22,f904 <___vfprintf_internal_r+0x1fdc>
    f934:	9811883a 	mov	r8,r19
    f938:	b0800c04 	addi	r2,r22,48
    f93c:	8027883a 	mov	r19,r16
    f940:	997fffc4 	addi	r5,r19,-1
    f944:	98bfffc5 	stb	r2,-1(r19)
    f948:	dc002917 	ldw	r16,164(sp)
    f94c:	2f006a2e 	bgeu	r5,fp,faf8 <___vfprintf_internal_r+0x21d0>
    f950:	d9c02384 	addi	r7,sp,142
    f954:	3ccfc83a 	sub	r7,r7,r19
    f958:	d9002344 	addi	r4,sp,141
    f95c:	e1cf883a 	add	r7,fp,r7
    f960:	00000106 	br	f968 <___vfprintf_internal_r+0x2040>
    f964:	28800003 	ldbu	r2,0(r5)
    f968:	20800005 	stb	r2,0(r4)
    f96c:	21000044 	addi	r4,r4,1
    f970:	29400044 	addi	r5,r5,1
    f974:	393ffb1e 	bne	r7,r4,f964 <___vfprintf_internal_r+0x203c>
    f978:	d8802304 	addi	r2,sp,140
    f97c:	14c5c83a 	sub	r2,r2,r19
    f980:	d8c02344 	addi	r3,sp,141
    f984:	1885883a 	add	r2,r3,r2
    f988:	003f7006 	br	f74c <___vfprintf_internal_r+0x1e24>
    f98c:	0005883a 	mov	r2,zero
    f990:	003f0f06 	br	f5d0 <___vfprintf_internal_r+0x1ca8>
    f994:	d8c03217 	ldw	r3,200(sp)
    f998:	18c00044 	addi	r3,r3,1
    f99c:	d8c02e15 	stw	r3,184(sp)
    f9a0:	1805883a 	mov	r2,r3
    f9a4:	183fb20e 	bge	r3,zero,f870 <___vfprintf_internal_r+0x1f48>
    f9a8:	0005883a 	mov	r2,zero
    f9ac:	003fb006 	br	f870 <___vfprintf_internal_r+0x1f48>
    f9b0:	d9003617 	ldw	r4,216(sp)
    f9b4:	000d883a 	mov	r6,zero
    f9b8:	000f883a 	mov	r7,zero
    f9bc:	980b883a 	mov	r5,r19
    f9c0:	d8c03c15 	stw	r3,240(sp)
    f9c4:	da003d15 	stw	r8,244(sp)
    f9c8:	0019ef80 	call	19ef8 <__eqdf2>
    f9cc:	d8c03c17 	ldw	r3,240(sp)
    f9d0:	da003d17 	ldw	r8,244(sp)
    f9d4:	103f9826 	beq	r2,zero,f838 <___vfprintf_internal_r+0x1f10>
    f9d8:	00800044 	movi	r2,1
    f9dc:	10c7c83a 	sub	r3,r2,r3
    f9e0:	d8c02615 	stw	r3,152(sp)
    f9e4:	003f9506 	br	f83c <___vfprintf_internal_r+0x1f14>
    f9e8:	d9002917 	ldw	r4,164(sp)
    f9ec:	d8c03217 	ldw	r3,200(sp)
    f9f0:	20800044 	addi	r2,r4,1
    f9f4:	1885883a 	add	r2,r3,r2
    f9f8:	d8802e15 	stw	r2,184(sp)
    f9fc:	103dbf0e 	bge	r2,zero,f0fc <___vfprintf_internal_r+0x17d4>
    fa00:	0005883a 	mov	r2,zero
    fa04:	003dbd06 	br	f0fc <___vfprintf_internal_r+0x17d4>
    fa08:	2000211e 	bne	r4,zero,fa90 <___vfprintf_internal_r+0x2168>
    fa0c:	9480004c 	andi	r18,r18,1
    fa10:	90001f1e 	bne	r18,zero,fa90 <___vfprintf_internal_r+0x2168>
    fa14:	00800044 	movi	r2,1
    fa18:	d8802e15 	stw	r2,184(sp)
    fa1c:	003db706 	br	f0fc <___vfprintf_internal_r+0x17d4>
    fa20:	00800b44 	movi	r2,45
    fa24:	05adc83a 	sub	r22,zero,r22
    fa28:	d8802305 	stb	r2,140(sp)
    fa2c:	003f3f06 	br	f72c <___vfprintf_internal_r+0x1e04>
    fa30:	0005883a 	mov	r2,zero
    fa34:	003f5206 	br	f780 <___vfprintf_internal_r+0x1e58>
    fa38:	90a4703a 	and	r18,r18,r2
    fa3c:	903f4e26 	beq	r18,zero,f778 <___vfprintf_internal_r+0x1e50>
    fa40:	003f4a06 	br	f76c <___vfprintf_internal_r+0x1e44>
    fa44:	00800084 	movi	r2,2
    fa48:	10c5c83a 	sub	r2,r2,r3
    fa4c:	003f8406 	br	f860 <___vfprintf_internal_r+0x1f38>
    fa50:	d8802d17 	ldw	r2,180(sp)
    fa54:	d9002d17 	ldw	r4,180(sp)
    fa58:	ac400043 	ldbu	r17,1(r21)
    fa5c:	10800017 	ldw	r2,0(r2)
    fa60:	582b883a 	mov	r21,r11
    fa64:	d8802915 	stw	r2,164(sp)
    fa68:	20800104 	addi	r2,r4,4
    fa6c:	d9002917 	ldw	r4,164(sp)
    fa70:	d8802d15 	stw	r2,180(sp)
    fa74:	203e7a0e 	bge	r4,zero,f460 <___vfprintf_internal_r+0x1b38>
    fa78:	8c403fcc 	andi	r17,r17,255
    fa7c:	00bfffc4 	movi	r2,-1
    fa80:	8c40201c 	xori	r17,r17,128
    fa84:	d8802915 	stw	r2,164(sp)
    fa88:	8c7fe004 	addi	r17,r17,-128
    fa8c:	00380706 	br	daac <___vfprintf_internal_r+0x184>
    fa90:	d8c02917 	ldw	r3,164(sp)
    fa94:	18c00084 	addi	r3,r3,2
    fa98:	d8c02e15 	stw	r3,184(sp)
    fa9c:	1805883a 	mov	r2,r3
    faa0:	183d960e 	bge	r3,zero,f0fc <___vfprintf_internal_r+0x17d4>
    faa4:	003fd606 	br	fa00 <___vfprintf_internal_r+0x20d8>
    faa8:	0005883a 	mov	r2,zero
    faac:	003f8e06 	br	f8e8 <___vfprintf_internal_r+0x1fc0>
    fab0:	9080004c 	andi	r2,r18,1
    fab4:	103f811e 	bne	r2,zero,f8bc <___vfprintf_internal_r+0x1f94>
    fab8:	d8802117 	ldw	r2,132(sp)
    fabc:	1405c83a 	sub	r2,r2,r16
    fac0:	d8803315 	stw	r2,204(sp)
    fac4:	b47ef326 	beq	r22,r17,f694 <___vfprintf_internal_r+0x1d6c>
    fac8:	dd802617 	ldw	r22,152(sp)
    facc:	003f1106 	br	f714 <___vfprintf_internal_r+0x1dec>
    fad0:	d9c02785 	stb	r7,158(sp)
    fad4:	00390406 	br	dee8 <___vfprintf_internal_r+0x5c0>
    fad8:	d9c02785 	stb	r7,158(sp)
    fadc:	0038d306 	br	de2c <___vfprintf_internal_r+0x504>
    fae0:	d9c02785 	stb	r7,158(sp)
    fae4:	003a6106 	br	e46c <___vfprintf_internal_r+0xb44>
    fae8:	d9c02785 	stb	r7,158(sp)
    faec:	003af806 	br	e6d0 <___vfprintf_internal_r+0xda8>
    faf0:	0005883a 	mov	r2,zero
    faf4:	003d7e06 	br	f0f0 <___vfprintf_internal_r+0x17c8>
    faf8:	d8802344 	addi	r2,sp,141
    fafc:	003f1306 	br	f74c <___vfprintf_internal_r+0x1e24>
    fb00:	d9c02785 	stb	r7,158(sp)
    fb04:	00392306 	br	df94 <___vfprintf_internal_r+0x66c>
    fb08:	d9c02785 	stb	r7,158(sp)
    fb0c:	003aa906 	br	e5b4 <___vfprintf_internal_r+0xc8c>
    fb10:	d9c02785 	stb	r7,158(sp)
    fb14:	003a3d06 	br	e40c <___vfprintf_internal_r+0xae4>
    fb18:	d9c02785 	stb	r7,158(sp)
    fb1c:	003aca06 	br	e648 <___vfprintf_internal_r+0xd20>

0000fb20 <__vfprintf_internal>:
    fb20:	008000f4 	movhi	r2,3
    fb24:	10a66f04 	addi	r2,r2,-26180
    fb28:	300f883a 	mov	r7,r6
    fb2c:	280d883a 	mov	r6,r5
    fb30:	200b883a 	mov	r5,r4
    fb34:	11000017 	ldw	r4,0(r2)
    fb38:	000d9281 	jmpi	d928 <___vfprintf_internal_r>

0000fb3c <__sbprintf>:
    fb3c:	2880030b 	ldhu	r2,12(r5)
    fb40:	2ac01917 	ldw	r11,100(r5)
    fb44:	2a80038b 	ldhu	r10,14(r5)
    fb48:	2a400717 	ldw	r9,28(r5)
    fb4c:	2a000917 	ldw	r8,36(r5)
    fb50:	defee204 	addi	sp,sp,-1144
    fb54:	00c10004 	movi	r3,1024
    fb58:	dc011a15 	stw	r16,1128(sp)
    fb5c:	10bfff4c 	andi	r2,r2,65533
    fb60:	2821883a 	mov	r16,r5
    fb64:	d8cb883a 	add	r5,sp,r3
    fb68:	dc811c15 	stw	r18,1136(sp)
    fb6c:	dc411b15 	stw	r17,1132(sp)
    fb70:	dfc11d15 	stw	ra,1140(sp)
    fb74:	2025883a 	mov	r18,r4
    fb78:	d881030d 	sth	r2,1036(sp)
    fb7c:	dac11915 	stw	r11,1124(sp)
    fb80:	da81038d 	sth	r10,1038(sp)
    fb84:	da410715 	stw	r9,1052(sp)
    fb88:	da010915 	stw	r8,1060(sp)
    fb8c:	dec10015 	stw	sp,1024(sp)
    fb90:	dec10415 	stw	sp,1040(sp)
    fb94:	d8c10215 	stw	r3,1032(sp)
    fb98:	d8c10515 	stw	r3,1044(sp)
    fb9c:	d8010615 	stw	zero,1048(sp)
    fba0:	000d9280 	call	d928 <___vfprintf_internal_r>
    fba4:	1023883a 	mov	r17,r2
    fba8:	10000416 	blt	r2,zero,fbbc <__sbprintf+0x80>
    fbac:	d9410004 	addi	r5,sp,1024
    fbb0:	9009883a 	mov	r4,r18
    fbb4:	00117f00 	call	117f0 <_fflush_r>
    fbb8:	10000d1e 	bne	r2,zero,fbf0 <__sbprintf+0xb4>
    fbbc:	d881030b 	ldhu	r2,1036(sp)
    fbc0:	1080100c 	andi	r2,r2,64
    fbc4:	10000326 	beq	r2,zero,fbd4 <__sbprintf+0x98>
    fbc8:	8080030b 	ldhu	r2,12(r16)
    fbcc:	10801014 	ori	r2,r2,64
    fbd0:	8080030d 	sth	r2,12(r16)
    fbd4:	8805883a 	mov	r2,r17
    fbd8:	dfc11d17 	ldw	ra,1140(sp)
    fbdc:	dc811c17 	ldw	r18,1136(sp)
    fbe0:	dc411b17 	ldw	r17,1132(sp)
    fbe4:	dc011a17 	ldw	r16,1128(sp)
    fbe8:	dec11e04 	addi	sp,sp,1144
    fbec:	f800283a 	ret
    fbf0:	047fffc4 	movi	r17,-1
    fbf4:	003ff106 	br	fbbc <__sbprintf+0x80>

0000fbf8 <__swsetup_r>:
    fbf8:	008000f4 	movhi	r2,3
    fbfc:	defffd04 	addi	sp,sp,-12
    fc00:	10a66f04 	addi	r2,r2,-26180
    fc04:	dc400115 	stw	r17,4(sp)
    fc08:	2023883a 	mov	r17,r4
    fc0c:	11000017 	ldw	r4,0(r2)
    fc10:	dc000015 	stw	r16,0(sp)
    fc14:	dfc00215 	stw	ra,8(sp)
    fc18:	2821883a 	mov	r16,r5
    fc1c:	20000226 	beq	r4,zero,fc28 <__swsetup_r+0x30>
    fc20:	20800e17 	ldw	r2,56(r4)
    fc24:	10003126 	beq	r2,zero,fcec <__swsetup_r+0xf4>
    fc28:	8080030b 	ldhu	r2,12(r16)
    fc2c:	10c0020c 	andi	r3,r2,8
    fc30:	1009883a 	mov	r4,r2
    fc34:	18000f26 	beq	r3,zero,fc74 <__swsetup_r+0x7c>
    fc38:	80c00417 	ldw	r3,16(r16)
    fc3c:	18001526 	beq	r3,zero,fc94 <__swsetup_r+0x9c>
    fc40:	1100004c 	andi	r4,r2,1
    fc44:	20001c1e 	bne	r4,zero,fcb8 <__swsetup_r+0xc0>
    fc48:	1080008c 	andi	r2,r2,2
    fc4c:	1000291e 	bne	r2,zero,fcf4 <__swsetup_r+0xfc>
    fc50:	80800517 	ldw	r2,20(r16)
    fc54:	80800215 	stw	r2,8(r16)
    fc58:	18001c26 	beq	r3,zero,fccc <__swsetup_r+0xd4>
    fc5c:	0005883a 	mov	r2,zero
    fc60:	dfc00217 	ldw	ra,8(sp)
    fc64:	dc400117 	ldw	r17,4(sp)
    fc68:	dc000017 	ldw	r16,0(sp)
    fc6c:	dec00304 	addi	sp,sp,12
    fc70:	f800283a 	ret
    fc74:	2080040c 	andi	r2,r4,16
    fc78:	10002e26 	beq	r2,zero,fd34 <__swsetup_r+0x13c>
    fc7c:	2080010c 	andi	r2,r4,4
    fc80:	10001e1e 	bne	r2,zero,fcfc <__swsetup_r+0x104>
    fc84:	80c00417 	ldw	r3,16(r16)
    fc88:	20800214 	ori	r2,r4,8
    fc8c:	8080030d 	sth	r2,12(r16)
    fc90:	183feb1e 	bne	r3,zero,fc40 <__swsetup_r+0x48>
    fc94:	1100a00c 	andi	r4,r2,640
    fc98:	01408004 	movi	r5,512
    fc9c:	217fe826 	beq	r4,r5,fc40 <__swsetup_r+0x48>
    fca0:	800b883a 	mov	r5,r16
    fca4:	8809883a 	mov	r4,r17
    fca8:	00122b40 	call	122b4 <__smakebuf_r>
    fcac:	8080030b 	ldhu	r2,12(r16)
    fcb0:	80c00417 	ldw	r3,16(r16)
    fcb4:	003fe206 	br	fc40 <__swsetup_r+0x48>
    fcb8:	80800517 	ldw	r2,20(r16)
    fcbc:	80000215 	stw	zero,8(r16)
    fcc0:	0085c83a 	sub	r2,zero,r2
    fcc4:	80800615 	stw	r2,24(r16)
    fcc8:	183fe41e 	bne	r3,zero,fc5c <__swsetup_r+0x64>
    fccc:	80c0030b 	ldhu	r3,12(r16)
    fcd0:	0005883a 	mov	r2,zero
    fcd4:	1900200c 	andi	r4,r3,128
    fcd8:	203fe126 	beq	r4,zero,fc60 <__swsetup_r+0x68>
    fcdc:	18c01014 	ori	r3,r3,64
    fce0:	80c0030d 	sth	r3,12(r16)
    fce4:	00bfffc4 	movi	r2,-1
    fce8:	003fdd06 	br	fc60 <__swsetup_r+0x68>
    fcec:	0011bcc0 	call	11bcc <__sinit>
    fcf0:	003fcd06 	br	fc28 <__swsetup_r+0x30>
    fcf4:	0005883a 	mov	r2,zero
    fcf8:	003fd606 	br	fc54 <__swsetup_r+0x5c>
    fcfc:	81400c17 	ldw	r5,48(r16)
    fd00:	28000626 	beq	r5,zero,fd1c <__swsetup_r+0x124>
    fd04:	80801004 	addi	r2,r16,64
    fd08:	28800326 	beq	r5,r2,fd18 <__swsetup_r+0x120>
    fd0c:	8809883a 	mov	r4,r17
    fd10:	0011d400 	call	11d40 <_free_r>
    fd14:	8100030b 	ldhu	r4,12(r16)
    fd18:	80000c15 	stw	zero,48(r16)
    fd1c:	80c00417 	ldw	r3,16(r16)
    fd20:	00bff6c4 	movi	r2,-37
    fd24:	1108703a 	and	r4,r2,r4
    fd28:	80000115 	stw	zero,4(r16)
    fd2c:	80c00015 	stw	r3,0(r16)
    fd30:	003fd506 	br	fc88 <__swsetup_r+0x90>
    fd34:	00800244 	movi	r2,9
    fd38:	88800015 	stw	r2,0(r17)
    fd3c:	20801014 	ori	r2,r4,64
    fd40:	8080030d 	sth	r2,12(r16)
    fd44:	00bfffc4 	movi	r2,-1
    fd48:	003fc506 	br	fc60 <__swsetup_r+0x68>

0000fd4c <quorem>:
    fd4c:	defff704 	addi	sp,sp,-36
    fd50:	dc800215 	stw	r18,8(sp)
    fd54:	20800417 	ldw	r2,16(r4)
    fd58:	2c800417 	ldw	r18,16(r5)
    fd5c:	dfc00815 	stw	ra,32(sp)
    fd60:	ddc00715 	stw	r23,28(sp)
    fd64:	dd800615 	stw	r22,24(sp)
    fd68:	dd400515 	stw	r21,20(sp)
    fd6c:	dd000415 	stw	r20,16(sp)
    fd70:	dcc00315 	stw	r19,12(sp)
    fd74:	dc400115 	stw	r17,4(sp)
    fd78:	dc000015 	stw	r16,0(sp)
    fd7c:	14807116 	blt	r2,r18,ff44 <quorem+0x1f8>
    fd80:	94bfffc4 	addi	r18,r18,-1
    fd84:	94ad883a 	add	r22,r18,r18
    fd88:	b5ad883a 	add	r22,r22,r22
    fd8c:	2c400504 	addi	r17,r5,20
    fd90:	8da9883a 	add	r20,r17,r22
    fd94:	25400504 	addi	r21,r4,20
    fd98:	282f883a 	mov	r23,r5
    fd9c:	adad883a 	add	r22,r21,r22
    fda0:	a1400017 	ldw	r5,0(r20)
    fda4:	2021883a 	mov	r16,r4
    fda8:	b1000017 	ldw	r4,0(r22)
    fdac:	29400044 	addi	r5,r5,1
    fdb0:	0018ca80 	call	18ca8 <__udivsi3>
    fdb4:	1027883a 	mov	r19,r2
    fdb8:	10002c26 	beq	r2,zero,fe6c <quorem+0x120>
    fdbc:	a813883a 	mov	r9,r21
    fdc0:	880b883a 	mov	r5,r17
    fdc4:	0009883a 	mov	r4,zero
    fdc8:	000d883a 	mov	r6,zero
    fdcc:	2a000017 	ldw	r8,0(r5)
    fdd0:	49c00017 	ldw	r7,0(r9)
    fdd4:	29400104 	addi	r5,r5,4
    fdd8:	40bfffcc 	andi	r2,r8,65535
    fddc:	14c5383a 	mul	r2,r2,r19
    fde0:	4010d43a 	srli	r8,r8,16
    fde4:	38ffffcc 	andi	r3,r7,65535
    fde8:	1105883a 	add	r2,r2,r4
    fdec:	1008d43a 	srli	r4,r2,16
    fdf0:	44d1383a 	mul	r8,r8,r19
    fdf4:	198d883a 	add	r6,r3,r6
    fdf8:	10ffffcc 	andi	r3,r2,65535
    fdfc:	30c7c83a 	sub	r3,r6,r3
    fe00:	380ed43a 	srli	r7,r7,16
    fe04:	4105883a 	add	r2,r8,r4
    fe08:	180dd43a 	srai	r6,r3,16
    fe0c:	113fffcc 	andi	r4,r2,65535
    fe10:	390fc83a 	sub	r7,r7,r4
    fe14:	398d883a 	add	r6,r7,r6
    fe18:	300e943a 	slli	r7,r6,16
    fe1c:	18ffffcc 	andi	r3,r3,65535
    fe20:	1008d43a 	srli	r4,r2,16
    fe24:	38ceb03a 	or	r7,r7,r3
    fe28:	49c00015 	stw	r7,0(r9)
    fe2c:	300dd43a 	srai	r6,r6,16
    fe30:	4a400104 	addi	r9,r9,4
    fe34:	a17fe52e 	bgeu	r20,r5,fdcc <quorem+0x80>
    fe38:	b0800017 	ldw	r2,0(r22)
    fe3c:	10000b1e 	bne	r2,zero,fe6c <quorem+0x120>
    fe40:	b0bfff04 	addi	r2,r22,-4
    fe44:	a880082e 	bgeu	r21,r2,fe68 <quorem+0x11c>
    fe48:	b0ffff17 	ldw	r3,-4(r22)
    fe4c:	18000326 	beq	r3,zero,fe5c <quorem+0x110>
    fe50:	00000506 	br	fe68 <quorem+0x11c>
    fe54:	10c00017 	ldw	r3,0(r2)
    fe58:	1800031e 	bne	r3,zero,fe68 <quorem+0x11c>
    fe5c:	10bfff04 	addi	r2,r2,-4
    fe60:	94bfffc4 	addi	r18,r18,-1
    fe64:	a8bffb36 	bltu	r21,r2,fe54 <quorem+0x108>
    fe68:	84800415 	stw	r18,16(r16)
    fe6c:	b80b883a 	mov	r5,r23
    fe70:	8009883a 	mov	r4,r16
    fe74:	00137500 	call	13750 <__mcmp>
    fe78:	10002616 	blt	r2,zero,ff14 <quorem+0x1c8>
    fe7c:	9cc00044 	addi	r19,r19,1
    fe80:	a805883a 	mov	r2,r21
    fe84:	000b883a 	mov	r5,zero
    fe88:	11000017 	ldw	r4,0(r2)
    fe8c:	89800017 	ldw	r6,0(r17)
    fe90:	10800104 	addi	r2,r2,4
    fe94:	20ffffcc 	andi	r3,r4,65535
    fe98:	194b883a 	add	r5,r3,r5
    fe9c:	30ffffcc 	andi	r3,r6,65535
    fea0:	28c7c83a 	sub	r3,r5,r3
    fea4:	300cd43a 	srli	r6,r6,16
    fea8:	2008d43a 	srli	r4,r4,16
    feac:	180bd43a 	srai	r5,r3,16
    feb0:	18ffffcc 	andi	r3,r3,65535
    feb4:	2189c83a 	sub	r4,r4,r6
    feb8:	2149883a 	add	r4,r4,r5
    febc:	200c943a 	slli	r6,r4,16
    fec0:	8c400104 	addi	r17,r17,4
    fec4:	200bd43a 	srai	r5,r4,16
    fec8:	30c6b03a 	or	r3,r6,r3
    fecc:	10ffff15 	stw	r3,-4(r2)
    fed0:	a47fed2e 	bgeu	r20,r17,fe88 <quorem+0x13c>
    fed4:	9485883a 	add	r2,r18,r18
    fed8:	1085883a 	add	r2,r2,r2
    fedc:	a887883a 	add	r3,r21,r2
    fee0:	18800017 	ldw	r2,0(r3)
    fee4:	10000b1e 	bne	r2,zero,ff14 <quorem+0x1c8>
    fee8:	18bfff04 	addi	r2,r3,-4
    feec:	a880082e 	bgeu	r21,r2,ff10 <quorem+0x1c4>
    fef0:	18ffff17 	ldw	r3,-4(r3)
    fef4:	18000326 	beq	r3,zero,ff04 <quorem+0x1b8>
    fef8:	00000506 	br	ff10 <quorem+0x1c4>
    fefc:	10c00017 	ldw	r3,0(r2)
    ff00:	1800031e 	bne	r3,zero,ff10 <quorem+0x1c4>
    ff04:	10bfff04 	addi	r2,r2,-4
    ff08:	94bfffc4 	addi	r18,r18,-1
    ff0c:	a8bffb36 	bltu	r21,r2,fefc <quorem+0x1b0>
    ff10:	84800415 	stw	r18,16(r16)
    ff14:	9805883a 	mov	r2,r19
    ff18:	dfc00817 	ldw	ra,32(sp)
    ff1c:	ddc00717 	ldw	r23,28(sp)
    ff20:	dd800617 	ldw	r22,24(sp)
    ff24:	dd400517 	ldw	r21,20(sp)
    ff28:	dd000417 	ldw	r20,16(sp)
    ff2c:	dcc00317 	ldw	r19,12(sp)
    ff30:	dc800217 	ldw	r18,8(sp)
    ff34:	dc400117 	ldw	r17,4(sp)
    ff38:	dc000017 	ldw	r16,0(sp)
    ff3c:	dec00904 	addi	sp,sp,36
    ff40:	f800283a 	ret
    ff44:	0005883a 	mov	r2,zero
    ff48:	003ff306 	br	ff18 <quorem+0x1cc>

0000ff4c <_dtoa_r>:
    ff4c:	20801017 	ldw	r2,64(r4)
    ff50:	deffde04 	addi	sp,sp,-136
    ff54:	df002015 	stw	fp,128(sp)
    ff58:	dcc01b15 	stw	r19,108(sp)
    ff5c:	dc801a15 	stw	r18,104(sp)
    ff60:	dc401915 	stw	r17,100(sp)
    ff64:	dc001815 	stw	r16,96(sp)
    ff68:	dfc02115 	stw	ra,132(sp)
    ff6c:	ddc01f15 	stw	r23,124(sp)
    ff70:	dd801e15 	stw	r22,120(sp)
    ff74:	dd401d15 	stw	r21,116(sp)
    ff78:	dd001c15 	stw	r20,112(sp)
    ff7c:	d9c00315 	stw	r7,12(sp)
    ff80:	2039883a 	mov	fp,r4
    ff84:	3023883a 	mov	r17,r6
    ff88:	2825883a 	mov	r18,r5
    ff8c:	dc002417 	ldw	r16,144(sp)
    ff90:	3027883a 	mov	r19,r6
    ff94:	10000826 	beq	r2,zero,ffb8 <_dtoa_r+0x6c>
    ff98:	21801117 	ldw	r6,68(r4)
    ff9c:	00c00044 	movi	r3,1
    ffa0:	100b883a 	mov	r5,r2
    ffa4:	1986983a 	sll	r3,r3,r6
    ffa8:	11800115 	stw	r6,4(r2)
    ffac:	10c00215 	stw	r3,8(r2)
    ffb0:	0012f300 	call	12f30 <_Bfree>
    ffb4:	e0001015 	stw	zero,64(fp)
    ffb8:	88002e16 	blt	r17,zero,10074 <_dtoa_r+0x128>
    ffbc:	80000015 	stw	zero,0(r16)
    ffc0:	889ffc2c 	andhi	r2,r17,32752
    ffc4:	00dffc34 	movhi	r3,32752
    ffc8:	10c01c26 	beq	r2,r3,1003c <_dtoa_r+0xf0>
    ffcc:	000d883a 	mov	r6,zero
    ffd0:	000f883a 	mov	r7,zero
    ffd4:	9009883a 	mov	r4,r18
    ffd8:	980b883a 	mov	r5,r19
    ffdc:	0019ef80 	call	19ef8 <__eqdf2>
    ffe0:	10002b1e 	bne	r2,zero,10090 <_dtoa_r+0x144>
    ffe4:	d9c02317 	ldw	r7,140(sp)
    ffe8:	00800044 	movi	r2,1
    ffec:	38800015 	stw	r2,0(r7)
    fff0:	d8802517 	ldw	r2,148(sp)
    fff4:	10019e26 	beq	r2,zero,10670 <_dtoa_r+0x724>
    fff8:	d8c02517 	ldw	r3,148(sp)
    fffc:	008000b4 	movhi	r2,2
   10000:	109e1544 	addi	r2,r2,30805
   10004:	18800015 	stw	r2,0(r3)
   10008:	10bfffc4 	addi	r2,r2,-1
   1000c:	dfc02117 	ldw	ra,132(sp)
   10010:	df002017 	ldw	fp,128(sp)
   10014:	ddc01f17 	ldw	r23,124(sp)
   10018:	dd801e17 	ldw	r22,120(sp)
   1001c:	dd401d17 	ldw	r21,116(sp)
   10020:	dd001c17 	ldw	r20,112(sp)
   10024:	dcc01b17 	ldw	r19,108(sp)
   10028:	dc801a17 	ldw	r18,104(sp)
   1002c:	dc401917 	ldw	r17,100(sp)
   10030:	dc001817 	ldw	r16,96(sp)
   10034:	dec02204 	addi	sp,sp,136
   10038:	f800283a 	ret
   1003c:	d8c02317 	ldw	r3,140(sp)
   10040:	0089c3c4 	movi	r2,9999
   10044:	18800015 	stw	r2,0(r3)
   10048:	90017726 	beq	r18,zero,10628 <_dtoa_r+0x6dc>
   1004c:	008000b4 	movhi	r2,2
   10050:	109e2904 	addi	r2,r2,30884
   10054:	d9002517 	ldw	r4,148(sp)
   10058:	203fec26 	beq	r4,zero,1000c <_dtoa_r+0xc0>
   1005c:	10c000c7 	ldb	r3,3(r2)
   10060:	1801781e 	bne	r3,zero,10644 <_dtoa_r+0x6f8>
   10064:	10c000c4 	addi	r3,r2,3
   10068:	d9802517 	ldw	r6,148(sp)
   1006c:	30c00015 	stw	r3,0(r6)
   10070:	003fe606 	br	1000c <_dtoa_r+0xc0>
   10074:	04e00034 	movhi	r19,32768
   10078:	9cffffc4 	addi	r19,r19,-1
   1007c:	00800044 	movi	r2,1
   10080:	8ce6703a 	and	r19,r17,r19
   10084:	80800015 	stw	r2,0(r16)
   10088:	9823883a 	mov	r17,r19
   1008c:	003fcc06 	br	ffc0 <_dtoa_r+0x74>
   10090:	d8800204 	addi	r2,sp,8
   10094:	d8800015 	stw	r2,0(sp)
   10098:	d9c00104 	addi	r7,sp,4
   1009c:	900b883a 	mov	r5,r18
   100a0:	980d883a 	mov	r6,r19
   100a4:	e009883a 	mov	r4,fp
   100a8:	8820d53a 	srli	r16,r17,20
   100ac:	0013b1c0 	call	13b1c <__d2b>
   100b0:	d8800915 	stw	r2,36(sp)
   100b4:	8001651e 	bne	r16,zero,1064c <_dtoa_r+0x700>
   100b8:	dd800217 	ldw	r22,8(sp)
   100bc:	dc000117 	ldw	r16,4(sp)
   100c0:	00800804 	movi	r2,32
   100c4:	b421883a 	add	r16,r22,r16
   100c8:	80c10c84 	addi	r3,r16,1074
   100cc:	10c2d10e 	bge	r2,r3,10c14 <_dtoa_r+0xcc8>
   100d0:	00801004 	movi	r2,64
   100d4:	81010484 	addi	r4,r16,1042
   100d8:	10c7c83a 	sub	r3,r2,r3
   100dc:	9108d83a 	srl	r4,r18,r4
   100e0:	88e2983a 	sll	r17,r17,r3
   100e4:	2448b03a 	or	r4,r4,r17
   100e8:	001b1e40 	call	1b1e4 <__floatunsidf>
   100ec:	017f8434 	movhi	r5,65040
   100f0:	01800044 	movi	r6,1
   100f4:	1009883a 	mov	r4,r2
   100f8:	194b883a 	add	r5,r3,r5
   100fc:	843fffc4 	addi	r16,r16,-1
   10100:	d9801115 	stw	r6,68(sp)
   10104:	000d883a 	mov	r6,zero
   10108:	01cffe34 	movhi	r7,16376
   1010c:	001a78c0 	call	1a78c <__subdf3>
   10110:	0198dbf4 	movhi	r6,25455
   10114:	01cff4f4 	movhi	r7,16339
   10118:	3190d844 	addi	r6,r6,17249
   1011c:	39e1e9c4 	addi	r7,r7,-30809
   10120:	1009883a 	mov	r4,r2
   10124:	180b883a 	mov	r5,r3
   10128:	001a0740 	call	1a074 <__muldf3>
   1012c:	01a2d874 	movhi	r6,35681
   10130:	01cff1f4 	movhi	r7,16327
   10134:	31b22cc4 	addi	r6,r6,-14157
   10138:	39e28a04 	addi	r7,r7,-30168
   1013c:	180b883a 	mov	r5,r3
   10140:	1009883a 	mov	r4,r2
   10144:	0018d640 	call	18d64 <__adddf3>
   10148:	8009883a 	mov	r4,r16
   1014c:	1029883a 	mov	r20,r2
   10150:	1823883a 	mov	r17,r3
   10154:	001b1080 	call	1b108 <__floatsidf>
   10158:	019427f4 	movhi	r6,20639
   1015c:	01cff4f4 	movhi	r7,16339
   10160:	319e7ec4 	addi	r6,r6,31227
   10164:	39d104c4 	addi	r7,r7,17427
   10168:	1009883a 	mov	r4,r2
   1016c:	180b883a 	mov	r5,r3
   10170:	001a0740 	call	1a074 <__muldf3>
   10174:	100d883a 	mov	r6,r2
   10178:	180f883a 	mov	r7,r3
   1017c:	a009883a 	mov	r4,r20
   10180:	880b883a 	mov	r5,r17
   10184:	0018d640 	call	18d64 <__adddf3>
   10188:	1009883a 	mov	r4,r2
   1018c:	180b883a 	mov	r5,r3
   10190:	1029883a 	mov	r20,r2
   10194:	1823883a 	mov	r17,r3
   10198:	001b0880 	call	1b088 <__fixdfsi>
   1019c:	000d883a 	mov	r6,zero
   101a0:	000f883a 	mov	r7,zero
   101a4:	a009883a 	mov	r4,r20
   101a8:	880b883a 	mov	r5,r17
   101ac:	d8800515 	stw	r2,20(sp)
   101b0:	0019f800 	call	19f80 <__ledf2>
   101b4:	10028716 	blt	r2,zero,10bd4 <_dtoa_r+0xc88>
   101b8:	d8c00517 	ldw	r3,20(sp)
   101bc:	00800584 	movi	r2,22
   101c0:	10c27536 	bltu	r2,r3,10b98 <_dtoa_r+0xc4c>
   101c4:	180490fa 	slli	r2,r3,3
   101c8:	00c000b4 	movhi	r3,2
   101cc:	18de4504 	addi	r3,r3,30996
   101d0:	1885883a 	add	r2,r3,r2
   101d4:	11000017 	ldw	r4,0(r2)
   101d8:	11400117 	ldw	r5,4(r2)
   101dc:	900d883a 	mov	r6,r18
   101e0:	980f883a 	mov	r7,r19
   101e4:	000b2100 	call	b210 <__gedf2>
   101e8:	00828d0e 	bge	zero,r2,10c20 <_dtoa_r+0xcd4>
   101ec:	d9000517 	ldw	r4,20(sp)
   101f0:	d8000e15 	stw	zero,56(sp)
   101f4:	213fffc4 	addi	r4,r4,-1
   101f8:	d9000515 	stw	r4,20(sp)
   101fc:	b42dc83a 	sub	r22,r22,r16
   10200:	b5bfffc4 	addi	r22,r22,-1
   10204:	b0026f16 	blt	r22,zero,10bc4 <_dtoa_r+0xc78>
   10208:	d8000815 	stw	zero,32(sp)
   1020c:	d9c00517 	ldw	r7,20(sp)
   10210:	38026416 	blt	r7,zero,10ba4 <_dtoa_r+0xc58>
   10214:	b1ed883a 	add	r22,r22,r7
   10218:	d9c00d15 	stw	r7,52(sp)
   1021c:	d8000a15 	stw	zero,40(sp)
   10220:	d9800317 	ldw	r6,12(sp)
   10224:	00800244 	movi	r2,9
   10228:	11811436 	bltu	r2,r6,1067c <_dtoa_r+0x730>
   1022c:	00800144 	movi	r2,5
   10230:	1184e10e 	bge	r2,r6,115b8 <_dtoa_r+0x166c>
   10234:	31bfff04 	addi	r6,r6,-4
   10238:	d9800315 	stw	r6,12(sp)
   1023c:	0023883a 	mov	r17,zero
   10240:	d9800317 	ldw	r6,12(sp)
   10244:	008000c4 	movi	r2,3
   10248:	30836726 	beq	r6,r2,10fe8 <_dtoa_r+0x109c>
   1024c:	1183410e 	bge	r2,r6,10f54 <_dtoa_r+0x1008>
   10250:	d9c00317 	ldw	r7,12(sp)
   10254:	00800104 	movi	r2,4
   10258:	38827c26 	beq	r7,r2,10c4c <_dtoa_r+0xd00>
   1025c:	00800144 	movi	r2,5
   10260:	3884c41e 	bne	r7,r2,11574 <_dtoa_r+0x1628>
   10264:	00800044 	movi	r2,1
   10268:	d8800b15 	stw	r2,44(sp)
   1026c:	d8c00517 	ldw	r3,20(sp)
   10270:	d9002217 	ldw	r4,136(sp)
   10274:	1907883a 	add	r3,r3,r4
   10278:	19800044 	addi	r6,r3,1
   1027c:	d8c00c15 	stw	r3,48(sp)
   10280:	d9800615 	stw	r6,24(sp)
   10284:	0183a40e 	bge	zero,r6,11118 <_dtoa_r+0x11cc>
   10288:	d9800617 	ldw	r6,24(sp)
   1028c:	3021883a 	mov	r16,r6
   10290:	e0001115 	stw	zero,68(fp)
   10294:	008005c4 	movi	r2,23
   10298:	1184c92e 	bgeu	r2,r6,115c0 <_dtoa_r+0x1674>
   1029c:	00c00044 	movi	r3,1
   102a0:	00800104 	movi	r2,4
   102a4:	1085883a 	add	r2,r2,r2
   102a8:	11000504 	addi	r4,r2,20
   102ac:	180b883a 	mov	r5,r3
   102b0:	18c00044 	addi	r3,r3,1
   102b4:	313ffb2e 	bgeu	r6,r4,102a4 <_dtoa_r+0x358>
   102b8:	e1401115 	stw	r5,68(fp)
   102bc:	e009883a 	mov	r4,fp
   102c0:	0012e880 	call	12e88 <_Balloc>
   102c4:	d8800715 	stw	r2,28(sp)
   102c8:	e0801015 	stw	r2,64(fp)
   102cc:	00800384 	movi	r2,14
   102d0:	1400f736 	bltu	r2,r16,106b0 <_dtoa_r+0x764>
   102d4:	8800f626 	beq	r17,zero,106b0 <_dtoa_r+0x764>
   102d8:	d9c00517 	ldw	r7,20(sp)
   102dc:	01c39a0e 	bge	zero,r7,11148 <_dtoa_r+0x11fc>
   102e0:	388003cc 	andi	r2,r7,15
   102e4:	100490fa 	slli	r2,r2,3
   102e8:	382bd13a 	srai	r21,r7,4
   102ec:	00c000b4 	movhi	r3,2
   102f0:	18de4504 	addi	r3,r3,30996
   102f4:	1885883a 	add	r2,r3,r2
   102f8:	a8c0040c 	andi	r3,r21,16
   102fc:	12400017 	ldw	r9,0(r2)
   10300:	12000117 	ldw	r8,4(r2)
   10304:	18037926 	beq	r3,zero,110ec <_dtoa_r+0x11a0>
   10308:	008000b4 	movhi	r2,2
   1030c:	109e3b04 	addi	r2,r2,30956
   10310:	11800817 	ldw	r6,32(r2)
   10314:	11c00917 	ldw	r7,36(r2)
   10318:	9009883a 	mov	r4,r18
   1031c:	980b883a 	mov	r5,r19
   10320:	da001715 	stw	r8,92(sp)
   10324:	da401615 	stw	r9,88(sp)
   10328:	00196100 	call	19610 <__divdf3>
   1032c:	da001717 	ldw	r8,92(sp)
   10330:	da401617 	ldw	r9,88(sp)
   10334:	ad4003cc 	andi	r21,r21,15
   10338:	040000c4 	movi	r16,3
   1033c:	1023883a 	mov	r17,r2
   10340:	1829883a 	mov	r20,r3
   10344:	a8001126 	beq	r21,zero,1038c <_dtoa_r+0x440>
   10348:	05c000b4 	movhi	r23,2
   1034c:	bdde3b04 	addi	r23,r23,30956
   10350:	4805883a 	mov	r2,r9
   10354:	4007883a 	mov	r3,r8
   10358:	a980004c 	andi	r6,r21,1
   1035c:	1009883a 	mov	r4,r2
   10360:	a82bd07a 	srai	r21,r21,1
   10364:	180b883a 	mov	r5,r3
   10368:	30000426 	beq	r6,zero,1037c <_dtoa_r+0x430>
   1036c:	b9800017 	ldw	r6,0(r23)
   10370:	b9c00117 	ldw	r7,4(r23)
   10374:	84000044 	addi	r16,r16,1
   10378:	001a0740 	call	1a074 <__muldf3>
   1037c:	bdc00204 	addi	r23,r23,8
   10380:	a83ff51e 	bne	r21,zero,10358 <_dtoa_r+0x40c>
   10384:	1013883a 	mov	r9,r2
   10388:	1811883a 	mov	r8,r3
   1038c:	480d883a 	mov	r6,r9
   10390:	400f883a 	mov	r7,r8
   10394:	8809883a 	mov	r4,r17
   10398:	a00b883a 	mov	r5,r20
   1039c:	00196100 	call	19610 <__divdf3>
   103a0:	d8800f15 	stw	r2,60(sp)
   103a4:	d8c01015 	stw	r3,64(sp)
   103a8:	d8c00e17 	ldw	r3,56(sp)
   103ac:	18000626 	beq	r3,zero,103c8 <_dtoa_r+0x47c>
   103b0:	d9000f17 	ldw	r4,60(sp)
   103b4:	d9401017 	ldw	r5,64(sp)
   103b8:	000d883a 	mov	r6,zero
   103bc:	01cffc34 	movhi	r7,16368
   103c0:	0019f800 	call	19f80 <__ledf2>
   103c4:	10040b16 	blt	r2,zero,113f4 <_dtoa_r+0x14a8>
   103c8:	8009883a 	mov	r4,r16
   103cc:	001b1080 	call	1b108 <__floatsidf>
   103d0:	d9800f17 	ldw	r6,60(sp)
   103d4:	d9c01017 	ldw	r7,64(sp)
   103d8:	1009883a 	mov	r4,r2
   103dc:	180b883a 	mov	r5,r3
   103e0:	001a0740 	call	1a074 <__muldf3>
   103e4:	000d883a 	mov	r6,zero
   103e8:	01d00734 	movhi	r7,16412
   103ec:	1009883a 	mov	r4,r2
   103f0:	180b883a 	mov	r5,r3
   103f4:	0018d640 	call	18d64 <__adddf3>
   103f8:	1021883a 	mov	r16,r2
   103fc:	d8800617 	ldw	r2,24(sp)
   10400:	047f3034 	movhi	r17,64704
   10404:	1c63883a 	add	r17,r3,r17
   10408:	10031826 	beq	r2,zero,1106c <_dtoa_r+0x1120>
   1040c:	d8c00517 	ldw	r3,20(sp)
   10410:	db000617 	ldw	r12,24(sp)
   10414:	d8c01315 	stw	r3,76(sp)
   10418:	d9000b17 	ldw	r4,44(sp)
   1041c:	20038f26 	beq	r4,zero,1125c <_dtoa_r+0x1310>
   10420:	60bfffc4 	addi	r2,r12,-1
   10424:	100490fa 	slli	r2,r2,3
   10428:	00c000b4 	movhi	r3,2
   1042c:	18de4504 	addi	r3,r3,30996
   10430:	1885883a 	add	r2,r3,r2
   10434:	11800017 	ldw	r6,0(r2)
   10438:	11c00117 	ldw	r7,4(r2)
   1043c:	d8800717 	ldw	r2,28(sp)
   10440:	0009883a 	mov	r4,zero
   10444:	014ff834 	movhi	r5,16352
   10448:	db001615 	stw	r12,88(sp)
   1044c:	15c00044 	addi	r23,r2,1
   10450:	00196100 	call	19610 <__divdf3>
   10454:	800d883a 	mov	r6,r16
   10458:	880f883a 	mov	r7,r17
   1045c:	1009883a 	mov	r4,r2
   10460:	180b883a 	mov	r5,r3
   10464:	001a78c0 	call	1a78c <__subdf3>
   10468:	d9401017 	ldw	r5,64(sp)
   1046c:	d9000f17 	ldw	r4,60(sp)
   10470:	102b883a 	mov	r21,r2
   10474:	d8c01215 	stw	r3,72(sp)
   10478:	001b0880 	call	1b088 <__fixdfsi>
   1047c:	1009883a 	mov	r4,r2
   10480:	1029883a 	mov	r20,r2
   10484:	001b1080 	call	1b108 <__floatsidf>
   10488:	d9000f17 	ldw	r4,60(sp)
   1048c:	d9401017 	ldw	r5,64(sp)
   10490:	100d883a 	mov	r6,r2
   10494:	180f883a 	mov	r7,r3
   10498:	001a78c0 	call	1a78c <__subdf3>
   1049c:	1823883a 	mov	r17,r3
   104a0:	d8c00717 	ldw	r3,28(sp)
   104a4:	d9401217 	ldw	r5,72(sp)
   104a8:	a2000c04 	addi	r8,r20,48
   104ac:	1021883a 	mov	r16,r2
   104b0:	1a000005 	stb	r8,0(r3)
   104b4:	800d883a 	mov	r6,r16
   104b8:	880f883a 	mov	r7,r17
   104bc:	a809883a 	mov	r4,r21
   104c0:	4029883a 	mov	r20,r8
   104c4:	000b2100 	call	b210 <__gedf2>
   104c8:	00841d16 	blt	zero,r2,11540 <_dtoa_r+0x15f4>
   104cc:	800d883a 	mov	r6,r16
   104d0:	880f883a 	mov	r7,r17
   104d4:	0009883a 	mov	r4,zero
   104d8:	014ffc34 	movhi	r5,16368
   104dc:	001a78c0 	call	1a78c <__subdf3>
   104e0:	d9401217 	ldw	r5,72(sp)
   104e4:	100d883a 	mov	r6,r2
   104e8:	180f883a 	mov	r7,r3
   104ec:	a809883a 	mov	r4,r21
   104f0:	000b2100 	call	b210 <__gedf2>
   104f4:	db001617 	ldw	r12,88(sp)
   104f8:	00840e16 	blt	zero,r2,11534 <_dtoa_r+0x15e8>
   104fc:	00800044 	movi	r2,1
   10500:	13006b0e 	bge	r2,r12,106b0 <_dtoa_r+0x764>
   10504:	d9000717 	ldw	r4,28(sp)
   10508:	dd800f15 	stw	r22,60(sp)
   1050c:	dcc01015 	stw	r19,64(sp)
   10510:	2319883a 	add	r12,r4,r12
   10514:	dcc01217 	ldw	r19,72(sp)
   10518:	602d883a 	mov	r22,r12
   1051c:	dc801215 	stw	r18,72(sp)
   10520:	b825883a 	mov	r18,r23
   10524:	00000906 	br	1054c <_dtoa_r+0x600>
   10528:	001a78c0 	call	1a78c <__subdf3>
   1052c:	a80d883a 	mov	r6,r21
   10530:	980f883a 	mov	r7,r19
   10534:	1009883a 	mov	r4,r2
   10538:	180b883a 	mov	r5,r3
   1053c:	0019f800 	call	19f80 <__ledf2>
   10540:	1003e816 	blt	r2,zero,114e4 <_dtoa_r+0x1598>
   10544:	b825883a 	mov	r18,r23
   10548:	bd83e926 	beq	r23,r22,114f0 <_dtoa_r+0x15a4>
   1054c:	a809883a 	mov	r4,r21
   10550:	980b883a 	mov	r5,r19
   10554:	000d883a 	mov	r6,zero
   10558:	01d00934 	movhi	r7,16420
   1055c:	001a0740 	call	1a074 <__muldf3>
   10560:	000d883a 	mov	r6,zero
   10564:	01d00934 	movhi	r7,16420
   10568:	8009883a 	mov	r4,r16
   1056c:	880b883a 	mov	r5,r17
   10570:	102b883a 	mov	r21,r2
   10574:	1827883a 	mov	r19,r3
   10578:	001a0740 	call	1a074 <__muldf3>
   1057c:	180b883a 	mov	r5,r3
   10580:	1009883a 	mov	r4,r2
   10584:	1821883a 	mov	r16,r3
   10588:	1023883a 	mov	r17,r2
   1058c:	001b0880 	call	1b088 <__fixdfsi>
   10590:	1009883a 	mov	r4,r2
   10594:	1029883a 	mov	r20,r2
   10598:	001b1080 	call	1b108 <__floatsidf>
   1059c:	8809883a 	mov	r4,r17
   105a0:	800b883a 	mov	r5,r16
   105a4:	100d883a 	mov	r6,r2
   105a8:	180f883a 	mov	r7,r3
   105ac:	001a78c0 	call	1a78c <__subdf3>
   105b0:	a5000c04 	addi	r20,r20,48
   105b4:	a80d883a 	mov	r6,r21
   105b8:	980f883a 	mov	r7,r19
   105bc:	1009883a 	mov	r4,r2
   105c0:	180b883a 	mov	r5,r3
   105c4:	95000005 	stb	r20,0(r18)
   105c8:	1021883a 	mov	r16,r2
   105cc:	1823883a 	mov	r17,r3
   105d0:	0019f800 	call	19f80 <__ledf2>
   105d4:	bdc00044 	addi	r23,r23,1
   105d8:	800d883a 	mov	r6,r16
   105dc:	880f883a 	mov	r7,r17
   105e0:	0009883a 	mov	r4,zero
   105e4:	014ffc34 	movhi	r5,16368
   105e8:	103fcf0e 	bge	r2,zero,10528 <_dtoa_r+0x5dc>
   105ec:	d8c01317 	ldw	r3,76(sp)
   105f0:	d8c00515 	stw	r3,20(sp)
   105f4:	d9400917 	ldw	r5,36(sp)
   105f8:	e009883a 	mov	r4,fp
   105fc:	0012f300 	call	12f30 <_Bfree>
   10600:	d9000517 	ldw	r4,20(sp)
   10604:	d9802317 	ldw	r6,140(sp)
   10608:	d9c02517 	ldw	r7,148(sp)
   1060c:	b8000005 	stb	zero,0(r23)
   10610:	20800044 	addi	r2,r4,1
   10614:	30800015 	stw	r2,0(r6)
   10618:	3802aa26 	beq	r7,zero,110c4 <_dtoa_r+0x1178>
   1061c:	3dc00015 	stw	r23,0(r7)
   10620:	d8800717 	ldw	r2,28(sp)
   10624:	003e7906 	br	1000c <_dtoa_r+0xc0>
   10628:	00800434 	movhi	r2,16
   1062c:	10bfffc4 	addi	r2,r2,-1
   10630:	88a2703a 	and	r17,r17,r2
   10634:	883e851e 	bne	r17,zero,1004c <_dtoa_r+0x100>
   10638:	008000b4 	movhi	r2,2
   1063c:	109e2604 	addi	r2,r2,30872
   10640:	003e8406 	br	10054 <_dtoa_r+0x108>
   10644:	10c00204 	addi	r3,r2,8
   10648:	003e8706 	br	10068 <_dtoa_r+0x11c>
   1064c:	01400434 	movhi	r5,16
   10650:	297fffc4 	addi	r5,r5,-1
   10654:	994a703a 	and	r5,r19,r5
   10658:	9009883a 	mov	r4,r18
   1065c:	843f0044 	addi	r16,r16,-1023
   10660:	294ffc34 	orhi	r5,r5,16368
   10664:	dd800217 	ldw	r22,8(sp)
   10668:	d8001115 	stw	zero,68(sp)
   1066c:	003ea506 	br	10104 <_dtoa_r+0x1b8>
   10670:	008000b4 	movhi	r2,2
   10674:	109e1504 	addi	r2,r2,30804
   10678:	003e6406 	br	1000c <_dtoa_r+0xc0>
   1067c:	e0001115 	stw	zero,68(fp)
   10680:	000b883a 	mov	r5,zero
   10684:	e009883a 	mov	r4,fp
   10688:	0012e880 	call	12e88 <_Balloc>
   1068c:	01bfffc4 	movi	r6,-1
   10690:	01c00044 	movi	r7,1
   10694:	d8800715 	stw	r2,28(sp)
   10698:	d9800c15 	stw	r6,48(sp)
   1069c:	e0801015 	stw	r2,64(fp)
   106a0:	d8000315 	stw	zero,12(sp)
   106a4:	d9c00b15 	stw	r7,44(sp)
   106a8:	d9800615 	stw	r6,24(sp)
   106ac:	d8002215 	stw	zero,136(sp)
   106b0:	d8800117 	ldw	r2,4(sp)
   106b4:	10008916 	blt	r2,zero,108dc <_dtoa_r+0x990>
   106b8:	d9000517 	ldw	r4,20(sp)
   106bc:	00c00384 	movi	r3,14
   106c0:	19008616 	blt	r3,r4,108dc <_dtoa_r+0x990>
   106c4:	200490fa 	slli	r2,r4,3
   106c8:	00c000b4 	movhi	r3,2
   106cc:	d9802217 	ldw	r6,136(sp)
   106d0:	18de4504 	addi	r3,r3,30996
   106d4:	1885883a 	add	r2,r3,r2
   106d8:	14000017 	ldw	r16,0(r2)
   106dc:	14400117 	ldw	r17,4(r2)
   106e0:	30016316 	blt	r6,zero,10c70 <_dtoa_r+0xd24>
   106e4:	800d883a 	mov	r6,r16
   106e8:	880f883a 	mov	r7,r17
   106ec:	9009883a 	mov	r4,r18
   106f0:	980b883a 	mov	r5,r19
   106f4:	00196100 	call	19610 <__divdf3>
   106f8:	180b883a 	mov	r5,r3
   106fc:	1009883a 	mov	r4,r2
   10700:	001b0880 	call	1b088 <__fixdfsi>
   10704:	1009883a 	mov	r4,r2
   10708:	102b883a 	mov	r21,r2
   1070c:	001b1080 	call	1b108 <__floatsidf>
   10710:	800d883a 	mov	r6,r16
   10714:	880f883a 	mov	r7,r17
   10718:	1009883a 	mov	r4,r2
   1071c:	180b883a 	mov	r5,r3
   10720:	001a0740 	call	1a074 <__muldf3>
   10724:	100d883a 	mov	r6,r2
   10728:	180f883a 	mov	r7,r3
   1072c:	9009883a 	mov	r4,r18
   10730:	980b883a 	mov	r5,r19
   10734:	001a78c0 	call	1a78c <__subdf3>
   10738:	d9c00717 	ldw	r7,28(sp)
   1073c:	1009883a 	mov	r4,r2
   10740:	a8800c04 	addi	r2,r21,48
   10744:	38800005 	stb	r2,0(r7)
   10748:	3dc00044 	addi	r23,r7,1
   1074c:	d9c00617 	ldw	r7,24(sp)
   10750:	01800044 	movi	r6,1
   10754:	180b883a 	mov	r5,r3
   10758:	2005883a 	mov	r2,r4
   1075c:	39803826 	beq	r7,r6,10840 <_dtoa_r+0x8f4>
   10760:	000d883a 	mov	r6,zero
   10764:	01d00934 	movhi	r7,16420
   10768:	001a0740 	call	1a074 <__muldf3>
   1076c:	000d883a 	mov	r6,zero
   10770:	000f883a 	mov	r7,zero
   10774:	1009883a 	mov	r4,r2
   10778:	180b883a 	mov	r5,r3
   1077c:	1025883a 	mov	r18,r2
   10780:	1827883a 	mov	r19,r3
   10784:	0019ef80 	call	19ef8 <__eqdf2>
   10788:	103f9a26 	beq	r2,zero,105f4 <_dtoa_r+0x6a8>
   1078c:	d9c00617 	ldw	r7,24(sp)
   10790:	d8c00717 	ldw	r3,28(sp)
   10794:	b829883a 	mov	r20,r23
   10798:	38bfffc4 	addi	r2,r7,-1
   1079c:	18ad883a 	add	r22,r3,r2
   107a0:	00000a06 	br	107cc <_dtoa_r+0x880>
   107a4:	001a0740 	call	1a074 <__muldf3>
   107a8:	000d883a 	mov	r6,zero
   107ac:	000f883a 	mov	r7,zero
   107b0:	1009883a 	mov	r4,r2
   107b4:	180b883a 	mov	r5,r3
   107b8:	1025883a 	mov	r18,r2
   107bc:	1827883a 	mov	r19,r3
   107c0:	b829883a 	mov	r20,r23
   107c4:	0019ef80 	call	19ef8 <__eqdf2>
   107c8:	103f8a26 	beq	r2,zero,105f4 <_dtoa_r+0x6a8>
   107cc:	800d883a 	mov	r6,r16
   107d0:	880f883a 	mov	r7,r17
   107d4:	9009883a 	mov	r4,r18
   107d8:	980b883a 	mov	r5,r19
   107dc:	00196100 	call	19610 <__divdf3>
   107e0:	180b883a 	mov	r5,r3
   107e4:	1009883a 	mov	r4,r2
   107e8:	001b0880 	call	1b088 <__fixdfsi>
   107ec:	1009883a 	mov	r4,r2
   107f0:	102b883a 	mov	r21,r2
   107f4:	001b1080 	call	1b108 <__floatsidf>
   107f8:	800d883a 	mov	r6,r16
   107fc:	880f883a 	mov	r7,r17
   10800:	1009883a 	mov	r4,r2
   10804:	180b883a 	mov	r5,r3
   10808:	001a0740 	call	1a074 <__muldf3>
   1080c:	100d883a 	mov	r6,r2
   10810:	180f883a 	mov	r7,r3
   10814:	9009883a 	mov	r4,r18
   10818:	980b883a 	mov	r5,r19
   1081c:	001a78c0 	call	1a78c <__subdf3>
   10820:	aa000c04 	addi	r8,r21,48
   10824:	a2000005 	stb	r8,0(r20)
   10828:	000d883a 	mov	r6,zero
   1082c:	01d00934 	movhi	r7,16420
   10830:	1009883a 	mov	r4,r2
   10834:	180b883a 	mov	r5,r3
   10838:	a5c00044 	addi	r23,r20,1
   1083c:	b53fd91e 	bne	r22,r20,107a4 <_dtoa_r+0x858>
   10840:	100d883a 	mov	r6,r2
   10844:	180f883a 	mov	r7,r3
   10848:	1009883a 	mov	r4,r2
   1084c:	180b883a 	mov	r5,r3
   10850:	0018d640 	call	18d64 <__adddf3>
   10854:	100d883a 	mov	r6,r2
   10858:	180f883a 	mov	r7,r3
   1085c:	8009883a 	mov	r4,r16
   10860:	880b883a 	mov	r5,r17
   10864:	1027883a 	mov	r19,r2
   10868:	1825883a 	mov	r18,r3
   1086c:	0019f800 	call	19f80 <__ledf2>
   10870:	10000816 	blt	r2,zero,10894 <_dtoa_r+0x948>
   10874:	980d883a 	mov	r6,r19
   10878:	900f883a 	mov	r7,r18
   1087c:	8009883a 	mov	r4,r16
   10880:	880b883a 	mov	r5,r17
   10884:	0019ef80 	call	19ef8 <__eqdf2>
   10888:	103f5a1e 	bne	r2,zero,105f4 <_dtoa_r+0x6a8>
   1088c:	ad40004c 	andi	r21,r21,1
   10890:	a83f5826 	beq	r21,zero,105f4 <_dtoa_r+0x6a8>
   10894:	bd3fffc3 	ldbu	r20,-1(r23)
   10898:	b8bfffc4 	addi	r2,r23,-1
   1089c:	1007883a 	mov	r3,r2
   108a0:	01400e44 	movi	r5,57
   108a4:	d9800717 	ldw	r6,28(sp)
   108a8:	00000506 	br	108c0 <_dtoa_r+0x974>
   108ac:	18ffffc4 	addi	r3,r3,-1
   108b0:	11824726 	beq	r2,r6,111d0 <_dtoa_r+0x1284>
   108b4:	1d000003 	ldbu	r20,0(r3)
   108b8:	102f883a 	mov	r23,r2
   108bc:	10bfffc4 	addi	r2,r2,-1
   108c0:	a1003fcc 	andi	r4,r20,255
   108c4:	2100201c 	xori	r4,r4,128
   108c8:	213fe004 	addi	r4,r4,-128
   108cc:	217ff726 	beq	r4,r5,108ac <_dtoa_r+0x960>
   108d0:	a2000044 	addi	r8,r20,1
   108d4:	12000005 	stb	r8,0(r2)
   108d8:	003f4606 	br	105f4 <_dtoa_r+0x6a8>
   108dc:	d9000b17 	ldw	r4,44(sp)
   108e0:	2000c826 	beq	r4,zero,10c04 <_dtoa_r+0xcb8>
   108e4:	d9800317 	ldw	r6,12(sp)
   108e8:	00c00044 	movi	r3,1
   108ec:	1980f90e 	bge	r3,r6,10cd4 <_dtoa_r+0xd88>
   108f0:	d8800617 	ldw	r2,24(sp)
   108f4:	d8c00a17 	ldw	r3,40(sp)
   108f8:	157fffc4 	addi	r21,r2,-1
   108fc:	1d41f316 	blt	r3,r21,110cc <_dtoa_r+0x1180>
   10900:	1d6bc83a 	sub	r21,r3,r21
   10904:	d9c00617 	ldw	r7,24(sp)
   10908:	3802aa16 	blt	r7,zero,113b4 <_dtoa_r+0x1468>
   1090c:	dd000817 	ldw	r20,32(sp)
   10910:	d8800617 	ldw	r2,24(sp)
   10914:	d8c00817 	ldw	r3,32(sp)
   10918:	01400044 	movi	r5,1
   1091c:	e009883a 	mov	r4,fp
   10920:	1887883a 	add	r3,r3,r2
   10924:	d8c00815 	stw	r3,32(sp)
   10928:	b0ad883a 	add	r22,r22,r2
   1092c:	00132940 	call	13294 <__i2b>
   10930:	1023883a 	mov	r17,r2
   10934:	a0000826 	beq	r20,zero,10958 <_dtoa_r+0xa0c>
   10938:	0580070e 	bge	zero,r22,10958 <_dtoa_r+0xa0c>
   1093c:	a005883a 	mov	r2,r20
   10940:	b500b916 	blt	r22,r20,10c28 <_dtoa_r+0xcdc>
   10944:	d9000817 	ldw	r4,32(sp)
   10948:	a0a9c83a 	sub	r20,r20,r2
   1094c:	b0adc83a 	sub	r22,r22,r2
   10950:	2089c83a 	sub	r4,r4,r2
   10954:	d9000815 	stw	r4,32(sp)
   10958:	d9800a17 	ldw	r6,40(sp)
   1095c:	0181810e 	bge	zero,r6,10f64 <_dtoa_r+0x1018>
   10960:	d9c00b17 	ldw	r7,44(sp)
   10964:	3800b326 	beq	r7,zero,10c34 <_dtoa_r+0xce8>
   10968:	a800b226 	beq	r21,zero,10c34 <_dtoa_r+0xce8>
   1096c:	880b883a 	mov	r5,r17
   10970:	a80d883a 	mov	r6,r21
   10974:	e009883a 	mov	r4,fp
   10978:	00134c80 	call	134c8 <__pow5mult>
   1097c:	d9800917 	ldw	r6,36(sp)
   10980:	100b883a 	mov	r5,r2
   10984:	e009883a 	mov	r4,fp
   10988:	1023883a 	mov	r17,r2
   1098c:	00132d00 	call	132d0 <__multiply>
   10990:	1021883a 	mov	r16,r2
   10994:	d8800a17 	ldw	r2,40(sp)
   10998:	d9400917 	ldw	r5,36(sp)
   1099c:	e009883a 	mov	r4,fp
   109a0:	1545c83a 	sub	r2,r2,r21
   109a4:	d8800a15 	stw	r2,40(sp)
   109a8:	0012f300 	call	12f30 <_Bfree>
   109ac:	d8c00a17 	ldw	r3,40(sp)
   109b0:	18009f1e 	bne	r3,zero,10c30 <_dtoa_r+0xce4>
   109b4:	05c00044 	movi	r23,1
   109b8:	e009883a 	mov	r4,fp
   109bc:	b80b883a 	mov	r5,r23
   109c0:	00132940 	call	13294 <__i2b>
   109c4:	d9000d17 	ldw	r4,52(sp)
   109c8:	102b883a 	mov	r21,r2
   109cc:	2000ce26 	beq	r4,zero,10d08 <_dtoa_r+0xdbc>
   109d0:	200d883a 	mov	r6,r4
   109d4:	100b883a 	mov	r5,r2
   109d8:	e009883a 	mov	r4,fp
   109dc:	00134c80 	call	134c8 <__pow5mult>
   109e0:	d9800317 	ldw	r6,12(sp)
   109e4:	102b883a 	mov	r21,r2
   109e8:	b981810e 	bge	r23,r6,10ff0 <_dtoa_r+0x10a4>
   109ec:	0027883a 	mov	r19,zero
   109f0:	a8800417 	ldw	r2,16(r21)
   109f4:	05c00804 	movi	r23,32
   109f8:	10800104 	addi	r2,r2,4
   109fc:	1085883a 	add	r2,r2,r2
   10a00:	1085883a 	add	r2,r2,r2
   10a04:	a885883a 	add	r2,r21,r2
   10a08:	11000017 	ldw	r4,0(r2)
   10a0c:	001317c0 	call	1317c <__hi0bits>
   10a10:	b885c83a 	sub	r2,r23,r2
   10a14:	1585883a 	add	r2,r2,r22
   10a18:	108007cc 	andi	r2,r2,31
   10a1c:	1000b326 	beq	r2,zero,10cec <_dtoa_r+0xda0>
   10a20:	00c00804 	movi	r3,32
   10a24:	1887c83a 	sub	r3,r3,r2
   10a28:	01000104 	movi	r4,4
   10a2c:	20c2cd0e 	bge	r4,r3,11564 <_dtoa_r+0x1618>
   10a30:	00c00704 	movi	r3,28
   10a34:	1885c83a 	sub	r2,r3,r2
   10a38:	d8c00817 	ldw	r3,32(sp)
   10a3c:	a0a9883a 	add	r20,r20,r2
   10a40:	b0ad883a 	add	r22,r22,r2
   10a44:	1887883a 	add	r3,r3,r2
   10a48:	d8c00815 	stw	r3,32(sp)
   10a4c:	d9800817 	ldw	r6,32(sp)
   10a50:	0180040e 	bge	zero,r6,10a64 <_dtoa_r+0xb18>
   10a54:	800b883a 	mov	r5,r16
   10a58:	e009883a 	mov	r4,fp
   10a5c:	00136080 	call	13608 <__lshift>
   10a60:	1021883a 	mov	r16,r2
   10a64:	0580050e 	bge	zero,r22,10a7c <_dtoa_r+0xb30>
   10a68:	a80b883a 	mov	r5,r21
   10a6c:	b00d883a 	mov	r6,r22
   10a70:	e009883a 	mov	r4,fp
   10a74:	00136080 	call	13608 <__lshift>
   10a78:	102b883a 	mov	r21,r2
   10a7c:	d9c00e17 	ldw	r7,56(sp)
   10a80:	3801211e 	bne	r7,zero,10f08 <_dtoa_r+0xfbc>
   10a84:	d9800617 	ldw	r6,24(sp)
   10a88:	0181380e 	bge	zero,r6,10f6c <_dtoa_r+0x1020>
   10a8c:	d8c00b17 	ldw	r3,44(sp)
   10a90:	1800ab1e 	bne	r3,zero,10d40 <_dtoa_r+0xdf4>
   10a94:	dc800717 	ldw	r18,28(sp)
   10a98:	dcc00617 	ldw	r19,24(sp)
   10a9c:	9029883a 	mov	r20,r18
   10aa0:	00000206 	br	10aac <_dtoa_r+0xb60>
   10aa4:	0012f580 	call	12f58 <__multadd>
   10aa8:	1021883a 	mov	r16,r2
   10aac:	a80b883a 	mov	r5,r21
   10ab0:	8009883a 	mov	r4,r16
   10ab4:	000fd4c0 	call	fd4c <quorem>
   10ab8:	10800c04 	addi	r2,r2,48
   10abc:	90800005 	stb	r2,0(r18)
   10ac0:	94800044 	addi	r18,r18,1
   10ac4:	9507c83a 	sub	r3,r18,r20
   10ac8:	000f883a 	mov	r7,zero
   10acc:	01800284 	movi	r6,10
   10ad0:	800b883a 	mov	r5,r16
   10ad4:	e009883a 	mov	r4,fp
   10ad8:	1cfff216 	blt	r3,r19,10aa4 <_dtoa_r+0xb58>
   10adc:	1011883a 	mov	r8,r2
   10ae0:	d8800617 	ldw	r2,24(sp)
   10ae4:	0082370e 	bge	zero,r2,113c4 <_dtoa_r+0x1478>
   10ae8:	d9000717 	ldw	r4,28(sp)
   10aec:	0025883a 	mov	r18,zero
   10af0:	20af883a 	add	r23,r4,r2
   10af4:	01800044 	movi	r6,1
   10af8:	800b883a 	mov	r5,r16
   10afc:	e009883a 	mov	r4,fp
   10b00:	da001715 	stw	r8,92(sp)
   10b04:	00136080 	call	13608 <__lshift>
   10b08:	a80b883a 	mov	r5,r21
   10b0c:	1009883a 	mov	r4,r2
   10b10:	d8800915 	stw	r2,36(sp)
   10b14:	00137500 	call	13750 <__mcmp>
   10b18:	da001717 	ldw	r8,92(sp)
   10b1c:	0081800e 	bge	zero,r2,11120 <_dtoa_r+0x11d4>
   10b20:	b93fffc3 	ldbu	r4,-1(r23)
   10b24:	b8bfffc4 	addi	r2,r23,-1
   10b28:	1007883a 	mov	r3,r2
   10b2c:	01800e44 	movi	r6,57
   10b30:	d9c00717 	ldw	r7,28(sp)
   10b34:	00000506 	br	10b4c <_dtoa_r+0xc00>
   10b38:	18ffffc4 	addi	r3,r3,-1
   10b3c:	11c12326 	beq	r2,r7,10fcc <_dtoa_r+0x1080>
   10b40:	19000003 	ldbu	r4,0(r3)
   10b44:	102f883a 	mov	r23,r2
   10b48:	10bfffc4 	addi	r2,r2,-1
   10b4c:	21403fcc 	andi	r5,r4,255
   10b50:	2940201c 	xori	r5,r5,128
   10b54:	297fe004 	addi	r5,r5,-128
   10b58:	29bff726 	beq	r5,r6,10b38 <_dtoa_r+0xbec>
   10b5c:	21000044 	addi	r4,r4,1
   10b60:	11000005 	stb	r4,0(r2)
   10b64:	a80b883a 	mov	r5,r21
   10b68:	e009883a 	mov	r4,fp
   10b6c:	0012f300 	call	12f30 <_Bfree>
   10b70:	883ea026 	beq	r17,zero,105f4 <_dtoa_r+0x6a8>
   10b74:	90000426 	beq	r18,zero,10b88 <_dtoa_r+0xc3c>
   10b78:	94400326 	beq	r18,r17,10b88 <_dtoa_r+0xc3c>
   10b7c:	900b883a 	mov	r5,r18
   10b80:	e009883a 	mov	r4,fp
   10b84:	0012f300 	call	12f30 <_Bfree>
   10b88:	880b883a 	mov	r5,r17
   10b8c:	e009883a 	mov	r4,fp
   10b90:	0012f300 	call	12f30 <_Bfree>
   10b94:	003e9706 	br	105f4 <_dtoa_r+0x6a8>
   10b98:	01800044 	movi	r6,1
   10b9c:	d9800e15 	stw	r6,56(sp)
   10ba0:	003d9606 	br	101fc <_dtoa_r+0x2b0>
   10ba4:	d8800817 	ldw	r2,32(sp)
   10ba8:	d8c00517 	ldw	r3,20(sp)
   10bac:	d8000d15 	stw	zero,52(sp)
   10bb0:	10c5c83a 	sub	r2,r2,r3
   10bb4:	00c9c83a 	sub	r4,zero,r3
   10bb8:	d8800815 	stw	r2,32(sp)
   10bbc:	d9000a15 	stw	r4,40(sp)
   10bc0:	003d9706 	br	10220 <_dtoa_r+0x2d4>
   10bc4:	05adc83a 	sub	r22,zero,r22
   10bc8:	dd800815 	stw	r22,32(sp)
   10bcc:	002d883a 	mov	r22,zero
   10bd0:	003d8e06 	br	1020c <_dtoa_r+0x2c0>
   10bd4:	d9000517 	ldw	r4,20(sp)
   10bd8:	001b1080 	call	1b108 <__floatsidf>
   10bdc:	100d883a 	mov	r6,r2
   10be0:	180f883a 	mov	r7,r3
   10be4:	a009883a 	mov	r4,r20
   10be8:	880b883a 	mov	r5,r17
   10bec:	0019ef80 	call	19ef8 <__eqdf2>
   10bf0:	103d7126 	beq	r2,zero,101b8 <_dtoa_r+0x26c>
   10bf4:	d9c00517 	ldw	r7,20(sp)
   10bf8:	39ffffc4 	addi	r7,r7,-1
   10bfc:	d9c00515 	stw	r7,20(sp)
   10c00:	003d6d06 	br	101b8 <_dtoa_r+0x26c>
   10c04:	dd400a17 	ldw	r21,40(sp)
   10c08:	dd000817 	ldw	r20,32(sp)
   10c0c:	0023883a 	mov	r17,zero
   10c10:	003f4806 	br	10934 <_dtoa_r+0x9e8>
   10c14:	10e3c83a 	sub	r17,r2,r3
   10c18:	9448983a 	sll	r4,r18,r17
   10c1c:	003d3206 	br	100e8 <_dtoa_r+0x19c>
   10c20:	d8000e15 	stw	zero,56(sp)
   10c24:	003d7506 	br	101fc <_dtoa_r+0x2b0>
   10c28:	b005883a 	mov	r2,r22
   10c2c:	003f4506 	br	10944 <_dtoa_r+0x9f8>
   10c30:	dc000915 	stw	r16,36(sp)
   10c34:	d9800a17 	ldw	r6,40(sp)
   10c38:	d9400917 	ldw	r5,36(sp)
   10c3c:	e009883a 	mov	r4,fp
   10c40:	00134c80 	call	134c8 <__pow5mult>
   10c44:	1021883a 	mov	r16,r2
   10c48:	003f5a06 	br	109b4 <_dtoa_r+0xa68>
   10c4c:	01c00044 	movi	r7,1
   10c50:	d9c00b15 	stw	r7,44(sp)
   10c54:	d8802217 	ldw	r2,136(sp)
   10c58:	0081280e 	bge	zero,r2,110fc <_dtoa_r+0x11b0>
   10c5c:	100d883a 	mov	r6,r2
   10c60:	1021883a 	mov	r16,r2
   10c64:	d8800c15 	stw	r2,48(sp)
   10c68:	d8800615 	stw	r2,24(sp)
   10c6c:	003d8806 	br	10290 <_dtoa_r+0x344>
   10c70:	d8800617 	ldw	r2,24(sp)
   10c74:	00be9b16 	blt	zero,r2,106e4 <_dtoa_r+0x798>
   10c78:	10010f1e 	bne	r2,zero,110b8 <_dtoa_r+0x116c>
   10c7c:	880b883a 	mov	r5,r17
   10c80:	000d883a 	mov	r6,zero
   10c84:	01d00534 	movhi	r7,16404
   10c88:	8009883a 	mov	r4,r16
   10c8c:	001a0740 	call	1a074 <__muldf3>
   10c90:	900d883a 	mov	r6,r18
   10c94:	980f883a 	mov	r7,r19
   10c98:	1009883a 	mov	r4,r2
   10c9c:	180b883a 	mov	r5,r3
   10ca0:	000b2100 	call	b210 <__gedf2>
   10ca4:	002b883a 	mov	r21,zero
   10ca8:	0023883a 	mov	r17,zero
   10cac:	1000bf16 	blt	r2,zero,10fac <_dtoa_r+0x1060>
   10cb0:	d9802217 	ldw	r6,136(sp)
   10cb4:	ddc00717 	ldw	r23,28(sp)
   10cb8:	018c303a 	nor	r6,zero,r6
   10cbc:	d9800515 	stw	r6,20(sp)
   10cc0:	a80b883a 	mov	r5,r21
   10cc4:	e009883a 	mov	r4,fp
   10cc8:	0012f300 	call	12f30 <_Bfree>
   10ccc:	883e4926 	beq	r17,zero,105f4 <_dtoa_r+0x6a8>
   10cd0:	003fad06 	br	10b88 <_dtoa_r+0xc3c>
   10cd4:	d9c01117 	ldw	r7,68(sp)
   10cd8:	3801bc26 	beq	r7,zero,113cc <_dtoa_r+0x1480>
   10cdc:	10810cc4 	addi	r2,r2,1075
   10ce0:	dd400a17 	ldw	r21,40(sp)
   10ce4:	dd000817 	ldw	r20,32(sp)
   10ce8:	003f0a06 	br	10914 <_dtoa_r+0x9c8>
   10cec:	00800704 	movi	r2,28
   10cf0:	d9000817 	ldw	r4,32(sp)
   10cf4:	a0a9883a 	add	r20,r20,r2
   10cf8:	b0ad883a 	add	r22,r22,r2
   10cfc:	2089883a 	add	r4,r4,r2
   10d00:	d9000815 	stw	r4,32(sp)
   10d04:	003f5106 	br	10a4c <_dtoa_r+0xb00>
   10d08:	d8c00317 	ldw	r3,12(sp)
   10d0c:	b8c1fc0e 	bge	r23,r3,11500 <_dtoa_r+0x15b4>
   10d10:	0027883a 	mov	r19,zero
   10d14:	b805883a 	mov	r2,r23
   10d18:	003f3e06 	br	10a14 <_dtoa_r+0xac8>
   10d1c:	880b883a 	mov	r5,r17
   10d20:	e009883a 	mov	r4,fp
   10d24:	000f883a 	mov	r7,zero
   10d28:	01800284 	movi	r6,10
   10d2c:	0012f580 	call	12f58 <__multadd>
   10d30:	d9000c17 	ldw	r4,48(sp)
   10d34:	1023883a 	mov	r17,r2
   10d38:	0102040e 	bge	zero,r4,1154c <_dtoa_r+0x1600>
   10d3c:	d9000615 	stw	r4,24(sp)
   10d40:	0500050e 	bge	zero,r20,10d58 <_dtoa_r+0xe0c>
   10d44:	880b883a 	mov	r5,r17
   10d48:	a00d883a 	mov	r6,r20
   10d4c:	e009883a 	mov	r4,fp
   10d50:	00136080 	call	13608 <__lshift>
   10d54:	1023883a 	mov	r17,r2
   10d58:	9801241e 	bne	r19,zero,111ec <_dtoa_r+0x12a0>
   10d5c:	8829883a 	mov	r20,r17
   10d60:	d9000617 	ldw	r4,24(sp)
   10d64:	dcc00717 	ldw	r19,28(sp)
   10d68:	9480004c 	andi	r18,r18,1
   10d6c:	20bfffc4 	addi	r2,r4,-1
   10d70:	9885883a 	add	r2,r19,r2
   10d74:	d8800415 	stw	r2,16(sp)
   10d78:	dc800615 	stw	r18,24(sp)
   10d7c:	a80b883a 	mov	r5,r21
   10d80:	8009883a 	mov	r4,r16
   10d84:	000fd4c0 	call	fd4c <quorem>
   10d88:	880b883a 	mov	r5,r17
   10d8c:	8009883a 	mov	r4,r16
   10d90:	102f883a 	mov	r23,r2
   10d94:	00137500 	call	13750 <__mcmp>
   10d98:	a80b883a 	mov	r5,r21
   10d9c:	a00d883a 	mov	r6,r20
   10da0:	e009883a 	mov	r4,fp
   10da4:	102d883a 	mov	r22,r2
   10da8:	00137b00 	call	137b0 <__mdiff>
   10dac:	1007883a 	mov	r3,r2
   10db0:	10800317 	ldw	r2,12(r2)
   10db4:	bc800c04 	addi	r18,r23,48
   10db8:	180b883a 	mov	r5,r3
   10dbc:	10004e1e 	bne	r2,zero,10ef8 <_dtoa_r+0xfac>
   10dc0:	8009883a 	mov	r4,r16
   10dc4:	d8c01615 	stw	r3,88(sp)
   10dc8:	00137500 	call	13750 <__mcmp>
   10dcc:	d8c01617 	ldw	r3,88(sp)
   10dd0:	e009883a 	mov	r4,fp
   10dd4:	d8801615 	stw	r2,88(sp)
   10dd8:	180b883a 	mov	r5,r3
   10ddc:	0012f300 	call	12f30 <_Bfree>
   10de0:	d8801617 	ldw	r2,88(sp)
   10de4:	1000041e 	bne	r2,zero,10df8 <_dtoa_r+0xeac>
   10de8:	d9800317 	ldw	r6,12(sp)
   10dec:	3000021e 	bne	r6,zero,10df8 <_dtoa_r+0xeac>
   10df0:	d8c00617 	ldw	r3,24(sp)
   10df4:	18003726 	beq	r3,zero,10ed4 <_dtoa_r+0xf88>
   10df8:	b0002016 	blt	r22,zero,10e7c <_dtoa_r+0xf30>
   10dfc:	b000041e 	bne	r22,zero,10e10 <_dtoa_r+0xec4>
   10e00:	d9000317 	ldw	r4,12(sp)
   10e04:	2000021e 	bne	r4,zero,10e10 <_dtoa_r+0xec4>
   10e08:	d8c00617 	ldw	r3,24(sp)
   10e0c:	18001b26 	beq	r3,zero,10e7c <_dtoa_r+0xf30>
   10e10:	00810716 	blt	zero,r2,11230 <_dtoa_r+0x12e4>
   10e14:	d8c00417 	ldw	r3,16(sp)
   10e18:	9d800044 	addi	r22,r19,1
   10e1c:	9c800005 	stb	r18,0(r19)
   10e20:	b02f883a 	mov	r23,r22
   10e24:	98c10626 	beq	r19,r3,11240 <_dtoa_r+0x12f4>
   10e28:	800b883a 	mov	r5,r16
   10e2c:	000f883a 	mov	r7,zero
   10e30:	01800284 	movi	r6,10
   10e34:	e009883a 	mov	r4,fp
   10e38:	0012f580 	call	12f58 <__multadd>
   10e3c:	1021883a 	mov	r16,r2
   10e40:	000f883a 	mov	r7,zero
   10e44:	01800284 	movi	r6,10
   10e48:	880b883a 	mov	r5,r17
   10e4c:	e009883a 	mov	r4,fp
   10e50:	8d002526 	beq	r17,r20,10ee8 <_dtoa_r+0xf9c>
   10e54:	0012f580 	call	12f58 <__multadd>
   10e58:	a00b883a 	mov	r5,r20
   10e5c:	000f883a 	mov	r7,zero
   10e60:	01800284 	movi	r6,10
   10e64:	e009883a 	mov	r4,fp
   10e68:	1023883a 	mov	r17,r2
   10e6c:	0012f580 	call	12f58 <__multadd>
   10e70:	1029883a 	mov	r20,r2
   10e74:	b027883a 	mov	r19,r22
   10e78:	003fc006 	br	10d7c <_dtoa_r+0xe30>
   10e7c:	9011883a 	mov	r8,r18
   10e80:	00800e0e 	bge	zero,r2,10ebc <_dtoa_r+0xf70>
   10e84:	800b883a 	mov	r5,r16
   10e88:	01800044 	movi	r6,1
   10e8c:	e009883a 	mov	r4,fp
   10e90:	da001715 	stw	r8,92(sp)
   10e94:	00136080 	call	13608 <__lshift>
   10e98:	a80b883a 	mov	r5,r21
   10e9c:	1009883a 	mov	r4,r2
   10ea0:	1021883a 	mov	r16,r2
   10ea4:	00137500 	call	13750 <__mcmp>
   10ea8:	da001717 	ldw	r8,92(sp)
   10eac:	0081960e 	bge	zero,r2,11508 <_dtoa_r+0x15bc>
   10eb0:	00800e44 	movi	r2,57
   10eb4:	40817026 	beq	r8,r2,11478 <_dtoa_r+0x152c>
   10eb8:	ba000c44 	addi	r8,r23,49
   10ebc:	8825883a 	mov	r18,r17
   10ec0:	9dc00044 	addi	r23,r19,1
   10ec4:	9a000005 	stb	r8,0(r19)
   10ec8:	a023883a 	mov	r17,r20
   10ecc:	dc000915 	stw	r16,36(sp)
   10ed0:	003f2406 	br	10b64 <_dtoa_r+0xc18>
   10ed4:	00800e44 	movi	r2,57
   10ed8:	9011883a 	mov	r8,r18
   10edc:	90816626 	beq	r18,r2,11478 <_dtoa_r+0x152c>
   10ee0:	05bff516 	blt	zero,r22,10eb8 <_dtoa_r+0xf6c>
   10ee4:	003ff506 	br	10ebc <_dtoa_r+0xf70>
   10ee8:	0012f580 	call	12f58 <__multadd>
   10eec:	1023883a 	mov	r17,r2
   10ef0:	1029883a 	mov	r20,r2
   10ef4:	003fdf06 	br	10e74 <_dtoa_r+0xf28>
   10ef8:	e009883a 	mov	r4,fp
   10efc:	0012f300 	call	12f30 <_Bfree>
   10f00:	00800044 	movi	r2,1
   10f04:	003fbc06 	br	10df8 <_dtoa_r+0xeac>
   10f08:	a80b883a 	mov	r5,r21
   10f0c:	8009883a 	mov	r4,r16
   10f10:	00137500 	call	13750 <__mcmp>
   10f14:	103edb0e 	bge	r2,zero,10a84 <_dtoa_r+0xb38>
   10f18:	800b883a 	mov	r5,r16
   10f1c:	000f883a 	mov	r7,zero
   10f20:	01800284 	movi	r6,10
   10f24:	e009883a 	mov	r4,fp
   10f28:	0012f580 	call	12f58 <__multadd>
   10f2c:	1021883a 	mov	r16,r2
   10f30:	d8800517 	ldw	r2,20(sp)
   10f34:	d8c00b17 	ldw	r3,44(sp)
   10f38:	10bfffc4 	addi	r2,r2,-1
   10f3c:	d8800515 	stw	r2,20(sp)
   10f40:	183f761e 	bne	r3,zero,10d1c <_dtoa_r+0xdd0>
   10f44:	d9000c17 	ldw	r4,48(sp)
   10f48:	0101730e 	bge	zero,r4,11518 <_dtoa_r+0x15cc>
   10f4c:	d9000615 	stw	r4,24(sp)
   10f50:	003ed006 	br	10a94 <_dtoa_r+0xb48>
   10f54:	00800084 	movi	r2,2
   10f58:	3081861e 	bne	r6,r2,11574 <_dtoa_r+0x1628>
   10f5c:	d8000b15 	stw	zero,44(sp)
   10f60:	003f3c06 	br	10c54 <_dtoa_r+0xd08>
   10f64:	dc000917 	ldw	r16,36(sp)
   10f68:	003e9206 	br	109b4 <_dtoa_r+0xa68>
   10f6c:	d9c00317 	ldw	r7,12(sp)
   10f70:	00800084 	movi	r2,2
   10f74:	11fec50e 	bge	r2,r7,10a8c <_dtoa_r+0xb40>
   10f78:	d9000617 	ldw	r4,24(sp)
   10f7c:	20013c1e 	bne	r4,zero,11470 <_dtoa_r+0x1524>
   10f80:	a80b883a 	mov	r5,r21
   10f84:	000f883a 	mov	r7,zero
   10f88:	01800144 	movi	r6,5
   10f8c:	e009883a 	mov	r4,fp
   10f90:	0012f580 	call	12f58 <__multadd>
   10f94:	100b883a 	mov	r5,r2
   10f98:	8009883a 	mov	r4,r16
   10f9c:	102b883a 	mov	r21,r2
   10fa0:	00137500 	call	13750 <__mcmp>
   10fa4:	dc000915 	stw	r16,36(sp)
   10fa8:	00bf410e 	bge	zero,r2,10cb0 <_dtoa_r+0xd64>
   10fac:	d9c00717 	ldw	r7,28(sp)
   10fb0:	00800c44 	movi	r2,49
   10fb4:	38800005 	stb	r2,0(r7)
   10fb8:	d8800517 	ldw	r2,20(sp)
   10fbc:	3dc00044 	addi	r23,r7,1
   10fc0:	10800044 	addi	r2,r2,1
   10fc4:	d8800515 	stw	r2,20(sp)
   10fc8:	003f3d06 	br	10cc0 <_dtoa_r+0xd74>
   10fcc:	d9800517 	ldw	r6,20(sp)
   10fd0:	d9c00717 	ldw	r7,28(sp)
   10fd4:	00800c44 	movi	r2,49
   10fd8:	31800044 	addi	r6,r6,1
   10fdc:	d9800515 	stw	r6,20(sp)
   10fe0:	38800005 	stb	r2,0(r7)
   10fe4:	003edf06 	br	10b64 <_dtoa_r+0xc18>
   10fe8:	d8000b15 	stw	zero,44(sp)
   10fec:	003c9f06 	br	1026c <_dtoa_r+0x320>
   10ff0:	903e7e1e 	bne	r18,zero,109ec <_dtoa_r+0xaa0>
   10ff4:	00800434 	movhi	r2,16
   10ff8:	10bfffc4 	addi	r2,r2,-1
   10ffc:	9884703a 	and	r2,r19,r2
   11000:	1000ea1e 	bne	r2,zero,113ac <_dtoa_r+0x1460>
   11004:	9cdffc2c 	andhi	r19,r19,32752
   11008:	9800e826 	beq	r19,zero,113ac <_dtoa_r+0x1460>
   1100c:	d9c00817 	ldw	r7,32(sp)
   11010:	b5800044 	addi	r22,r22,1
   11014:	04c00044 	movi	r19,1
   11018:	39c00044 	addi	r7,r7,1
   1101c:	d9c00815 	stw	r7,32(sp)
   11020:	d8800d17 	ldw	r2,52(sp)
   11024:	103e721e 	bne	r2,zero,109f0 <_dtoa_r+0xaa4>
   11028:	00800044 	movi	r2,1
   1102c:	003e7906 	br	10a14 <_dtoa_r+0xac8>
   11030:	8009883a 	mov	r4,r16
   11034:	001b1080 	call	1b108 <__floatsidf>
   11038:	d9800f17 	ldw	r6,60(sp)
   1103c:	d9c01017 	ldw	r7,64(sp)
   11040:	1009883a 	mov	r4,r2
   11044:	180b883a 	mov	r5,r3
   11048:	001a0740 	call	1a074 <__muldf3>
   1104c:	000d883a 	mov	r6,zero
   11050:	01d00734 	movhi	r7,16412
   11054:	1009883a 	mov	r4,r2
   11058:	180b883a 	mov	r5,r3
   1105c:	0018d640 	call	18d64 <__adddf3>
   11060:	047f3034 	movhi	r17,64704
   11064:	1021883a 	mov	r16,r2
   11068:	1c63883a 	add	r17,r3,r17
   1106c:	d9000f17 	ldw	r4,60(sp)
   11070:	d9401017 	ldw	r5,64(sp)
   11074:	000d883a 	mov	r6,zero
   11078:	01d00534 	movhi	r7,16404
   1107c:	001a78c0 	call	1a78c <__subdf3>
   11080:	800d883a 	mov	r6,r16
   11084:	880f883a 	mov	r7,r17
   11088:	1009883a 	mov	r4,r2
   1108c:	180b883a 	mov	r5,r3
   11090:	102b883a 	mov	r21,r2
   11094:	1829883a 	mov	r20,r3
   11098:	000b2100 	call	b210 <__gedf2>
   1109c:	00806c16 	blt	zero,r2,11250 <_dtoa_r+0x1304>
   110a0:	89e0003c 	xorhi	r7,r17,32768
   110a4:	800d883a 	mov	r6,r16
   110a8:	a809883a 	mov	r4,r21
   110ac:	a00b883a 	mov	r5,r20
   110b0:	0019f800 	call	19f80 <__ledf2>
   110b4:	103d7e0e 	bge	r2,zero,106b0 <_dtoa_r+0x764>
   110b8:	002b883a 	mov	r21,zero
   110bc:	0023883a 	mov	r17,zero
   110c0:	003efb06 	br	10cb0 <_dtoa_r+0xd64>
   110c4:	d8800717 	ldw	r2,28(sp)
   110c8:	003bd006 	br	1000c <_dtoa_r+0xc0>
   110cc:	d9000a17 	ldw	r4,40(sp)
   110d0:	d9800d17 	ldw	r6,52(sp)
   110d4:	dd400a15 	stw	r21,40(sp)
   110d8:	a905c83a 	sub	r2,r21,r4
   110dc:	308d883a 	add	r6,r6,r2
   110e0:	d9800d15 	stw	r6,52(sp)
   110e4:	002b883a 	mov	r21,zero
   110e8:	003e0606 	br	10904 <_dtoa_r+0x9b8>
   110ec:	9023883a 	mov	r17,r18
   110f0:	9829883a 	mov	r20,r19
   110f4:	04000084 	movi	r16,2
   110f8:	003c9206 	br	10344 <_dtoa_r+0x3f8>
   110fc:	04000044 	movi	r16,1
   11100:	dc000c15 	stw	r16,48(sp)
   11104:	dc000615 	stw	r16,24(sp)
   11108:	dc002215 	stw	r16,136(sp)
   1110c:	e0001115 	stw	zero,68(fp)
   11110:	000b883a 	mov	r5,zero
   11114:	003c6906 	br	102bc <_dtoa_r+0x370>
   11118:	3021883a 	mov	r16,r6
   1111c:	003ffb06 	br	1110c <_dtoa_r+0x11c0>
   11120:	1000021e 	bne	r2,zero,1112c <_dtoa_r+0x11e0>
   11124:	4200004c 	andi	r8,r8,1
   11128:	403e7d1e 	bne	r8,zero,10b20 <_dtoa_r+0xbd4>
   1112c:	01000c04 	movi	r4,48
   11130:	00000106 	br	11138 <_dtoa_r+0x11ec>
   11134:	102f883a 	mov	r23,r2
   11138:	b8bfffc4 	addi	r2,r23,-1
   1113c:	10c00007 	ldb	r3,0(r2)
   11140:	193ffc26 	beq	r3,r4,11134 <_dtoa_r+0x11e8>
   11144:	003e8706 	br	10b64 <_dtoa_r+0xc18>
   11148:	d8800517 	ldw	r2,20(sp)
   1114c:	00a3c83a 	sub	r17,zero,r2
   11150:	8800a426 	beq	r17,zero,113e4 <_dtoa_r+0x1498>
   11154:	888003cc 	andi	r2,r17,15
   11158:	100490fa 	slli	r2,r2,3
   1115c:	00c000b4 	movhi	r3,2
   11160:	18de4504 	addi	r3,r3,30996
   11164:	1885883a 	add	r2,r3,r2
   11168:	11800017 	ldw	r6,0(r2)
   1116c:	11c00117 	ldw	r7,4(r2)
   11170:	9009883a 	mov	r4,r18
   11174:	980b883a 	mov	r5,r19
   11178:	8823d13a 	srai	r17,r17,4
   1117c:	001a0740 	call	1a074 <__muldf3>
   11180:	d8800f15 	stw	r2,60(sp)
   11184:	d8c01015 	stw	r3,64(sp)
   11188:	8800e826 	beq	r17,zero,1152c <_dtoa_r+0x15e0>
   1118c:	050000b4 	movhi	r20,2
   11190:	a51e3b04 	addi	r20,r20,30956
   11194:	04000084 	movi	r16,2
   11198:	8980004c 	andi	r6,r17,1
   1119c:	1009883a 	mov	r4,r2
   111a0:	8823d07a 	srai	r17,r17,1
   111a4:	180b883a 	mov	r5,r3
   111a8:	30000426 	beq	r6,zero,111bc <_dtoa_r+0x1270>
   111ac:	a1800017 	ldw	r6,0(r20)
   111b0:	a1c00117 	ldw	r7,4(r20)
   111b4:	84000044 	addi	r16,r16,1
   111b8:	001a0740 	call	1a074 <__muldf3>
   111bc:	a5000204 	addi	r20,r20,8
   111c0:	883ff51e 	bne	r17,zero,11198 <_dtoa_r+0x124c>
   111c4:	d8800f15 	stw	r2,60(sp)
   111c8:	d8c01015 	stw	r3,64(sp)
   111cc:	003c7606 	br	103a8 <_dtoa_r+0x45c>
   111d0:	00c00c04 	movi	r3,48
   111d4:	10c00005 	stb	r3,0(r2)
   111d8:	d8c00517 	ldw	r3,20(sp)
   111dc:	bd3fffc3 	ldbu	r20,-1(r23)
   111e0:	18c00044 	addi	r3,r3,1
   111e4:	d8c00515 	stw	r3,20(sp)
   111e8:	003db906 	br	108d0 <_dtoa_r+0x984>
   111ec:	89400117 	ldw	r5,4(r17)
   111f0:	e009883a 	mov	r4,fp
   111f4:	0012e880 	call	12e88 <_Balloc>
   111f8:	89800417 	ldw	r6,16(r17)
   111fc:	89400304 	addi	r5,r17,12
   11200:	11000304 	addi	r4,r2,12
   11204:	31800084 	addi	r6,r6,2
   11208:	318d883a 	add	r6,r6,r6
   1120c:	318d883a 	add	r6,r6,r6
   11210:	1027883a 	mov	r19,r2
   11214:	000b4600 	call	b460 <memcpy>
   11218:	01800044 	movi	r6,1
   1121c:	980b883a 	mov	r5,r19
   11220:	e009883a 	mov	r4,fp
   11224:	00136080 	call	13608 <__lshift>
   11228:	1029883a 	mov	r20,r2
   1122c:	003ecc06 	br	10d60 <_dtoa_r+0xe14>
   11230:	00800e44 	movi	r2,57
   11234:	90809026 	beq	r18,r2,11478 <_dtoa_r+0x152c>
   11238:	92000044 	addi	r8,r18,1
   1123c:	003f1f06 	br	10ebc <_dtoa_r+0xf70>
   11240:	9011883a 	mov	r8,r18
   11244:	8825883a 	mov	r18,r17
   11248:	a023883a 	mov	r17,r20
   1124c:	003e2906 	br	10af4 <_dtoa_r+0xba8>
   11250:	002b883a 	mov	r21,zero
   11254:	0023883a 	mov	r17,zero
   11258:	003f5406 	br	10fac <_dtoa_r+0x1060>
   1125c:	61bfffc4 	addi	r6,r12,-1
   11260:	300490fa 	slli	r2,r6,3
   11264:	00c000b4 	movhi	r3,2
   11268:	18de4504 	addi	r3,r3,30996
   1126c:	1885883a 	add	r2,r3,r2
   11270:	11000017 	ldw	r4,0(r2)
   11274:	11400117 	ldw	r5,4(r2)
   11278:	d8800717 	ldw	r2,28(sp)
   1127c:	880f883a 	mov	r7,r17
   11280:	d9801215 	stw	r6,72(sp)
   11284:	800d883a 	mov	r6,r16
   11288:	db001615 	stw	r12,88(sp)
   1128c:	15c00044 	addi	r23,r2,1
   11290:	001a0740 	call	1a074 <__muldf3>
   11294:	d9401017 	ldw	r5,64(sp)
   11298:	d9000f17 	ldw	r4,60(sp)
   1129c:	d8c01515 	stw	r3,84(sp)
   112a0:	d8801415 	stw	r2,80(sp)
   112a4:	001b0880 	call	1b088 <__fixdfsi>
   112a8:	1009883a 	mov	r4,r2
   112ac:	1021883a 	mov	r16,r2
   112b0:	001b1080 	call	1b108 <__floatsidf>
   112b4:	d9000f17 	ldw	r4,60(sp)
   112b8:	d9401017 	ldw	r5,64(sp)
   112bc:	100d883a 	mov	r6,r2
   112c0:	180f883a 	mov	r7,r3
   112c4:	001a78c0 	call	1a78c <__subdf3>
   112c8:	1829883a 	mov	r20,r3
   112cc:	d8c00717 	ldw	r3,28(sp)
   112d0:	84000c04 	addi	r16,r16,48
   112d4:	1023883a 	mov	r17,r2
   112d8:	1c000005 	stb	r16,0(r3)
   112dc:	db001617 	ldw	r12,88(sp)
   112e0:	00800044 	movi	r2,1
   112e4:	60802226 	beq	r12,r2,11370 <_dtoa_r+0x1424>
   112e8:	d9c00717 	ldw	r7,28(sp)
   112ec:	8805883a 	mov	r2,r17
   112f0:	b82b883a 	mov	r21,r23
   112f4:	3b19883a 	add	r12,r7,r12
   112f8:	6023883a 	mov	r17,r12
   112fc:	a007883a 	mov	r3,r20
   11300:	dc800f15 	stw	r18,60(sp)
   11304:	000d883a 	mov	r6,zero
   11308:	01d00934 	movhi	r7,16420
   1130c:	1009883a 	mov	r4,r2
   11310:	180b883a 	mov	r5,r3
   11314:	001a0740 	call	1a074 <__muldf3>
   11318:	180b883a 	mov	r5,r3
   1131c:	1009883a 	mov	r4,r2
   11320:	1829883a 	mov	r20,r3
   11324:	1025883a 	mov	r18,r2
   11328:	001b0880 	call	1b088 <__fixdfsi>
   1132c:	1009883a 	mov	r4,r2
   11330:	1021883a 	mov	r16,r2
   11334:	001b1080 	call	1b108 <__floatsidf>
   11338:	100d883a 	mov	r6,r2
   1133c:	180f883a 	mov	r7,r3
   11340:	9009883a 	mov	r4,r18
   11344:	a00b883a 	mov	r5,r20
   11348:	84000c04 	addi	r16,r16,48
   1134c:	001a78c0 	call	1a78c <__subdf3>
   11350:	ad400044 	addi	r21,r21,1
   11354:	ac3fffc5 	stb	r16,-1(r21)
   11358:	ac7fea1e 	bne	r21,r17,11304 <_dtoa_r+0x13b8>
   1135c:	1023883a 	mov	r17,r2
   11360:	d8801217 	ldw	r2,72(sp)
   11364:	dc800f17 	ldw	r18,60(sp)
   11368:	1829883a 	mov	r20,r3
   1136c:	b8af883a 	add	r23,r23,r2
   11370:	d9001417 	ldw	r4,80(sp)
   11374:	d9401517 	ldw	r5,84(sp)
   11378:	000d883a 	mov	r6,zero
   1137c:	01cff834 	movhi	r7,16352
   11380:	0018d640 	call	18d64 <__adddf3>
   11384:	880d883a 	mov	r6,r17
   11388:	a00f883a 	mov	r7,r20
   1138c:	1009883a 	mov	r4,r2
   11390:	180b883a 	mov	r5,r3
   11394:	0019f800 	call	19f80 <__ledf2>
   11398:	10003e0e 	bge	r2,zero,11494 <_dtoa_r+0x1548>
   1139c:	d9001317 	ldw	r4,76(sp)
   113a0:	bd3fffc3 	ldbu	r20,-1(r23)
   113a4:	d9000515 	stw	r4,20(sp)
   113a8:	003d3b06 	br	10898 <_dtoa_r+0x94c>
   113ac:	0027883a 	mov	r19,zero
   113b0:	003f1b06 	br	11020 <_dtoa_r+0x10d4>
   113b4:	d8800817 	ldw	r2,32(sp)
   113b8:	11e9c83a 	sub	r20,r2,r7
   113bc:	0005883a 	mov	r2,zero
   113c0:	003d5406 	br	10914 <_dtoa_r+0x9c8>
   113c4:	00800044 	movi	r2,1
   113c8:	003dc706 	br	10ae8 <_dtoa_r+0xb9c>
   113cc:	d8c00217 	ldw	r3,8(sp)
   113d0:	00800d84 	movi	r2,54
   113d4:	dd400a17 	ldw	r21,40(sp)
   113d8:	10c5c83a 	sub	r2,r2,r3
   113dc:	dd000817 	ldw	r20,32(sp)
   113e0:	003d4c06 	br	10914 <_dtoa_r+0x9c8>
   113e4:	dc800f15 	stw	r18,60(sp)
   113e8:	dcc01015 	stw	r19,64(sp)
   113ec:	04000084 	movi	r16,2
   113f0:	003bed06 	br	103a8 <_dtoa_r+0x45c>
   113f4:	d9000617 	ldw	r4,24(sp)
   113f8:	203f0d26 	beq	r4,zero,11030 <_dtoa_r+0x10e4>
   113fc:	d9800c17 	ldw	r6,48(sp)
   11400:	01bcab0e 	bge	zero,r6,106b0 <_dtoa_r+0x764>
   11404:	d9401017 	ldw	r5,64(sp)
   11408:	d9000f17 	ldw	r4,60(sp)
   1140c:	000d883a 	mov	r6,zero
   11410:	01d00934 	movhi	r7,16420
   11414:	001a0740 	call	1a074 <__muldf3>
   11418:	81000044 	addi	r4,r16,1
   1141c:	d8800f15 	stw	r2,60(sp)
   11420:	d8c01015 	stw	r3,64(sp)
   11424:	001b1080 	call	1b108 <__floatsidf>
   11428:	d9800f17 	ldw	r6,60(sp)
   1142c:	d9c01017 	ldw	r7,64(sp)
   11430:	1009883a 	mov	r4,r2
   11434:	180b883a 	mov	r5,r3
   11438:	001a0740 	call	1a074 <__muldf3>
   1143c:	01d00734 	movhi	r7,16412
   11440:	000d883a 	mov	r6,zero
   11444:	1009883a 	mov	r4,r2
   11448:	180b883a 	mov	r5,r3
   1144c:	0018d640 	call	18d64 <__adddf3>
   11450:	d9c00517 	ldw	r7,20(sp)
   11454:	047f3034 	movhi	r17,64704
   11458:	1021883a 	mov	r16,r2
   1145c:	39ffffc4 	addi	r7,r7,-1
   11460:	d9c01315 	stw	r7,76(sp)
   11464:	1c63883a 	add	r17,r3,r17
   11468:	db000c17 	ldw	r12,48(sp)
   1146c:	003bea06 	br	10418 <_dtoa_r+0x4cc>
   11470:	dc000915 	stw	r16,36(sp)
   11474:	003e0e06 	br	10cb0 <_dtoa_r+0xd64>
   11478:	01000e44 	movi	r4,57
   1147c:	8825883a 	mov	r18,r17
   11480:	9dc00044 	addi	r23,r19,1
   11484:	99000005 	stb	r4,0(r19)
   11488:	a023883a 	mov	r17,r20
   1148c:	dc000915 	stw	r16,36(sp)
   11490:	003da406 	br	10b24 <_dtoa_r+0xbd8>
   11494:	d9801417 	ldw	r6,80(sp)
   11498:	d9c01517 	ldw	r7,84(sp)
   1149c:	0009883a 	mov	r4,zero
   114a0:	014ff834 	movhi	r5,16352
   114a4:	001a78c0 	call	1a78c <__subdf3>
   114a8:	880d883a 	mov	r6,r17
   114ac:	a00f883a 	mov	r7,r20
   114b0:	1009883a 	mov	r4,r2
   114b4:	180b883a 	mov	r5,r3
   114b8:	000b2100 	call	b210 <__gedf2>
   114bc:	00bc7c0e 	bge	zero,r2,106b0 <_dtoa_r+0x764>
   114c0:	01000c04 	movi	r4,48
   114c4:	00000106 	br	114cc <_dtoa_r+0x1580>
   114c8:	102f883a 	mov	r23,r2
   114cc:	b8bfffc4 	addi	r2,r23,-1
   114d0:	10c00007 	ldb	r3,0(r2)
   114d4:	193ffc26 	beq	r3,r4,114c8 <_dtoa_r+0x157c>
   114d8:	d9801317 	ldw	r6,76(sp)
   114dc:	d9800515 	stw	r6,20(sp)
   114e0:	003c4406 	br	105f4 <_dtoa_r+0x6a8>
   114e4:	d9801317 	ldw	r6,76(sp)
   114e8:	d9800515 	stw	r6,20(sp)
   114ec:	003cea06 	br	10898 <_dtoa_r+0x94c>
   114f0:	dd800f17 	ldw	r22,60(sp)
   114f4:	dcc01017 	ldw	r19,64(sp)
   114f8:	dc801217 	ldw	r18,72(sp)
   114fc:	003c6c06 	br	106b0 <_dtoa_r+0x764>
   11500:	903e031e 	bne	r18,zero,10d10 <_dtoa_r+0xdc4>
   11504:	003ebb06 	br	10ff4 <_dtoa_r+0x10a8>
   11508:	103e6c1e 	bne	r2,zero,10ebc <_dtoa_r+0xf70>
   1150c:	4080004c 	andi	r2,r8,1
   11510:	103e6a26 	beq	r2,zero,10ebc <_dtoa_r+0xf70>
   11514:	003e6606 	br	10eb0 <_dtoa_r+0xf64>
   11518:	d8c00317 	ldw	r3,12(sp)
   1151c:	00800084 	movi	r2,2
   11520:	10c02916 	blt	r2,r3,115c8 <_dtoa_r+0x167c>
   11524:	d9000c17 	ldw	r4,48(sp)
   11528:	003e8806 	br	10f4c <_dtoa_r+0x1000>
   1152c:	04000084 	movi	r16,2
   11530:	003b9d06 	br	103a8 <_dtoa_r+0x45c>
   11534:	d9001317 	ldw	r4,76(sp)
   11538:	d9000515 	stw	r4,20(sp)
   1153c:	003cd606 	br	10898 <_dtoa_r+0x94c>
   11540:	d8801317 	ldw	r2,76(sp)
   11544:	d8800515 	stw	r2,20(sp)
   11548:	003c2a06 	br	105f4 <_dtoa_r+0x6a8>
   1154c:	d9800317 	ldw	r6,12(sp)
   11550:	00800084 	movi	r2,2
   11554:	11801516 	blt	r2,r6,115ac <_dtoa_r+0x1660>
   11558:	d9c00c17 	ldw	r7,48(sp)
   1155c:	d9c00615 	stw	r7,24(sp)
   11560:	003df706 	br	10d40 <_dtoa_r+0xdf4>
   11564:	193d3926 	beq	r3,r4,10a4c <_dtoa_r+0xb00>
   11568:	00c00f04 	movi	r3,60
   1156c:	1885c83a 	sub	r2,r3,r2
   11570:	003ddf06 	br	10cf0 <_dtoa_r+0xda4>
   11574:	e009883a 	mov	r4,fp
   11578:	e0001115 	stw	zero,68(fp)
   1157c:	000b883a 	mov	r5,zero
   11580:	0012e880 	call	12e88 <_Balloc>
   11584:	d8800715 	stw	r2,28(sp)
   11588:	d8c00717 	ldw	r3,28(sp)
   1158c:	00bfffc4 	movi	r2,-1
   11590:	01000044 	movi	r4,1
   11594:	d8800c15 	stw	r2,48(sp)
   11598:	e0c01015 	stw	r3,64(fp)
   1159c:	d9000b15 	stw	r4,44(sp)
   115a0:	d8800615 	stw	r2,24(sp)
   115a4:	d8002215 	stw	zero,136(sp)
   115a8:	003c4106 	br	106b0 <_dtoa_r+0x764>
   115ac:	d8c00c17 	ldw	r3,48(sp)
   115b0:	d8c00615 	stw	r3,24(sp)
   115b4:	003e7006 	br	10f78 <_dtoa_r+0x102c>
   115b8:	04400044 	movi	r17,1
   115bc:	003b2006 	br	10240 <_dtoa_r+0x2f4>
   115c0:	000b883a 	mov	r5,zero
   115c4:	003b3d06 	br	102bc <_dtoa_r+0x370>
   115c8:	d8800c17 	ldw	r2,48(sp)
   115cc:	d8800615 	stw	r2,24(sp)
   115d0:	003e6906 	br	10f78 <_dtoa_r+0x102c>

000115d4 <__sflush_r>:
   115d4:	2880030b 	ldhu	r2,12(r5)
   115d8:	defffb04 	addi	sp,sp,-20
   115dc:	dcc00315 	stw	r19,12(sp)
   115e0:	dc400115 	stw	r17,4(sp)
   115e4:	dfc00415 	stw	ra,16(sp)
   115e8:	dc800215 	stw	r18,8(sp)
   115ec:	dc000015 	stw	r16,0(sp)
   115f0:	10c0020c 	andi	r3,r2,8
   115f4:	2823883a 	mov	r17,r5
   115f8:	2027883a 	mov	r19,r4
   115fc:	1800311e 	bne	r3,zero,116c4 <__sflush_r+0xf0>
   11600:	28c00117 	ldw	r3,4(r5)
   11604:	10820014 	ori	r2,r2,2048
   11608:	2880030d 	sth	r2,12(r5)
   1160c:	00c04b0e 	bge	zero,r3,1173c <__sflush_r+0x168>
   11610:	8a000a17 	ldw	r8,40(r17)
   11614:	40002326 	beq	r8,zero,116a4 <__sflush_r+0xd0>
   11618:	9c000017 	ldw	r16,0(r19)
   1161c:	10c4000c 	andi	r3,r2,4096
   11620:	98000015 	stw	zero,0(r19)
   11624:	18004826 	beq	r3,zero,11748 <__sflush_r+0x174>
   11628:	89801417 	ldw	r6,80(r17)
   1162c:	10c0010c 	andi	r3,r2,4
   11630:	18000626 	beq	r3,zero,1164c <__sflush_r+0x78>
   11634:	88c00117 	ldw	r3,4(r17)
   11638:	88800c17 	ldw	r2,48(r17)
   1163c:	30cdc83a 	sub	r6,r6,r3
   11640:	10000226 	beq	r2,zero,1164c <__sflush_r+0x78>
   11644:	88800f17 	ldw	r2,60(r17)
   11648:	308dc83a 	sub	r6,r6,r2
   1164c:	89400717 	ldw	r5,28(r17)
   11650:	000f883a 	mov	r7,zero
   11654:	9809883a 	mov	r4,r19
   11658:	403ee83a 	callr	r8
   1165c:	00ffffc4 	movi	r3,-1
   11660:	10c04426 	beq	r2,r3,11774 <__sflush_r+0x1a0>
   11664:	88c0030b 	ldhu	r3,12(r17)
   11668:	89000417 	ldw	r4,16(r17)
   1166c:	88000115 	stw	zero,4(r17)
   11670:	197dffcc 	andi	r5,r3,63487
   11674:	8940030d 	sth	r5,12(r17)
   11678:	89000015 	stw	r4,0(r17)
   1167c:	18c4000c 	andi	r3,r3,4096
   11680:	18002c1e 	bne	r3,zero,11734 <__sflush_r+0x160>
   11684:	89400c17 	ldw	r5,48(r17)
   11688:	9c000015 	stw	r16,0(r19)
   1168c:	28000526 	beq	r5,zero,116a4 <__sflush_r+0xd0>
   11690:	88801004 	addi	r2,r17,64
   11694:	28800226 	beq	r5,r2,116a0 <__sflush_r+0xcc>
   11698:	9809883a 	mov	r4,r19
   1169c:	0011d400 	call	11d40 <_free_r>
   116a0:	88000c15 	stw	zero,48(r17)
   116a4:	0005883a 	mov	r2,zero
   116a8:	dfc00417 	ldw	ra,16(sp)
   116ac:	dcc00317 	ldw	r19,12(sp)
   116b0:	dc800217 	ldw	r18,8(sp)
   116b4:	dc400117 	ldw	r17,4(sp)
   116b8:	dc000017 	ldw	r16,0(sp)
   116bc:	dec00504 	addi	sp,sp,20
   116c0:	f800283a 	ret
   116c4:	2c800417 	ldw	r18,16(r5)
   116c8:	903ff626 	beq	r18,zero,116a4 <__sflush_r+0xd0>
   116cc:	2c000017 	ldw	r16,0(r5)
   116d0:	108000cc 	andi	r2,r2,3
   116d4:	2c800015 	stw	r18,0(r5)
   116d8:	84a1c83a 	sub	r16,r16,r18
   116dc:	1000131e 	bne	r2,zero,1172c <__sflush_r+0x158>
   116e0:	28800517 	ldw	r2,20(r5)
   116e4:	88800215 	stw	r2,8(r17)
   116e8:	04000316 	blt	zero,r16,116f8 <__sflush_r+0x124>
   116ec:	003fed06 	br	116a4 <__sflush_r+0xd0>
   116f0:	90a5883a 	add	r18,r18,r2
   116f4:	043feb0e 	bge	zero,r16,116a4 <__sflush_r+0xd0>
   116f8:	88800917 	ldw	r2,36(r17)
   116fc:	89400717 	ldw	r5,28(r17)
   11700:	800f883a 	mov	r7,r16
   11704:	900d883a 	mov	r6,r18
   11708:	9809883a 	mov	r4,r19
   1170c:	103ee83a 	callr	r2
   11710:	80a1c83a 	sub	r16,r16,r2
   11714:	00bff616 	blt	zero,r2,116f0 <__sflush_r+0x11c>
   11718:	88c0030b 	ldhu	r3,12(r17)
   1171c:	00bfffc4 	movi	r2,-1
   11720:	18c01014 	ori	r3,r3,64
   11724:	88c0030d 	sth	r3,12(r17)
   11728:	003fdf06 	br	116a8 <__sflush_r+0xd4>
   1172c:	0005883a 	mov	r2,zero
   11730:	003fec06 	br	116e4 <__sflush_r+0x110>
   11734:	88801415 	stw	r2,80(r17)
   11738:	003fd206 	br	11684 <__sflush_r+0xb0>
   1173c:	28c00f17 	ldw	r3,60(r5)
   11740:	00ffb316 	blt	zero,r3,11610 <__sflush_r+0x3c>
   11744:	003fd706 	br	116a4 <__sflush_r+0xd0>
   11748:	89400717 	ldw	r5,28(r17)
   1174c:	000d883a 	mov	r6,zero
   11750:	01c00044 	movi	r7,1
   11754:	9809883a 	mov	r4,r19
   11758:	403ee83a 	callr	r8
   1175c:	100d883a 	mov	r6,r2
   11760:	00bfffc4 	movi	r2,-1
   11764:	30801426 	beq	r6,r2,117b8 <__sflush_r+0x1e4>
   11768:	8880030b 	ldhu	r2,12(r17)
   1176c:	8a000a17 	ldw	r8,40(r17)
   11770:	003fae06 	br	1162c <__sflush_r+0x58>
   11774:	98c00017 	ldw	r3,0(r19)
   11778:	183fba26 	beq	r3,zero,11664 <__sflush_r+0x90>
   1177c:	01000744 	movi	r4,29
   11780:	19000626 	beq	r3,r4,1179c <__sflush_r+0x1c8>
   11784:	01000584 	movi	r4,22
   11788:	19000426 	beq	r3,r4,1179c <__sflush_r+0x1c8>
   1178c:	88c0030b 	ldhu	r3,12(r17)
   11790:	18c01014 	ori	r3,r3,64
   11794:	88c0030d 	sth	r3,12(r17)
   11798:	003fc306 	br	116a8 <__sflush_r+0xd4>
   1179c:	8880030b 	ldhu	r2,12(r17)
   117a0:	88c00417 	ldw	r3,16(r17)
   117a4:	88000115 	stw	zero,4(r17)
   117a8:	10bdffcc 	andi	r2,r2,63487
   117ac:	8880030d 	sth	r2,12(r17)
   117b0:	88c00015 	stw	r3,0(r17)
   117b4:	003fb306 	br	11684 <__sflush_r+0xb0>
   117b8:	98800017 	ldw	r2,0(r19)
   117bc:	103fea26 	beq	r2,zero,11768 <__sflush_r+0x194>
   117c0:	00c00744 	movi	r3,29
   117c4:	10c00226 	beq	r2,r3,117d0 <__sflush_r+0x1fc>
   117c8:	00c00584 	movi	r3,22
   117cc:	10c0031e 	bne	r2,r3,117dc <__sflush_r+0x208>
   117d0:	9c000015 	stw	r16,0(r19)
   117d4:	0005883a 	mov	r2,zero
   117d8:	003fb306 	br	116a8 <__sflush_r+0xd4>
   117dc:	88c0030b 	ldhu	r3,12(r17)
   117e0:	3005883a 	mov	r2,r6
   117e4:	18c01014 	ori	r3,r3,64
   117e8:	88c0030d 	sth	r3,12(r17)
   117ec:	003fae06 	br	116a8 <__sflush_r+0xd4>

000117f0 <_fflush_r>:
   117f0:	defffd04 	addi	sp,sp,-12
   117f4:	dc000115 	stw	r16,4(sp)
   117f8:	dfc00215 	stw	ra,8(sp)
   117fc:	2021883a 	mov	r16,r4
   11800:	20000226 	beq	r4,zero,1180c <_fflush_r+0x1c>
   11804:	20800e17 	ldw	r2,56(r4)
   11808:	10000c26 	beq	r2,zero,1183c <_fflush_r+0x4c>
   1180c:	2880030f 	ldh	r2,12(r5)
   11810:	1000051e 	bne	r2,zero,11828 <_fflush_r+0x38>
   11814:	0005883a 	mov	r2,zero
   11818:	dfc00217 	ldw	ra,8(sp)
   1181c:	dc000117 	ldw	r16,4(sp)
   11820:	dec00304 	addi	sp,sp,12
   11824:	f800283a 	ret
   11828:	8009883a 	mov	r4,r16
   1182c:	dfc00217 	ldw	ra,8(sp)
   11830:	dc000117 	ldw	r16,4(sp)
   11834:	dec00304 	addi	sp,sp,12
   11838:	00115d41 	jmpi	115d4 <__sflush_r>
   1183c:	d9400015 	stw	r5,0(sp)
   11840:	0011bcc0 	call	11bcc <__sinit>
   11844:	d9400017 	ldw	r5,0(sp)
   11848:	003ff006 	br	1180c <_fflush_r+0x1c>

0001184c <fflush>:
   1184c:	20000526 	beq	r4,zero,11864 <fflush+0x18>
   11850:	008000f4 	movhi	r2,3
   11854:	10a66f04 	addi	r2,r2,-26180
   11858:	200b883a 	mov	r5,r4
   1185c:	11000017 	ldw	r4,0(r2)
   11860:	00117f01 	jmpi	117f0 <_fflush_r>
   11864:	008000f4 	movhi	r2,3
   11868:	10a66e04 	addi	r2,r2,-26184
   1186c:	11000017 	ldw	r4,0(r2)
   11870:	01400074 	movhi	r5,1
   11874:	2945fc04 	addi	r5,r5,6128
   11878:	00121141 	jmpi	12114 <_fwalk_reent>

0001187c <__fp_unlock>:
   1187c:	0005883a 	mov	r2,zero
   11880:	f800283a 	ret

00011884 <_cleanup_r>:
   11884:	01400074 	movhi	r5,1
   11888:	295b7204 	addi	r5,r5,28104
   1188c:	00121141 	jmpi	12114 <_fwalk_reent>

00011890 <__sinit.part.1>:
   11890:	defff704 	addi	sp,sp,-36
   11894:	00c00074 	movhi	r3,1
   11898:	dfc00815 	stw	ra,32(sp)
   1189c:	ddc00715 	stw	r23,28(sp)
   118a0:	dd800615 	stw	r22,24(sp)
   118a4:	dd400515 	stw	r21,20(sp)
   118a8:	dd000415 	stw	r20,16(sp)
   118ac:	dcc00315 	stw	r19,12(sp)
   118b0:	dc800215 	stw	r18,8(sp)
   118b4:	dc400115 	stw	r17,4(sp)
   118b8:	dc000015 	stw	r16,0(sp)
   118bc:	18c62104 	addi	r3,r3,6276
   118c0:	24000117 	ldw	r16,4(r4)
   118c4:	20c00f15 	stw	r3,60(r4)
   118c8:	2080bb04 	addi	r2,r4,748
   118cc:	00c000c4 	movi	r3,3
   118d0:	20c0b915 	stw	r3,740(r4)
   118d4:	2080ba15 	stw	r2,744(r4)
   118d8:	2000b815 	stw	zero,736(r4)
   118dc:	05c00204 	movi	r23,8
   118e0:	00800104 	movi	r2,4
   118e4:	2025883a 	mov	r18,r4
   118e8:	b80d883a 	mov	r6,r23
   118ec:	81001704 	addi	r4,r16,92
   118f0:	000b883a 	mov	r5,zero
   118f4:	80000015 	stw	zero,0(r16)
   118f8:	80000115 	stw	zero,4(r16)
   118fc:	80000215 	stw	zero,8(r16)
   11900:	8080030d 	sth	r2,12(r16)
   11904:	80001915 	stw	zero,100(r16)
   11908:	8000038d 	sth	zero,14(r16)
   1190c:	80000415 	stw	zero,16(r16)
   11910:	80000515 	stw	zero,20(r16)
   11914:	80000615 	stw	zero,24(r16)
   11918:	0012d600 	call	12d60 <memset>
   1191c:	05800074 	movhi	r22,1
   11920:	94400217 	ldw	r17,8(r18)
   11924:	05400074 	movhi	r21,1
   11928:	05000074 	movhi	r20,1
   1192c:	04c00074 	movhi	r19,1
   11930:	b58fd304 	addi	r22,r22,16204
   11934:	ad4fea04 	addi	r21,r21,16296
   11938:	a5100904 	addi	r20,r20,16420
   1193c:	9cd02004 	addi	r19,r19,16512
   11940:	85800815 	stw	r22,32(r16)
   11944:	85400915 	stw	r21,36(r16)
   11948:	85000a15 	stw	r20,40(r16)
   1194c:	84c00b15 	stw	r19,44(r16)
   11950:	84000715 	stw	r16,28(r16)
   11954:	00800284 	movi	r2,10
   11958:	8880030d 	sth	r2,12(r17)
   1195c:	00800044 	movi	r2,1
   11960:	b80d883a 	mov	r6,r23
   11964:	89001704 	addi	r4,r17,92
   11968:	000b883a 	mov	r5,zero
   1196c:	88000015 	stw	zero,0(r17)
   11970:	88000115 	stw	zero,4(r17)
   11974:	88000215 	stw	zero,8(r17)
   11978:	88001915 	stw	zero,100(r17)
   1197c:	8880038d 	sth	r2,14(r17)
   11980:	88000415 	stw	zero,16(r17)
   11984:	88000515 	stw	zero,20(r17)
   11988:	88000615 	stw	zero,24(r17)
   1198c:	0012d600 	call	12d60 <memset>
   11990:	94000317 	ldw	r16,12(r18)
   11994:	00800484 	movi	r2,18
   11998:	8c400715 	stw	r17,28(r17)
   1199c:	8d800815 	stw	r22,32(r17)
   119a0:	8d400915 	stw	r21,36(r17)
   119a4:	8d000a15 	stw	r20,40(r17)
   119a8:	8cc00b15 	stw	r19,44(r17)
   119ac:	8080030d 	sth	r2,12(r16)
   119b0:	00800084 	movi	r2,2
   119b4:	80000015 	stw	zero,0(r16)
   119b8:	80000115 	stw	zero,4(r16)
   119bc:	80000215 	stw	zero,8(r16)
   119c0:	80001915 	stw	zero,100(r16)
   119c4:	8080038d 	sth	r2,14(r16)
   119c8:	80000415 	stw	zero,16(r16)
   119cc:	80000515 	stw	zero,20(r16)
   119d0:	80000615 	stw	zero,24(r16)
   119d4:	b80d883a 	mov	r6,r23
   119d8:	000b883a 	mov	r5,zero
   119dc:	81001704 	addi	r4,r16,92
   119e0:	0012d600 	call	12d60 <memset>
   119e4:	00800044 	movi	r2,1
   119e8:	84000715 	stw	r16,28(r16)
   119ec:	85800815 	stw	r22,32(r16)
   119f0:	85400915 	stw	r21,36(r16)
   119f4:	85000a15 	stw	r20,40(r16)
   119f8:	84c00b15 	stw	r19,44(r16)
   119fc:	90800e15 	stw	r2,56(r18)
   11a00:	dfc00817 	ldw	ra,32(sp)
   11a04:	ddc00717 	ldw	r23,28(sp)
   11a08:	dd800617 	ldw	r22,24(sp)
   11a0c:	dd400517 	ldw	r21,20(sp)
   11a10:	dd000417 	ldw	r20,16(sp)
   11a14:	dcc00317 	ldw	r19,12(sp)
   11a18:	dc800217 	ldw	r18,8(sp)
   11a1c:	dc400117 	ldw	r17,4(sp)
   11a20:	dc000017 	ldw	r16,0(sp)
   11a24:	dec00904 	addi	sp,sp,36
   11a28:	f800283a 	ret

00011a2c <__fp_lock>:
   11a2c:	0005883a 	mov	r2,zero
   11a30:	f800283a 	ret

00011a34 <__sfmoreglue>:
   11a34:	defffc04 	addi	sp,sp,-16
   11a38:	dc400115 	stw	r17,4(sp)
   11a3c:	2c7fffc4 	addi	r17,r5,-1
   11a40:	8c401a24 	muli	r17,r17,104
   11a44:	dc800215 	stw	r18,8(sp)
   11a48:	2825883a 	mov	r18,r5
   11a4c:	89401d04 	addi	r5,r17,116
   11a50:	dc000015 	stw	r16,0(sp)
   11a54:	dfc00315 	stw	ra,12(sp)
   11a58:	00124700 	call	12470 <_malloc_r>
   11a5c:	1021883a 	mov	r16,r2
   11a60:	10000726 	beq	r2,zero,11a80 <__sfmoreglue+0x4c>
   11a64:	11000304 	addi	r4,r2,12
   11a68:	10000015 	stw	zero,0(r2)
   11a6c:	14800115 	stw	r18,4(r2)
   11a70:	11000215 	stw	r4,8(r2)
   11a74:	89801a04 	addi	r6,r17,104
   11a78:	000b883a 	mov	r5,zero
   11a7c:	0012d600 	call	12d60 <memset>
   11a80:	8005883a 	mov	r2,r16
   11a84:	dfc00317 	ldw	ra,12(sp)
   11a88:	dc800217 	ldw	r18,8(sp)
   11a8c:	dc400117 	ldw	r17,4(sp)
   11a90:	dc000017 	ldw	r16,0(sp)
   11a94:	dec00404 	addi	sp,sp,16
   11a98:	f800283a 	ret

00011a9c <__sfp>:
   11a9c:	defffb04 	addi	sp,sp,-20
   11aa0:	dc000015 	stw	r16,0(sp)
   11aa4:	040000f4 	movhi	r16,3
   11aa8:	84266e04 	addi	r16,r16,-26184
   11aac:	dcc00315 	stw	r19,12(sp)
   11ab0:	2027883a 	mov	r19,r4
   11ab4:	81000017 	ldw	r4,0(r16)
   11ab8:	dfc00415 	stw	ra,16(sp)
   11abc:	dc800215 	stw	r18,8(sp)
   11ac0:	20800e17 	ldw	r2,56(r4)
   11ac4:	dc400115 	stw	r17,4(sp)
   11ac8:	1000021e 	bne	r2,zero,11ad4 <__sfp+0x38>
   11acc:	00118900 	call	11890 <__sinit.part.1>
   11ad0:	81000017 	ldw	r4,0(r16)
   11ad4:	2480b804 	addi	r18,r4,736
   11ad8:	047fffc4 	movi	r17,-1
   11adc:	91000117 	ldw	r4,4(r18)
   11ae0:	94000217 	ldw	r16,8(r18)
   11ae4:	213fffc4 	addi	r4,r4,-1
   11ae8:	20000a16 	blt	r4,zero,11b14 <__sfp+0x78>
   11aec:	8080030f 	ldh	r2,12(r16)
   11af0:	10000c26 	beq	r2,zero,11b24 <__sfp+0x88>
   11af4:	80c01d04 	addi	r3,r16,116
   11af8:	00000206 	br	11b04 <__sfp+0x68>
   11afc:	18bfe60f 	ldh	r2,-104(r3)
   11b00:	10000826 	beq	r2,zero,11b24 <__sfp+0x88>
   11b04:	213fffc4 	addi	r4,r4,-1
   11b08:	1c3ffd04 	addi	r16,r3,-12
   11b0c:	18c01a04 	addi	r3,r3,104
   11b10:	247ffa1e 	bne	r4,r17,11afc <__sfp+0x60>
   11b14:	90800017 	ldw	r2,0(r18)
   11b18:	10001d26 	beq	r2,zero,11b90 <__sfp+0xf4>
   11b1c:	1025883a 	mov	r18,r2
   11b20:	003fee06 	br	11adc <__sfp+0x40>
   11b24:	00bfffc4 	movi	r2,-1
   11b28:	8080038d 	sth	r2,14(r16)
   11b2c:	00800044 	movi	r2,1
   11b30:	8080030d 	sth	r2,12(r16)
   11b34:	80001915 	stw	zero,100(r16)
   11b38:	80000015 	stw	zero,0(r16)
   11b3c:	80000215 	stw	zero,8(r16)
   11b40:	80000115 	stw	zero,4(r16)
   11b44:	80000415 	stw	zero,16(r16)
   11b48:	80000515 	stw	zero,20(r16)
   11b4c:	80000615 	stw	zero,24(r16)
   11b50:	01800204 	movi	r6,8
   11b54:	000b883a 	mov	r5,zero
   11b58:	81001704 	addi	r4,r16,92
   11b5c:	0012d600 	call	12d60 <memset>
   11b60:	8005883a 	mov	r2,r16
   11b64:	80000c15 	stw	zero,48(r16)
   11b68:	80000d15 	stw	zero,52(r16)
   11b6c:	80001115 	stw	zero,68(r16)
   11b70:	80001215 	stw	zero,72(r16)
   11b74:	dfc00417 	ldw	ra,16(sp)
   11b78:	dcc00317 	ldw	r19,12(sp)
   11b7c:	dc800217 	ldw	r18,8(sp)
   11b80:	dc400117 	ldw	r17,4(sp)
   11b84:	dc000017 	ldw	r16,0(sp)
   11b88:	dec00504 	addi	sp,sp,20
   11b8c:	f800283a 	ret
   11b90:	01400104 	movi	r5,4
   11b94:	9809883a 	mov	r4,r19
   11b98:	0011a340 	call	11a34 <__sfmoreglue>
   11b9c:	90800015 	stw	r2,0(r18)
   11ba0:	103fde1e 	bne	r2,zero,11b1c <__sfp+0x80>
   11ba4:	00800304 	movi	r2,12
   11ba8:	98800015 	stw	r2,0(r19)
   11bac:	0005883a 	mov	r2,zero
   11bb0:	003ff006 	br	11b74 <__sfp+0xd8>

00011bb4 <_cleanup>:
   11bb4:	008000f4 	movhi	r2,3
   11bb8:	10a66e04 	addi	r2,r2,-26184
   11bbc:	11000017 	ldw	r4,0(r2)
   11bc0:	01400074 	movhi	r5,1
   11bc4:	295b7204 	addi	r5,r5,28104
   11bc8:	00121141 	jmpi	12114 <_fwalk_reent>

00011bcc <__sinit>:
   11bcc:	20800e17 	ldw	r2,56(r4)
   11bd0:	10000126 	beq	r2,zero,11bd8 <__sinit+0xc>
   11bd4:	f800283a 	ret
   11bd8:	00118901 	jmpi	11890 <__sinit.part.1>

00011bdc <__sfp_lock_acquire>:
   11bdc:	f800283a 	ret

00011be0 <__sfp_lock_release>:
   11be0:	f800283a 	ret

00011be4 <__sinit_lock_acquire>:
   11be4:	f800283a 	ret

00011be8 <__sinit_lock_release>:
   11be8:	f800283a 	ret

00011bec <__fp_lock_all>:
   11bec:	008000f4 	movhi	r2,3
   11bf0:	10a66f04 	addi	r2,r2,-26180
   11bf4:	11000017 	ldw	r4,0(r2)
   11bf8:	01400074 	movhi	r5,1
   11bfc:	29468b04 	addi	r5,r5,6700
   11c00:	00120501 	jmpi	12050 <_fwalk>

00011c04 <__fp_unlock_all>:
   11c04:	008000f4 	movhi	r2,3
   11c08:	10a66f04 	addi	r2,r2,-26180
   11c0c:	11000017 	ldw	r4,0(r2)
   11c10:	01400074 	movhi	r5,1
   11c14:	29461f04 	addi	r5,r5,6268
   11c18:	00120501 	jmpi	12050 <_fwalk>

00011c1c <_malloc_trim_r>:
   11c1c:	defffb04 	addi	sp,sp,-20
   11c20:	dcc00315 	stw	r19,12(sp)
   11c24:	04c000f4 	movhi	r19,3
   11c28:	dc800215 	stw	r18,8(sp)
   11c2c:	dc400115 	stw	r17,4(sp)
   11c30:	dc000015 	stw	r16,0(sp)
   11c34:	dfc00415 	stw	ra,16(sp)
   11c38:	2821883a 	mov	r16,r5
   11c3c:	9ce04304 	addi	r19,r19,-32500
   11c40:	2025883a 	mov	r18,r4
   11c44:	001bcec0 	call	1bcec <__malloc_lock>
   11c48:	98800217 	ldw	r2,8(r19)
   11c4c:	14400117 	ldw	r17,4(r2)
   11c50:	00bfff04 	movi	r2,-4
   11c54:	88a2703a 	and	r17,r17,r2
   11c58:	8c21c83a 	sub	r16,r17,r16
   11c5c:	8403fbc4 	addi	r16,r16,4079
   11c60:	8020d33a 	srli	r16,r16,12
   11c64:	0083ffc4 	movi	r2,4095
   11c68:	843fffc4 	addi	r16,r16,-1
   11c6c:	8020933a 	slli	r16,r16,12
   11c70:	1400060e 	bge	r2,r16,11c8c <_malloc_trim_r+0x70>
   11c74:	000b883a 	mov	r5,zero
   11c78:	9009883a 	mov	r4,r18
   11c7c:	0013ef80 	call	13ef8 <_sbrk_r>
   11c80:	98c00217 	ldw	r3,8(r19)
   11c84:	1c47883a 	add	r3,r3,r17
   11c88:	10c00a26 	beq	r2,r3,11cb4 <_malloc_trim_r+0x98>
   11c8c:	9009883a 	mov	r4,r18
   11c90:	001be0c0 	call	1be0c <__malloc_unlock>
   11c94:	0005883a 	mov	r2,zero
   11c98:	dfc00417 	ldw	ra,16(sp)
   11c9c:	dcc00317 	ldw	r19,12(sp)
   11ca0:	dc800217 	ldw	r18,8(sp)
   11ca4:	dc400117 	ldw	r17,4(sp)
   11ca8:	dc000017 	ldw	r16,0(sp)
   11cac:	dec00504 	addi	sp,sp,20
   11cb0:	f800283a 	ret
   11cb4:	040bc83a 	sub	r5,zero,r16
   11cb8:	9009883a 	mov	r4,r18
   11cbc:	0013ef80 	call	13ef8 <_sbrk_r>
   11cc0:	00ffffc4 	movi	r3,-1
   11cc4:	10c00d26 	beq	r2,r3,11cfc <_malloc_trim_r+0xe0>
   11cc8:	00c000f4 	movhi	r3,3
   11ccc:	18ee5b04 	addi	r3,r3,-18068
   11cd0:	18800017 	ldw	r2,0(r3)
   11cd4:	99000217 	ldw	r4,8(r19)
   11cd8:	8c23c83a 	sub	r17,r17,r16
   11cdc:	8c400054 	ori	r17,r17,1
   11ce0:	1421c83a 	sub	r16,r2,r16
   11ce4:	24400115 	stw	r17,4(r4)
   11ce8:	9009883a 	mov	r4,r18
   11cec:	1c000015 	stw	r16,0(r3)
   11cf0:	001be0c0 	call	1be0c <__malloc_unlock>
   11cf4:	00800044 	movi	r2,1
   11cf8:	003fe706 	br	11c98 <_malloc_trim_r+0x7c>
   11cfc:	000b883a 	mov	r5,zero
   11d00:	9009883a 	mov	r4,r18
   11d04:	0013ef80 	call	13ef8 <_sbrk_r>
   11d08:	99000217 	ldw	r4,8(r19)
   11d0c:	014003c4 	movi	r5,15
   11d10:	1107c83a 	sub	r3,r2,r4
   11d14:	28ffdd0e 	bge	r5,r3,11c8c <_malloc_trim_r+0x70>
   11d18:	014000f4 	movhi	r5,3
   11d1c:	29667104 	addi	r5,r5,-26172
   11d20:	29400017 	ldw	r5,0(r5)
   11d24:	18c00054 	ori	r3,r3,1
   11d28:	20c00115 	stw	r3,4(r4)
   11d2c:	00c000f4 	movhi	r3,3
   11d30:	1145c83a 	sub	r2,r2,r5
   11d34:	18ee5b04 	addi	r3,r3,-18068
   11d38:	18800015 	stw	r2,0(r3)
   11d3c:	003fd306 	br	11c8c <_malloc_trim_r+0x70>

00011d40 <_free_r>:
   11d40:	28004126 	beq	r5,zero,11e48 <_free_r+0x108>
   11d44:	defffd04 	addi	sp,sp,-12
   11d48:	dc400115 	stw	r17,4(sp)
   11d4c:	dc000015 	stw	r16,0(sp)
   11d50:	2023883a 	mov	r17,r4
   11d54:	2821883a 	mov	r16,r5
   11d58:	dfc00215 	stw	ra,8(sp)
   11d5c:	001bcec0 	call	1bcec <__malloc_lock>
   11d60:	81ffff17 	ldw	r7,-4(r16)
   11d64:	00bfff84 	movi	r2,-2
   11d68:	010000f4 	movhi	r4,3
   11d6c:	81bffe04 	addi	r6,r16,-8
   11d70:	3884703a 	and	r2,r7,r2
   11d74:	21204304 	addi	r4,r4,-32500
   11d78:	308b883a 	add	r5,r6,r2
   11d7c:	2a400117 	ldw	r9,4(r5)
   11d80:	22000217 	ldw	r8,8(r4)
   11d84:	00ffff04 	movi	r3,-4
   11d88:	48c6703a 	and	r3,r9,r3
   11d8c:	2a005726 	beq	r5,r8,11eec <_free_r+0x1ac>
   11d90:	28c00115 	stw	r3,4(r5)
   11d94:	39c0004c 	andi	r7,r7,1
   11d98:	3800091e 	bne	r7,zero,11dc0 <_free_r+0x80>
   11d9c:	823ffe17 	ldw	r8,-8(r16)
   11da0:	22400204 	addi	r9,r4,8
   11da4:	320dc83a 	sub	r6,r6,r8
   11da8:	31c00217 	ldw	r7,8(r6)
   11dac:	1205883a 	add	r2,r2,r8
   11db0:	3a406526 	beq	r7,r9,11f48 <_free_r+0x208>
   11db4:	32000317 	ldw	r8,12(r6)
   11db8:	3a000315 	stw	r8,12(r7)
   11dbc:	41c00215 	stw	r7,8(r8)
   11dc0:	28cf883a 	add	r7,r5,r3
   11dc4:	39c00117 	ldw	r7,4(r7)
   11dc8:	39c0004c 	andi	r7,r7,1
   11dcc:	38003a26 	beq	r7,zero,11eb8 <_free_r+0x178>
   11dd0:	10c00054 	ori	r3,r2,1
   11dd4:	30c00115 	stw	r3,4(r6)
   11dd8:	3087883a 	add	r3,r6,r2
   11ddc:	18800015 	stw	r2,0(r3)
   11de0:	00c07fc4 	movi	r3,511
   11de4:	18801936 	bltu	r3,r2,11e4c <_free_r+0x10c>
   11de8:	1004d0fa 	srli	r2,r2,3
   11dec:	01c00044 	movi	r7,1
   11df0:	21400117 	ldw	r5,4(r4)
   11df4:	10c00044 	addi	r3,r2,1
   11df8:	18c7883a 	add	r3,r3,r3
   11dfc:	1005d0ba 	srai	r2,r2,2
   11e00:	18c7883a 	add	r3,r3,r3
   11e04:	18c7883a 	add	r3,r3,r3
   11e08:	1907883a 	add	r3,r3,r4
   11e0c:	3884983a 	sll	r2,r7,r2
   11e10:	19c00017 	ldw	r7,0(r3)
   11e14:	1a3ffe04 	addi	r8,r3,-8
   11e18:	1144b03a 	or	r2,r2,r5
   11e1c:	32000315 	stw	r8,12(r6)
   11e20:	31c00215 	stw	r7,8(r6)
   11e24:	20800115 	stw	r2,4(r4)
   11e28:	19800015 	stw	r6,0(r3)
   11e2c:	39800315 	stw	r6,12(r7)
   11e30:	8809883a 	mov	r4,r17
   11e34:	dfc00217 	ldw	ra,8(sp)
   11e38:	dc400117 	ldw	r17,4(sp)
   11e3c:	dc000017 	ldw	r16,0(sp)
   11e40:	dec00304 	addi	sp,sp,12
   11e44:	001be0c1 	jmpi	1be0c <__malloc_unlock>
   11e48:	f800283a 	ret
   11e4c:	100ad27a 	srli	r5,r2,9
   11e50:	00c00104 	movi	r3,4
   11e54:	19404a36 	bltu	r3,r5,11f80 <_free_r+0x240>
   11e58:	100ad1ba 	srli	r5,r2,6
   11e5c:	28c00e44 	addi	r3,r5,57
   11e60:	18c7883a 	add	r3,r3,r3
   11e64:	29400e04 	addi	r5,r5,56
   11e68:	18c7883a 	add	r3,r3,r3
   11e6c:	18c7883a 	add	r3,r3,r3
   11e70:	1909883a 	add	r4,r3,r4
   11e74:	20c00017 	ldw	r3,0(r4)
   11e78:	01c000f4 	movhi	r7,3
   11e7c:	213ffe04 	addi	r4,r4,-8
   11e80:	39e04304 	addi	r7,r7,-32500
   11e84:	20c04426 	beq	r4,r3,11f98 <_free_r+0x258>
   11e88:	01ffff04 	movi	r7,-4
   11e8c:	19400117 	ldw	r5,4(r3)
   11e90:	29ca703a 	and	r5,r5,r7
   11e94:	1140022e 	bgeu	r2,r5,11ea0 <_free_r+0x160>
   11e98:	18c00217 	ldw	r3,8(r3)
   11e9c:	20fffb1e 	bne	r4,r3,11e8c <_free_r+0x14c>
   11ea0:	19000317 	ldw	r4,12(r3)
   11ea4:	31000315 	stw	r4,12(r6)
   11ea8:	30c00215 	stw	r3,8(r6)
   11eac:	21800215 	stw	r6,8(r4)
   11eb0:	19800315 	stw	r6,12(r3)
   11eb4:	003fde06 	br	11e30 <_free_r+0xf0>
   11eb8:	29c00217 	ldw	r7,8(r5)
   11ebc:	10c5883a 	add	r2,r2,r3
   11ec0:	00c000f4 	movhi	r3,3
   11ec4:	18e04504 	addi	r3,r3,-32492
   11ec8:	38c03b26 	beq	r7,r3,11fb8 <_free_r+0x278>
   11ecc:	2a000317 	ldw	r8,12(r5)
   11ed0:	11400054 	ori	r5,r2,1
   11ed4:	3087883a 	add	r3,r6,r2
   11ed8:	3a000315 	stw	r8,12(r7)
   11edc:	41c00215 	stw	r7,8(r8)
   11ee0:	31400115 	stw	r5,4(r6)
   11ee4:	18800015 	stw	r2,0(r3)
   11ee8:	003fbd06 	br	11de0 <_free_r+0xa0>
   11eec:	39c0004c 	andi	r7,r7,1
   11ef0:	10c5883a 	add	r2,r2,r3
   11ef4:	3800071e 	bne	r7,zero,11f14 <_free_r+0x1d4>
   11ef8:	81fffe17 	ldw	r7,-8(r16)
   11efc:	31cdc83a 	sub	r6,r6,r7
   11f00:	30c00317 	ldw	r3,12(r6)
   11f04:	31400217 	ldw	r5,8(r6)
   11f08:	11c5883a 	add	r2,r2,r7
   11f0c:	28c00315 	stw	r3,12(r5)
   11f10:	19400215 	stw	r5,8(r3)
   11f14:	10c00054 	ori	r3,r2,1
   11f18:	30c00115 	stw	r3,4(r6)
   11f1c:	00c000f4 	movhi	r3,3
   11f20:	18e67204 	addi	r3,r3,-26168
   11f24:	18c00017 	ldw	r3,0(r3)
   11f28:	21800215 	stw	r6,8(r4)
   11f2c:	10ffc036 	bltu	r2,r3,11e30 <_free_r+0xf0>
   11f30:	008000f4 	movhi	r2,3
   11f34:	10ae3904 	addi	r2,r2,-18204
   11f38:	11400017 	ldw	r5,0(r2)
   11f3c:	8809883a 	mov	r4,r17
   11f40:	0011c1c0 	call	11c1c <_malloc_trim_r>
   11f44:	003fba06 	br	11e30 <_free_r+0xf0>
   11f48:	28c9883a 	add	r4,r5,r3
   11f4c:	21000117 	ldw	r4,4(r4)
   11f50:	2100004c 	andi	r4,r4,1
   11f54:	2000391e 	bne	r4,zero,1203c <_free_r+0x2fc>
   11f58:	29c00217 	ldw	r7,8(r5)
   11f5c:	29000317 	ldw	r4,12(r5)
   11f60:	1885883a 	add	r2,r3,r2
   11f64:	10c00054 	ori	r3,r2,1
   11f68:	39000315 	stw	r4,12(r7)
   11f6c:	21c00215 	stw	r7,8(r4)
   11f70:	30c00115 	stw	r3,4(r6)
   11f74:	308d883a 	add	r6,r6,r2
   11f78:	30800015 	stw	r2,0(r6)
   11f7c:	003fac06 	br	11e30 <_free_r+0xf0>
   11f80:	00c00504 	movi	r3,20
   11f84:	19401536 	bltu	r3,r5,11fdc <_free_r+0x29c>
   11f88:	28c01704 	addi	r3,r5,92
   11f8c:	18c7883a 	add	r3,r3,r3
   11f90:	294016c4 	addi	r5,r5,91
   11f94:	003fb406 	br	11e68 <_free_r+0x128>
   11f98:	280bd0ba 	srai	r5,r5,2
   11f9c:	00c00044 	movi	r3,1
   11fa0:	38800117 	ldw	r2,4(r7)
   11fa4:	194a983a 	sll	r5,r3,r5
   11fa8:	2007883a 	mov	r3,r4
   11fac:	2884b03a 	or	r2,r5,r2
   11fb0:	38800115 	stw	r2,4(r7)
   11fb4:	003fbb06 	br	11ea4 <_free_r+0x164>
   11fb8:	21800515 	stw	r6,20(r4)
   11fbc:	21800415 	stw	r6,16(r4)
   11fc0:	10c00054 	ori	r3,r2,1
   11fc4:	31c00315 	stw	r7,12(r6)
   11fc8:	31c00215 	stw	r7,8(r6)
   11fcc:	30c00115 	stw	r3,4(r6)
   11fd0:	308d883a 	add	r6,r6,r2
   11fd4:	30800015 	stw	r2,0(r6)
   11fd8:	003f9506 	br	11e30 <_free_r+0xf0>
   11fdc:	00c01504 	movi	r3,84
   11fe0:	19400536 	bltu	r3,r5,11ff8 <_free_r+0x2b8>
   11fe4:	100ad33a 	srli	r5,r2,12
   11fe8:	28c01bc4 	addi	r3,r5,111
   11fec:	18c7883a 	add	r3,r3,r3
   11ff0:	29401b84 	addi	r5,r5,110
   11ff4:	003f9c06 	br	11e68 <_free_r+0x128>
   11ff8:	00c05504 	movi	r3,340
   11ffc:	19400536 	bltu	r3,r5,12014 <_free_r+0x2d4>
   12000:	100ad3fa 	srli	r5,r2,15
   12004:	28c01e04 	addi	r3,r5,120
   12008:	18c7883a 	add	r3,r3,r3
   1200c:	29401dc4 	addi	r5,r5,119
   12010:	003f9506 	br	11e68 <_free_r+0x128>
   12014:	00c15504 	movi	r3,1364
   12018:	19400536 	bltu	r3,r5,12030 <_free_r+0x2f0>
   1201c:	100ad4ba 	srli	r5,r2,18
   12020:	28c01f44 	addi	r3,r5,125
   12024:	18c7883a 	add	r3,r3,r3
   12028:	29401f04 	addi	r5,r5,124
   1202c:	003f8e06 	br	11e68 <_free_r+0x128>
   12030:	00c03f84 	movi	r3,254
   12034:	01401f84 	movi	r5,126
   12038:	003f8b06 	br	11e68 <_free_r+0x128>
   1203c:	10c00054 	ori	r3,r2,1
   12040:	30c00115 	stw	r3,4(r6)
   12044:	308d883a 	add	r6,r6,r2
   12048:	30800015 	stw	r2,0(r6)
   1204c:	003f7806 	br	11e30 <_free_r+0xf0>

00012050 <_fwalk>:
   12050:	defff704 	addi	sp,sp,-36
   12054:	dd000415 	stw	r20,16(sp)
   12058:	dfc00815 	stw	ra,32(sp)
   1205c:	ddc00715 	stw	r23,28(sp)
   12060:	dd800615 	stw	r22,24(sp)
   12064:	dd400515 	stw	r21,20(sp)
   12068:	dcc00315 	stw	r19,12(sp)
   1206c:	dc800215 	stw	r18,8(sp)
   12070:	dc400115 	stw	r17,4(sp)
   12074:	dc000015 	stw	r16,0(sp)
   12078:	2500b804 	addi	r20,r4,736
   1207c:	a0002326 	beq	r20,zero,1210c <_fwalk+0xbc>
   12080:	282b883a 	mov	r21,r5
   12084:	002f883a 	mov	r23,zero
   12088:	05800044 	movi	r22,1
   1208c:	04ffffc4 	movi	r19,-1
   12090:	a4400117 	ldw	r17,4(r20)
   12094:	a4800217 	ldw	r18,8(r20)
   12098:	8c7fffc4 	addi	r17,r17,-1
   1209c:	88000d16 	blt	r17,zero,120d4 <_fwalk+0x84>
   120a0:	94000304 	addi	r16,r18,12
   120a4:	94800384 	addi	r18,r18,14
   120a8:	8080000b 	ldhu	r2,0(r16)
   120ac:	8c7fffc4 	addi	r17,r17,-1
   120b0:	813ffd04 	addi	r4,r16,-12
   120b4:	b080042e 	bgeu	r22,r2,120c8 <_fwalk+0x78>
   120b8:	9080000f 	ldh	r2,0(r18)
   120bc:	14c00226 	beq	r2,r19,120c8 <_fwalk+0x78>
   120c0:	a83ee83a 	callr	r21
   120c4:	b8aeb03a 	or	r23,r23,r2
   120c8:	84001a04 	addi	r16,r16,104
   120cc:	94801a04 	addi	r18,r18,104
   120d0:	8cfff51e 	bne	r17,r19,120a8 <_fwalk+0x58>
   120d4:	a5000017 	ldw	r20,0(r20)
   120d8:	a03fed1e 	bne	r20,zero,12090 <_fwalk+0x40>
   120dc:	b805883a 	mov	r2,r23
   120e0:	dfc00817 	ldw	ra,32(sp)
   120e4:	ddc00717 	ldw	r23,28(sp)
   120e8:	dd800617 	ldw	r22,24(sp)
   120ec:	dd400517 	ldw	r21,20(sp)
   120f0:	dd000417 	ldw	r20,16(sp)
   120f4:	dcc00317 	ldw	r19,12(sp)
   120f8:	dc800217 	ldw	r18,8(sp)
   120fc:	dc400117 	ldw	r17,4(sp)
   12100:	dc000017 	ldw	r16,0(sp)
   12104:	dec00904 	addi	sp,sp,36
   12108:	f800283a 	ret
   1210c:	002f883a 	mov	r23,zero
   12110:	003ff206 	br	120dc <_fwalk+0x8c>

00012114 <_fwalk_reent>:
   12114:	defff704 	addi	sp,sp,-36
   12118:	dd000415 	stw	r20,16(sp)
   1211c:	dfc00815 	stw	ra,32(sp)
   12120:	ddc00715 	stw	r23,28(sp)
   12124:	dd800615 	stw	r22,24(sp)
   12128:	dd400515 	stw	r21,20(sp)
   1212c:	dcc00315 	stw	r19,12(sp)
   12130:	dc800215 	stw	r18,8(sp)
   12134:	dc400115 	stw	r17,4(sp)
   12138:	dc000015 	stw	r16,0(sp)
   1213c:	2500b804 	addi	r20,r4,736
   12140:	a0002326 	beq	r20,zero,121d0 <_fwalk_reent+0xbc>
   12144:	282b883a 	mov	r21,r5
   12148:	2027883a 	mov	r19,r4
   1214c:	002f883a 	mov	r23,zero
   12150:	05800044 	movi	r22,1
   12154:	04bfffc4 	movi	r18,-1
   12158:	a4400117 	ldw	r17,4(r20)
   1215c:	a4000217 	ldw	r16,8(r20)
   12160:	8c7fffc4 	addi	r17,r17,-1
   12164:	88000c16 	blt	r17,zero,12198 <_fwalk_reent+0x84>
   12168:	84000304 	addi	r16,r16,12
   1216c:	8080000b 	ldhu	r2,0(r16)
   12170:	8c7fffc4 	addi	r17,r17,-1
   12174:	817ffd04 	addi	r5,r16,-12
   12178:	b080052e 	bgeu	r22,r2,12190 <_fwalk_reent+0x7c>
   1217c:	8080008f 	ldh	r2,2(r16)
   12180:	9809883a 	mov	r4,r19
   12184:	14800226 	beq	r2,r18,12190 <_fwalk_reent+0x7c>
   12188:	a83ee83a 	callr	r21
   1218c:	b8aeb03a 	or	r23,r23,r2
   12190:	84001a04 	addi	r16,r16,104
   12194:	8cbff51e 	bne	r17,r18,1216c <_fwalk_reent+0x58>
   12198:	a5000017 	ldw	r20,0(r20)
   1219c:	a03fee1e 	bne	r20,zero,12158 <_fwalk_reent+0x44>
   121a0:	b805883a 	mov	r2,r23
   121a4:	dfc00817 	ldw	ra,32(sp)
   121a8:	ddc00717 	ldw	r23,28(sp)
   121ac:	dd800617 	ldw	r22,24(sp)
   121b0:	dd400517 	ldw	r21,20(sp)
   121b4:	dd000417 	ldw	r20,16(sp)
   121b8:	dcc00317 	ldw	r19,12(sp)
   121bc:	dc800217 	ldw	r18,8(sp)
   121c0:	dc400117 	ldw	r17,4(sp)
   121c4:	dc000017 	ldw	r16,0(sp)
   121c8:	dec00904 	addi	sp,sp,36
   121cc:	f800283a 	ret
   121d0:	002f883a 	mov	r23,zero
   121d4:	003ff206 	br	121a0 <_fwalk_reent+0x8c>

000121d8 <_setlocale_r>:
   121d8:	30001b26 	beq	r6,zero,12248 <_setlocale_r+0x70>
   121dc:	014000b4 	movhi	r5,2
   121e0:	defffe04 	addi	sp,sp,-8
   121e4:	295e2b04 	addi	r5,r5,30892
   121e8:	3009883a 	mov	r4,r6
   121ec:	dc000015 	stw	r16,0(sp)
   121f0:	dfc00115 	stw	ra,4(sp)
   121f4:	3021883a 	mov	r16,r6
   121f8:	00140880 	call	14088 <strcmp>
   121fc:	1000061e 	bne	r2,zero,12218 <_setlocale_r+0x40>
   12200:	008000b4 	movhi	r2,2
   12204:	109e2a04 	addi	r2,r2,30888
   12208:	dfc00117 	ldw	ra,4(sp)
   1220c:	dc000017 	ldw	r16,0(sp)
   12210:	dec00204 	addi	sp,sp,8
   12214:	f800283a 	ret
   12218:	014000b4 	movhi	r5,2
   1221c:	295e2a04 	addi	r5,r5,30888
   12220:	8009883a 	mov	r4,r16
   12224:	00140880 	call	14088 <strcmp>
   12228:	103ff526 	beq	r2,zero,12200 <_setlocale_r+0x28>
   1222c:	014000b4 	movhi	r5,2
   12230:	295e0d04 	addi	r5,r5,30772
   12234:	8009883a 	mov	r4,r16
   12238:	00140880 	call	14088 <strcmp>
   1223c:	103ff026 	beq	r2,zero,12200 <_setlocale_r+0x28>
   12240:	0005883a 	mov	r2,zero
   12244:	003ff006 	br	12208 <_setlocale_r+0x30>
   12248:	008000b4 	movhi	r2,2
   1224c:	109e2a04 	addi	r2,r2,30888
   12250:	f800283a 	ret

00012254 <__locale_charset>:
   12254:	008000f4 	movhi	r2,3
   12258:	10a02d04 	addi	r2,r2,-32588
   1225c:	f800283a 	ret

00012260 <__locale_mb_cur_max>:
   12260:	008000f4 	movhi	r2,3
   12264:	10a67004 	addi	r2,r2,-26176
   12268:	10800017 	ldw	r2,0(r2)
   1226c:	f800283a 	ret

00012270 <__locale_msgcharset>:
   12270:	008000f4 	movhi	r2,3
   12274:	10a02504 	addi	r2,r2,-32620
   12278:	f800283a 	ret

0001227c <__locale_cjk_lang>:
   1227c:	0005883a 	mov	r2,zero
   12280:	f800283a 	ret

00012284 <_localeconv_r>:
   12284:	008000f4 	movhi	r2,3
   12288:	10a03504 	addi	r2,r2,-32556
   1228c:	f800283a 	ret

00012290 <setlocale>:
   12290:	008000f4 	movhi	r2,3
   12294:	10a66f04 	addi	r2,r2,-26180
   12298:	280d883a 	mov	r6,r5
   1229c:	200b883a 	mov	r5,r4
   122a0:	11000017 	ldw	r4,0(r2)
   122a4:	00121d81 	jmpi	121d8 <_setlocale_r>

000122a8 <localeconv>:
   122a8:	008000f4 	movhi	r2,3
   122ac:	10a03504 	addi	r2,r2,-32556
   122b0:	f800283a 	ret

000122b4 <__smakebuf_r>:
   122b4:	2880030b 	ldhu	r2,12(r5)
   122b8:	10c0008c 	andi	r3,r2,2
   122bc:	1800411e 	bne	r3,zero,123c4 <__smakebuf_r+0x110>
   122c0:	deffec04 	addi	sp,sp,-80
   122c4:	dc000f15 	stw	r16,60(sp)
   122c8:	2821883a 	mov	r16,r5
   122cc:	2940038f 	ldh	r5,14(r5)
   122d0:	dc401015 	stw	r17,64(sp)
   122d4:	dfc01315 	stw	ra,76(sp)
   122d8:	dcc01215 	stw	r19,72(sp)
   122dc:	dc801115 	stw	r18,68(sp)
   122e0:	2023883a 	mov	r17,r4
   122e4:	28001c16 	blt	r5,zero,12358 <__smakebuf_r+0xa4>
   122e8:	d80d883a 	mov	r6,sp
   122ec:	00170d40 	call	170d4 <_fstat_r>
   122f0:	10001816 	blt	r2,zero,12354 <__smakebuf_r+0xa0>
   122f4:	d8800117 	ldw	r2,4(sp)
   122f8:	00e00014 	movui	r3,32768
   122fc:	10bc000c 	andi	r2,r2,61440
   12300:	14c80020 	cmpeqi	r19,r2,8192
   12304:	10c03726 	beq	r2,r3,123e4 <__smakebuf_r+0x130>
   12308:	80c0030b 	ldhu	r3,12(r16)
   1230c:	18c20014 	ori	r3,r3,2048
   12310:	80c0030d 	sth	r3,12(r16)
   12314:	00c80004 	movi	r3,8192
   12318:	10c0521e 	bne	r2,r3,12464 <__smakebuf_r+0x1b0>
   1231c:	8140038f 	ldh	r5,14(r16)
   12320:	8809883a 	mov	r4,r17
   12324:	00175ec0 	call	175ec <_isatty_r>
   12328:	10004c26 	beq	r2,zero,1245c <__smakebuf_r+0x1a8>
   1232c:	8080030b 	ldhu	r2,12(r16)
   12330:	80c010c4 	addi	r3,r16,67
   12334:	80c00015 	stw	r3,0(r16)
   12338:	10800054 	ori	r2,r2,1
   1233c:	8080030d 	sth	r2,12(r16)
   12340:	00800044 	movi	r2,1
   12344:	80c00415 	stw	r3,16(r16)
   12348:	80800515 	stw	r2,20(r16)
   1234c:	04810004 	movi	r18,1024
   12350:	00000706 	br	12370 <__smakebuf_r+0xbc>
   12354:	8080030b 	ldhu	r2,12(r16)
   12358:	10c0200c 	andi	r3,r2,128
   1235c:	18001f1e 	bne	r3,zero,123dc <__smakebuf_r+0x128>
   12360:	04810004 	movi	r18,1024
   12364:	10820014 	ori	r2,r2,2048
   12368:	8080030d 	sth	r2,12(r16)
   1236c:	0027883a 	mov	r19,zero
   12370:	900b883a 	mov	r5,r18
   12374:	8809883a 	mov	r4,r17
   12378:	00124700 	call	12470 <_malloc_r>
   1237c:	10002c26 	beq	r2,zero,12430 <__smakebuf_r+0x17c>
   12380:	80c0030b 	ldhu	r3,12(r16)
   12384:	01000074 	movhi	r4,1
   12388:	21062104 	addi	r4,r4,6276
   1238c:	89000f15 	stw	r4,60(r17)
   12390:	18c02014 	ori	r3,r3,128
   12394:	80c0030d 	sth	r3,12(r16)
   12398:	80800015 	stw	r2,0(r16)
   1239c:	80800415 	stw	r2,16(r16)
   123a0:	84800515 	stw	r18,20(r16)
   123a4:	98001a1e 	bne	r19,zero,12410 <__smakebuf_r+0x15c>
   123a8:	dfc01317 	ldw	ra,76(sp)
   123ac:	dcc01217 	ldw	r19,72(sp)
   123b0:	dc801117 	ldw	r18,68(sp)
   123b4:	dc401017 	ldw	r17,64(sp)
   123b8:	dc000f17 	ldw	r16,60(sp)
   123bc:	dec01404 	addi	sp,sp,80
   123c0:	f800283a 	ret
   123c4:	288010c4 	addi	r2,r5,67
   123c8:	28800015 	stw	r2,0(r5)
   123cc:	28800415 	stw	r2,16(r5)
   123d0:	00800044 	movi	r2,1
   123d4:	28800515 	stw	r2,20(r5)
   123d8:	f800283a 	ret
   123dc:	04801004 	movi	r18,64
   123e0:	003fe006 	br	12364 <__smakebuf_r+0xb0>
   123e4:	81000a17 	ldw	r4,40(r16)
   123e8:	00c00074 	movhi	r3,1
   123ec:	18d00904 	addi	r3,r3,16420
   123f0:	20ffc51e 	bne	r4,r3,12308 <__smakebuf_r+0x54>
   123f4:	8080030b 	ldhu	r2,12(r16)
   123f8:	04810004 	movi	r18,1024
   123fc:	84801315 	stw	r18,76(r16)
   12400:	1484b03a 	or	r2,r2,r18
   12404:	8080030d 	sth	r2,12(r16)
   12408:	0027883a 	mov	r19,zero
   1240c:	003fd806 	br	12370 <__smakebuf_r+0xbc>
   12410:	8140038f 	ldh	r5,14(r16)
   12414:	8809883a 	mov	r4,r17
   12418:	00175ec0 	call	175ec <_isatty_r>
   1241c:	103fe226 	beq	r2,zero,123a8 <__smakebuf_r+0xf4>
   12420:	8080030b 	ldhu	r2,12(r16)
   12424:	10800054 	ori	r2,r2,1
   12428:	8080030d 	sth	r2,12(r16)
   1242c:	003fde06 	br	123a8 <__smakebuf_r+0xf4>
   12430:	8080030b 	ldhu	r2,12(r16)
   12434:	10c0800c 	andi	r3,r2,512
   12438:	183fdb1e 	bne	r3,zero,123a8 <__smakebuf_r+0xf4>
   1243c:	10800094 	ori	r2,r2,2
   12440:	80c010c4 	addi	r3,r16,67
   12444:	8080030d 	sth	r2,12(r16)
   12448:	00800044 	movi	r2,1
   1244c:	80c00015 	stw	r3,0(r16)
   12450:	80c00415 	stw	r3,16(r16)
   12454:	80800515 	stw	r2,20(r16)
   12458:	003fd306 	br	123a8 <__smakebuf_r+0xf4>
   1245c:	04810004 	movi	r18,1024
   12460:	003fc306 	br	12370 <__smakebuf_r+0xbc>
   12464:	0027883a 	mov	r19,zero
   12468:	04810004 	movi	r18,1024
   1246c:	003fc006 	br	12370 <__smakebuf_r+0xbc>

00012470 <_malloc_r>:
   12470:	defff504 	addi	sp,sp,-44
   12474:	dc800315 	stw	r18,12(sp)
   12478:	dfc00a15 	stw	ra,40(sp)
   1247c:	df000915 	stw	fp,36(sp)
   12480:	ddc00815 	stw	r23,32(sp)
   12484:	dd800715 	stw	r22,28(sp)
   12488:	dd400615 	stw	r21,24(sp)
   1248c:	dd000515 	stw	r20,20(sp)
   12490:	dcc00415 	stw	r19,16(sp)
   12494:	dc400215 	stw	r17,8(sp)
   12498:	dc000115 	stw	r16,4(sp)
   1249c:	288002c4 	addi	r2,r5,11
   124a0:	00c00584 	movi	r3,22
   124a4:	2025883a 	mov	r18,r4
   124a8:	18807f2e 	bgeu	r3,r2,126a8 <_malloc_r+0x238>
   124ac:	047ffe04 	movi	r17,-8
   124b0:	1462703a 	and	r17,r2,r17
   124b4:	8800a316 	blt	r17,zero,12744 <_malloc_r+0x2d4>
   124b8:	8940a236 	bltu	r17,r5,12744 <_malloc_r+0x2d4>
   124bc:	001bcec0 	call	1bcec <__malloc_lock>
   124c0:	00807dc4 	movi	r2,503
   124c4:	1441e92e 	bgeu	r2,r17,12c6c <_malloc_r+0x7fc>
   124c8:	8804d27a 	srli	r2,r17,9
   124cc:	1000a126 	beq	r2,zero,12754 <_malloc_r+0x2e4>
   124d0:	00c00104 	movi	r3,4
   124d4:	18811e36 	bltu	r3,r2,12950 <_malloc_r+0x4e0>
   124d8:	8804d1ba 	srli	r2,r17,6
   124dc:	12000e44 	addi	r8,r2,57
   124e0:	11c00e04 	addi	r7,r2,56
   124e4:	4209883a 	add	r4,r8,r8
   124e8:	04c000f4 	movhi	r19,3
   124ec:	2109883a 	add	r4,r4,r4
   124f0:	9ce04304 	addi	r19,r19,-32500
   124f4:	2109883a 	add	r4,r4,r4
   124f8:	9909883a 	add	r4,r19,r4
   124fc:	24000117 	ldw	r16,4(r4)
   12500:	213ffe04 	addi	r4,r4,-8
   12504:	24009726 	beq	r4,r16,12764 <_malloc_r+0x2f4>
   12508:	80800117 	ldw	r2,4(r16)
   1250c:	01bfff04 	movi	r6,-4
   12510:	014003c4 	movi	r5,15
   12514:	1184703a 	and	r2,r2,r6
   12518:	1447c83a 	sub	r3,r2,r17
   1251c:	28c00716 	blt	r5,r3,1253c <_malloc_r+0xcc>
   12520:	1800920e 	bge	r3,zero,1276c <_malloc_r+0x2fc>
   12524:	84000317 	ldw	r16,12(r16)
   12528:	24008e26 	beq	r4,r16,12764 <_malloc_r+0x2f4>
   1252c:	80800117 	ldw	r2,4(r16)
   12530:	1184703a 	and	r2,r2,r6
   12534:	1447c83a 	sub	r3,r2,r17
   12538:	28fff90e 	bge	r5,r3,12520 <_malloc_r+0xb0>
   1253c:	3809883a 	mov	r4,r7
   12540:	018000f4 	movhi	r6,3
   12544:	9c000417 	ldw	r16,16(r19)
   12548:	31a04304 	addi	r6,r6,-32500
   1254c:	32000204 	addi	r8,r6,8
   12550:	82013426 	beq	r16,r8,12a24 <_malloc_r+0x5b4>
   12554:	80c00117 	ldw	r3,4(r16)
   12558:	00bfff04 	movi	r2,-4
   1255c:	188e703a 	and	r7,r3,r2
   12560:	3c45c83a 	sub	r2,r7,r17
   12564:	00c003c4 	movi	r3,15
   12568:	18811f16 	blt	r3,r2,129e8 <_malloc_r+0x578>
   1256c:	32000515 	stw	r8,20(r6)
   12570:	32000415 	stw	r8,16(r6)
   12574:	10007f0e 	bge	r2,zero,12774 <_malloc_r+0x304>
   12578:	00807fc4 	movi	r2,511
   1257c:	11c0fd36 	bltu	r2,r7,12974 <_malloc_r+0x504>
   12580:	3806d0fa 	srli	r3,r7,3
   12584:	01c00044 	movi	r7,1
   12588:	30800117 	ldw	r2,4(r6)
   1258c:	19400044 	addi	r5,r3,1
   12590:	294b883a 	add	r5,r5,r5
   12594:	1807d0ba 	srai	r3,r3,2
   12598:	294b883a 	add	r5,r5,r5
   1259c:	294b883a 	add	r5,r5,r5
   125a0:	298b883a 	add	r5,r5,r6
   125a4:	38c6983a 	sll	r3,r7,r3
   125a8:	29c00017 	ldw	r7,0(r5)
   125ac:	2a7ffe04 	addi	r9,r5,-8
   125b0:	1886b03a 	or	r3,r3,r2
   125b4:	82400315 	stw	r9,12(r16)
   125b8:	81c00215 	stw	r7,8(r16)
   125bc:	30c00115 	stw	r3,4(r6)
   125c0:	2c000015 	stw	r16,0(r5)
   125c4:	3c000315 	stw	r16,12(r7)
   125c8:	2005d0ba 	srai	r2,r4,2
   125cc:	01400044 	movi	r5,1
   125d0:	288a983a 	sll	r5,r5,r2
   125d4:	19406f36 	bltu	r3,r5,12794 <_malloc_r+0x324>
   125d8:	28c4703a 	and	r2,r5,r3
   125dc:	10000a1e 	bne	r2,zero,12608 <_malloc_r+0x198>
   125e0:	00bfff04 	movi	r2,-4
   125e4:	294b883a 	add	r5,r5,r5
   125e8:	2088703a 	and	r4,r4,r2
   125ec:	28c4703a 	and	r2,r5,r3
   125f0:	21000104 	addi	r4,r4,4
   125f4:	1000041e 	bne	r2,zero,12608 <_malloc_r+0x198>
   125f8:	294b883a 	add	r5,r5,r5
   125fc:	28c4703a 	and	r2,r5,r3
   12600:	21000104 	addi	r4,r4,4
   12604:	103ffc26 	beq	r2,zero,125f8 <_malloc_r+0x188>
   12608:	02bfff04 	movi	r10,-4
   1260c:	024003c4 	movi	r9,15
   12610:	21800044 	addi	r6,r4,1
   12614:	318d883a 	add	r6,r6,r6
   12618:	318d883a 	add	r6,r6,r6
   1261c:	318d883a 	add	r6,r6,r6
   12620:	998d883a 	add	r6,r19,r6
   12624:	333ffe04 	addi	r12,r6,-8
   12628:	2017883a 	mov	r11,r4
   1262c:	31800104 	addi	r6,r6,4
   12630:	34000017 	ldw	r16,0(r6)
   12634:	31fffd04 	addi	r7,r6,-12
   12638:	81c0041e 	bne	r16,r7,1264c <_malloc_r+0x1dc>
   1263c:	0000fb06 	br	12a2c <_malloc_r+0x5bc>
   12640:	1801030e 	bge	r3,zero,12a50 <_malloc_r+0x5e0>
   12644:	84000317 	ldw	r16,12(r16)
   12648:	81c0f826 	beq	r16,r7,12a2c <_malloc_r+0x5bc>
   1264c:	80800117 	ldw	r2,4(r16)
   12650:	1284703a 	and	r2,r2,r10
   12654:	1447c83a 	sub	r3,r2,r17
   12658:	48fff90e 	bge	r9,r3,12640 <_malloc_r+0x1d0>
   1265c:	80800317 	ldw	r2,12(r16)
   12660:	81000217 	ldw	r4,8(r16)
   12664:	89400054 	ori	r5,r17,1
   12668:	81400115 	stw	r5,4(r16)
   1266c:	20800315 	stw	r2,12(r4)
   12670:	11000215 	stw	r4,8(r2)
   12674:	8463883a 	add	r17,r16,r17
   12678:	9c400515 	stw	r17,20(r19)
   1267c:	9c400415 	stw	r17,16(r19)
   12680:	18800054 	ori	r2,r3,1
   12684:	88800115 	stw	r2,4(r17)
   12688:	8a000315 	stw	r8,12(r17)
   1268c:	8a000215 	stw	r8,8(r17)
   12690:	88e3883a 	add	r17,r17,r3
   12694:	88c00015 	stw	r3,0(r17)
   12698:	9009883a 	mov	r4,r18
   1269c:	001be0c0 	call	1be0c <__malloc_unlock>
   126a0:	80800204 	addi	r2,r16,8
   126a4:	00001b06 	br	12714 <_malloc_r+0x2a4>
   126a8:	04400404 	movi	r17,16
   126ac:	89402536 	bltu	r17,r5,12744 <_malloc_r+0x2d4>
   126b0:	001bcec0 	call	1bcec <__malloc_lock>
   126b4:	00800184 	movi	r2,6
   126b8:	01000084 	movi	r4,2
   126bc:	04c000f4 	movhi	r19,3
   126c0:	1085883a 	add	r2,r2,r2
   126c4:	9ce04304 	addi	r19,r19,-32500
   126c8:	1085883a 	add	r2,r2,r2
   126cc:	9885883a 	add	r2,r19,r2
   126d0:	14000117 	ldw	r16,4(r2)
   126d4:	10fffe04 	addi	r3,r2,-8
   126d8:	80c0d926 	beq	r16,r3,12a40 <_malloc_r+0x5d0>
   126dc:	80c00117 	ldw	r3,4(r16)
   126e0:	81000317 	ldw	r4,12(r16)
   126e4:	00bfff04 	movi	r2,-4
   126e8:	1884703a 	and	r2,r3,r2
   126ec:	81400217 	ldw	r5,8(r16)
   126f0:	8085883a 	add	r2,r16,r2
   126f4:	10c00117 	ldw	r3,4(r2)
   126f8:	29000315 	stw	r4,12(r5)
   126fc:	21400215 	stw	r5,8(r4)
   12700:	18c00054 	ori	r3,r3,1
   12704:	10c00115 	stw	r3,4(r2)
   12708:	9009883a 	mov	r4,r18
   1270c:	001be0c0 	call	1be0c <__malloc_unlock>
   12710:	80800204 	addi	r2,r16,8
   12714:	dfc00a17 	ldw	ra,40(sp)
   12718:	df000917 	ldw	fp,36(sp)
   1271c:	ddc00817 	ldw	r23,32(sp)
   12720:	dd800717 	ldw	r22,28(sp)
   12724:	dd400617 	ldw	r21,24(sp)
   12728:	dd000517 	ldw	r20,20(sp)
   1272c:	dcc00417 	ldw	r19,16(sp)
   12730:	dc800317 	ldw	r18,12(sp)
   12734:	dc400217 	ldw	r17,8(sp)
   12738:	dc000117 	ldw	r16,4(sp)
   1273c:	dec00b04 	addi	sp,sp,44
   12740:	f800283a 	ret
   12744:	00800304 	movi	r2,12
   12748:	90800015 	stw	r2,0(r18)
   1274c:	0005883a 	mov	r2,zero
   12750:	003ff006 	br	12714 <_malloc_r+0x2a4>
   12754:	01002004 	movi	r4,128
   12758:	02001004 	movi	r8,64
   1275c:	01c00fc4 	movi	r7,63
   12760:	003f6106 	br	124e8 <_malloc_r+0x78>
   12764:	4009883a 	mov	r4,r8
   12768:	003f7506 	br	12540 <_malloc_r+0xd0>
   1276c:	81000317 	ldw	r4,12(r16)
   12770:	003fde06 	br	126ec <_malloc_r+0x27c>
   12774:	81c5883a 	add	r2,r16,r7
   12778:	11400117 	ldw	r5,4(r2)
   1277c:	9009883a 	mov	r4,r18
   12780:	29400054 	ori	r5,r5,1
   12784:	11400115 	stw	r5,4(r2)
   12788:	001be0c0 	call	1be0c <__malloc_unlock>
   1278c:	80800204 	addi	r2,r16,8
   12790:	003fe006 	br	12714 <_malloc_r+0x2a4>
   12794:	9c000217 	ldw	r16,8(r19)
   12798:	00bfff04 	movi	r2,-4
   1279c:	85800117 	ldw	r22,4(r16)
   127a0:	b0ac703a 	and	r22,r22,r2
   127a4:	b4400336 	bltu	r22,r17,127b4 <_malloc_r+0x344>
   127a8:	b445c83a 	sub	r2,r22,r17
   127ac:	00c003c4 	movi	r3,15
   127b0:	18805d16 	blt	r3,r2,12928 <_malloc_r+0x4b8>
   127b4:	05c000f4 	movhi	r23,3
   127b8:	008000f4 	movhi	r2,3
   127bc:	10ae3904 	addi	r2,r2,-18204
   127c0:	bde67104 	addi	r23,r23,-26172
   127c4:	15400017 	ldw	r21,0(r2)
   127c8:	b8c00017 	ldw	r3,0(r23)
   127cc:	00bfffc4 	movi	r2,-1
   127d0:	858d883a 	add	r6,r16,r22
   127d4:	8d6b883a 	add	r21,r17,r21
   127d8:	1880ea26 	beq	r3,r2,12b84 <_malloc_r+0x714>
   127dc:	ad4403c4 	addi	r21,r21,4111
   127e0:	00bc0004 	movi	r2,-4096
   127e4:	a8aa703a 	and	r21,r21,r2
   127e8:	a80b883a 	mov	r5,r21
   127ec:	9009883a 	mov	r4,r18
   127f0:	d9800015 	stw	r6,0(sp)
   127f4:	0013ef80 	call	13ef8 <_sbrk_r>
   127f8:	1029883a 	mov	r20,r2
   127fc:	00bfffc4 	movi	r2,-1
   12800:	d9800017 	ldw	r6,0(sp)
   12804:	a080e826 	beq	r20,r2,12ba8 <_malloc_r+0x738>
   12808:	a180a636 	bltu	r20,r6,12aa4 <_malloc_r+0x634>
   1280c:	070000f4 	movhi	fp,3
   12810:	e72e5b04 	addi	fp,fp,-18068
   12814:	e0800017 	ldw	r2,0(fp)
   12818:	a887883a 	add	r3,r21,r2
   1281c:	e0c00015 	stw	r3,0(fp)
   12820:	3500e626 	beq	r6,r20,12bbc <_malloc_r+0x74c>
   12824:	b9000017 	ldw	r4,0(r23)
   12828:	00bfffc4 	movi	r2,-1
   1282c:	2080ee26 	beq	r4,r2,12be8 <_malloc_r+0x778>
   12830:	a185c83a 	sub	r2,r20,r6
   12834:	10c5883a 	add	r2,r2,r3
   12838:	e0800015 	stw	r2,0(fp)
   1283c:	a0c001cc 	andi	r3,r20,7
   12840:	1800bc26 	beq	r3,zero,12b34 <_malloc_r+0x6c4>
   12844:	a0e9c83a 	sub	r20,r20,r3
   12848:	00840204 	movi	r2,4104
   1284c:	a5000204 	addi	r20,r20,8
   12850:	10c7c83a 	sub	r3,r2,r3
   12854:	a545883a 	add	r2,r20,r21
   12858:	1083ffcc 	andi	r2,r2,4095
   1285c:	18abc83a 	sub	r21,r3,r2
   12860:	a80b883a 	mov	r5,r21
   12864:	9009883a 	mov	r4,r18
   12868:	0013ef80 	call	13ef8 <_sbrk_r>
   1286c:	00ffffc4 	movi	r3,-1
   12870:	10c0e126 	beq	r2,r3,12bf8 <_malloc_r+0x788>
   12874:	1505c83a 	sub	r2,r2,r20
   12878:	1545883a 	add	r2,r2,r21
   1287c:	10800054 	ori	r2,r2,1
   12880:	e0c00017 	ldw	r3,0(fp)
   12884:	9d000215 	stw	r20,8(r19)
   12888:	a0800115 	stw	r2,4(r20)
   1288c:	a8c7883a 	add	r3,r21,r3
   12890:	e0c00015 	stw	r3,0(fp)
   12894:	84c00e26 	beq	r16,r19,128d0 <_malloc_r+0x460>
   12898:	018003c4 	movi	r6,15
   1289c:	3580a72e 	bgeu	r6,r22,12b3c <_malloc_r+0x6cc>
   128a0:	81400117 	ldw	r5,4(r16)
   128a4:	013ffe04 	movi	r4,-8
   128a8:	b0bffd04 	addi	r2,r22,-12
   128ac:	1104703a 	and	r2,r2,r4
   128b0:	2900004c 	andi	r4,r5,1
   128b4:	2088b03a 	or	r4,r4,r2
   128b8:	81000115 	stw	r4,4(r16)
   128bc:	01400144 	movi	r5,5
   128c0:	8089883a 	add	r4,r16,r2
   128c4:	21400115 	stw	r5,4(r4)
   128c8:	21400215 	stw	r5,8(r4)
   128cc:	3080cd36 	bltu	r6,r2,12c04 <_malloc_r+0x794>
   128d0:	008000f4 	movhi	r2,3
   128d4:	10ae3804 	addi	r2,r2,-18208
   128d8:	11000017 	ldw	r4,0(r2)
   128dc:	20c0012e 	bgeu	r4,r3,128e4 <_malloc_r+0x474>
   128e0:	10c00015 	stw	r3,0(r2)
   128e4:	008000f4 	movhi	r2,3
   128e8:	10ae3704 	addi	r2,r2,-18212
   128ec:	11000017 	ldw	r4,0(r2)
   128f0:	9c000217 	ldw	r16,8(r19)
   128f4:	20c0012e 	bgeu	r4,r3,128fc <_malloc_r+0x48c>
   128f8:	10c00015 	stw	r3,0(r2)
   128fc:	80c00117 	ldw	r3,4(r16)
   12900:	00bfff04 	movi	r2,-4
   12904:	1886703a 	and	r3,r3,r2
   12908:	1c45c83a 	sub	r2,r3,r17
   1290c:	1c400236 	bltu	r3,r17,12918 <_malloc_r+0x4a8>
   12910:	00c003c4 	movi	r3,15
   12914:	18800416 	blt	r3,r2,12928 <_malloc_r+0x4b8>
   12918:	9009883a 	mov	r4,r18
   1291c:	001be0c0 	call	1be0c <__malloc_unlock>
   12920:	0005883a 	mov	r2,zero
   12924:	003f7b06 	br	12714 <_malloc_r+0x2a4>
   12928:	88c00054 	ori	r3,r17,1
   1292c:	80c00115 	stw	r3,4(r16)
   12930:	8463883a 	add	r17,r16,r17
   12934:	10800054 	ori	r2,r2,1
   12938:	9c400215 	stw	r17,8(r19)
   1293c:	88800115 	stw	r2,4(r17)
   12940:	9009883a 	mov	r4,r18
   12944:	001be0c0 	call	1be0c <__malloc_unlock>
   12948:	80800204 	addi	r2,r16,8
   1294c:	003f7106 	br	12714 <_malloc_r+0x2a4>
   12950:	00c00504 	movi	r3,20
   12954:	18804a2e 	bgeu	r3,r2,12a80 <_malloc_r+0x610>
   12958:	00c01504 	movi	r3,84
   1295c:	18806e36 	bltu	r3,r2,12b18 <_malloc_r+0x6a8>
   12960:	8804d33a 	srli	r2,r17,12
   12964:	12001bc4 	addi	r8,r2,111
   12968:	11c01b84 	addi	r7,r2,110
   1296c:	4209883a 	add	r4,r8,r8
   12970:	003edd06 	br	124e8 <_malloc_r+0x78>
   12974:	3804d27a 	srli	r2,r7,9
   12978:	00c00104 	movi	r3,4
   1297c:	1880442e 	bgeu	r3,r2,12a90 <_malloc_r+0x620>
   12980:	00c00504 	movi	r3,20
   12984:	18808136 	bltu	r3,r2,12b8c <_malloc_r+0x71c>
   12988:	11401704 	addi	r5,r2,92
   1298c:	10c016c4 	addi	r3,r2,91
   12990:	294b883a 	add	r5,r5,r5
   12994:	294b883a 	add	r5,r5,r5
   12998:	294b883a 	add	r5,r5,r5
   1299c:	994b883a 	add	r5,r19,r5
   129a0:	28800017 	ldw	r2,0(r5)
   129a4:	018000f4 	movhi	r6,3
   129a8:	297ffe04 	addi	r5,r5,-8
   129ac:	31a04304 	addi	r6,r6,-32500
   129b0:	28806526 	beq	r5,r2,12b48 <_malloc_r+0x6d8>
   129b4:	01bfff04 	movi	r6,-4
   129b8:	10c00117 	ldw	r3,4(r2)
   129bc:	1986703a 	and	r3,r3,r6
   129c0:	38c0022e 	bgeu	r7,r3,129cc <_malloc_r+0x55c>
   129c4:	10800217 	ldw	r2,8(r2)
   129c8:	28bffb1e 	bne	r5,r2,129b8 <_malloc_r+0x548>
   129cc:	11400317 	ldw	r5,12(r2)
   129d0:	98c00117 	ldw	r3,4(r19)
   129d4:	81400315 	stw	r5,12(r16)
   129d8:	80800215 	stw	r2,8(r16)
   129dc:	2c000215 	stw	r16,8(r5)
   129e0:	14000315 	stw	r16,12(r2)
   129e4:	003ef806 	br	125c8 <_malloc_r+0x158>
   129e8:	88c00054 	ori	r3,r17,1
   129ec:	80c00115 	stw	r3,4(r16)
   129f0:	8463883a 	add	r17,r16,r17
   129f4:	34400515 	stw	r17,20(r6)
   129f8:	34400415 	stw	r17,16(r6)
   129fc:	10c00054 	ori	r3,r2,1
   12a00:	8a000315 	stw	r8,12(r17)
   12a04:	8a000215 	stw	r8,8(r17)
   12a08:	88c00115 	stw	r3,4(r17)
   12a0c:	88a3883a 	add	r17,r17,r2
   12a10:	88800015 	stw	r2,0(r17)
   12a14:	9009883a 	mov	r4,r18
   12a18:	001be0c0 	call	1be0c <__malloc_unlock>
   12a1c:	80800204 	addi	r2,r16,8
   12a20:	003f3c06 	br	12714 <_malloc_r+0x2a4>
   12a24:	30c00117 	ldw	r3,4(r6)
   12a28:	003ee706 	br	125c8 <_malloc_r+0x158>
   12a2c:	5ac00044 	addi	r11,r11,1
   12a30:	588000cc 	andi	r2,r11,3
   12a34:	31800204 	addi	r6,r6,8
   12a38:	103efd1e 	bne	r2,zero,12630 <_malloc_r+0x1c0>
   12a3c:	00002406 	br	12ad0 <_malloc_r+0x660>
   12a40:	14000317 	ldw	r16,12(r2)
   12a44:	143f251e 	bne	r2,r16,126dc <_malloc_r+0x26c>
   12a48:	21000084 	addi	r4,r4,2
   12a4c:	003ebc06 	br	12540 <_malloc_r+0xd0>
   12a50:	8085883a 	add	r2,r16,r2
   12a54:	10c00117 	ldw	r3,4(r2)
   12a58:	81000317 	ldw	r4,12(r16)
   12a5c:	81400217 	ldw	r5,8(r16)
   12a60:	18c00054 	ori	r3,r3,1
   12a64:	10c00115 	stw	r3,4(r2)
   12a68:	29000315 	stw	r4,12(r5)
   12a6c:	21400215 	stw	r5,8(r4)
   12a70:	9009883a 	mov	r4,r18
   12a74:	001be0c0 	call	1be0c <__malloc_unlock>
   12a78:	80800204 	addi	r2,r16,8
   12a7c:	003f2506 	br	12714 <_malloc_r+0x2a4>
   12a80:	12001704 	addi	r8,r2,92
   12a84:	11c016c4 	addi	r7,r2,91
   12a88:	4209883a 	add	r4,r8,r8
   12a8c:	003e9606 	br	124e8 <_malloc_r+0x78>
   12a90:	3804d1ba 	srli	r2,r7,6
   12a94:	11400e44 	addi	r5,r2,57
   12a98:	10c00e04 	addi	r3,r2,56
   12a9c:	294b883a 	add	r5,r5,r5
   12aa0:	003fbc06 	br	12994 <_malloc_r+0x524>
   12aa4:	84ff5926 	beq	r16,r19,1280c <_malloc_r+0x39c>
   12aa8:	008000f4 	movhi	r2,3
   12aac:	10a04304 	addi	r2,r2,-32500
   12ab0:	14000217 	ldw	r16,8(r2)
   12ab4:	00bfff04 	movi	r2,-4
   12ab8:	80c00117 	ldw	r3,4(r16)
   12abc:	1886703a 	and	r3,r3,r2
   12ac0:	003f9106 	br	12908 <_malloc_r+0x498>
   12ac4:	60800217 	ldw	r2,8(r12)
   12ac8:	213fffc4 	addi	r4,r4,-1
   12acc:	1300651e 	bne	r2,r12,12c64 <_malloc_r+0x7f4>
   12ad0:	208000cc 	andi	r2,r4,3
   12ad4:	633ffe04 	addi	r12,r12,-8
   12ad8:	103ffa1e 	bne	r2,zero,12ac4 <_malloc_r+0x654>
   12adc:	98800117 	ldw	r2,4(r19)
   12ae0:	0146303a 	nor	r3,zero,r5
   12ae4:	1884703a 	and	r2,r3,r2
   12ae8:	98800115 	stw	r2,4(r19)
   12aec:	294b883a 	add	r5,r5,r5
   12af0:	117f2836 	bltu	r2,r5,12794 <_malloc_r+0x324>
   12af4:	283f2726 	beq	r5,zero,12794 <_malloc_r+0x324>
   12af8:	2886703a 	and	r3,r5,r2
   12afc:	5809883a 	mov	r4,r11
   12b00:	183ec31e 	bne	r3,zero,12610 <_malloc_r+0x1a0>
   12b04:	294b883a 	add	r5,r5,r5
   12b08:	2886703a 	and	r3,r5,r2
   12b0c:	21000104 	addi	r4,r4,4
   12b10:	183ffc26 	beq	r3,zero,12b04 <_malloc_r+0x694>
   12b14:	003ebe06 	br	12610 <_malloc_r+0x1a0>
   12b18:	00c05504 	movi	r3,340
   12b1c:	18801236 	bltu	r3,r2,12b68 <_malloc_r+0x6f8>
   12b20:	8804d3fa 	srli	r2,r17,15
   12b24:	12001e04 	addi	r8,r2,120
   12b28:	11c01dc4 	addi	r7,r2,119
   12b2c:	4209883a 	add	r4,r8,r8
   12b30:	003e6d06 	br	124e8 <_malloc_r+0x78>
   12b34:	00c40004 	movi	r3,4096
   12b38:	003f4606 	br	12854 <_malloc_r+0x3e4>
   12b3c:	00800044 	movi	r2,1
   12b40:	a0800115 	stw	r2,4(r20)
   12b44:	003f7406 	br	12918 <_malloc_r+0x4a8>
   12b48:	1805d0ba 	srai	r2,r3,2
   12b4c:	01c00044 	movi	r7,1
   12b50:	30c00117 	ldw	r3,4(r6)
   12b54:	388e983a 	sll	r7,r7,r2
   12b58:	2805883a 	mov	r2,r5
   12b5c:	38c6b03a 	or	r3,r7,r3
   12b60:	30c00115 	stw	r3,4(r6)
   12b64:	003f9b06 	br	129d4 <_malloc_r+0x564>
   12b68:	00c15504 	movi	r3,1364
   12b6c:	18801a36 	bltu	r3,r2,12bd8 <_malloc_r+0x768>
   12b70:	8804d4ba 	srli	r2,r17,18
   12b74:	12001f44 	addi	r8,r2,125
   12b78:	11c01f04 	addi	r7,r2,124
   12b7c:	4209883a 	add	r4,r8,r8
   12b80:	003e5906 	br	124e8 <_malloc_r+0x78>
   12b84:	ad400404 	addi	r21,r21,16
   12b88:	003f1706 	br	127e8 <_malloc_r+0x378>
   12b8c:	00c01504 	movi	r3,84
   12b90:	18802336 	bltu	r3,r2,12c20 <_malloc_r+0x7b0>
   12b94:	3804d33a 	srli	r2,r7,12
   12b98:	11401bc4 	addi	r5,r2,111
   12b9c:	10c01b84 	addi	r3,r2,110
   12ba0:	294b883a 	add	r5,r5,r5
   12ba4:	003f7b06 	br	12994 <_malloc_r+0x524>
   12ba8:	9c000217 	ldw	r16,8(r19)
   12bac:	00bfff04 	movi	r2,-4
   12bb0:	80c00117 	ldw	r3,4(r16)
   12bb4:	1886703a 	and	r3,r3,r2
   12bb8:	003f5306 	br	12908 <_malloc_r+0x498>
   12bbc:	3083ffcc 	andi	r2,r6,4095
   12bc0:	103f181e 	bne	r2,zero,12824 <_malloc_r+0x3b4>
   12bc4:	99000217 	ldw	r4,8(r19)
   12bc8:	b545883a 	add	r2,r22,r21
   12bcc:	10800054 	ori	r2,r2,1
   12bd0:	20800115 	stw	r2,4(r4)
   12bd4:	003f3e06 	br	128d0 <_malloc_r+0x460>
   12bd8:	01003f84 	movi	r4,254
   12bdc:	02001fc4 	movi	r8,127
   12be0:	01c01f84 	movi	r7,126
   12be4:	003e4006 	br	124e8 <_malloc_r+0x78>
   12be8:	008000f4 	movhi	r2,3
   12bec:	10a67104 	addi	r2,r2,-26172
   12bf0:	15000015 	stw	r20,0(r2)
   12bf4:	003f1106 	br	1283c <_malloc_r+0x3cc>
   12bf8:	00800044 	movi	r2,1
   12bfc:	002b883a 	mov	r21,zero
   12c00:	003f1f06 	br	12880 <_malloc_r+0x410>
   12c04:	81400204 	addi	r5,r16,8
   12c08:	9009883a 	mov	r4,r18
   12c0c:	0011d400 	call	11d40 <_free_r>
   12c10:	008000f4 	movhi	r2,3
   12c14:	10ae5b04 	addi	r2,r2,-18068
   12c18:	10c00017 	ldw	r3,0(r2)
   12c1c:	003f2c06 	br	128d0 <_malloc_r+0x460>
   12c20:	00c05504 	movi	r3,340
   12c24:	18800536 	bltu	r3,r2,12c3c <_malloc_r+0x7cc>
   12c28:	3804d3fa 	srli	r2,r7,15
   12c2c:	11401e04 	addi	r5,r2,120
   12c30:	10c01dc4 	addi	r3,r2,119
   12c34:	294b883a 	add	r5,r5,r5
   12c38:	003f5606 	br	12994 <_malloc_r+0x524>
   12c3c:	00c15504 	movi	r3,1364
   12c40:	18800536 	bltu	r3,r2,12c58 <_malloc_r+0x7e8>
   12c44:	3804d4ba 	srli	r2,r7,18
   12c48:	11401f44 	addi	r5,r2,125
   12c4c:	10c01f04 	addi	r3,r2,124
   12c50:	294b883a 	add	r5,r5,r5
   12c54:	003f4f06 	br	12994 <_malloc_r+0x524>
   12c58:	01403f84 	movi	r5,254
   12c5c:	00c01f84 	movi	r3,126
   12c60:	003f4c06 	br	12994 <_malloc_r+0x524>
   12c64:	98800117 	ldw	r2,4(r19)
   12c68:	003fa006 	br	12aec <_malloc_r+0x67c>
   12c6c:	8808d0fa 	srli	r4,r17,3
   12c70:	20800044 	addi	r2,r4,1
   12c74:	1085883a 	add	r2,r2,r2
   12c78:	003e9006 	br	126bc <_malloc_r+0x24c>

00012c7c <memchr>:
   12c7c:	208000cc 	andi	r2,r4,3
   12c80:	280f883a 	mov	r7,r5
   12c84:	10003426 	beq	r2,zero,12d58 <memchr+0xdc>
   12c88:	30bfffc4 	addi	r2,r6,-1
   12c8c:	30001a26 	beq	r6,zero,12cf8 <memchr+0x7c>
   12c90:	20c00003 	ldbu	r3,0(r4)
   12c94:	29803fcc 	andi	r6,r5,255
   12c98:	30c0051e 	bne	r6,r3,12cb0 <memchr+0x34>
   12c9c:	00001806 	br	12d00 <memchr+0x84>
   12ca0:	10001526 	beq	r2,zero,12cf8 <memchr+0x7c>
   12ca4:	20c00003 	ldbu	r3,0(r4)
   12ca8:	10bfffc4 	addi	r2,r2,-1
   12cac:	30c01426 	beq	r6,r3,12d00 <memchr+0x84>
   12cb0:	21000044 	addi	r4,r4,1
   12cb4:	20c000cc 	andi	r3,r4,3
   12cb8:	183ff91e 	bne	r3,zero,12ca0 <memchr+0x24>
   12cbc:	020000c4 	movi	r8,3
   12cc0:	40801136 	bltu	r8,r2,12d08 <memchr+0x8c>
   12cc4:	10000c26 	beq	r2,zero,12cf8 <memchr+0x7c>
   12cc8:	20c00003 	ldbu	r3,0(r4)
   12ccc:	29403fcc 	andi	r5,r5,255
   12cd0:	28c00b26 	beq	r5,r3,12d00 <memchr+0x84>
   12cd4:	20c00044 	addi	r3,r4,1
   12cd8:	39803fcc 	andi	r6,r7,255
   12cdc:	2089883a 	add	r4,r4,r2
   12ce0:	00000306 	br	12cf0 <memchr+0x74>
   12ce4:	18c00044 	addi	r3,r3,1
   12ce8:	197fffc3 	ldbu	r5,-1(r3)
   12cec:	31400526 	beq	r6,r5,12d04 <memchr+0x88>
   12cf0:	1805883a 	mov	r2,r3
   12cf4:	20fffb1e 	bne	r4,r3,12ce4 <memchr+0x68>
   12cf8:	0005883a 	mov	r2,zero
   12cfc:	f800283a 	ret
   12d00:	2005883a 	mov	r2,r4
   12d04:	f800283a 	ret
   12d08:	28c03fcc 	andi	r3,r5,255
   12d0c:	1812923a 	slli	r9,r3,8
   12d10:	02ffbff4 	movhi	r11,65279
   12d14:	02a02074 	movhi	r10,32897
   12d18:	48d2b03a 	or	r9,r9,r3
   12d1c:	4806943a 	slli	r3,r9,16
   12d20:	5affbfc4 	addi	r11,r11,-257
   12d24:	52a02004 	addi	r10,r10,-32640
   12d28:	48d2b03a 	or	r9,r9,r3
   12d2c:	20c00017 	ldw	r3,0(r4)
   12d30:	48c6f03a 	xor	r3,r9,r3
   12d34:	1acd883a 	add	r6,r3,r11
   12d38:	00c6303a 	nor	r3,zero,r3
   12d3c:	30c6703a 	and	r3,r6,r3
   12d40:	1a86703a 	and	r3,r3,r10
   12d44:	183fe01e 	bne	r3,zero,12cc8 <memchr+0x4c>
   12d48:	10bfff04 	addi	r2,r2,-4
   12d4c:	21000104 	addi	r4,r4,4
   12d50:	40bff636 	bltu	r8,r2,12d2c <memchr+0xb0>
   12d54:	003fdb06 	br	12cc4 <memchr+0x48>
   12d58:	3005883a 	mov	r2,r6
   12d5c:	003fd706 	br	12cbc <memchr+0x40>

00012d60 <memset>:
   12d60:	20c000cc 	andi	r3,r4,3
   12d64:	2005883a 	mov	r2,r4
   12d68:	18004426 	beq	r3,zero,12e7c <memset+0x11c>
   12d6c:	31ffffc4 	addi	r7,r6,-1
   12d70:	30004026 	beq	r6,zero,12e74 <memset+0x114>
   12d74:	2813883a 	mov	r9,r5
   12d78:	200d883a 	mov	r6,r4
   12d7c:	2007883a 	mov	r3,r4
   12d80:	00000406 	br	12d94 <memset+0x34>
   12d84:	3a3fffc4 	addi	r8,r7,-1
   12d88:	31800044 	addi	r6,r6,1
   12d8c:	38003926 	beq	r7,zero,12e74 <memset+0x114>
   12d90:	400f883a 	mov	r7,r8
   12d94:	18c00044 	addi	r3,r3,1
   12d98:	32400005 	stb	r9,0(r6)
   12d9c:	1a0000cc 	andi	r8,r3,3
   12da0:	403ff81e 	bne	r8,zero,12d84 <memset+0x24>
   12da4:	010000c4 	movi	r4,3
   12da8:	21c02d2e 	bgeu	r4,r7,12e60 <memset+0x100>
   12dac:	29003fcc 	andi	r4,r5,255
   12db0:	200c923a 	slli	r6,r4,8
   12db4:	3108b03a 	or	r4,r6,r4
   12db8:	200c943a 	slli	r6,r4,16
   12dbc:	218cb03a 	or	r6,r4,r6
   12dc0:	010003c4 	movi	r4,15
   12dc4:	21c0182e 	bgeu	r4,r7,12e28 <memset+0xc8>
   12dc8:	3b3ffc04 	addi	r12,r7,-16
   12dcc:	6018d13a 	srli	r12,r12,4
   12dd0:	1a000104 	addi	r8,r3,4
   12dd4:	1ac00204 	addi	r11,r3,8
   12dd8:	6008913a 	slli	r4,r12,4
   12ddc:	1a800304 	addi	r10,r3,12
   12de0:	1813883a 	mov	r9,r3
   12de4:	21000504 	addi	r4,r4,20
   12de8:	1909883a 	add	r4,r3,r4
   12dec:	49800015 	stw	r6,0(r9)
   12df0:	41800015 	stw	r6,0(r8)
   12df4:	59800015 	stw	r6,0(r11)
   12df8:	51800015 	stw	r6,0(r10)
   12dfc:	42000404 	addi	r8,r8,16
   12e00:	4a400404 	addi	r9,r9,16
   12e04:	5ac00404 	addi	r11,r11,16
   12e08:	52800404 	addi	r10,r10,16
   12e0c:	413ff71e 	bne	r8,r4,12dec <memset+0x8c>
   12e10:	63000044 	addi	r12,r12,1
   12e14:	6018913a 	slli	r12,r12,4
   12e18:	39c003cc 	andi	r7,r7,15
   12e1c:	010000c4 	movi	r4,3
   12e20:	1b07883a 	add	r3,r3,r12
   12e24:	21c00e2e 	bgeu	r4,r7,12e60 <memset+0x100>
   12e28:	1813883a 	mov	r9,r3
   12e2c:	3811883a 	mov	r8,r7
   12e30:	010000c4 	movi	r4,3
   12e34:	49800015 	stw	r6,0(r9)
   12e38:	423fff04 	addi	r8,r8,-4
   12e3c:	4a400104 	addi	r9,r9,4
   12e40:	223ffc36 	bltu	r4,r8,12e34 <memset+0xd4>
   12e44:	393fff04 	addi	r4,r7,-4
   12e48:	2008d0ba 	srli	r4,r4,2
   12e4c:	39c000cc 	andi	r7,r7,3
   12e50:	21000044 	addi	r4,r4,1
   12e54:	2109883a 	add	r4,r4,r4
   12e58:	2109883a 	add	r4,r4,r4
   12e5c:	1907883a 	add	r3,r3,r4
   12e60:	38000526 	beq	r7,zero,12e78 <memset+0x118>
   12e64:	19cf883a 	add	r7,r3,r7
   12e68:	19400005 	stb	r5,0(r3)
   12e6c:	18c00044 	addi	r3,r3,1
   12e70:	38fffd1e 	bne	r7,r3,12e68 <memset+0x108>
   12e74:	f800283a 	ret
   12e78:	f800283a 	ret
   12e7c:	2007883a 	mov	r3,r4
   12e80:	300f883a 	mov	r7,r6
   12e84:	003fc706 	br	12da4 <memset+0x44>

00012e88 <_Balloc>:
   12e88:	20801317 	ldw	r2,76(r4)
   12e8c:	defffc04 	addi	sp,sp,-16
   12e90:	dc400115 	stw	r17,4(sp)
   12e94:	dc000015 	stw	r16,0(sp)
   12e98:	dfc00315 	stw	ra,12(sp)
   12e9c:	dc800215 	stw	r18,8(sp)
   12ea0:	2023883a 	mov	r17,r4
   12ea4:	2821883a 	mov	r16,r5
   12ea8:	10000f26 	beq	r2,zero,12ee8 <_Balloc+0x60>
   12eac:	8407883a 	add	r3,r16,r16
   12eb0:	18c7883a 	add	r3,r3,r3
   12eb4:	10c7883a 	add	r3,r2,r3
   12eb8:	18800017 	ldw	r2,0(r3)
   12ebc:	10001126 	beq	r2,zero,12f04 <_Balloc+0x7c>
   12ec0:	11000017 	ldw	r4,0(r2)
   12ec4:	19000015 	stw	r4,0(r3)
   12ec8:	10000415 	stw	zero,16(r2)
   12ecc:	10000315 	stw	zero,12(r2)
   12ed0:	dfc00317 	ldw	ra,12(sp)
   12ed4:	dc800217 	ldw	r18,8(sp)
   12ed8:	dc400117 	ldw	r17,4(sp)
   12edc:	dc000017 	ldw	r16,0(sp)
   12ee0:	dec00404 	addi	sp,sp,16
   12ee4:	f800283a 	ret
   12ee8:	01800844 	movi	r6,33
   12eec:	01400104 	movi	r5,4
   12ef0:	0016d040 	call	16d04 <_calloc_r>
   12ef4:	88801315 	stw	r2,76(r17)
   12ef8:	103fec1e 	bne	r2,zero,12eac <_Balloc+0x24>
   12efc:	0005883a 	mov	r2,zero
   12f00:	003ff306 	br	12ed0 <_Balloc+0x48>
   12f04:	01400044 	movi	r5,1
   12f08:	2c24983a 	sll	r18,r5,r16
   12f0c:	8809883a 	mov	r4,r17
   12f10:	91800144 	addi	r6,r18,5
   12f14:	318d883a 	add	r6,r6,r6
   12f18:	318d883a 	add	r6,r6,r6
   12f1c:	0016d040 	call	16d04 <_calloc_r>
   12f20:	103ff626 	beq	r2,zero,12efc <_Balloc+0x74>
   12f24:	14000115 	stw	r16,4(r2)
   12f28:	14800215 	stw	r18,8(r2)
   12f2c:	003fe606 	br	12ec8 <_Balloc+0x40>

00012f30 <_Bfree>:
   12f30:	28000826 	beq	r5,zero,12f54 <_Bfree+0x24>
   12f34:	28c00117 	ldw	r3,4(r5)
   12f38:	20801317 	ldw	r2,76(r4)
   12f3c:	18c7883a 	add	r3,r3,r3
   12f40:	18c7883a 	add	r3,r3,r3
   12f44:	10c5883a 	add	r2,r2,r3
   12f48:	10c00017 	ldw	r3,0(r2)
   12f4c:	28c00015 	stw	r3,0(r5)
   12f50:	11400015 	stw	r5,0(r2)
   12f54:	f800283a 	ret

00012f58 <__multadd>:
   12f58:	defffa04 	addi	sp,sp,-24
   12f5c:	dc800315 	stw	r18,12(sp)
   12f60:	dc400215 	stw	r17,8(sp)
   12f64:	dc000115 	stw	r16,4(sp)
   12f68:	2823883a 	mov	r17,r5
   12f6c:	2c000417 	ldw	r16,16(r5)
   12f70:	dfc00515 	stw	ra,20(sp)
   12f74:	dcc00415 	stw	r19,16(sp)
   12f78:	2025883a 	mov	r18,r4
   12f7c:	29400504 	addi	r5,r5,20
   12f80:	0011883a 	mov	r8,zero
   12f84:	28c00017 	ldw	r3,0(r5)
   12f88:	29400104 	addi	r5,r5,4
   12f8c:	42000044 	addi	r8,r8,1
   12f90:	18bfffcc 	andi	r2,r3,65535
   12f94:	1185383a 	mul	r2,r2,r6
   12f98:	1806d43a 	srli	r3,r3,16
   12f9c:	11cf883a 	add	r7,r2,r7
   12fa0:	3808d43a 	srli	r4,r7,16
   12fa4:	1987383a 	mul	r3,r3,r6
   12fa8:	38bfffcc 	andi	r2,r7,65535
   12fac:	1907883a 	add	r3,r3,r4
   12fb0:	1808943a 	slli	r4,r3,16
   12fb4:	180ed43a 	srli	r7,r3,16
   12fb8:	2085883a 	add	r2,r4,r2
   12fbc:	28bfff15 	stw	r2,-4(r5)
   12fc0:	443ff016 	blt	r8,r16,12f84 <__multadd+0x2c>
   12fc4:	38000926 	beq	r7,zero,12fec <__multadd+0x94>
   12fc8:	88800217 	ldw	r2,8(r17)
   12fcc:	80800f0e 	bge	r16,r2,1300c <__multadd+0xb4>
   12fd0:	80800144 	addi	r2,r16,5
   12fd4:	1085883a 	add	r2,r2,r2
   12fd8:	1085883a 	add	r2,r2,r2
   12fdc:	8885883a 	add	r2,r17,r2
   12fe0:	11c00015 	stw	r7,0(r2)
   12fe4:	84000044 	addi	r16,r16,1
   12fe8:	8c000415 	stw	r16,16(r17)
   12fec:	8805883a 	mov	r2,r17
   12ff0:	dfc00517 	ldw	ra,20(sp)
   12ff4:	dcc00417 	ldw	r19,16(sp)
   12ff8:	dc800317 	ldw	r18,12(sp)
   12ffc:	dc400217 	ldw	r17,8(sp)
   13000:	dc000117 	ldw	r16,4(sp)
   13004:	dec00604 	addi	sp,sp,24
   13008:	f800283a 	ret
   1300c:	89400117 	ldw	r5,4(r17)
   13010:	9009883a 	mov	r4,r18
   13014:	d9c00015 	stw	r7,0(sp)
   13018:	29400044 	addi	r5,r5,1
   1301c:	0012e880 	call	12e88 <_Balloc>
   13020:	89800417 	ldw	r6,16(r17)
   13024:	89400304 	addi	r5,r17,12
   13028:	11000304 	addi	r4,r2,12
   1302c:	31800084 	addi	r6,r6,2
   13030:	318d883a 	add	r6,r6,r6
   13034:	318d883a 	add	r6,r6,r6
   13038:	1027883a 	mov	r19,r2
   1303c:	000b4600 	call	b460 <memcpy>
   13040:	d9c00017 	ldw	r7,0(sp)
   13044:	88000a26 	beq	r17,zero,13070 <__multadd+0x118>
   13048:	88c00117 	ldw	r3,4(r17)
   1304c:	90801317 	ldw	r2,76(r18)
   13050:	18c7883a 	add	r3,r3,r3
   13054:	18c7883a 	add	r3,r3,r3
   13058:	10c5883a 	add	r2,r2,r3
   1305c:	10c00017 	ldw	r3,0(r2)
   13060:	88c00015 	stw	r3,0(r17)
   13064:	14400015 	stw	r17,0(r2)
   13068:	9823883a 	mov	r17,r19
   1306c:	003fd806 	br	12fd0 <__multadd+0x78>
   13070:	9823883a 	mov	r17,r19
   13074:	003fd606 	br	12fd0 <__multadd+0x78>

00013078 <__s2b>:
   13078:	defff904 	addi	sp,sp,-28
   1307c:	dc400115 	stw	r17,4(sp)
   13080:	dc000015 	stw	r16,0(sp)
   13084:	2023883a 	mov	r17,r4
   13088:	2821883a 	mov	r16,r5
   1308c:	39000204 	addi	r4,r7,8
   13090:	01400244 	movi	r5,9
   13094:	dcc00315 	stw	r19,12(sp)
   13098:	dc800215 	stw	r18,8(sp)
   1309c:	dfc00615 	stw	ra,24(sp)
   130a0:	dd400515 	stw	r21,20(sp)
   130a4:	dd000415 	stw	r20,16(sp)
   130a8:	3825883a 	mov	r18,r7
   130ac:	3027883a 	mov	r19,r6
   130b0:	0018bb00 	call	18bb0 <__divsi3>
   130b4:	00c00044 	movi	r3,1
   130b8:	000b883a 	mov	r5,zero
   130bc:	1880030e 	bge	r3,r2,130cc <__s2b+0x54>
   130c0:	18c7883a 	add	r3,r3,r3
   130c4:	29400044 	addi	r5,r5,1
   130c8:	18bffd16 	blt	r3,r2,130c0 <__s2b+0x48>
   130cc:	8809883a 	mov	r4,r17
   130d0:	0012e880 	call	12e88 <_Balloc>
   130d4:	d8c00717 	ldw	r3,28(sp)
   130d8:	10c00515 	stw	r3,20(r2)
   130dc:	00c00044 	movi	r3,1
   130e0:	10c00415 	stw	r3,16(r2)
   130e4:	00c00244 	movi	r3,9
   130e8:	1cc0210e 	bge	r3,r19,13170 <__s2b+0xf8>
   130ec:	80eb883a 	add	r21,r16,r3
   130f0:	a829883a 	mov	r20,r21
   130f4:	84e1883a 	add	r16,r16,r19
   130f8:	a1c00007 	ldb	r7,0(r20)
   130fc:	01800284 	movi	r6,10
   13100:	a5000044 	addi	r20,r20,1
   13104:	100b883a 	mov	r5,r2
   13108:	39fff404 	addi	r7,r7,-48
   1310c:	8809883a 	mov	r4,r17
   13110:	0012f580 	call	12f58 <__multadd>
   13114:	a43ff81e 	bne	r20,r16,130f8 <__s2b+0x80>
   13118:	ace1883a 	add	r16,r21,r19
   1311c:	843ffe04 	addi	r16,r16,-8
   13120:	9c800a0e 	bge	r19,r18,1314c <__s2b+0xd4>
   13124:	94e5c83a 	sub	r18,r18,r19
   13128:	84a5883a 	add	r18,r16,r18
   1312c:	81c00007 	ldb	r7,0(r16)
   13130:	01800284 	movi	r6,10
   13134:	84000044 	addi	r16,r16,1
   13138:	100b883a 	mov	r5,r2
   1313c:	39fff404 	addi	r7,r7,-48
   13140:	8809883a 	mov	r4,r17
   13144:	0012f580 	call	12f58 <__multadd>
   13148:	84bff81e 	bne	r16,r18,1312c <__s2b+0xb4>
   1314c:	dfc00617 	ldw	ra,24(sp)
   13150:	dd400517 	ldw	r21,20(sp)
   13154:	dd000417 	ldw	r20,16(sp)
   13158:	dcc00317 	ldw	r19,12(sp)
   1315c:	dc800217 	ldw	r18,8(sp)
   13160:	dc400117 	ldw	r17,4(sp)
   13164:	dc000017 	ldw	r16,0(sp)
   13168:	dec00704 	addi	sp,sp,28
   1316c:	f800283a 	ret
   13170:	84000284 	addi	r16,r16,10
   13174:	1827883a 	mov	r19,r3
   13178:	003fe906 	br	13120 <__s2b+0xa8>

0001317c <__hi0bits>:
   1317c:	20bfffec 	andhi	r2,r4,65535
   13180:	1000141e 	bne	r2,zero,131d4 <__hi0bits+0x58>
   13184:	2008943a 	slli	r4,r4,16
   13188:	00800404 	movi	r2,16
   1318c:	20ffc02c 	andhi	r3,r4,65280
   13190:	1800021e 	bne	r3,zero,1319c <__hi0bits+0x20>
   13194:	2008923a 	slli	r4,r4,8
   13198:	10800204 	addi	r2,r2,8
   1319c:	20fc002c 	andhi	r3,r4,61440
   131a0:	1800021e 	bne	r3,zero,131ac <__hi0bits+0x30>
   131a4:	2008913a 	slli	r4,r4,4
   131a8:	10800104 	addi	r2,r2,4
   131ac:	20f0002c 	andhi	r3,r4,49152
   131b0:	1800031e 	bne	r3,zero,131c0 <__hi0bits+0x44>
   131b4:	2109883a 	add	r4,r4,r4
   131b8:	10800084 	addi	r2,r2,2
   131bc:	2109883a 	add	r4,r4,r4
   131c0:	20000316 	blt	r4,zero,131d0 <__hi0bits+0x54>
   131c4:	2110002c 	andhi	r4,r4,16384
   131c8:	2000041e 	bne	r4,zero,131dc <__hi0bits+0x60>
   131cc:	00800804 	movi	r2,32
   131d0:	f800283a 	ret
   131d4:	0005883a 	mov	r2,zero
   131d8:	003fec06 	br	1318c <__hi0bits+0x10>
   131dc:	10800044 	addi	r2,r2,1
   131e0:	f800283a 	ret

000131e4 <__lo0bits>:
   131e4:	20c00017 	ldw	r3,0(r4)
   131e8:	188001cc 	andi	r2,r3,7
   131ec:	10000826 	beq	r2,zero,13210 <__lo0bits+0x2c>
   131f0:	1880004c 	andi	r2,r3,1
   131f4:	1000211e 	bne	r2,zero,1327c <__lo0bits+0x98>
   131f8:	1880008c 	andi	r2,r3,2
   131fc:	1000211e 	bne	r2,zero,13284 <__lo0bits+0xa0>
   13200:	1806d0ba 	srli	r3,r3,2
   13204:	00800084 	movi	r2,2
   13208:	20c00015 	stw	r3,0(r4)
   1320c:	f800283a 	ret
   13210:	18bfffcc 	andi	r2,r3,65535
   13214:	10001326 	beq	r2,zero,13264 <__lo0bits+0x80>
   13218:	0005883a 	mov	r2,zero
   1321c:	19403fcc 	andi	r5,r3,255
   13220:	2800021e 	bne	r5,zero,1322c <__lo0bits+0x48>
   13224:	1806d23a 	srli	r3,r3,8
   13228:	10800204 	addi	r2,r2,8
   1322c:	194003cc 	andi	r5,r3,15
   13230:	2800021e 	bne	r5,zero,1323c <__lo0bits+0x58>
   13234:	1806d13a 	srli	r3,r3,4
   13238:	10800104 	addi	r2,r2,4
   1323c:	194000cc 	andi	r5,r3,3
   13240:	2800021e 	bne	r5,zero,1324c <__lo0bits+0x68>
   13244:	1806d0ba 	srli	r3,r3,2
   13248:	10800084 	addi	r2,r2,2
   1324c:	1940004c 	andi	r5,r3,1
   13250:	2800081e 	bne	r5,zero,13274 <__lo0bits+0x90>
   13254:	1806d07a 	srli	r3,r3,1
   13258:	1800051e 	bne	r3,zero,13270 <__lo0bits+0x8c>
   1325c:	00800804 	movi	r2,32
   13260:	f800283a 	ret
   13264:	1806d43a 	srli	r3,r3,16
   13268:	00800404 	movi	r2,16
   1326c:	003feb06 	br	1321c <__lo0bits+0x38>
   13270:	10800044 	addi	r2,r2,1
   13274:	20c00015 	stw	r3,0(r4)
   13278:	f800283a 	ret
   1327c:	0005883a 	mov	r2,zero
   13280:	f800283a 	ret
   13284:	1806d07a 	srli	r3,r3,1
   13288:	00800044 	movi	r2,1
   1328c:	20c00015 	stw	r3,0(r4)
   13290:	f800283a 	ret

00013294 <__i2b>:
   13294:	defffd04 	addi	sp,sp,-12
   13298:	dc000015 	stw	r16,0(sp)
   1329c:	04000044 	movi	r16,1
   132a0:	dc400115 	stw	r17,4(sp)
   132a4:	2823883a 	mov	r17,r5
   132a8:	800b883a 	mov	r5,r16
   132ac:	dfc00215 	stw	ra,8(sp)
   132b0:	0012e880 	call	12e88 <_Balloc>
   132b4:	14400515 	stw	r17,20(r2)
   132b8:	14000415 	stw	r16,16(r2)
   132bc:	dfc00217 	ldw	ra,8(sp)
   132c0:	dc400117 	ldw	r17,4(sp)
   132c4:	dc000017 	ldw	r16,0(sp)
   132c8:	dec00304 	addi	sp,sp,12
   132cc:	f800283a 	ret

000132d0 <__multiply>:
   132d0:	defffa04 	addi	sp,sp,-24
   132d4:	dcc00315 	stw	r19,12(sp)
   132d8:	dc800215 	stw	r18,8(sp)
   132dc:	34c00417 	ldw	r19,16(r6)
   132e0:	2c800417 	ldw	r18,16(r5)
   132e4:	dd000415 	stw	r20,16(sp)
   132e8:	dc400115 	stw	r17,4(sp)
   132ec:	dfc00515 	stw	ra,20(sp)
   132f0:	dc000015 	stw	r16,0(sp)
   132f4:	2829883a 	mov	r20,r5
   132f8:	3023883a 	mov	r17,r6
   132fc:	94c0050e 	bge	r18,r19,13314 <__multiply+0x44>
   13300:	9007883a 	mov	r3,r18
   13304:	3029883a 	mov	r20,r6
   13308:	9825883a 	mov	r18,r19
   1330c:	2823883a 	mov	r17,r5
   13310:	1827883a 	mov	r19,r3
   13314:	a0800217 	ldw	r2,8(r20)
   13318:	94e1883a 	add	r16,r18,r19
   1331c:	a1400117 	ldw	r5,4(r20)
   13320:	1400010e 	bge	r2,r16,13328 <__multiply+0x58>
   13324:	29400044 	addi	r5,r5,1
   13328:	0012e880 	call	12e88 <_Balloc>
   1332c:	8415883a 	add	r10,r16,r16
   13330:	12c00504 	addi	r11,r2,20
   13334:	5295883a 	add	r10,r10,r10
   13338:	5a95883a 	add	r10,r11,r10
   1333c:	5807883a 	mov	r3,r11
   13340:	5a80032e 	bgeu	r11,r10,13350 <__multiply+0x80>
   13344:	18000015 	stw	zero,0(r3)
   13348:	18c00104 	addi	r3,r3,4
   1334c:	1abffd36 	bltu	r3,r10,13344 <__multiply+0x74>
   13350:	9ce7883a 	add	r19,r19,r19
   13354:	94a5883a 	add	r18,r18,r18
   13358:	89800504 	addi	r6,r17,20
   1335c:	9ce7883a 	add	r19,r19,r19
   13360:	a3400504 	addi	r13,r20,20
   13364:	94a5883a 	add	r18,r18,r18
   13368:	34d9883a 	add	r12,r6,r19
   1336c:	6c93883a 	add	r9,r13,r18
   13370:	3300422e 	bgeu	r6,r12,1347c <__multiply+0x1ac>
   13374:	37c00017 	ldw	ra,0(r6)
   13378:	fbffffcc 	andi	r15,ra,65535
   1337c:	78001b26 	beq	r15,zero,133ec <__multiply+0x11c>
   13380:	5811883a 	mov	r8,r11
   13384:	681d883a 	mov	r14,r13
   13388:	000f883a 	mov	r7,zero
   1338c:	71000017 	ldw	r4,0(r14)
   13390:	40c00017 	ldw	r3,0(r8)
   13394:	73800104 	addi	r14,r14,4
   13398:	217fffcc 	andi	r5,r4,65535
   1339c:	2bcb383a 	mul	r5,r5,r15
   133a0:	2008d43a 	srli	r4,r4,16
   133a4:	1c7fffcc 	andi	r17,r3,65535
   133a8:	2c4b883a 	add	r5,r5,r17
   133ac:	29cb883a 	add	r5,r5,r7
   133b0:	23c9383a 	mul	r4,r4,r15
   133b4:	1806d43a 	srli	r3,r3,16
   133b8:	280ed43a 	srli	r7,r5,16
   133bc:	297fffcc 	andi	r5,r5,65535
   133c0:	20c7883a 	add	r3,r4,r3
   133c4:	19c7883a 	add	r3,r3,r7
   133c8:	1808943a 	slli	r4,r3,16
   133cc:	4023883a 	mov	r17,r8
   133d0:	180ed43a 	srli	r7,r3,16
   133d4:	214ab03a 	or	r5,r4,r5
   133d8:	41400015 	stw	r5,0(r8)
   133dc:	42000104 	addi	r8,r8,4
   133e0:	727fea36 	bltu	r14,r9,1338c <__multiply+0xbc>
   133e4:	89c00115 	stw	r7,4(r17)
   133e8:	37c00017 	ldw	ra,0(r6)
   133ec:	f83ed43a 	srli	ra,ra,16
   133f0:	f8001f26 	beq	ra,zero,13470 <__multiply+0x1a0>
   133f4:	58c00017 	ldw	r3,0(r11)
   133f8:	681d883a 	mov	r14,r13
   133fc:	581f883a 	mov	r15,r11
   13400:	1811883a 	mov	r8,r3
   13404:	5825883a 	mov	r18,r11
   13408:	000f883a 	mov	r7,zero
   1340c:	00000106 	br	13414 <__multiply+0x144>
   13410:	8825883a 	mov	r18,r17
   13414:	7140000b 	ldhu	r5,0(r14)
   13418:	4010d43a 	srli	r8,r8,16
   1341c:	193fffcc 	andi	r4,r3,65535
   13420:	2fcb383a 	mul	r5,r5,ra
   13424:	7bc00104 	addi	r15,r15,4
   13428:	73800104 	addi	r14,r14,4
   1342c:	2a0b883a 	add	r5,r5,r8
   13430:	29cb883a 	add	r5,r5,r7
   13434:	2806943a 	slli	r3,r5,16
   13438:	94400104 	addi	r17,r18,4
   1343c:	280ad43a 	srli	r5,r5,16
   13440:	1908b03a 	or	r4,r3,r4
   13444:	793fff15 	stw	r4,-4(r15)
   13448:	70ffff17 	ldw	r3,-4(r14)
   1344c:	8a000017 	ldw	r8,0(r17)
   13450:	1806d43a 	srli	r3,r3,16
   13454:	413fffcc 	andi	r4,r8,65535
   13458:	1fc7383a 	mul	r3,r3,ra
   1345c:	1907883a 	add	r3,r3,r4
   13460:	1947883a 	add	r3,r3,r5
   13464:	180ed43a 	srli	r7,r3,16
   13468:	727fe936 	bltu	r14,r9,13410 <__multiply+0x140>
   1346c:	90c00115 	stw	r3,4(r18)
   13470:	31800104 	addi	r6,r6,4
   13474:	5ac00104 	addi	r11,r11,4
   13478:	333fbe36 	bltu	r6,r12,13374 <__multiply+0xa4>
   1347c:	0400090e 	bge	zero,r16,134a4 <__multiply+0x1d4>
   13480:	50ffff17 	ldw	r3,-4(r10)
   13484:	52bfff04 	addi	r10,r10,-4
   13488:	18000326 	beq	r3,zero,13498 <__multiply+0x1c8>
   1348c:	00000506 	br	134a4 <__multiply+0x1d4>
   13490:	50c00017 	ldw	r3,0(r10)
   13494:	1800031e 	bne	r3,zero,134a4 <__multiply+0x1d4>
   13498:	843fffc4 	addi	r16,r16,-1
   1349c:	52bfff04 	addi	r10,r10,-4
   134a0:	803ffb1e 	bne	r16,zero,13490 <__multiply+0x1c0>
   134a4:	14000415 	stw	r16,16(r2)
   134a8:	dfc00517 	ldw	ra,20(sp)
   134ac:	dd000417 	ldw	r20,16(sp)
   134b0:	dcc00317 	ldw	r19,12(sp)
   134b4:	dc800217 	ldw	r18,8(sp)
   134b8:	dc400117 	ldw	r17,4(sp)
   134bc:	dc000017 	ldw	r16,0(sp)
   134c0:	dec00604 	addi	sp,sp,24
   134c4:	f800283a 	ret

000134c8 <__pow5mult>:
   134c8:	defffa04 	addi	sp,sp,-24
   134cc:	dcc00315 	stw	r19,12(sp)
   134d0:	dc000015 	stw	r16,0(sp)
   134d4:	dfc00515 	stw	ra,20(sp)
   134d8:	dd000415 	stw	r20,16(sp)
   134dc:	dc800215 	stw	r18,8(sp)
   134e0:	dc400115 	stw	r17,4(sp)
   134e4:	308000cc 	andi	r2,r6,3
   134e8:	3021883a 	mov	r16,r6
   134ec:	2027883a 	mov	r19,r4
   134f0:	10002f1e 	bne	r2,zero,135b0 <__pow5mult+0xe8>
   134f4:	2825883a 	mov	r18,r5
   134f8:	8021d0ba 	srai	r16,r16,2
   134fc:	80001a26 	beq	r16,zero,13568 <__pow5mult+0xa0>
   13500:	9c401217 	ldw	r17,72(r19)
   13504:	8800061e 	bne	r17,zero,13520 <__pow5mult+0x58>
   13508:	00003406 	br	135dc <__pow5mult+0x114>
   1350c:	8021d07a 	srai	r16,r16,1
   13510:	80001526 	beq	r16,zero,13568 <__pow5mult+0xa0>
   13514:	88800017 	ldw	r2,0(r17)
   13518:	10001c26 	beq	r2,zero,1358c <__pow5mult+0xc4>
   1351c:	1023883a 	mov	r17,r2
   13520:	8080004c 	andi	r2,r16,1
   13524:	103ff926 	beq	r2,zero,1350c <__pow5mult+0x44>
   13528:	880d883a 	mov	r6,r17
   1352c:	900b883a 	mov	r5,r18
   13530:	9809883a 	mov	r4,r19
   13534:	00132d00 	call	132d0 <__multiply>
   13538:	90001b26 	beq	r18,zero,135a8 <__pow5mult+0xe0>
   1353c:	91000117 	ldw	r4,4(r18)
   13540:	98c01317 	ldw	r3,76(r19)
   13544:	8021d07a 	srai	r16,r16,1
   13548:	2109883a 	add	r4,r4,r4
   1354c:	2109883a 	add	r4,r4,r4
   13550:	1907883a 	add	r3,r3,r4
   13554:	19000017 	ldw	r4,0(r3)
   13558:	91000015 	stw	r4,0(r18)
   1355c:	1c800015 	stw	r18,0(r3)
   13560:	1025883a 	mov	r18,r2
   13564:	803feb1e 	bne	r16,zero,13514 <__pow5mult+0x4c>
   13568:	9005883a 	mov	r2,r18
   1356c:	dfc00517 	ldw	ra,20(sp)
   13570:	dd000417 	ldw	r20,16(sp)
   13574:	dcc00317 	ldw	r19,12(sp)
   13578:	dc800217 	ldw	r18,8(sp)
   1357c:	dc400117 	ldw	r17,4(sp)
   13580:	dc000017 	ldw	r16,0(sp)
   13584:	dec00604 	addi	sp,sp,24
   13588:	f800283a 	ret
   1358c:	880d883a 	mov	r6,r17
   13590:	880b883a 	mov	r5,r17
   13594:	9809883a 	mov	r4,r19
   13598:	00132d00 	call	132d0 <__multiply>
   1359c:	88800015 	stw	r2,0(r17)
   135a0:	10000015 	stw	zero,0(r2)
   135a4:	003fdd06 	br	1351c <__pow5mult+0x54>
   135a8:	1025883a 	mov	r18,r2
   135ac:	003fd706 	br	1350c <__pow5mult+0x44>
   135b0:	10bfffc4 	addi	r2,r2,-1
   135b4:	1085883a 	add	r2,r2,r2
   135b8:	00c000b4 	movhi	r3,2
   135bc:	18de2e04 	addi	r3,r3,30904
   135c0:	1085883a 	add	r2,r2,r2
   135c4:	1885883a 	add	r2,r3,r2
   135c8:	11800017 	ldw	r6,0(r2)
   135cc:	000f883a 	mov	r7,zero
   135d0:	0012f580 	call	12f58 <__multadd>
   135d4:	1025883a 	mov	r18,r2
   135d8:	003fc706 	br	134f8 <__pow5mult+0x30>
   135dc:	05000044 	movi	r20,1
   135e0:	a00b883a 	mov	r5,r20
   135e4:	9809883a 	mov	r4,r19
   135e8:	0012e880 	call	12e88 <_Balloc>
   135ec:	1023883a 	mov	r17,r2
   135f0:	00809c44 	movi	r2,625
   135f4:	88800515 	stw	r2,20(r17)
   135f8:	8d000415 	stw	r20,16(r17)
   135fc:	9c401215 	stw	r17,72(r19)
   13600:	88000015 	stw	zero,0(r17)
   13604:	003fc606 	br	13520 <__pow5mult+0x58>

00013608 <__lshift>:
   13608:	defff904 	addi	sp,sp,-28
   1360c:	dd400515 	stw	r21,20(sp)
   13610:	dcc00315 	stw	r19,12(sp)
   13614:	302bd17a 	srai	r21,r6,5
   13618:	2cc00417 	ldw	r19,16(r5)
   1361c:	28800217 	ldw	r2,8(r5)
   13620:	dd000415 	stw	r20,16(sp)
   13624:	ace7883a 	add	r19,r21,r19
   13628:	dc800215 	stw	r18,8(sp)
   1362c:	dc400115 	stw	r17,4(sp)
   13630:	dc000015 	stw	r16,0(sp)
   13634:	dfc00615 	stw	ra,24(sp)
   13638:	9c000044 	addi	r16,r19,1
   1363c:	2823883a 	mov	r17,r5
   13640:	3029883a 	mov	r20,r6
   13644:	2025883a 	mov	r18,r4
   13648:	29400117 	ldw	r5,4(r5)
   1364c:	1400030e 	bge	r2,r16,1365c <__lshift+0x54>
   13650:	1085883a 	add	r2,r2,r2
   13654:	29400044 	addi	r5,r5,1
   13658:	143ffd16 	blt	r2,r16,13650 <__lshift+0x48>
   1365c:	9009883a 	mov	r4,r18
   13660:	0012e880 	call	12e88 <_Balloc>
   13664:	10c00504 	addi	r3,r2,20
   13668:	0540070e 	bge	zero,r21,13688 <__lshift+0x80>
   1366c:	ad6b883a 	add	r21,r21,r21
   13670:	ad6b883a 	add	r21,r21,r21
   13674:	1809883a 	mov	r4,r3
   13678:	1d47883a 	add	r3,r3,r21
   1367c:	20000015 	stw	zero,0(r4)
   13680:	21000104 	addi	r4,r4,4
   13684:	193ffd1e 	bne	r3,r4,1367c <__lshift+0x74>
   13688:	8a000417 	ldw	r8,16(r17)
   1368c:	89000504 	addi	r4,r17,20
   13690:	a18007cc 	andi	r6,r20,31
   13694:	4211883a 	add	r8,r8,r8
   13698:	4211883a 	add	r8,r8,r8
   1369c:	2211883a 	add	r8,r4,r8
   136a0:	30002326 	beq	r6,zero,13730 <__lshift+0x128>
   136a4:	02400804 	movi	r9,32
   136a8:	4993c83a 	sub	r9,r9,r6
   136ac:	000b883a 	mov	r5,zero
   136b0:	21c00017 	ldw	r7,0(r4)
   136b4:	1815883a 	mov	r10,r3
   136b8:	18c00104 	addi	r3,r3,4
   136bc:	398e983a 	sll	r7,r7,r6
   136c0:	21000104 	addi	r4,r4,4
   136c4:	394ab03a 	or	r5,r7,r5
   136c8:	197fff15 	stw	r5,-4(r3)
   136cc:	217fff17 	ldw	r5,-4(r4)
   136d0:	2a4ad83a 	srl	r5,r5,r9
   136d4:	223ff636 	bltu	r4,r8,136b0 <__lshift+0xa8>
   136d8:	51400115 	stw	r5,4(r10)
   136dc:	28001a1e 	bne	r5,zero,13748 <__lshift+0x140>
   136e0:	843fffc4 	addi	r16,r16,-1
   136e4:	14000415 	stw	r16,16(r2)
   136e8:	88000826 	beq	r17,zero,1370c <__lshift+0x104>
   136ec:	89000117 	ldw	r4,4(r17)
   136f0:	90c01317 	ldw	r3,76(r18)
   136f4:	2109883a 	add	r4,r4,r4
   136f8:	2109883a 	add	r4,r4,r4
   136fc:	1907883a 	add	r3,r3,r4
   13700:	19000017 	ldw	r4,0(r3)
   13704:	89000015 	stw	r4,0(r17)
   13708:	1c400015 	stw	r17,0(r3)
   1370c:	dfc00617 	ldw	ra,24(sp)
   13710:	dd400517 	ldw	r21,20(sp)
   13714:	dd000417 	ldw	r20,16(sp)
   13718:	dcc00317 	ldw	r19,12(sp)
   1371c:	dc800217 	ldw	r18,8(sp)
   13720:	dc400117 	ldw	r17,4(sp)
   13724:	dc000017 	ldw	r16,0(sp)
   13728:	dec00704 	addi	sp,sp,28
   1372c:	f800283a 	ret
   13730:	21400017 	ldw	r5,0(r4)
   13734:	18c00104 	addi	r3,r3,4
   13738:	21000104 	addi	r4,r4,4
   1373c:	197fff15 	stw	r5,-4(r3)
   13740:	223ffb36 	bltu	r4,r8,13730 <__lshift+0x128>
   13744:	003fe606 	br	136e0 <__lshift+0xd8>
   13748:	9c000084 	addi	r16,r19,2
   1374c:	003fe406 	br	136e0 <__lshift+0xd8>

00013750 <__mcmp>:
   13750:	20800417 	ldw	r2,16(r4)
   13754:	28c00417 	ldw	r3,16(r5)
   13758:	10c5c83a 	sub	r2,r2,r3
   1375c:	1000111e 	bne	r2,zero,137a4 <__mcmp+0x54>
   13760:	18c7883a 	add	r3,r3,r3
   13764:	18c7883a 	add	r3,r3,r3
   13768:	21000504 	addi	r4,r4,20
   1376c:	29400504 	addi	r5,r5,20
   13770:	20c5883a 	add	r2,r4,r3
   13774:	28cb883a 	add	r5,r5,r3
   13778:	00000106 	br	13780 <__mcmp+0x30>
   1377c:	20800a2e 	bgeu	r4,r2,137a8 <__mcmp+0x58>
   13780:	10bfff04 	addi	r2,r2,-4
   13784:	297fff04 	addi	r5,r5,-4
   13788:	11800017 	ldw	r6,0(r2)
   1378c:	28c00017 	ldw	r3,0(r5)
   13790:	30fffa26 	beq	r6,r3,1377c <__mcmp+0x2c>
   13794:	30c00236 	bltu	r6,r3,137a0 <__mcmp+0x50>
   13798:	00800044 	movi	r2,1
   1379c:	f800283a 	ret
   137a0:	00bfffc4 	movi	r2,-1
   137a4:	f800283a 	ret
   137a8:	0005883a 	mov	r2,zero
   137ac:	f800283a 	ret

000137b0 <__mdiff>:
   137b0:	28c00417 	ldw	r3,16(r5)
   137b4:	30800417 	ldw	r2,16(r6)
   137b8:	defffa04 	addi	sp,sp,-24
   137bc:	dcc00315 	stw	r19,12(sp)
   137c0:	dc800215 	stw	r18,8(sp)
   137c4:	dfc00515 	stw	ra,20(sp)
   137c8:	dd000415 	stw	r20,16(sp)
   137cc:	dc400115 	stw	r17,4(sp)
   137d0:	dc000015 	stw	r16,0(sp)
   137d4:	1887c83a 	sub	r3,r3,r2
   137d8:	2825883a 	mov	r18,r5
   137dc:	3027883a 	mov	r19,r6
   137e0:	1800141e 	bne	r3,zero,13834 <__mdiff+0x84>
   137e4:	1085883a 	add	r2,r2,r2
   137e8:	1085883a 	add	r2,r2,r2
   137ec:	2a000504 	addi	r8,r5,20
   137f0:	34000504 	addi	r16,r6,20
   137f4:	4087883a 	add	r3,r8,r2
   137f8:	8085883a 	add	r2,r16,r2
   137fc:	00000106 	br	13804 <__mdiff+0x54>
   13800:	40c0592e 	bgeu	r8,r3,13968 <__mdiff+0x1b8>
   13804:	18ffff04 	addi	r3,r3,-4
   13808:	10bfff04 	addi	r2,r2,-4
   1380c:	19c00017 	ldw	r7,0(r3)
   13810:	11400017 	ldw	r5,0(r2)
   13814:	397ffa26 	beq	r7,r5,13800 <__mdiff+0x50>
   13818:	3940592e 	bgeu	r7,r5,13980 <__mdiff+0x1d0>
   1381c:	9005883a 	mov	r2,r18
   13820:	4023883a 	mov	r17,r8
   13824:	9825883a 	mov	r18,r19
   13828:	05000044 	movi	r20,1
   1382c:	1027883a 	mov	r19,r2
   13830:	00000406 	br	13844 <__mdiff+0x94>
   13834:	18005616 	blt	r3,zero,13990 <__mdiff+0x1e0>
   13838:	34400504 	addi	r17,r6,20
   1383c:	2c000504 	addi	r16,r5,20
   13840:	0029883a 	mov	r20,zero
   13844:	91400117 	ldw	r5,4(r18)
   13848:	0012e880 	call	12e88 <_Balloc>
   1384c:	92400417 	ldw	r9,16(r18)
   13850:	9b000417 	ldw	r12,16(r19)
   13854:	12c00504 	addi	r11,r2,20
   13858:	4a51883a 	add	r8,r9,r9
   1385c:	6319883a 	add	r12,r12,r12
   13860:	4211883a 	add	r8,r8,r8
   13864:	6319883a 	add	r12,r12,r12
   13868:	15000315 	stw	r20,12(r2)
   1386c:	8211883a 	add	r8,r16,r8
   13870:	8b19883a 	add	r12,r17,r12
   13874:	0007883a 	mov	r3,zero
   13878:	81400017 	ldw	r5,0(r16)
   1387c:	89c00017 	ldw	r7,0(r17)
   13880:	59800104 	addi	r6,r11,4
   13884:	293fffcc 	andi	r4,r5,65535
   13888:	20c7883a 	add	r3,r4,r3
   1388c:	393fffcc 	andi	r4,r7,65535
   13890:	1909c83a 	sub	r4,r3,r4
   13894:	280ad43a 	srli	r5,r5,16
   13898:	380ed43a 	srli	r7,r7,16
   1389c:	2007d43a 	srai	r3,r4,16
   138a0:	213fffcc 	andi	r4,r4,65535
   138a4:	29cbc83a 	sub	r5,r5,r7
   138a8:	28c7883a 	add	r3,r5,r3
   138ac:	180a943a 	slli	r5,r3,16
   138b0:	8c400104 	addi	r17,r17,4
   138b4:	84000104 	addi	r16,r16,4
   138b8:	2908b03a 	or	r4,r5,r4
   138bc:	59000015 	stw	r4,0(r11)
   138c0:	1807d43a 	srai	r3,r3,16
   138c4:	3015883a 	mov	r10,r6
   138c8:	3017883a 	mov	r11,r6
   138cc:	8b3fea36 	bltu	r17,r12,13878 <__mdiff+0xc8>
   138d0:	8200162e 	bgeu	r16,r8,1392c <__mdiff+0x17c>
   138d4:	8017883a 	mov	r11,r16
   138d8:	59400017 	ldw	r5,0(r11)
   138dc:	31800104 	addi	r6,r6,4
   138e0:	5ac00104 	addi	r11,r11,4
   138e4:	293fffcc 	andi	r4,r5,65535
   138e8:	20c7883a 	add	r3,r4,r3
   138ec:	280ed43a 	srli	r7,r5,16
   138f0:	180bd43a 	srai	r5,r3,16
   138f4:	193fffcc 	andi	r4,r3,65535
   138f8:	3947883a 	add	r3,r7,r5
   138fc:	180a943a 	slli	r5,r3,16
   13900:	1807d43a 	srai	r3,r3,16
   13904:	2908b03a 	or	r4,r5,r4
   13908:	313fff15 	stw	r4,-4(r6)
   1390c:	5a3ff236 	bltu	r11,r8,138d8 <__mdiff+0x128>
   13910:	0406303a 	nor	r3,zero,r16
   13914:	1a07883a 	add	r3,r3,r8
   13918:	1806d0ba 	srli	r3,r3,2
   1391c:	18c00044 	addi	r3,r3,1
   13920:	18c7883a 	add	r3,r3,r3
   13924:	18c7883a 	add	r3,r3,r3
   13928:	50d5883a 	add	r10,r10,r3
   1392c:	50ffff04 	addi	r3,r10,-4
   13930:	2000041e 	bne	r4,zero,13944 <__mdiff+0x194>
   13934:	18ffff04 	addi	r3,r3,-4
   13938:	19000017 	ldw	r4,0(r3)
   1393c:	4a7fffc4 	addi	r9,r9,-1
   13940:	203ffc26 	beq	r4,zero,13934 <__mdiff+0x184>
   13944:	12400415 	stw	r9,16(r2)
   13948:	dfc00517 	ldw	ra,20(sp)
   1394c:	dd000417 	ldw	r20,16(sp)
   13950:	dcc00317 	ldw	r19,12(sp)
   13954:	dc800217 	ldw	r18,8(sp)
   13958:	dc400117 	ldw	r17,4(sp)
   1395c:	dc000017 	ldw	r16,0(sp)
   13960:	dec00604 	addi	sp,sp,24
   13964:	f800283a 	ret
   13968:	000b883a 	mov	r5,zero
   1396c:	0012e880 	call	12e88 <_Balloc>
   13970:	00c00044 	movi	r3,1
   13974:	10c00415 	stw	r3,16(r2)
   13978:	10000515 	stw	zero,20(r2)
   1397c:	003ff206 	br	13948 <__mdiff+0x198>
   13980:	8023883a 	mov	r17,r16
   13984:	0029883a 	mov	r20,zero
   13988:	4021883a 	mov	r16,r8
   1398c:	003fad06 	br	13844 <__mdiff+0x94>
   13990:	9005883a 	mov	r2,r18
   13994:	94400504 	addi	r17,r18,20
   13998:	9c000504 	addi	r16,r19,20
   1399c:	9825883a 	mov	r18,r19
   139a0:	05000044 	movi	r20,1
   139a4:	1027883a 	mov	r19,r2
   139a8:	003fa606 	br	13844 <__mdiff+0x94>

000139ac <__ulp>:
   139ac:	295ffc2c 	andhi	r5,r5,32752
   139b0:	00bf3034 	movhi	r2,64704
   139b4:	2887883a 	add	r3,r5,r2
   139b8:	00c0020e 	bge	zero,r3,139c4 <__ulp+0x18>
   139bc:	0005883a 	mov	r2,zero
   139c0:	f800283a 	ret
   139c4:	00c7c83a 	sub	r3,zero,r3
   139c8:	1807d53a 	srai	r3,r3,20
   139cc:	008004c4 	movi	r2,19
   139d0:	10c00b0e 	bge	r2,r3,13a00 <__ulp+0x54>
   139d4:	18bffb04 	addi	r2,r3,-20
   139d8:	01000784 	movi	r4,30
   139dc:	0007883a 	mov	r3,zero
   139e0:	20800516 	blt	r4,r2,139f8 <__ulp+0x4c>
   139e4:	010007c4 	movi	r4,31
   139e8:	2089c83a 	sub	r4,r4,r2
   139ec:	00800044 	movi	r2,1
   139f0:	1104983a 	sll	r2,r2,r4
   139f4:	f800283a 	ret
   139f8:	00800044 	movi	r2,1
   139fc:	f800283a 	ret
   13a00:	01400234 	movhi	r5,8
   13a04:	28c7d83a 	sra	r3,r5,r3
   13a08:	0005883a 	mov	r2,zero
   13a0c:	f800283a 	ret

00013a10 <__b2d>:
   13a10:	defffa04 	addi	sp,sp,-24
   13a14:	dc000015 	stw	r16,0(sp)
   13a18:	24000417 	ldw	r16,16(r4)
   13a1c:	dc400115 	stw	r17,4(sp)
   13a20:	24400504 	addi	r17,r4,20
   13a24:	8421883a 	add	r16,r16,r16
   13a28:	8421883a 	add	r16,r16,r16
   13a2c:	8c21883a 	add	r16,r17,r16
   13a30:	dc800215 	stw	r18,8(sp)
   13a34:	84bfff17 	ldw	r18,-4(r16)
   13a38:	dd000415 	stw	r20,16(sp)
   13a3c:	dcc00315 	stw	r19,12(sp)
   13a40:	9009883a 	mov	r4,r18
   13a44:	2829883a 	mov	r20,r5
   13a48:	dfc00515 	stw	ra,20(sp)
   13a4c:	001317c0 	call	1317c <__hi0bits>
   13a50:	00c00804 	movi	r3,32
   13a54:	1889c83a 	sub	r4,r3,r2
   13a58:	a1000015 	stw	r4,0(r20)
   13a5c:	01000284 	movi	r4,10
   13a60:	84ffff04 	addi	r19,r16,-4
   13a64:	20801216 	blt	r4,r2,13ab0 <__b2d+0xa0>
   13a68:	018002c4 	movi	r6,11
   13a6c:	308dc83a 	sub	r6,r6,r2
   13a70:	9186d83a 	srl	r3,r18,r6
   13a74:	18cffc34 	orhi	r3,r3,16368
   13a78:	8cc0212e 	bgeu	r17,r19,13b00 <__b2d+0xf0>
   13a7c:	813ffe17 	ldw	r4,-8(r16)
   13a80:	218cd83a 	srl	r6,r4,r6
   13a84:	10800544 	addi	r2,r2,21
   13a88:	9084983a 	sll	r2,r18,r2
   13a8c:	1184b03a 	or	r2,r2,r6
   13a90:	dfc00517 	ldw	ra,20(sp)
   13a94:	dd000417 	ldw	r20,16(sp)
   13a98:	dcc00317 	ldw	r19,12(sp)
   13a9c:	dc800217 	ldw	r18,8(sp)
   13aa0:	dc400117 	ldw	r17,4(sp)
   13aa4:	dc000017 	ldw	r16,0(sp)
   13aa8:	dec00604 	addi	sp,sp,24
   13aac:	f800283a 	ret
   13ab0:	8cc00f2e 	bgeu	r17,r19,13af0 <__b2d+0xe0>
   13ab4:	117ffd44 	addi	r5,r2,-11
   13ab8:	80bffe17 	ldw	r2,-8(r16)
   13abc:	28000e26 	beq	r5,zero,13af8 <__b2d+0xe8>
   13ac0:	1949c83a 	sub	r4,r3,r5
   13ac4:	9164983a 	sll	r18,r18,r5
   13ac8:	1106d83a 	srl	r3,r2,r4
   13acc:	81bffe04 	addi	r6,r16,-8
   13ad0:	948ffc34 	orhi	r18,r18,16368
   13ad4:	90c6b03a 	or	r3,r18,r3
   13ad8:	89800e2e 	bgeu	r17,r6,13b14 <__b2d+0x104>
   13adc:	81bffd17 	ldw	r6,-12(r16)
   13ae0:	1144983a 	sll	r2,r2,r5
   13ae4:	310ad83a 	srl	r5,r6,r4
   13ae8:	2884b03a 	or	r2,r5,r2
   13aec:	003fe806 	br	13a90 <__b2d+0x80>
   13af0:	10bffd44 	addi	r2,r2,-11
   13af4:	1000041e 	bne	r2,zero,13b08 <__b2d+0xf8>
   13af8:	90cffc34 	orhi	r3,r18,16368
   13afc:	003fe406 	br	13a90 <__b2d+0x80>
   13b00:	000d883a 	mov	r6,zero
   13b04:	003fdf06 	br	13a84 <__b2d+0x74>
   13b08:	90a4983a 	sll	r18,r18,r2
   13b0c:	0005883a 	mov	r2,zero
   13b10:	003ff906 	br	13af8 <__b2d+0xe8>
   13b14:	1144983a 	sll	r2,r2,r5
   13b18:	003fdd06 	br	13a90 <__b2d+0x80>

00013b1c <__d2b>:
   13b1c:	defff804 	addi	sp,sp,-32
   13b20:	dc000215 	stw	r16,8(sp)
   13b24:	3021883a 	mov	r16,r6
   13b28:	dc400315 	stw	r17,12(sp)
   13b2c:	8022907a 	slli	r17,r16,1
   13b30:	dd000615 	stw	r20,24(sp)
   13b34:	2829883a 	mov	r20,r5
   13b38:	01400044 	movi	r5,1
   13b3c:	dcc00515 	stw	r19,20(sp)
   13b40:	dc800415 	stw	r18,16(sp)
   13b44:	dfc00715 	stw	ra,28(sp)
   13b48:	3825883a 	mov	r18,r7
   13b4c:	8822d57a 	srli	r17,r17,21
   13b50:	0012e880 	call	12e88 <_Balloc>
   13b54:	1027883a 	mov	r19,r2
   13b58:	00800434 	movhi	r2,16
   13b5c:	10bfffc4 	addi	r2,r2,-1
   13b60:	808c703a 	and	r6,r16,r2
   13b64:	88000126 	beq	r17,zero,13b6c <__d2b+0x50>
   13b68:	31800434 	orhi	r6,r6,16
   13b6c:	d9800015 	stw	r6,0(sp)
   13b70:	a0002426 	beq	r20,zero,13c04 <__d2b+0xe8>
   13b74:	d9000104 	addi	r4,sp,4
   13b78:	dd000115 	stw	r20,4(sp)
   13b7c:	00131e40 	call	131e4 <__lo0bits>
   13b80:	d8c00017 	ldw	r3,0(sp)
   13b84:	10002f1e 	bne	r2,zero,13c44 <__d2b+0x128>
   13b88:	d9000117 	ldw	r4,4(sp)
   13b8c:	99000515 	stw	r4,20(r19)
   13b90:	1821003a 	cmpeq	r16,r3,zero
   13b94:	01000084 	movi	r4,2
   13b98:	2421c83a 	sub	r16,r4,r16
   13b9c:	98c00615 	stw	r3,24(r19)
   13ba0:	9c000415 	stw	r16,16(r19)
   13ba4:	88001f1e 	bne	r17,zero,13c24 <__d2b+0x108>
   13ba8:	10bef384 	addi	r2,r2,-1074
   13bac:	90800015 	stw	r2,0(r18)
   13bb0:	00900034 	movhi	r2,16384
   13bb4:	10bfffc4 	addi	r2,r2,-1
   13bb8:	8085883a 	add	r2,r16,r2
   13bbc:	1085883a 	add	r2,r2,r2
   13bc0:	1085883a 	add	r2,r2,r2
   13bc4:	9885883a 	add	r2,r19,r2
   13bc8:	11000517 	ldw	r4,20(r2)
   13bcc:	8020917a 	slli	r16,r16,5
   13bd0:	001317c0 	call	1317c <__hi0bits>
   13bd4:	d8c00817 	ldw	r3,32(sp)
   13bd8:	8085c83a 	sub	r2,r16,r2
   13bdc:	18800015 	stw	r2,0(r3)
   13be0:	9805883a 	mov	r2,r19
   13be4:	dfc00717 	ldw	ra,28(sp)
   13be8:	dd000617 	ldw	r20,24(sp)
   13bec:	dcc00517 	ldw	r19,20(sp)
   13bf0:	dc800417 	ldw	r18,16(sp)
   13bf4:	dc400317 	ldw	r17,12(sp)
   13bf8:	dc000217 	ldw	r16,8(sp)
   13bfc:	dec00804 	addi	sp,sp,32
   13c00:	f800283a 	ret
   13c04:	d809883a 	mov	r4,sp
   13c08:	00131e40 	call	131e4 <__lo0bits>
   13c0c:	d8c00017 	ldw	r3,0(sp)
   13c10:	04000044 	movi	r16,1
   13c14:	9c000415 	stw	r16,16(r19)
   13c18:	98c00515 	stw	r3,20(r19)
   13c1c:	10800804 	addi	r2,r2,32
   13c20:	883fe126 	beq	r17,zero,13ba8 <__d2b+0x8c>
   13c24:	00c00d44 	movi	r3,53
   13c28:	8c7ef344 	addi	r17,r17,-1075
   13c2c:	88a3883a 	add	r17,r17,r2
   13c30:	1885c83a 	sub	r2,r3,r2
   13c34:	d8c00817 	ldw	r3,32(sp)
   13c38:	94400015 	stw	r17,0(r18)
   13c3c:	18800015 	stw	r2,0(r3)
   13c40:	003fe706 	br	13be0 <__d2b+0xc4>
   13c44:	01000804 	movi	r4,32
   13c48:	2089c83a 	sub	r4,r4,r2
   13c4c:	1908983a 	sll	r4,r3,r4
   13c50:	d9400117 	ldw	r5,4(sp)
   13c54:	1886d83a 	srl	r3,r3,r2
   13c58:	2148b03a 	or	r4,r4,r5
   13c5c:	99000515 	stw	r4,20(r19)
   13c60:	d8c00015 	stw	r3,0(sp)
   13c64:	003fca06 	br	13b90 <__d2b+0x74>

00013c68 <__ratio>:
   13c68:	defff904 	addi	sp,sp,-28
   13c6c:	dc400315 	stw	r17,12(sp)
   13c70:	2823883a 	mov	r17,r5
   13c74:	d9400104 	addi	r5,sp,4
   13c78:	dfc00615 	stw	ra,24(sp)
   13c7c:	dcc00515 	stw	r19,20(sp)
   13c80:	dc800415 	stw	r18,16(sp)
   13c84:	2027883a 	mov	r19,r4
   13c88:	dc000215 	stw	r16,8(sp)
   13c8c:	0013a100 	call	13a10 <__b2d>
   13c90:	d80b883a 	mov	r5,sp
   13c94:	8809883a 	mov	r4,r17
   13c98:	1025883a 	mov	r18,r2
   13c9c:	1821883a 	mov	r16,r3
   13ca0:	0013a100 	call	13a10 <__b2d>
   13ca4:	8a000417 	ldw	r8,16(r17)
   13ca8:	99000417 	ldw	r4,16(r19)
   13cac:	d9400117 	ldw	r5,4(sp)
   13cb0:	2209c83a 	sub	r4,r4,r8
   13cb4:	2010917a 	slli	r8,r4,5
   13cb8:	d9000017 	ldw	r4,0(sp)
   13cbc:	2909c83a 	sub	r4,r5,r4
   13cc0:	4109883a 	add	r4,r8,r4
   13cc4:	01000e0e 	bge	zero,r4,13d00 <__ratio+0x98>
   13cc8:	2008953a 	slli	r4,r4,20
   13ccc:	2421883a 	add	r16,r4,r16
   13cd0:	100d883a 	mov	r6,r2
   13cd4:	180f883a 	mov	r7,r3
   13cd8:	9009883a 	mov	r4,r18
   13cdc:	800b883a 	mov	r5,r16
   13ce0:	00196100 	call	19610 <__divdf3>
   13ce4:	dfc00617 	ldw	ra,24(sp)
   13ce8:	dcc00517 	ldw	r19,20(sp)
   13cec:	dc800417 	ldw	r18,16(sp)
   13cf0:	dc400317 	ldw	r17,12(sp)
   13cf4:	dc000217 	ldw	r16,8(sp)
   13cf8:	dec00704 	addi	sp,sp,28
   13cfc:	f800283a 	ret
   13d00:	2008953a 	slli	r4,r4,20
   13d04:	1907c83a 	sub	r3,r3,r4
   13d08:	003ff106 	br	13cd0 <__ratio+0x68>

00013d0c <_mprec_log10>:
   13d0c:	defffe04 	addi	sp,sp,-8
   13d10:	dc000015 	stw	r16,0(sp)
   13d14:	dfc00115 	stw	ra,4(sp)
   13d18:	008005c4 	movi	r2,23
   13d1c:	2021883a 	mov	r16,r4
   13d20:	11000d0e 	bge	r2,r4,13d58 <_mprec_log10+0x4c>
   13d24:	0005883a 	mov	r2,zero
   13d28:	00cffc34 	movhi	r3,16368
   13d2c:	843fffc4 	addi	r16,r16,-1
   13d30:	000d883a 	mov	r6,zero
   13d34:	01d00934 	movhi	r7,16420
   13d38:	1009883a 	mov	r4,r2
   13d3c:	180b883a 	mov	r5,r3
   13d40:	001a0740 	call	1a074 <__muldf3>
   13d44:	803ff91e 	bne	r16,zero,13d2c <_mprec_log10+0x20>
   13d48:	dfc00117 	ldw	ra,4(sp)
   13d4c:	dc000017 	ldw	r16,0(sp)
   13d50:	dec00204 	addi	sp,sp,8
   13d54:	f800283a 	ret
   13d58:	202090fa 	slli	r16,r4,3
   13d5c:	008000b4 	movhi	r2,2
   13d60:	109e4504 	addi	r2,r2,30996
   13d64:	1421883a 	add	r16,r2,r16
   13d68:	80800017 	ldw	r2,0(r16)
   13d6c:	80c00117 	ldw	r3,4(r16)
   13d70:	dfc00117 	ldw	ra,4(sp)
   13d74:	dc000017 	ldw	r16,0(sp)
   13d78:	dec00204 	addi	sp,sp,8
   13d7c:	f800283a 	ret

00013d80 <__copybits>:
   13d80:	297fffc4 	addi	r5,r5,-1
   13d84:	280fd17a 	srai	r7,r5,5
   13d88:	30c00417 	ldw	r3,16(r6)
   13d8c:	30800504 	addi	r2,r6,20
   13d90:	39c00044 	addi	r7,r7,1
   13d94:	18c7883a 	add	r3,r3,r3
   13d98:	39cf883a 	add	r7,r7,r7
   13d9c:	18c7883a 	add	r3,r3,r3
   13da0:	39cf883a 	add	r7,r7,r7
   13da4:	10c7883a 	add	r3,r2,r3
   13da8:	21cf883a 	add	r7,r4,r7
   13dac:	10c00d2e 	bgeu	r2,r3,13de4 <__copybits+0x64>
   13db0:	200b883a 	mov	r5,r4
   13db4:	12000017 	ldw	r8,0(r2)
   13db8:	29400104 	addi	r5,r5,4
   13dbc:	10800104 	addi	r2,r2,4
   13dc0:	2a3fff15 	stw	r8,-4(r5)
   13dc4:	10fffb36 	bltu	r2,r3,13db4 <__copybits+0x34>
   13dc8:	1985c83a 	sub	r2,r3,r6
   13dcc:	10bffac4 	addi	r2,r2,-21
   13dd0:	1004d0ba 	srli	r2,r2,2
   13dd4:	10800044 	addi	r2,r2,1
   13dd8:	1085883a 	add	r2,r2,r2
   13ddc:	1085883a 	add	r2,r2,r2
   13de0:	2089883a 	add	r4,r4,r2
   13de4:	21c0032e 	bgeu	r4,r7,13df4 <__copybits+0x74>
   13de8:	20000015 	stw	zero,0(r4)
   13dec:	21000104 	addi	r4,r4,4
   13df0:	21fffd36 	bltu	r4,r7,13de8 <__copybits+0x68>
   13df4:	f800283a 	ret

00013df8 <__any_on>:
   13df8:	20c00417 	ldw	r3,16(r4)
   13dfc:	2805d17a 	srai	r2,r5,5
   13e00:	21000504 	addi	r4,r4,20
   13e04:	18800d0e 	bge	r3,r2,13e3c <__any_on+0x44>
   13e08:	18c7883a 	add	r3,r3,r3
   13e0c:	18c7883a 	add	r3,r3,r3
   13e10:	20c7883a 	add	r3,r4,r3
   13e14:	20c0192e 	bgeu	r4,r3,13e7c <__any_on+0x84>
   13e18:	18bfff17 	ldw	r2,-4(r3)
   13e1c:	18ffff04 	addi	r3,r3,-4
   13e20:	1000041e 	bne	r2,zero,13e34 <__any_on+0x3c>
   13e24:	20c0142e 	bgeu	r4,r3,13e78 <__any_on+0x80>
   13e28:	18ffff04 	addi	r3,r3,-4
   13e2c:	19400017 	ldw	r5,0(r3)
   13e30:	283ffc26 	beq	r5,zero,13e24 <__any_on+0x2c>
   13e34:	00800044 	movi	r2,1
   13e38:	f800283a 	ret
   13e3c:	10c00a0e 	bge	r2,r3,13e68 <__any_on+0x70>
   13e40:	1085883a 	add	r2,r2,r2
   13e44:	1085883a 	add	r2,r2,r2
   13e48:	294007cc 	andi	r5,r5,31
   13e4c:	2087883a 	add	r3,r4,r2
   13e50:	283ff026 	beq	r5,zero,13e14 <__any_on+0x1c>
   13e54:	19800017 	ldw	r6,0(r3)
   13e58:	3144d83a 	srl	r2,r6,r5
   13e5c:	114a983a 	sll	r5,r2,r5
   13e60:	317ff41e 	bne	r6,r5,13e34 <__any_on+0x3c>
   13e64:	003feb06 	br	13e14 <__any_on+0x1c>
   13e68:	1085883a 	add	r2,r2,r2
   13e6c:	1085883a 	add	r2,r2,r2
   13e70:	2087883a 	add	r3,r4,r2
   13e74:	003fe706 	br	13e14 <__any_on+0x1c>
   13e78:	f800283a 	ret
   13e7c:	0005883a 	mov	r2,zero
   13e80:	f800283a 	ret

00013e84 <__fpclassifyd>:
   13e84:	00a00034 	movhi	r2,32768
   13e88:	10bfffc4 	addi	r2,r2,-1
   13e8c:	2884703a 	and	r2,r5,r2
   13e90:	10000726 	beq	r2,zero,13eb0 <__fpclassifyd+0x2c>
   13e94:	00fffc34 	movhi	r3,65520
   13e98:	019ff834 	movhi	r6,32736
   13e9c:	28c7883a 	add	r3,r5,r3
   13ea0:	31bfffc4 	addi	r6,r6,-1
   13ea4:	30c00536 	bltu	r6,r3,13ebc <__fpclassifyd+0x38>
   13ea8:	00800104 	movi	r2,4
   13eac:	f800283a 	ret
   13eb0:	2000021e 	bne	r4,zero,13ebc <__fpclassifyd+0x38>
   13eb4:	00800084 	movi	r2,2
   13eb8:	f800283a 	ret
   13ebc:	00dffc34 	movhi	r3,32752
   13ec0:	019ff834 	movhi	r6,32736
   13ec4:	28cb883a 	add	r5,r5,r3
   13ec8:	31bfffc4 	addi	r6,r6,-1
   13ecc:	317ff62e 	bgeu	r6,r5,13ea8 <__fpclassifyd+0x24>
   13ed0:	01400434 	movhi	r5,16
   13ed4:	297fffc4 	addi	r5,r5,-1
   13ed8:	28800236 	bltu	r5,r2,13ee4 <__fpclassifyd+0x60>
   13edc:	008000c4 	movi	r2,3
   13ee0:	f800283a 	ret
   13ee4:	10c00226 	beq	r2,r3,13ef0 <__fpclassifyd+0x6c>
   13ee8:	0005883a 	mov	r2,zero
   13eec:	f800283a 	ret
   13ef0:	2005003a 	cmpeq	r2,r4,zero
   13ef4:	f800283a 	ret

00013ef8 <_sbrk_r>:
   13ef8:	defffd04 	addi	sp,sp,-12
   13efc:	dc000015 	stw	r16,0(sp)
   13f00:	040000f4 	movhi	r16,3
   13f04:	dc400115 	stw	r17,4(sp)
   13f08:	842e3a04 	addi	r16,r16,-18200
   13f0c:	2023883a 	mov	r17,r4
   13f10:	2809883a 	mov	r4,r5
   13f14:	dfc00215 	stw	ra,8(sp)
   13f18:	80000015 	stw	zero,0(r16)
   13f1c:	001b9e40 	call	1b9e4 <sbrk>
   13f20:	00ffffc4 	movi	r3,-1
   13f24:	10c00526 	beq	r2,r3,13f3c <_sbrk_r+0x44>
   13f28:	dfc00217 	ldw	ra,8(sp)
   13f2c:	dc400117 	ldw	r17,4(sp)
   13f30:	dc000017 	ldw	r16,0(sp)
   13f34:	dec00304 	addi	sp,sp,12
   13f38:	f800283a 	ret
   13f3c:	80c00017 	ldw	r3,0(r16)
   13f40:	183ff926 	beq	r3,zero,13f28 <_sbrk_r+0x30>
   13f44:	88c00015 	stw	r3,0(r17)
   13f48:	003ff706 	br	13f28 <_sbrk_r+0x30>

00013f4c <__sread>:
   13f4c:	defffe04 	addi	sp,sp,-8
   13f50:	dc000015 	stw	r16,0(sp)
   13f54:	2821883a 	mov	r16,r5
   13f58:	2940038f 	ldh	r5,14(r5)
   13f5c:	dfc00115 	stw	ra,4(sp)
   13f60:	00177fc0 	call	177fc <_read_r>
   13f64:	10000716 	blt	r2,zero,13f84 <__sread+0x38>
   13f68:	80c01417 	ldw	r3,80(r16)
   13f6c:	1887883a 	add	r3,r3,r2
   13f70:	80c01415 	stw	r3,80(r16)
   13f74:	dfc00117 	ldw	ra,4(sp)
   13f78:	dc000017 	ldw	r16,0(sp)
   13f7c:	dec00204 	addi	sp,sp,8
   13f80:	f800283a 	ret
   13f84:	80c0030b 	ldhu	r3,12(r16)
   13f88:	18fbffcc 	andi	r3,r3,61439
   13f8c:	80c0030d 	sth	r3,12(r16)
   13f90:	dfc00117 	ldw	ra,4(sp)
   13f94:	dc000017 	ldw	r16,0(sp)
   13f98:	dec00204 	addi	sp,sp,8
   13f9c:	f800283a 	ret

00013fa0 <__seofread>:
   13fa0:	0005883a 	mov	r2,zero
   13fa4:	f800283a 	ret

00013fa8 <__swrite>:
   13fa8:	2880030b 	ldhu	r2,12(r5)
   13fac:	defffb04 	addi	sp,sp,-20
   13fb0:	dcc00315 	stw	r19,12(sp)
   13fb4:	dc800215 	stw	r18,8(sp)
   13fb8:	dc400115 	stw	r17,4(sp)
   13fbc:	dc000015 	stw	r16,0(sp)
   13fc0:	dfc00415 	stw	ra,16(sp)
   13fc4:	10c0400c 	andi	r3,r2,256
   13fc8:	2821883a 	mov	r16,r5
   13fcc:	2023883a 	mov	r17,r4
   13fd0:	3025883a 	mov	r18,r6
   13fd4:	3827883a 	mov	r19,r7
   13fd8:	18000526 	beq	r3,zero,13ff0 <__swrite+0x48>
   13fdc:	2940038f 	ldh	r5,14(r5)
   13fe0:	01c00084 	movi	r7,2
   13fe4:	000d883a 	mov	r6,zero
   13fe8:	00176400 	call	17640 <_lseek_r>
   13fec:	8080030b 	ldhu	r2,12(r16)
   13ff0:	8140038f 	ldh	r5,14(r16)
   13ff4:	10bbffcc 	andi	r2,r2,61439
   13ff8:	980f883a 	mov	r7,r19
   13ffc:	900d883a 	mov	r6,r18
   14000:	8809883a 	mov	r4,r17
   14004:	8080030d 	sth	r2,12(r16)
   14008:	dfc00417 	ldw	ra,16(sp)
   1400c:	dcc00317 	ldw	r19,12(sp)
   14010:	dc800217 	ldw	r18,8(sp)
   14014:	dc400117 	ldw	r17,4(sp)
   14018:	dc000017 	ldw	r16,0(sp)
   1401c:	dec00504 	addi	sp,sp,20
   14020:	0016c501 	jmpi	16c50 <_write_r>

00014024 <__sseek>:
   14024:	defffe04 	addi	sp,sp,-8
   14028:	dc000015 	stw	r16,0(sp)
   1402c:	2821883a 	mov	r16,r5
   14030:	2940038f 	ldh	r5,14(r5)
   14034:	dfc00115 	stw	ra,4(sp)
   14038:	00176400 	call	17640 <_lseek_r>
   1403c:	00ffffc4 	movi	r3,-1
   14040:	10c00826 	beq	r2,r3,14064 <__sseek+0x40>
   14044:	80c0030b 	ldhu	r3,12(r16)
   14048:	80801415 	stw	r2,80(r16)
   1404c:	18c40014 	ori	r3,r3,4096
   14050:	80c0030d 	sth	r3,12(r16)
   14054:	dfc00117 	ldw	ra,4(sp)
   14058:	dc000017 	ldw	r16,0(sp)
   1405c:	dec00204 	addi	sp,sp,8
   14060:	f800283a 	ret
   14064:	80c0030b 	ldhu	r3,12(r16)
   14068:	18fbffcc 	andi	r3,r3,61439
   1406c:	80c0030d 	sth	r3,12(r16)
   14070:	dfc00117 	ldw	ra,4(sp)
   14074:	dc000017 	ldw	r16,0(sp)
   14078:	dec00204 	addi	sp,sp,8
   1407c:	f800283a 	ret

00014080 <__sclose>:
   14080:	2940038f 	ldh	r5,14(r5)
   14084:	0016cb01 	jmpi	16cb0 <_close_r>

00014088 <strcmp>:
   14088:	2144b03a 	or	r2,r4,r5
   1408c:	108000cc 	andi	r2,r2,3
   14090:	1000171e 	bne	r2,zero,140f0 <strcmp+0x68>
   14094:	20800017 	ldw	r2,0(r4)
   14098:	28c00017 	ldw	r3,0(r5)
   1409c:	10c0141e 	bne	r2,r3,140f0 <strcmp+0x68>
   140a0:	027fbff4 	movhi	r9,65279
   140a4:	4a7fbfc4 	addi	r9,r9,-257
   140a8:	0086303a 	nor	r3,zero,r2
   140ac:	02202074 	movhi	r8,32897
   140b0:	1245883a 	add	r2,r2,r9
   140b4:	42202004 	addi	r8,r8,-32640
   140b8:	10c4703a 	and	r2,r2,r3
   140bc:	1204703a 	and	r2,r2,r8
   140c0:	10000226 	beq	r2,zero,140cc <strcmp+0x44>
   140c4:	00002306 	br	14154 <strcmp+0xcc>
   140c8:	1000221e 	bne	r2,zero,14154 <strcmp+0xcc>
   140cc:	21000104 	addi	r4,r4,4
   140d0:	20c00017 	ldw	r3,0(r4)
   140d4:	29400104 	addi	r5,r5,4
   140d8:	29800017 	ldw	r6,0(r5)
   140dc:	1a4f883a 	add	r7,r3,r9
   140e0:	00c4303a 	nor	r2,zero,r3
   140e4:	3884703a 	and	r2,r7,r2
   140e8:	1204703a 	and	r2,r2,r8
   140ec:	19bff626 	beq	r3,r6,140c8 <strcmp+0x40>
   140f0:	20800003 	ldbu	r2,0(r4)
   140f4:	10c03fcc 	andi	r3,r2,255
   140f8:	18c0201c 	xori	r3,r3,128
   140fc:	18ffe004 	addi	r3,r3,-128
   14100:	18000c26 	beq	r3,zero,14134 <strcmp+0xac>
   14104:	29800007 	ldb	r6,0(r5)
   14108:	19800326 	beq	r3,r6,14118 <strcmp+0x90>
   1410c:	00001306 	br	1415c <strcmp+0xd4>
   14110:	29800007 	ldb	r6,0(r5)
   14114:	11800b1e 	bne	r2,r6,14144 <strcmp+0xbc>
   14118:	21000044 	addi	r4,r4,1
   1411c:	20c00003 	ldbu	r3,0(r4)
   14120:	29400044 	addi	r5,r5,1
   14124:	18803fcc 	andi	r2,r3,255
   14128:	1080201c 	xori	r2,r2,128
   1412c:	10bfe004 	addi	r2,r2,-128
   14130:	103ff71e 	bne	r2,zero,14110 <strcmp+0x88>
   14134:	0007883a 	mov	r3,zero
   14138:	28800003 	ldbu	r2,0(r5)
   1413c:	1885c83a 	sub	r2,r3,r2
   14140:	f800283a 	ret
   14144:	28800003 	ldbu	r2,0(r5)
   14148:	18c03fcc 	andi	r3,r3,255
   1414c:	1885c83a 	sub	r2,r3,r2
   14150:	f800283a 	ret
   14154:	0005883a 	mov	r2,zero
   14158:	f800283a 	ret
   1415c:	10c03fcc 	andi	r3,r2,255
   14160:	003ff506 	br	14138 <strcmp+0xb0>

00014164 <strlen>:
   14164:	208000cc 	andi	r2,r4,3
   14168:	10002026 	beq	r2,zero,141ec <strlen+0x88>
   1416c:	20800007 	ldb	r2,0(r4)
   14170:	10002026 	beq	r2,zero,141f4 <strlen+0x90>
   14174:	2005883a 	mov	r2,r4
   14178:	00000206 	br	14184 <strlen+0x20>
   1417c:	10c00007 	ldb	r3,0(r2)
   14180:	18001826 	beq	r3,zero,141e4 <strlen+0x80>
   14184:	10800044 	addi	r2,r2,1
   14188:	10c000cc 	andi	r3,r2,3
   1418c:	183ffb1e 	bne	r3,zero,1417c <strlen+0x18>
   14190:	10c00017 	ldw	r3,0(r2)
   14194:	01ffbff4 	movhi	r7,65279
   14198:	39ffbfc4 	addi	r7,r7,-257
   1419c:	00ca303a 	nor	r5,zero,r3
   141a0:	01a02074 	movhi	r6,32897
   141a4:	19c7883a 	add	r3,r3,r7
   141a8:	31a02004 	addi	r6,r6,-32640
   141ac:	1946703a 	and	r3,r3,r5
   141b0:	1986703a 	and	r3,r3,r6
   141b4:	1800091e 	bne	r3,zero,141dc <strlen+0x78>
   141b8:	10800104 	addi	r2,r2,4
   141bc:	10c00017 	ldw	r3,0(r2)
   141c0:	19cb883a 	add	r5,r3,r7
   141c4:	00c6303a 	nor	r3,zero,r3
   141c8:	28c6703a 	and	r3,r5,r3
   141cc:	1986703a 	and	r3,r3,r6
   141d0:	183ff926 	beq	r3,zero,141b8 <strlen+0x54>
   141d4:	00000106 	br	141dc <strlen+0x78>
   141d8:	10800044 	addi	r2,r2,1
   141dc:	10c00007 	ldb	r3,0(r2)
   141e0:	183ffd1e 	bne	r3,zero,141d8 <strlen+0x74>
   141e4:	1105c83a 	sub	r2,r2,r4
   141e8:	f800283a 	ret
   141ec:	2005883a 	mov	r2,r4
   141f0:	003fe706 	br	14190 <strlen+0x2c>
   141f4:	0005883a 	mov	r2,zero
   141f8:	f800283a 	ret

000141fc <__ssprint_r>:
   141fc:	30800217 	ldw	r2,8(r6)
   14200:	defff604 	addi	sp,sp,-40
   14204:	dc800215 	stw	r18,8(sp)
   14208:	dfc00915 	stw	ra,36(sp)
   1420c:	df000815 	stw	fp,32(sp)
   14210:	ddc00715 	stw	r23,28(sp)
   14214:	dd800615 	stw	r22,24(sp)
   14218:	dd400515 	stw	r21,20(sp)
   1421c:	dd000415 	stw	r20,16(sp)
   14220:	dcc00315 	stw	r19,12(sp)
   14224:	dc400115 	stw	r17,4(sp)
   14228:	dc000015 	stw	r16,0(sp)
   1422c:	3025883a 	mov	r18,r6
   14230:	10005826 	beq	r2,zero,14394 <__ssprint_r+0x198>
   14234:	2027883a 	mov	r19,r4
   14238:	35c00017 	ldw	r23,0(r6)
   1423c:	29000017 	ldw	r4,0(r5)
   14240:	28800217 	ldw	r2,8(r5)
   14244:	2823883a 	mov	r17,r5
   14248:	0039883a 	mov	fp,zero
   1424c:	0021883a 	mov	r16,zero
   14250:	80003926 	beq	r16,zero,14338 <__ssprint_r+0x13c>
   14254:	102b883a 	mov	r21,r2
   14258:	102d883a 	mov	r22,r2
   1425c:	80803a36 	bltu	r16,r2,14348 <__ssprint_r+0x14c>
   14260:	88c0030b 	ldhu	r3,12(r17)
   14264:	1881200c 	andi	r2,r3,1152
   14268:	10002626 	beq	r2,zero,14304 <__ssprint_r+0x108>
   1426c:	88800517 	ldw	r2,20(r17)
   14270:	89400417 	ldw	r5,16(r17)
   14274:	81800044 	addi	r6,r16,1
   14278:	108f883a 	add	r7,r2,r2
   1427c:	3885883a 	add	r2,r7,r2
   14280:	100ed7fa 	srli	r7,r2,31
   14284:	216dc83a 	sub	r22,r4,r5
   14288:	3589883a 	add	r4,r6,r22
   1428c:	3885883a 	add	r2,r7,r2
   14290:	102bd07a 	srai	r21,r2,1
   14294:	a80d883a 	mov	r6,r21
   14298:	a900022e 	bgeu	r21,r4,142a4 <__ssprint_r+0xa8>
   1429c:	202b883a 	mov	r21,r4
   142a0:	200d883a 	mov	r6,r4
   142a4:	18c1000c 	andi	r3,r3,1024
   142a8:	18002a26 	beq	r3,zero,14354 <__ssprint_r+0x158>
   142ac:	300b883a 	mov	r5,r6
   142b0:	9809883a 	mov	r4,r19
   142b4:	00124700 	call	12470 <_malloc_r>
   142b8:	1029883a 	mov	r20,r2
   142bc:	10002c26 	beq	r2,zero,14370 <__ssprint_r+0x174>
   142c0:	89400417 	ldw	r5,16(r17)
   142c4:	b00d883a 	mov	r6,r22
   142c8:	1009883a 	mov	r4,r2
   142cc:	000b4600 	call	b460 <memcpy>
   142d0:	8880030b 	ldhu	r2,12(r17)
   142d4:	00fedfc4 	movi	r3,-1153
   142d8:	10c4703a 	and	r2,r2,r3
   142dc:	10802014 	ori	r2,r2,128
   142e0:	8880030d 	sth	r2,12(r17)
   142e4:	a589883a 	add	r4,r20,r22
   142e8:	adadc83a 	sub	r22,r21,r22
   142ec:	8d400515 	stw	r21,20(r17)
   142f0:	8d800215 	stw	r22,8(r17)
   142f4:	8d000415 	stw	r20,16(r17)
   142f8:	89000015 	stw	r4,0(r17)
   142fc:	802b883a 	mov	r21,r16
   14300:	802d883a 	mov	r22,r16
   14304:	b00d883a 	mov	r6,r22
   14308:	e00b883a 	mov	r5,fp
   1430c:	00176a00 	call	176a0 <memmove>
   14310:	88800217 	ldw	r2,8(r17)
   14314:	89000017 	ldw	r4,0(r17)
   14318:	90c00217 	ldw	r3,8(r18)
   1431c:	1545c83a 	sub	r2,r2,r21
   14320:	2589883a 	add	r4,r4,r22
   14324:	88800215 	stw	r2,8(r17)
   14328:	89000015 	stw	r4,0(r17)
   1432c:	1c21c83a 	sub	r16,r3,r16
   14330:	94000215 	stw	r16,8(r18)
   14334:	80001726 	beq	r16,zero,14394 <__ssprint_r+0x198>
   14338:	bf000017 	ldw	fp,0(r23)
   1433c:	bc000117 	ldw	r16,4(r23)
   14340:	bdc00204 	addi	r23,r23,8
   14344:	003fc206 	br	14250 <__ssprint_r+0x54>
   14348:	802b883a 	mov	r21,r16
   1434c:	802d883a 	mov	r22,r16
   14350:	003fec06 	br	14304 <__ssprint_r+0x108>
   14354:	9809883a 	mov	r4,r19
   14358:	001785c0 	call	1785c <_realloc_r>
   1435c:	1029883a 	mov	r20,r2
   14360:	103fe01e 	bne	r2,zero,142e4 <__ssprint_r+0xe8>
   14364:	89400417 	ldw	r5,16(r17)
   14368:	9809883a 	mov	r4,r19
   1436c:	0011d400 	call	11d40 <_free_r>
   14370:	88c0030b 	ldhu	r3,12(r17)
   14374:	00800304 	movi	r2,12
   14378:	98800015 	stw	r2,0(r19)
   1437c:	18c01014 	ori	r3,r3,64
   14380:	88c0030d 	sth	r3,12(r17)
   14384:	00bfffc4 	movi	r2,-1
   14388:	90000215 	stw	zero,8(r18)
   1438c:	90000115 	stw	zero,4(r18)
   14390:	00000206 	br	1439c <__ssprint_r+0x1a0>
   14394:	90000115 	stw	zero,4(r18)
   14398:	0005883a 	mov	r2,zero
   1439c:	dfc00917 	ldw	ra,36(sp)
   143a0:	df000817 	ldw	fp,32(sp)
   143a4:	ddc00717 	ldw	r23,28(sp)
   143a8:	dd800617 	ldw	r22,24(sp)
   143ac:	dd400517 	ldw	r21,20(sp)
   143b0:	dd000417 	ldw	r20,16(sp)
   143b4:	dcc00317 	ldw	r19,12(sp)
   143b8:	dc800217 	ldw	r18,8(sp)
   143bc:	dc400117 	ldw	r17,4(sp)
   143c0:	dc000017 	ldw	r16,0(sp)
   143c4:	dec00a04 	addi	sp,sp,40
   143c8:	f800283a 	ret

000143cc <___svfiprintf_internal_r>:
   143cc:	2880030b 	ldhu	r2,12(r5)
   143d0:	deffc804 	addi	sp,sp,-224
   143d4:	dcc03115 	stw	r19,196(sp)
   143d8:	dfc03715 	stw	ra,220(sp)
   143dc:	df003615 	stw	fp,216(sp)
   143e0:	ddc03515 	stw	r23,212(sp)
   143e4:	dd803415 	stw	r22,208(sp)
   143e8:	dd403315 	stw	r21,204(sp)
   143ec:	dd003215 	stw	r20,200(sp)
   143f0:	dc803015 	stw	r18,192(sp)
   143f4:	dc402f15 	stw	r17,188(sp)
   143f8:	dc002e15 	stw	r16,184(sp)
   143fc:	d9402715 	stw	r5,156(sp)
   14400:	d9002a15 	stw	r4,168(sp)
   14404:	1080200c 	andi	r2,r2,128
   14408:	d9c02315 	stw	r7,140(sp)
   1440c:	3027883a 	mov	r19,r6
   14410:	10000226 	beq	r2,zero,1441c <___svfiprintf_internal_r+0x50>
   14414:	28800417 	ldw	r2,16(r5)
   14418:	10041d26 	beq	r2,zero,15490 <___svfiprintf_internal_r+0x10c4>
   1441c:	dac01a04 	addi	r11,sp,104
   14420:	dac01e15 	stw	r11,120(sp)
   14424:	d8801e17 	ldw	r2,120(sp)
   14428:	dac019c4 	addi	r11,sp,103
   1442c:	dd402a17 	ldw	r21,168(sp)
   14430:	ddc02717 	ldw	r23,156(sp)
   14434:	058000b4 	movhi	r22,2
   14438:	050000b4 	movhi	r20,2
   1443c:	dac01f15 	stw	r11,124(sp)
   14440:	12d7c83a 	sub	r11,r2,r11
   14444:	b59e7b04 	addi	r22,r22,31212
   14448:	a51e7704 	addi	r20,r20,31196
   1444c:	dec01a15 	stw	sp,104(sp)
   14450:	d8001c15 	stw	zero,112(sp)
   14454:	d8001b15 	stw	zero,108(sp)
   14458:	d811883a 	mov	r8,sp
   1445c:	d8002915 	stw	zero,164(sp)
   14460:	d8002515 	stw	zero,148(sp)
   14464:	dac02b15 	stw	r11,172(sp)
   14468:	98800007 	ldb	r2,0(r19)
   1446c:	1002dd26 	beq	r2,zero,14fe4 <___svfiprintf_internal_r+0xc18>
   14470:	00c00944 	movi	r3,37
   14474:	9823883a 	mov	r17,r19
   14478:	10c0021e 	bne	r2,r3,14484 <___svfiprintf_internal_r+0xb8>
   1447c:	00001406 	br	144d0 <___svfiprintf_internal_r+0x104>
   14480:	10c00326 	beq	r2,r3,14490 <___svfiprintf_internal_r+0xc4>
   14484:	8c400044 	addi	r17,r17,1
   14488:	88800007 	ldb	r2,0(r17)
   1448c:	103ffc1e 	bne	r2,zero,14480 <___svfiprintf_internal_r+0xb4>
   14490:	8ce1c83a 	sub	r16,r17,r19
   14494:	80000e26 	beq	r16,zero,144d0 <___svfiprintf_internal_r+0x104>
   14498:	d8c01c17 	ldw	r3,112(sp)
   1449c:	d8801b17 	ldw	r2,108(sp)
   144a0:	44c00015 	stw	r19,0(r8)
   144a4:	1c07883a 	add	r3,r3,r16
   144a8:	10800044 	addi	r2,r2,1
   144ac:	d8c01c15 	stw	r3,112(sp)
   144b0:	44000115 	stw	r16,4(r8)
   144b4:	d8801b15 	stw	r2,108(sp)
   144b8:	00c001c4 	movi	r3,7
   144bc:	18831e16 	blt	r3,r2,15138 <___svfiprintf_internal_r+0xd6c>
   144c0:	42000204 	addi	r8,r8,8
   144c4:	dac02517 	ldw	r11,148(sp)
   144c8:	5c17883a 	add	r11,r11,r16
   144cc:	dac02515 	stw	r11,148(sp)
   144d0:	88800007 	ldb	r2,0(r17)
   144d4:	1002c526 	beq	r2,zero,14fec <___svfiprintf_internal_r+0xc20>
   144d8:	88c00047 	ldb	r3,1(r17)
   144dc:	8cc00044 	addi	r19,r17,1
   144e0:	d8001d85 	stb	zero,118(sp)
   144e4:	0009883a 	mov	r4,zero
   144e8:	000f883a 	mov	r7,zero
   144ec:	043fffc4 	movi	r16,-1
   144f0:	d8002415 	stw	zero,144(sp)
   144f4:	0025883a 	mov	r18,zero
   144f8:	01401604 	movi	r5,88
   144fc:	01800244 	movi	r6,9
   14500:	02800a84 	movi	r10,42
   14504:	02401b04 	movi	r9,108
   14508:	9cc00044 	addi	r19,r19,1
   1450c:	18bff804 	addi	r2,r3,-32
   14510:	2881dd36 	bltu	r5,r2,14c88 <___svfiprintf_internal_r+0x8bc>
   14514:	100490ba 	slli	r2,r2,2
   14518:	02c00074 	movhi	r11,1
   1451c:	5ad14b04 	addi	r11,r11,17708
   14520:	12c5883a 	add	r2,r2,r11
   14524:	10800017 	ldw	r2,0(r2)
   14528:	1000683a 	jmp	r2
   1452c:	00014728 	cmpgeui	zero,zero,1308
   14530:	00014c88 	cmpgei	zero,zero,1330
   14534:	00014c88 	cmpgei	zero,zero,1330
   14538:	0001471c 	xori	zero,zero,1308
   1453c:	00014c88 	cmpgei	zero,zero,1330
   14540:	00014c88 	cmpgei	zero,zero,1330
   14544:	00014c88 	cmpgei	zero,zero,1330
   14548:	00014c88 	cmpgei	zero,zero,1330
   1454c:	00014c88 	cmpgei	zero,zero,1330
   14550:	00014c88 	cmpgei	zero,zero,1330
   14554:	00014690 	cmplti	zero,zero,1306
   14558:	0001486c 	andhi	zero,zero,1313
   1455c:	00014c88 	cmpgei	zero,zero,1330
   14560:	000146bc 	xorhi	zero,zero,1306
   14564:	00014cbc 	xorhi	zero,zero,1330
   14568:	00014c88 	cmpgei	zero,zero,1330
   1456c:	00014cb0 	cmpltui	zero,zero,1330
   14570:	00014c50 	cmplti	zero,zero,1329
   14574:	00014c50 	cmplti	zero,zero,1329
   14578:	00014c50 	cmplti	zero,zero,1329
   1457c:	00014c50 	cmplti	zero,zero,1329
   14580:	00014c50 	cmplti	zero,zero,1329
   14584:	00014c50 	cmplti	zero,zero,1329
   14588:	00014c50 	cmplti	zero,zero,1329
   1458c:	00014c50 	cmplti	zero,zero,1329
   14590:	00014c50 	cmplti	zero,zero,1329
   14594:	00014c88 	cmpgei	zero,zero,1330
   14598:	00014c88 	cmpgei	zero,zero,1330
   1459c:	00014c88 	cmpgei	zero,zero,1330
   145a0:	00014c88 	cmpgei	zero,zero,1330
   145a4:	00014c88 	cmpgei	zero,zero,1330
   145a8:	00014c88 	cmpgei	zero,zero,1330
   145ac:	00014c88 	cmpgei	zero,zero,1330
   145b0:	00014c88 	cmpgei	zero,zero,1330
   145b4:	00014c88 	cmpgei	zero,zero,1330
   145b8:	00014c88 	cmpgei	zero,zero,1330
   145bc:	00014bec 	andhi	zero,zero,1327
   145c0:	00014c88 	cmpgei	zero,zero,1330
   145c4:	00014c88 	cmpgei	zero,zero,1330
   145c8:	00014c88 	cmpgei	zero,zero,1330
   145cc:	00014c88 	cmpgei	zero,zero,1330
   145d0:	00014c88 	cmpgei	zero,zero,1330
   145d4:	00014c88 	cmpgei	zero,zero,1330
   145d8:	00014c88 	cmpgei	zero,zero,1330
   145dc:	00014c88 	cmpgei	zero,zero,1330
   145e0:	00014c88 	cmpgei	zero,zero,1330
   145e4:	00014c88 	cmpgei	zero,zero,1330
   145e8:	00014d64 	muli	zero,zero,1333
   145ec:	00014c88 	cmpgei	zero,zero,1330
   145f0:	00014c88 	cmpgei	zero,zero,1330
   145f4:	00014c88 	cmpgei	zero,zero,1330
   145f8:	00014c88 	cmpgei	zero,zero,1330
   145fc:	00014c88 	cmpgei	zero,zero,1330
   14600:	00014cfc 	xorhi	zero,zero,1331
   14604:	00014c88 	cmpgei	zero,zero,1330
   14608:	00014c88 	cmpgei	zero,zero,1330
   1460c:	00014a30 	cmpltui	zero,zero,1320
   14610:	00014c88 	cmpgei	zero,zero,1330
   14614:	00014c88 	cmpgei	zero,zero,1330
   14618:	00014c88 	cmpgei	zero,zero,1330
   1461c:	00014c88 	cmpgei	zero,zero,1330
   14620:	00014c88 	cmpgei	zero,zero,1330
   14624:	00014c88 	cmpgei	zero,zero,1330
   14628:	00014c88 	cmpgei	zero,zero,1330
   1462c:	00014c88 	cmpgei	zero,zero,1330
   14630:	00014c88 	cmpgei	zero,zero,1330
   14634:	00014c88 	cmpgei	zero,zero,1330
   14638:	00014920 	cmpeqi	zero,zero,1316
   1463c:	00014acc 	andi	zero,zero,1323
   14640:	00014c88 	cmpgei	zero,zero,1330
   14644:	00014c88 	cmpgei	zero,zero,1330
   14648:	00014c88 	cmpgei	zero,zero,1330
   1464c:	00014ac0 	call	14ac <spencerNeutralPose1+0x194>
   14650:	00014acc 	andi	zero,zero,1323
   14654:	00014c88 	cmpgei	zero,zero,1330
   14658:	00014c88 	cmpgei	zero,zero,1330
   1465c:	00014ab0 	cmpltui	zero,zero,1322
   14660:	00014c88 	cmpgei	zero,zero,1330
   14664:	00014a74 	movhi	zero,1321
   14668:	0001487c 	xorhi	zero,zero,1313
   1466c:	000146c8 	cmpgei	zero,zero,1307
   14670:	00014be0 	cmpeqi	zero,zero,1327
   14674:	00014c88 	cmpgei	zero,zero,1330
   14678:	00014b94 	movui	zero,1326
   1467c:	00014c88 	cmpgei	zero,zero,1330
   14680:	000147ec 	andhi	zero,zero,1311
   14684:	00014c88 	cmpgei	zero,zero,1330
   14688:	00014c88 	cmpgei	zero,zero,1330
   1468c:	00014748 	cmpgei	zero,zero,1309
   14690:	dac02317 	ldw	r11,140(sp)
   14694:	5ac00017 	ldw	r11,0(r11)
   14698:	dac02415 	stw	r11,144(sp)
   1469c:	dac02317 	ldw	r11,140(sp)
   146a0:	58800104 	addi	r2,r11,4
   146a4:	dac02417 	ldw	r11,144(sp)
   146a8:	5802e90e 	bge	r11,zero,15250 <___svfiprintf_internal_r+0xe84>
   146ac:	dac02417 	ldw	r11,144(sp)
   146b0:	d8802315 	stw	r2,140(sp)
   146b4:	02d7c83a 	sub	r11,zero,r11
   146b8:	dac02415 	stw	r11,144(sp)
   146bc:	94800114 	ori	r18,r18,4
   146c0:	98c00007 	ldb	r3,0(r19)
   146c4:	003f9006 	br	14508 <___svfiprintf_internal_r+0x13c>
   146c8:	00800c04 	movi	r2,48
   146cc:	dac02317 	ldw	r11,140(sp)
   146d0:	d8801d05 	stb	r2,116(sp)
   146d4:	00801e04 	movi	r2,120
   146d8:	d8801d45 	stb	r2,117(sp)
   146dc:	d8001d85 	stb	zero,118(sp)
   146e0:	58c00104 	addi	r3,r11,4
   146e4:	5f000017 	ldw	fp,0(r11)
   146e8:	0013883a 	mov	r9,zero
   146ec:	90800094 	ori	r2,r18,2
   146f0:	80032b16 	blt	r16,zero,153a0 <___svfiprintf_internal_r+0xfd4>
   146f4:	00bfdfc4 	movi	r2,-129
   146f8:	90a4703a 	and	r18,r18,r2
   146fc:	d8c02315 	stw	r3,140(sp)
   14700:	94800094 	ori	r18,r18,2
   14704:	e002dc26 	beq	fp,zero,15278 <___svfiprintf_internal_r+0xeac>
   14708:	010000b4 	movhi	r4,2
   1470c:	211e0e04 	addi	r4,r4,30776
   14710:	0015883a 	mov	r10,zero
   14714:	d9002915 	stw	r4,164(sp)
   14718:	00002306 	br	147a8 <___svfiprintf_internal_r+0x3dc>
   1471c:	94800054 	ori	r18,r18,1
   14720:	98c00007 	ldb	r3,0(r19)
   14724:	003f7806 	br	14508 <___svfiprintf_internal_r+0x13c>
   14728:	38803fcc 	andi	r2,r7,255
   1472c:	1080201c 	xori	r2,r2,128
   14730:	10bfe004 	addi	r2,r2,-128
   14734:	1002f31e 	bne	r2,zero,15304 <___svfiprintf_internal_r+0xf38>
   14738:	01000044 	movi	r4,1
   1473c:	01c00804 	movi	r7,32
   14740:	98c00007 	ldb	r3,0(r19)
   14744:	003f7006 	br	14508 <___svfiprintf_internal_r+0x13c>
   14748:	21003fcc 	andi	r4,r4,255
   1474c:	2003aa1e 	bne	r4,zero,155f8 <___svfiprintf_internal_r+0x122c>
   14750:	008000b4 	movhi	r2,2
   14754:	109e0e04 	addi	r2,r2,30776
   14758:	d8802915 	stw	r2,164(sp)
   1475c:	9080080c 	andi	r2,r18,32
   14760:	1000ba26 	beq	r2,zero,14a4c <___svfiprintf_internal_r+0x680>
   14764:	dac02317 	ldw	r11,140(sp)
   14768:	5f000017 	ldw	fp,0(r11)
   1476c:	5a400117 	ldw	r9,4(r11)
   14770:	5ac00204 	addi	r11,r11,8
   14774:	dac02315 	stw	r11,140(sp)
   14778:	9080004c 	andi	r2,r18,1
   1477c:	10029026 	beq	r2,zero,151c0 <___svfiprintf_internal_r+0xdf4>
   14780:	e244b03a 	or	r2,fp,r9
   14784:	1002d41e 	bne	r2,zero,152d8 <___svfiprintf_internal_r+0xf0c>
   14788:	d8001d85 	stb	zero,118(sp)
   1478c:	80030b16 	blt	r16,zero,153bc <___svfiprintf_internal_r+0xff0>
   14790:	00bfdfc4 	movi	r2,-129
   14794:	90a4703a 	and	r18,r18,r2
   14798:	0015883a 	mov	r10,zero
   1479c:	80002426 	beq	r16,zero,14830 <___svfiprintf_internal_r+0x464>
   147a0:	0039883a 	mov	fp,zero
   147a4:	0013883a 	mov	r9,zero
   147a8:	d9002917 	ldw	r4,164(sp)
   147ac:	dc401a04 	addi	r17,sp,104
   147b0:	e08003cc 	andi	r2,fp,15
   147b4:	4806973a 	slli	r3,r9,28
   147b8:	2085883a 	add	r2,r4,r2
   147bc:	e038d13a 	srli	fp,fp,4
   147c0:	10800003 	ldbu	r2,0(r2)
   147c4:	4812d13a 	srli	r9,r9,4
   147c8:	8c7fffc4 	addi	r17,r17,-1
   147cc:	1f38b03a 	or	fp,r3,fp
   147d0:	88800005 	stb	r2,0(r17)
   147d4:	e244b03a 	or	r2,fp,r9
   147d8:	103ff51e 	bne	r2,zero,147b0 <___svfiprintf_internal_r+0x3e4>
   147dc:	dac01e17 	ldw	r11,120(sp)
   147e0:	5c57c83a 	sub	r11,r11,r17
   147e4:	dac02115 	stw	r11,132(sp)
   147e8:	00001406 	br	1483c <___svfiprintf_internal_r+0x470>
   147ec:	21003fcc 	andi	r4,r4,255
   147f0:	2003741e 	bne	r4,zero,155c4 <___svfiprintf_internal_r+0x11f8>
   147f4:	9080080c 	andi	r2,r18,32
   147f8:	10014526 	beq	r2,zero,14d10 <___svfiprintf_internal_r+0x944>
   147fc:	dac02317 	ldw	r11,140(sp)
   14800:	d8001d85 	stb	zero,118(sp)
   14804:	58c00204 	addi	r3,r11,8
   14808:	5f000017 	ldw	fp,0(r11)
   1480c:	5a400117 	ldw	r9,4(r11)
   14810:	8002d916 	blt	r16,zero,15378 <___svfiprintf_internal_r+0xfac>
   14814:	013fdfc4 	movi	r4,-129
   14818:	e244b03a 	or	r2,fp,r9
   1481c:	d8c02315 	stw	r3,140(sp)
   14820:	9124703a 	and	r18,r18,r4
   14824:	0015883a 	mov	r10,zero
   14828:	1000b91e 	bne	r2,zero,14b10 <___svfiprintf_internal_r+0x744>
   1482c:	8002e61e 	bne	r16,zero,153c8 <___svfiprintf_internal_r+0xffc>
   14830:	0021883a 	mov	r16,zero
   14834:	d8002115 	stw	zero,132(sp)
   14838:	dc401a04 	addi	r17,sp,104
   1483c:	d8c02117 	ldw	r3,132(sp)
   14840:	dc002015 	stw	r16,128(sp)
   14844:	80c0010e 	bge	r16,r3,1484c <___svfiprintf_internal_r+0x480>
   14848:	d8c02015 	stw	r3,128(sp)
   1484c:	52803fcc 	andi	r10,r10,255
   14850:	5280201c 	xori	r10,r10,128
   14854:	52bfe004 	addi	r10,r10,-128
   14858:	50003c26 	beq	r10,zero,1494c <___svfiprintf_internal_r+0x580>
   1485c:	dac02017 	ldw	r11,128(sp)
   14860:	5ac00044 	addi	r11,r11,1
   14864:	dac02015 	stw	r11,128(sp)
   14868:	00003806 	br	1494c <___svfiprintf_internal_r+0x580>
   1486c:	01000044 	movi	r4,1
   14870:	01c00ac4 	movi	r7,43
   14874:	98c00007 	ldb	r3,0(r19)
   14878:	003f2306 	br	14508 <___svfiprintf_internal_r+0x13c>
   1487c:	21003fcc 	andi	r4,r4,255
   14880:	2003481e 	bne	r4,zero,155a4 <___svfiprintf_internal_r+0x11d8>
   14884:	9080080c 	andi	r2,r18,32
   14888:	10013b26 	beq	r2,zero,14d78 <___svfiprintf_internal_r+0x9ac>
   1488c:	dac02317 	ldw	r11,140(sp)
   14890:	d8001d85 	stb	zero,118(sp)
   14894:	58800204 	addi	r2,r11,8
   14898:	5f000017 	ldw	fp,0(r11)
   1489c:	5a400117 	ldw	r9,4(r11)
   148a0:	8002a816 	blt	r16,zero,15344 <___svfiprintf_internal_r+0xf78>
   148a4:	013fdfc4 	movi	r4,-129
   148a8:	e246b03a 	or	r3,fp,r9
   148ac:	d8802315 	stw	r2,140(sp)
   148b0:	9124703a 	and	r18,r18,r4
   148b4:	18013c26 	beq	r3,zero,14da8 <___svfiprintf_internal_r+0x9dc>
   148b8:	0015883a 	mov	r10,zero
   148bc:	dc401a04 	addi	r17,sp,104
   148c0:	e006d0fa 	srli	r3,fp,3
   148c4:	4808977a 	slli	r4,r9,29
   148c8:	4812d0fa 	srli	r9,r9,3
   148cc:	e70001cc 	andi	fp,fp,7
   148d0:	e0800c04 	addi	r2,fp,48
   148d4:	8c7fffc4 	addi	r17,r17,-1
   148d8:	20f8b03a 	or	fp,r4,r3
   148dc:	88800005 	stb	r2,0(r17)
   148e0:	e246b03a 	or	r3,fp,r9
   148e4:	183ff61e 	bne	r3,zero,148c0 <___svfiprintf_internal_r+0x4f4>
   148e8:	90c0004c 	andi	r3,r18,1
   148ec:	1800a526 	beq	r3,zero,14b84 <___svfiprintf_internal_r+0x7b8>
   148f0:	10803fcc 	andi	r2,r2,255
   148f4:	1080201c 	xori	r2,r2,128
   148f8:	10bfe004 	addi	r2,r2,-128
   148fc:	00c00c04 	movi	r3,48
   14900:	10ffb626 	beq	r2,r3,147dc <___svfiprintf_internal_r+0x410>
   14904:	88ffffc5 	stb	r3,-1(r17)
   14908:	d8c01e17 	ldw	r3,120(sp)
   1490c:	88bfffc4 	addi	r2,r17,-1
   14910:	1023883a 	mov	r17,r2
   14914:	1887c83a 	sub	r3,r3,r2
   14918:	d8c02115 	stw	r3,132(sp)
   1491c:	003fc706 	br	1483c <___svfiprintf_internal_r+0x470>
   14920:	dac02317 	ldw	r11,140(sp)
   14924:	00c00044 	movi	r3,1
   14928:	d8c02015 	stw	r3,128(sp)
   1492c:	58800017 	ldw	r2,0(r11)
   14930:	5ac00104 	addi	r11,r11,4
   14934:	d8001d85 	stb	zero,118(sp)
   14938:	d8801005 	stb	r2,64(sp)
   1493c:	dac02315 	stw	r11,140(sp)
   14940:	d8c02115 	stw	r3,132(sp)
   14944:	dc401004 	addi	r17,sp,64
   14948:	0021883a 	mov	r16,zero
   1494c:	90c0008c 	andi	r3,r18,2
   14950:	d8c02215 	stw	r3,136(sp)
   14954:	18000326 	beq	r3,zero,14964 <___svfiprintf_internal_r+0x598>
   14958:	dac02017 	ldw	r11,128(sp)
   1495c:	5ac00084 	addi	r11,r11,2
   14960:	dac02015 	stw	r11,128(sp)
   14964:	90c0210c 	andi	r3,r18,132
   14968:	d8c02615 	stw	r3,152(sp)
   1496c:	1801131e 	bne	r3,zero,14dbc <___svfiprintf_internal_r+0x9f0>
   14970:	dac02417 	ldw	r11,144(sp)
   14974:	d8c02017 	ldw	r3,128(sp)
   14978:	58f9c83a 	sub	fp,r11,r3
   1497c:	07010f0e 	bge	zero,fp,14dbc <___svfiprintf_internal_r+0x9f0>
   14980:	02400404 	movi	r9,16
   14984:	d8c01c17 	ldw	r3,112(sp)
   14988:	d8801b17 	ldw	r2,108(sp)
   1498c:	4f02d60e 	bge	r9,fp,154e8 <___svfiprintf_internal_r+0x111c>
   14990:	014000b4 	movhi	r5,2
   14994:	295e7b04 	addi	r5,r5,31212
   14998:	d9402815 	stw	r5,160(sp)
   1499c:	028001c4 	movi	r10,7
   149a0:	00000306 	br	149b0 <___svfiprintf_internal_r+0x5e4>
   149a4:	e73ffc04 	addi	fp,fp,-16
   149a8:	42000204 	addi	r8,r8,8
   149ac:	4f00150e 	bge	r9,fp,14a04 <___svfiprintf_internal_r+0x638>
   149b0:	18c00404 	addi	r3,r3,16
   149b4:	10800044 	addi	r2,r2,1
   149b8:	45800015 	stw	r22,0(r8)
   149bc:	42400115 	stw	r9,4(r8)
   149c0:	d8c01c15 	stw	r3,112(sp)
   149c4:	d8801b15 	stw	r2,108(sp)
   149c8:	50bff60e 	bge	r10,r2,149a4 <___svfiprintf_internal_r+0x5d8>
   149cc:	d9801a04 	addi	r6,sp,104
   149d0:	b80b883a 	mov	r5,r23
   149d4:	a809883a 	mov	r4,r21
   149d8:	da402c15 	stw	r9,176(sp)
   149dc:	da802d15 	stw	r10,180(sp)
   149e0:	00141fc0 	call	141fc <__ssprint_r>
   149e4:	da402c17 	ldw	r9,176(sp)
   149e8:	da802d17 	ldw	r10,180(sp)
   149ec:	1001851e 	bne	r2,zero,15004 <___svfiprintf_internal_r+0xc38>
   149f0:	e73ffc04 	addi	fp,fp,-16
   149f4:	d8c01c17 	ldw	r3,112(sp)
   149f8:	d8801b17 	ldw	r2,108(sp)
   149fc:	d811883a 	mov	r8,sp
   14a00:	4f3feb16 	blt	r9,fp,149b0 <___svfiprintf_internal_r+0x5e4>
   14a04:	dac02817 	ldw	r11,160(sp)
   14a08:	e0c7883a 	add	r3,fp,r3
   14a0c:	10800044 	addi	r2,r2,1
   14a10:	42c00015 	stw	r11,0(r8)
   14a14:	47000115 	stw	fp,4(r8)
   14a18:	d8c01c15 	stw	r3,112(sp)
   14a1c:	d8801b15 	stw	r2,108(sp)
   14a20:	010001c4 	movi	r4,7
   14a24:	2081ee16 	blt	r4,r2,151e0 <___svfiprintf_internal_r+0xe14>
   14a28:	42000204 	addi	r8,r8,8
   14a2c:	0000e506 	br	14dc4 <___svfiprintf_internal_r+0x9f8>
   14a30:	21003fcc 	andi	r4,r4,255
   14a34:	2002dd1e 	bne	r4,zero,155ac <___svfiprintf_internal_r+0x11e0>
   14a38:	008000b4 	movhi	r2,2
   14a3c:	109e0904 	addi	r2,r2,30756
   14a40:	d8802915 	stw	r2,164(sp)
   14a44:	9080080c 	andi	r2,r18,32
   14a48:	103f461e 	bne	r2,zero,14764 <___svfiprintf_internal_r+0x398>
   14a4c:	9080040c 	andi	r2,r18,16
   14a50:	10022e1e 	bne	r2,zero,1530c <___svfiprintf_internal_r+0xf40>
   14a54:	9080100c 	andi	r2,r18,64
   14a58:	dac02317 	ldw	r11,140(sp)
   14a5c:	10027326 	beq	r2,zero,1542c <___svfiprintf_internal_r+0x1060>
   14a60:	5f00000b 	ldhu	fp,0(r11)
   14a64:	5ac00104 	addi	r11,r11,4
   14a68:	0013883a 	mov	r9,zero
   14a6c:	dac02315 	stw	r11,140(sp)
   14a70:	003f4106 	br	14778 <___svfiprintf_internal_r+0x3ac>
   14a74:	21003fcc 	andi	r4,r4,255
   14a78:	2002e11e 	bne	r4,zero,15600 <___svfiprintf_internal_r+0x1234>
   14a7c:	9080080c 	andi	r2,r18,32
   14a80:	1002011e 	bne	r2,zero,15288 <___svfiprintf_internal_r+0xebc>
   14a84:	9080040c 	andi	r2,r18,16
   14a88:	10023e1e 	bne	r2,zero,15384 <___svfiprintf_internal_r+0xfb8>
   14a8c:	9480100c 	andi	r18,r18,64
   14a90:	90023c26 	beq	r18,zero,15384 <___svfiprintf_internal_r+0xfb8>
   14a94:	dac02317 	ldw	r11,140(sp)
   14a98:	58800017 	ldw	r2,0(r11)
   14a9c:	5ac00104 	addi	r11,r11,4
   14aa0:	dac02315 	stw	r11,140(sp)
   14aa4:	dac02517 	ldw	r11,148(sp)
   14aa8:	12c0000d 	sth	r11,0(r2)
   14aac:	003e6e06 	br	14468 <___svfiprintf_internal_r+0x9c>
   14ab0:	98c00007 	ldb	r3,0(r19)
   14ab4:	1a422926 	beq	r3,r9,1535c <___svfiprintf_internal_r+0xf90>
   14ab8:	94800414 	ori	r18,r18,16
   14abc:	003e9206 	br	14508 <___svfiprintf_internal_r+0x13c>
   14ac0:	94801014 	ori	r18,r18,64
   14ac4:	98c00007 	ldb	r3,0(r19)
   14ac8:	003e8f06 	br	14508 <___svfiprintf_internal_r+0x13c>
   14acc:	21003fcc 	andi	r4,r4,255
   14ad0:	2002c71e 	bne	r4,zero,155f0 <___svfiprintf_internal_r+0x1224>
   14ad4:	9080080c 	andi	r2,r18,32
   14ad8:	10004926 	beq	r2,zero,14c00 <___svfiprintf_internal_r+0x834>
   14adc:	dac02317 	ldw	r11,140(sp)
   14ae0:	58800117 	ldw	r2,4(r11)
   14ae4:	5f000017 	ldw	fp,0(r11)
   14ae8:	5ac00204 	addi	r11,r11,8
   14aec:	dac02315 	stw	r11,140(sp)
   14af0:	1013883a 	mov	r9,r2
   14af4:	10004b16 	blt	r2,zero,14c24 <___svfiprintf_internal_r+0x858>
   14af8:	da801d83 	ldbu	r10,118(sp)
   14afc:	8001cb16 	blt	r16,zero,1522c <___svfiprintf_internal_r+0xe60>
   14b00:	00ffdfc4 	movi	r3,-129
   14b04:	e244b03a 	or	r2,fp,r9
   14b08:	90e4703a 	and	r18,r18,r3
   14b0c:	103f4726 	beq	r2,zero,1482c <___svfiprintf_internal_r+0x460>
   14b10:	48008c26 	beq	r9,zero,14d44 <___svfiprintf_internal_r+0x978>
   14b14:	dc802015 	stw	r18,128(sp)
   14b18:	dc002115 	stw	r16,132(sp)
   14b1c:	dc401a04 	addi	r17,sp,104
   14b20:	e021883a 	mov	r16,fp
   14b24:	da002215 	stw	r8,136(sp)
   14b28:	5039883a 	mov	fp,r10
   14b2c:	4825883a 	mov	r18,r9
   14b30:	8009883a 	mov	r4,r16
   14b34:	900b883a 	mov	r5,r18
   14b38:	01800284 	movi	r6,10
   14b3c:	000f883a 	mov	r7,zero
   14b40:	00186780 	call	18678 <__umoddi3>
   14b44:	10800c04 	addi	r2,r2,48
   14b48:	8c7fffc4 	addi	r17,r17,-1
   14b4c:	8009883a 	mov	r4,r16
   14b50:	900b883a 	mov	r5,r18
   14b54:	88800005 	stb	r2,0(r17)
   14b58:	01800284 	movi	r6,10
   14b5c:	000f883a 	mov	r7,zero
   14b60:	00181000 	call	18100 <__udivdi3>
   14b64:	1021883a 	mov	r16,r2
   14b68:	10c4b03a 	or	r2,r2,r3
   14b6c:	1825883a 	mov	r18,r3
   14b70:	103fef1e 	bne	r2,zero,14b30 <___svfiprintf_internal_r+0x764>
   14b74:	dc802017 	ldw	r18,128(sp)
   14b78:	dc002117 	ldw	r16,132(sp)
   14b7c:	da002217 	ldw	r8,136(sp)
   14b80:	e015883a 	mov	r10,fp
   14b84:	d8c01e17 	ldw	r3,120(sp)
   14b88:	1c47c83a 	sub	r3,r3,r17
   14b8c:	d8c02115 	stw	r3,132(sp)
   14b90:	003f2a06 	br	1483c <___svfiprintf_internal_r+0x470>
   14b94:	dac02317 	ldw	r11,140(sp)
   14b98:	d8001d85 	stb	zero,118(sp)
   14b9c:	5c400017 	ldw	r17,0(r11)
   14ba0:	5f000104 	addi	fp,r11,4
   14ba4:	88022f26 	beq	r17,zero,15464 <___svfiprintf_internal_r+0x1098>
   14ba8:	80022516 	blt	r16,zero,15440 <___svfiprintf_internal_r+0x1074>
   14bac:	800d883a 	mov	r6,r16
   14bb0:	000b883a 	mov	r5,zero
   14bb4:	8809883a 	mov	r4,r17
   14bb8:	da002c15 	stw	r8,176(sp)
   14bbc:	0012c7c0 	call	12c7c <memchr>
   14bc0:	da002c17 	ldw	r8,176(sp)
   14bc4:	10026426 	beq	r2,zero,15558 <___svfiprintf_internal_r+0x118c>
   14bc8:	1445c83a 	sub	r2,r2,r17
   14bcc:	d8802115 	stw	r2,132(sp)
   14bd0:	da801d83 	ldbu	r10,118(sp)
   14bd4:	df002315 	stw	fp,140(sp)
   14bd8:	0021883a 	mov	r16,zero
   14bdc:	003f1706 	br	1483c <___svfiprintf_internal_r+0x470>
   14be0:	94800814 	ori	r18,r18,32
   14be4:	98c00007 	ldb	r3,0(r19)
   14be8:	003e4706 	br	14508 <___svfiprintf_internal_r+0x13c>
   14bec:	21003fcc 	andi	r4,r4,255
   14bf0:	2002701e 	bne	r4,zero,155b4 <___svfiprintf_internal_r+0x11e8>
   14bf4:	94800414 	ori	r18,r18,16
   14bf8:	9080080c 	andi	r2,r18,32
   14bfc:	103fb71e 	bne	r2,zero,14adc <___svfiprintf_internal_r+0x710>
   14c00:	9080040c 	andi	r2,r18,16
   14c04:	1001ab26 	beq	r2,zero,152b4 <___svfiprintf_internal_r+0xee8>
   14c08:	dac02317 	ldw	r11,140(sp)
   14c0c:	5f000017 	ldw	fp,0(r11)
   14c10:	5ac00104 	addi	r11,r11,4
   14c14:	dac02315 	stw	r11,140(sp)
   14c18:	e013d7fa 	srai	r9,fp,31
   14c1c:	4805883a 	mov	r2,r9
   14c20:	103fb50e 	bge	r2,zero,14af8 <___svfiprintf_internal_r+0x72c>
   14c24:	0739c83a 	sub	fp,zero,fp
   14c28:	02800b44 	movi	r10,45
   14c2c:	e004c03a 	cmpne	r2,fp,zero
   14c30:	0253c83a 	sub	r9,zero,r9
   14c34:	da801d85 	stb	r10,118(sp)
   14c38:	4893c83a 	sub	r9,r9,r2
   14c3c:	80023016 	blt	r16,zero,15500 <___svfiprintf_internal_r+0x1134>
   14c40:	00bfdfc4 	movi	r2,-129
   14c44:	90a4703a 	and	r18,r18,r2
   14c48:	483fb21e 	bne	r9,zero,14b14 <___svfiprintf_internal_r+0x748>
   14c4c:	00003d06 	br	14d44 <___svfiprintf_internal_r+0x978>
   14c50:	9817883a 	mov	r11,r19
   14c54:	d8002415 	stw	zero,144(sp)
   14c58:	18bff404 	addi	r2,r3,-48
   14c5c:	0019883a 	mov	r12,zero
   14c60:	58c00007 	ldb	r3,0(r11)
   14c64:	630002a4 	muli	r12,r12,10
   14c68:	9cc00044 	addi	r19,r19,1
   14c6c:	9817883a 	mov	r11,r19
   14c70:	1319883a 	add	r12,r2,r12
   14c74:	18bff404 	addi	r2,r3,-48
   14c78:	30bff92e 	bgeu	r6,r2,14c60 <___svfiprintf_internal_r+0x894>
   14c7c:	db002415 	stw	r12,144(sp)
   14c80:	18bff804 	addi	r2,r3,-32
   14c84:	28be232e 	bgeu	r5,r2,14514 <___svfiprintf_internal_r+0x148>
   14c88:	21003fcc 	andi	r4,r4,255
   14c8c:	20024b1e 	bne	r4,zero,155bc <___svfiprintf_internal_r+0x11f0>
   14c90:	1800d626 	beq	r3,zero,14fec <___svfiprintf_internal_r+0xc20>
   14c94:	02c00044 	movi	r11,1
   14c98:	dac02015 	stw	r11,128(sp)
   14c9c:	d8c01005 	stb	r3,64(sp)
   14ca0:	d8001d85 	stb	zero,118(sp)
   14ca4:	dac02115 	stw	r11,132(sp)
   14ca8:	dc401004 	addi	r17,sp,64
   14cac:	003f2606 	br	14948 <___svfiprintf_internal_r+0x57c>
   14cb0:	94802014 	ori	r18,r18,128
   14cb4:	98c00007 	ldb	r3,0(r19)
   14cb8:	003e1306 	br	14508 <___svfiprintf_internal_r+0x13c>
   14cbc:	98c00007 	ldb	r3,0(r19)
   14cc0:	9ac00044 	addi	r11,r19,1
   14cc4:	1a822b26 	beq	r3,r10,15574 <___svfiprintf_internal_r+0x11a8>
   14cc8:	18bff404 	addi	r2,r3,-48
   14ccc:	0021883a 	mov	r16,zero
   14cd0:	30821e36 	bltu	r6,r2,1554c <___svfiprintf_internal_r+0x1180>
   14cd4:	58c00007 	ldb	r3,0(r11)
   14cd8:	840002a4 	muli	r16,r16,10
   14cdc:	5cc00044 	addi	r19,r11,1
   14ce0:	9817883a 	mov	r11,r19
   14ce4:	80a1883a 	add	r16,r16,r2
   14ce8:	18bff404 	addi	r2,r3,-48
   14cec:	30bff92e 	bgeu	r6,r2,14cd4 <___svfiprintf_internal_r+0x908>
   14cf0:	803e060e 	bge	r16,zero,1450c <___svfiprintf_internal_r+0x140>
   14cf4:	043fffc4 	movi	r16,-1
   14cf8:	003e0406 	br	1450c <___svfiprintf_internal_r+0x140>
   14cfc:	21003fcc 	andi	r4,r4,255
   14d00:	2002371e 	bne	r4,zero,155e0 <___svfiprintf_internal_r+0x1214>
   14d04:	94800414 	ori	r18,r18,16
   14d08:	9080080c 	andi	r2,r18,32
   14d0c:	103ebb1e 	bne	r2,zero,147fc <___svfiprintf_internal_r+0x430>
   14d10:	9080040c 	andi	r2,r18,16
   14d14:	10013b26 	beq	r2,zero,15204 <___svfiprintf_internal_r+0xe38>
   14d18:	dac02317 	ldw	r11,140(sp)
   14d1c:	d8001d85 	stb	zero,118(sp)
   14d20:	0013883a 	mov	r9,zero
   14d24:	58800104 	addi	r2,r11,4
   14d28:	5f000017 	ldw	fp,0(r11)
   14d2c:	80013d16 	blt	r16,zero,15224 <___svfiprintf_internal_r+0xe58>
   14d30:	00ffdfc4 	movi	r3,-129
   14d34:	d8802315 	stw	r2,140(sp)
   14d38:	90e4703a 	and	r18,r18,r3
   14d3c:	0015883a 	mov	r10,zero
   14d40:	e03eba26 	beq	fp,zero,1482c <___svfiprintf_internal_r+0x460>
   14d44:	00800244 	movi	r2,9
   14d48:	173f7236 	bltu	r2,fp,14b14 <___svfiprintf_internal_r+0x748>
   14d4c:	dac02b17 	ldw	r11,172(sp)
   14d50:	e7000c04 	addi	fp,fp,48
   14d54:	df0019c5 	stb	fp,103(sp)
   14d58:	dac02115 	stw	r11,132(sp)
   14d5c:	dc4019c4 	addi	r17,sp,103
   14d60:	003eb606 	br	1483c <___svfiprintf_internal_r+0x470>
   14d64:	21003fcc 	andi	r4,r4,255
   14d68:	20021f1e 	bne	r4,zero,155e8 <___svfiprintf_internal_r+0x121c>
   14d6c:	94800414 	ori	r18,r18,16
   14d70:	9080080c 	andi	r2,r18,32
   14d74:	103ec51e 	bne	r2,zero,1488c <___svfiprintf_internal_r+0x4c0>
   14d78:	9080040c 	andi	r2,r18,16
   14d7c:	10016926 	beq	r2,zero,15324 <___svfiprintf_internal_r+0xf58>
   14d80:	dac02317 	ldw	r11,140(sp)
   14d84:	d8001d85 	stb	zero,118(sp)
   14d88:	0013883a 	mov	r9,zero
   14d8c:	58800104 	addi	r2,r11,4
   14d90:	5f000017 	ldw	fp,0(r11)
   14d94:	80016b16 	blt	r16,zero,15344 <___svfiprintf_internal_r+0xf78>
   14d98:	00ffdfc4 	movi	r3,-129
   14d9c:	d8802315 	stw	r2,140(sp)
   14da0:	90e4703a 	and	r18,r18,r3
   14da4:	e03ec41e 	bne	fp,zero,148b8 <___svfiprintf_internal_r+0x4ec>
   14da8:	0015883a 	mov	r10,zero
   14dac:	8001c226 	beq	r16,zero,154b8 <___svfiprintf_internal_r+0x10ec>
   14db0:	0039883a 	mov	fp,zero
   14db4:	0013883a 	mov	r9,zero
   14db8:	003ec006 	br	148bc <___svfiprintf_internal_r+0x4f0>
   14dbc:	d8c01c17 	ldw	r3,112(sp)
   14dc0:	d8801b17 	ldw	r2,108(sp)
   14dc4:	d9001d87 	ldb	r4,118(sp)
   14dc8:	20000b26 	beq	r4,zero,14df8 <___svfiprintf_internal_r+0xa2c>
   14dcc:	d9001d84 	addi	r4,sp,118
   14dd0:	18c00044 	addi	r3,r3,1
   14dd4:	10800044 	addi	r2,r2,1
   14dd8:	41000015 	stw	r4,0(r8)
   14ddc:	01000044 	movi	r4,1
   14de0:	41000115 	stw	r4,4(r8)
   14de4:	d8c01c15 	stw	r3,112(sp)
   14de8:	d8801b15 	stw	r2,108(sp)
   14dec:	010001c4 	movi	r4,7
   14df0:	2080e116 	blt	r4,r2,15178 <___svfiprintf_internal_r+0xdac>
   14df4:	42000204 	addi	r8,r8,8
   14df8:	dac02217 	ldw	r11,136(sp)
   14dfc:	58000b26 	beq	r11,zero,14e2c <___svfiprintf_internal_r+0xa60>
   14e00:	d9001d04 	addi	r4,sp,116
   14e04:	18c00084 	addi	r3,r3,2
   14e08:	10800044 	addi	r2,r2,1
   14e0c:	41000015 	stw	r4,0(r8)
   14e10:	01000084 	movi	r4,2
   14e14:	41000115 	stw	r4,4(r8)
   14e18:	d8c01c15 	stw	r3,112(sp)
   14e1c:	d8801b15 	stw	r2,108(sp)
   14e20:	010001c4 	movi	r4,7
   14e24:	2080dd16 	blt	r4,r2,1519c <___svfiprintf_internal_r+0xdd0>
   14e28:	42000204 	addi	r8,r8,8
   14e2c:	dac02617 	ldw	r11,152(sp)
   14e30:	01002004 	movi	r4,128
   14e34:	59008426 	beq	r11,r4,15048 <___svfiprintf_internal_r+0xc7c>
   14e38:	dac02117 	ldw	r11,132(sp)
   14e3c:	82e1c83a 	sub	r16,r16,r11
   14e40:	0400270e 	bge	zero,r16,14ee0 <___svfiprintf_internal_r+0xb14>
   14e44:	01c00404 	movi	r7,16
   14e48:	3c016a0e 	bge	r7,r16,153f4 <___svfiprintf_internal_r+0x1028>
   14e4c:	014000b4 	movhi	r5,2
   14e50:	295e7704 	addi	r5,r5,31196
   14e54:	d9402215 	stw	r5,136(sp)
   14e58:	070001c4 	movi	fp,7
   14e5c:	00000306 	br	14e6c <___svfiprintf_internal_r+0xaa0>
   14e60:	843ffc04 	addi	r16,r16,-16
   14e64:	42000204 	addi	r8,r8,8
   14e68:	3c00130e 	bge	r7,r16,14eb8 <___svfiprintf_internal_r+0xaec>
   14e6c:	18c00404 	addi	r3,r3,16
   14e70:	10800044 	addi	r2,r2,1
   14e74:	45000015 	stw	r20,0(r8)
   14e78:	41c00115 	stw	r7,4(r8)
   14e7c:	d8c01c15 	stw	r3,112(sp)
   14e80:	d8801b15 	stw	r2,108(sp)
   14e84:	e0bff60e 	bge	fp,r2,14e60 <___svfiprintf_internal_r+0xa94>
   14e88:	d9801a04 	addi	r6,sp,104
   14e8c:	b80b883a 	mov	r5,r23
   14e90:	a809883a 	mov	r4,r21
   14e94:	d9c02c15 	stw	r7,176(sp)
   14e98:	00141fc0 	call	141fc <__ssprint_r>
   14e9c:	d9c02c17 	ldw	r7,176(sp)
   14ea0:	1000581e 	bne	r2,zero,15004 <___svfiprintf_internal_r+0xc38>
   14ea4:	843ffc04 	addi	r16,r16,-16
   14ea8:	d8c01c17 	ldw	r3,112(sp)
   14eac:	d8801b17 	ldw	r2,108(sp)
   14eb0:	d811883a 	mov	r8,sp
   14eb4:	3c3fed16 	blt	r7,r16,14e6c <___svfiprintf_internal_r+0xaa0>
   14eb8:	dac02217 	ldw	r11,136(sp)
   14ebc:	1c07883a 	add	r3,r3,r16
   14ec0:	10800044 	addi	r2,r2,1
   14ec4:	42c00015 	stw	r11,0(r8)
   14ec8:	44000115 	stw	r16,4(r8)
   14ecc:	d8c01c15 	stw	r3,112(sp)
   14ed0:	d8801b15 	stw	r2,108(sp)
   14ed4:	010001c4 	movi	r4,7
   14ed8:	20809e16 	blt	r4,r2,15154 <___svfiprintf_internal_r+0xd88>
   14edc:	42000204 	addi	r8,r8,8
   14ee0:	dac02117 	ldw	r11,132(sp)
   14ee4:	10800044 	addi	r2,r2,1
   14ee8:	44400015 	stw	r17,0(r8)
   14eec:	58c7883a 	add	r3,r11,r3
   14ef0:	42c00115 	stw	r11,4(r8)
   14ef4:	d8c01c15 	stw	r3,112(sp)
   14ef8:	d8801b15 	stw	r2,108(sp)
   14efc:	010001c4 	movi	r4,7
   14f00:	20807f16 	blt	r4,r2,15100 <___svfiprintf_internal_r+0xd34>
   14f04:	42000204 	addi	r8,r8,8
   14f08:	9480010c 	andi	r18,r18,4
   14f0c:	90002926 	beq	r18,zero,14fb4 <___svfiprintf_internal_r+0xbe8>
   14f10:	dac02417 	ldw	r11,144(sp)
   14f14:	d8802017 	ldw	r2,128(sp)
   14f18:	58a1c83a 	sub	r16,r11,r2
   14f1c:	0400250e 	bge	zero,r16,14fb4 <___svfiprintf_internal_r+0xbe8>
   14f20:	04400404 	movi	r17,16
   14f24:	d8801b17 	ldw	r2,108(sp)
   14f28:	8c017c0e 	bge	r17,r16,1551c <___svfiprintf_internal_r+0x1150>
   14f2c:	014000b4 	movhi	r5,2
   14f30:	295e7b04 	addi	r5,r5,31212
   14f34:	d9402815 	stw	r5,160(sp)
   14f38:	048001c4 	movi	r18,7
   14f3c:	00000306 	br	14f4c <___svfiprintf_internal_r+0xb80>
   14f40:	843ffc04 	addi	r16,r16,-16
   14f44:	42000204 	addi	r8,r8,8
   14f48:	8c00110e 	bge	r17,r16,14f90 <___svfiprintf_internal_r+0xbc4>
   14f4c:	18c00404 	addi	r3,r3,16
   14f50:	10800044 	addi	r2,r2,1
   14f54:	45800015 	stw	r22,0(r8)
   14f58:	44400115 	stw	r17,4(r8)
   14f5c:	d8c01c15 	stw	r3,112(sp)
   14f60:	d8801b15 	stw	r2,108(sp)
   14f64:	90bff60e 	bge	r18,r2,14f40 <___svfiprintf_internal_r+0xb74>
   14f68:	d9801a04 	addi	r6,sp,104
   14f6c:	b80b883a 	mov	r5,r23
   14f70:	a809883a 	mov	r4,r21
   14f74:	00141fc0 	call	141fc <__ssprint_r>
   14f78:	1000221e 	bne	r2,zero,15004 <___svfiprintf_internal_r+0xc38>
   14f7c:	843ffc04 	addi	r16,r16,-16
   14f80:	d8c01c17 	ldw	r3,112(sp)
   14f84:	d8801b17 	ldw	r2,108(sp)
   14f88:	d811883a 	mov	r8,sp
   14f8c:	8c3fef16 	blt	r17,r16,14f4c <___svfiprintf_internal_r+0xb80>
   14f90:	dac02817 	ldw	r11,160(sp)
   14f94:	1c07883a 	add	r3,r3,r16
   14f98:	10800044 	addi	r2,r2,1
   14f9c:	42c00015 	stw	r11,0(r8)
   14fa0:	44000115 	stw	r16,4(r8)
   14fa4:	d8c01c15 	stw	r3,112(sp)
   14fa8:	d8801b15 	stw	r2,108(sp)
   14fac:	010001c4 	movi	r4,7
   14fb0:	2080aa16 	blt	r4,r2,1525c <___svfiprintf_internal_r+0xe90>
   14fb4:	d8802417 	ldw	r2,144(sp)
   14fb8:	dac02017 	ldw	r11,128(sp)
   14fbc:	12c0010e 	bge	r2,r11,14fc4 <___svfiprintf_internal_r+0xbf8>
   14fc0:	5805883a 	mov	r2,r11
   14fc4:	dac02517 	ldw	r11,148(sp)
   14fc8:	5897883a 	add	r11,r11,r2
   14fcc:	dac02515 	stw	r11,148(sp)
   14fd0:	1800531e 	bne	r3,zero,15120 <___svfiprintf_internal_r+0xd54>
   14fd4:	98800007 	ldb	r2,0(r19)
   14fd8:	d8001b15 	stw	zero,108(sp)
   14fdc:	d811883a 	mov	r8,sp
   14fe0:	103d231e 	bne	r2,zero,14470 <___svfiprintf_internal_r+0xa4>
   14fe4:	9823883a 	mov	r17,r19
   14fe8:	003d3906 	br	144d0 <___svfiprintf_internal_r+0x104>
   14fec:	d8801c17 	ldw	r2,112(sp)
   14ff0:	10000426 	beq	r2,zero,15004 <___svfiprintf_internal_r+0xc38>
   14ff4:	d9402717 	ldw	r5,156(sp)
   14ff8:	d9002a17 	ldw	r4,168(sp)
   14ffc:	d9801a04 	addi	r6,sp,104
   15000:	00141fc0 	call	141fc <__ssprint_r>
   15004:	dac02717 	ldw	r11,156(sp)
   15008:	d8802517 	ldw	r2,148(sp)
   1500c:	58c0030b 	ldhu	r3,12(r11)
   15010:	18c0100c 	andi	r3,r3,64
   15014:	1801381e 	bne	r3,zero,154f8 <___svfiprintf_internal_r+0x112c>
   15018:	dfc03717 	ldw	ra,220(sp)
   1501c:	df003617 	ldw	fp,216(sp)
   15020:	ddc03517 	ldw	r23,212(sp)
   15024:	dd803417 	ldw	r22,208(sp)
   15028:	dd403317 	ldw	r21,204(sp)
   1502c:	dd003217 	ldw	r20,200(sp)
   15030:	dcc03117 	ldw	r19,196(sp)
   15034:	dc803017 	ldw	r18,192(sp)
   15038:	dc402f17 	ldw	r17,188(sp)
   1503c:	dc002e17 	ldw	r16,184(sp)
   15040:	dec03804 	addi	sp,sp,224
   15044:	f800283a 	ret
   15048:	dac02417 	ldw	r11,144(sp)
   1504c:	d9002017 	ldw	r4,128(sp)
   15050:	5939c83a 	sub	fp,r11,r4
   15054:	073f780e 	bge	zero,fp,14e38 <___svfiprintf_internal_r+0xa6c>
   15058:	02400404 	movi	r9,16
   1505c:	4f01370e 	bge	r9,fp,1553c <___svfiprintf_internal_r+0x1170>
   15060:	02c000b4 	movhi	r11,2
   15064:	5ade7704 	addi	r11,r11,31196
   15068:	dac02215 	stw	r11,136(sp)
   1506c:	028001c4 	movi	r10,7
   15070:	00000306 	br	15080 <___svfiprintf_internal_r+0xcb4>
   15074:	e73ffc04 	addi	fp,fp,-16
   15078:	42000204 	addi	r8,r8,8
   1507c:	4f00150e 	bge	r9,fp,150d4 <___svfiprintf_internal_r+0xd08>
   15080:	18c00404 	addi	r3,r3,16
   15084:	10800044 	addi	r2,r2,1
   15088:	45000015 	stw	r20,0(r8)
   1508c:	42400115 	stw	r9,4(r8)
   15090:	d8c01c15 	stw	r3,112(sp)
   15094:	d8801b15 	stw	r2,108(sp)
   15098:	50bff60e 	bge	r10,r2,15074 <___svfiprintf_internal_r+0xca8>
   1509c:	d9801a04 	addi	r6,sp,104
   150a0:	b80b883a 	mov	r5,r23
   150a4:	a809883a 	mov	r4,r21
   150a8:	da402c15 	stw	r9,176(sp)
   150ac:	da802d15 	stw	r10,180(sp)
   150b0:	00141fc0 	call	141fc <__ssprint_r>
   150b4:	da402c17 	ldw	r9,176(sp)
   150b8:	da802d17 	ldw	r10,180(sp)
   150bc:	103fd11e 	bne	r2,zero,15004 <___svfiprintf_internal_r+0xc38>
   150c0:	e73ffc04 	addi	fp,fp,-16
   150c4:	d8c01c17 	ldw	r3,112(sp)
   150c8:	d8801b17 	ldw	r2,108(sp)
   150cc:	d811883a 	mov	r8,sp
   150d0:	4f3feb16 	blt	r9,fp,15080 <___svfiprintf_internal_r+0xcb4>
   150d4:	dac02217 	ldw	r11,136(sp)
   150d8:	1f07883a 	add	r3,r3,fp
   150dc:	10800044 	addi	r2,r2,1
   150e0:	42c00015 	stw	r11,0(r8)
   150e4:	47000115 	stw	fp,4(r8)
   150e8:	d8c01c15 	stw	r3,112(sp)
   150ec:	d8801b15 	stw	r2,108(sp)
   150f0:	010001c4 	movi	r4,7
   150f4:	2080b616 	blt	r4,r2,153d0 <___svfiprintf_internal_r+0x1004>
   150f8:	42000204 	addi	r8,r8,8
   150fc:	003f4e06 	br	14e38 <___svfiprintf_internal_r+0xa6c>
   15100:	d9801a04 	addi	r6,sp,104
   15104:	b80b883a 	mov	r5,r23
   15108:	a809883a 	mov	r4,r21
   1510c:	00141fc0 	call	141fc <__ssprint_r>
   15110:	103fbc1e 	bne	r2,zero,15004 <___svfiprintf_internal_r+0xc38>
   15114:	d8c01c17 	ldw	r3,112(sp)
   15118:	d811883a 	mov	r8,sp
   1511c:	003f7a06 	br	14f08 <___svfiprintf_internal_r+0xb3c>
   15120:	d9801a04 	addi	r6,sp,104
   15124:	b80b883a 	mov	r5,r23
   15128:	a809883a 	mov	r4,r21
   1512c:	00141fc0 	call	141fc <__ssprint_r>
   15130:	103fa826 	beq	r2,zero,14fd4 <___svfiprintf_internal_r+0xc08>
   15134:	003fb306 	br	15004 <___svfiprintf_internal_r+0xc38>
   15138:	d9801a04 	addi	r6,sp,104
   1513c:	b80b883a 	mov	r5,r23
   15140:	a809883a 	mov	r4,r21
   15144:	00141fc0 	call	141fc <__ssprint_r>
   15148:	103fae1e 	bne	r2,zero,15004 <___svfiprintf_internal_r+0xc38>
   1514c:	d811883a 	mov	r8,sp
   15150:	003cdc06 	br	144c4 <___svfiprintf_internal_r+0xf8>
   15154:	d9801a04 	addi	r6,sp,104
   15158:	b80b883a 	mov	r5,r23
   1515c:	a809883a 	mov	r4,r21
   15160:	00141fc0 	call	141fc <__ssprint_r>
   15164:	103fa71e 	bne	r2,zero,15004 <___svfiprintf_internal_r+0xc38>
   15168:	d8c01c17 	ldw	r3,112(sp)
   1516c:	d8801b17 	ldw	r2,108(sp)
   15170:	d811883a 	mov	r8,sp
   15174:	003f5a06 	br	14ee0 <___svfiprintf_internal_r+0xb14>
   15178:	d9801a04 	addi	r6,sp,104
   1517c:	b80b883a 	mov	r5,r23
   15180:	a809883a 	mov	r4,r21
   15184:	00141fc0 	call	141fc <__ssprint_r>
   15188:	103f9e1e 	bne	r2,zero,15004 <___svfiprintf_internal_r+0xc38>
   1518c:	d8c01c17 	ldw	r3,112(sp)
   15190:	d8801b17 	ldw	r2,108(sp)
   15194:	d811883a 	mov	r8,sp
   15198:	003f1706 	br	14df8 <___svfiprintf_internal_r+0xa2c>
   1519c:	d9801a04 	addi	r6,sp,104
   151a0:	b80b883a 	mov	r5,r23
   151a4:	a809883a 	mov	r4,r21
   151a8:	00141fc0 	call	141fc <__ssprint_r>
   151ac:	103f951e 	bne	r2,zero,15004 <___svfiprintf_internal_r+0xc38>
   151b0:	d8c01c17 	ldw	r3,112(sp)
   151b4:	d8801b17 	ldw	r2,108(sp)
   151b8:	d811883a 	mov	r8,sp
   151bc:	003f1b06 	br	14e2c <___svfiprintf_internal_r+0xa60>
   151c0:	d8001d85 	stb	zero,118(sp)
   151c4:	80007b16 	blt	r16,zero,153b4 <___svfiprintf_internal_r+0xfe8>
   151c8:	00ffdfc4 	movi	r3,-129
   151cc:	e244b03a 	or	r2,fp,r9
   151d0:	90e4703a 	and	r18,r18,r3
   151d4:	103d7026 	beq	r2,zero,14798 <___svfiprintf_internal_r+0x3cc>
   151d8:	0015883a 	mov	r10,zero
   151dc:	003d7206 	br	147a8 <___svfiprintf_internal_r+0x3dc>
   151e0:	d9801a04 	addi	r6,sp,104
   151e4:	b80b883a 	mov	r5,r23
   151e8:	a809883a 	mov	r4,r21
   151ec:	00141fc0 	call	141fc <__ssprint_r>
   151f0:	103f841e 	bne	r2,zero,15004 <___svfiprintf_internal_r+0xc38>
   151f4:	d8c01c17 	ldw	r3,112(sp)
   151f8:	d8801b17 	ldw	r2,108(sp)
   151fc:	d811883a 	mov	r8,sp
   15200:	003ef006 	br	14dc4 <___svfiprintf_internal_r+0x9f8>
   15204:	9080100c 	andi	r2,r18,64
   15208:	d8001d85 	stb	zero,118(sp)
   1520c:	dac02317 	ldw	r11,140(sp)
   15210:	10008126 	beq	r2,zero,15418 <___svfiprintf_internal_r+0x104c>
   15214:	58800104 	addi	r2,r11,4
   15218:	5f00000b 	ldhu	fp,0(r11)
   1521c:	0013883a 	mov	r9,zero
   15220:	803ec30e 	bge	r16,zero,14d30 <___svfiprintf_internal_r+0x964>
   15224:	d8802315 	stw	r2,140(sp)
   15228:	0015883a 	mov	r10,zero
   1522c:	e244b03a 	or	r2,fp,r9
   15230:	103e371e 	bne	r2,zero,14b10 <___svfiprintf_internal_r+0x744>
   15234:	00800044 	movi	r2,1
   15238:	10803fcc 	andi	r2,r2,255
   1523c:	00c00044 	movi	r3,1
   15240:	10c06126 	beq	r2,r3,153c8 <___svfiprintf_internal_r+0xffc>
   15244:	00c00084 	movi	r3,2
   15248:	10fd5526 	beq	r2,r3,147a0 <___svfiprintf_internal_r+0x3d4>
   1524c:	003ed806 	br	14db0 <___svfiprintf_internal_r+0x9e4>
   15250:	d8802315 	stw	r2,140(sp)
   15254:	98c00007 	ldb	r3,0(r19)
   15258:	003cab06 	br	14508 <___svfiprintf_internal_r+0x13c>
   1525c:	d9801a04 	addi	r6,sp,104
   15260:	b80b883a 	mov	r5,r23
   15264:	a809883a 	mov	r4,r21
   15268:	00141fc0 	call	141fc <__ssprint_r>
   1526c:	103f651e 	bne	r2,zero,15004 <___svfiprintf_internal_r+0xc38>
   15270:	d8c01c17 	ldw	r3,112(sp)
   15274:	003f4f06 	br	14fb4 <___svfiprintf_internal_r+0xbe8>
   15278:	008000b4 	movhi	r2,2
   1527c:	109e0e04 	addi	r2,r2,30776
   15280:	d8802915 	stw	r2,164(sp)
   15284:	003d4406 	br	14798 <___svfiprintf_internal_r+0x3cc>
   15288:	dac02317 	ldw	r11,140(sp)
   1528c:	58800017 	ldw	r2,0(r11)
   15290:	dac02517 	ldw	r11,148(sp)
   15294:	5807d7fa 	srai	r3,r11,31
   15298:	dac02317 	ldw	r11,140(sp)
   1529c:	10c00115 	stw	r3,4(r2)
   152a0:	5ac00104 	addi	r11,r11,4
   152a4:	dac02315 	stw	r11,140(sp)
   152a8:	dac02517 	ldw	r11,148(sp)
   152ac:	12c00015 	stw	r11,0(r2)
   152b0:	003c6d06 	br	14468 <___svfiprintf_internal_r+0x9c>
   152b4:	9080100c 	andi	r2,r18,64
   152b8:	dac02317 	ldw	r11,140(sp)
   152bc:	103e5326 	beq	r2,zero,14c0c <___svfiprintf_internal_r+0x840>
   152c0:	5f00000f 	ldh	fp,0(r11)
   152c4:	5ac00104 	addi	r11,r11,4
   152c8:	dac02315 	stw	r11,140(sp)
   152cc:	e013d7fa 	srai	r9,fp,31
   152d0:	4805883a 	mov	r2,r9
   152d4:	003e0706 	br	14af4 <___svfiprintf_internal_r+0x728>
   152d8:	00800c04 	movi	r2,48
   152dc:	d8801d05 	stb	r2,116(sp)
   152e0:	d8c01d45 	stb	r3,117(sp)
   152e4:	d8001d85 	stb	zero,118(sp)
   152e8:	90800094 	ori	r2,r18,2
   152ec:	80008f16 	blt	r16,zero,1552c <___svfiprintf_internal_r+0x1160>
   152f0:	00bfdfc4 	movi	r2,-129
   152f4:	90a4703a 	and	r18,r18,r2
   152f8:	94800094 	ori	r18,r18,2
   152fc:	0015883a 	mov	r10,zero
   15300:	003d2906 	br	147a8 <___svfiprintf_internal_r+0x3dc>
   15304:	98c00007 	ldb	r3,0(r19)
   15308:	003c7f06 	br	14508 <___svfiprintf_internal_r+0x13c>
   1530c:	dac02317 	ldw	r11,140(sp)
   15310:	0013883a 	mov	r9,zero
   15314:	5f000017 	ldw	fp,0(r11)
   15318:	5ac00104 	addi	r11,r11,4
   1531c:	dac02315 	stw	r11,140(sp)
   15320:	003d1506 	br	14778 <___svfiprintf_internal_r+0x3ac>
   15324:	9080100c 	andi	r2,r18,64
   15328:	d8001d85 	stb	zero,118(sp)
   1532c:	dac02317 	ldw	r11,140(sp)
   15330:	10003426 	beq	r2,zero,15404 <___svfiprintf_internal_r+0x1038>
   15334:	58800104 	addi	r2,r11,4
   15338:	5f00000b 	ldhu	fp,0(r11)
   1533c:	0013883a 	mov	r9,zero
   15340:	803e950e 	bge	r16,zero,14d98 <___svfiprintf_internal_r+0x9cc>
   15344:	e246b03a 	or	r3,fp,r9
   15348:	d8802315 	stw	r2,140(sp)
   1534c:	183d5a1e 	bne	r3,zero,148b8 <___svfiprintf_internal_r+0x4ec>
   15350:	0015883a 	mov	r10,zero
   15354:	0005883a 	mov	r2,zero
   15358:	003fb706 	br	15238 <___svfiprintf_internal_r+0xe6c>
   1535c:	98c00043 	ldbu	r3,1(r19)
   15360:	94800814 	ori	r18,r18,32
   15364:	9cc00044 	addi	r19,r19,1
   15368:	18c03fcc 	andi	r3,r3,255
   1536c:	18c0201c 	xori	r3,r3,128
   15370:	18ffe004 	addi	r3,r3,-128
   15374:	003c6406 	br	14508 <___svfiprintf_internal_r+0x13c>
   15378:	d8c02315 	stw	r3,140(sp)
   1537c:	0015883a 	mov	r10,zero
   15380:	003faa06 	br	1522c <___svfiprintf_internal_r+0xe60>
   15384:	dac02317 	ldw	r11,140(sp)
   15388:	58800017 	ldw	r2,0(r11)
   1538c:	5ac00104 	addi	r11,r11,4
   15390:	dac02315 	stw	r11,140(sp)
   15394:	dac02517 	ldw	r11,148(sp)
   15398:	12c00015 	stw	r11,0(r2)
   1539c:	003c3206 	br	14468 <___svfiprintf_internal_r+0x9c>
   153a0:	010000b4 	movhi	r4,2
   153a4:	211e0e04 	addi	r4,r4,30776
   153a8:	d9002915 	stw	r4,164(sp)
   153ac:	d8c02315 	stw	r3,140(sp)
   153b0:	1025883a 	mov	r18,r2
   153b4:	e244b03a 	or	r2,fp,r9
   153b8:	103f871e 	bne	r2,zero,151d8 <___svfiprintf_internal_r+0xe0c>
   153bc:	0015883a 	mov	r10,zero
   153c0:	00800084 	movi	r2,2
   153c4:	003f9c06 	br	15238 <___svfiprintf_internal_r+0xe6c>
   153c8:	0039883a 	mov	fp,zero
   153cc:	003e5f06 	br	14d4c <___svfiprintf_internal_r+0x980>
   153d0:	d9801a04 	addi	r6,sp,104
   153d4:	b80b883a 	mov	r5,r23
   153d8:	a809883a 	mov	r4,r21
   153dc:	00141fc0 	call	141fc <__ssprint_r>
   153e0:	103f081e 	bne	r2,zero,15004 <___svfiprintf_internal_r+0xc38>
   153e4:	d8c01c17 	ldw	r3,112(sp)
   153e8:	d8801b17 	ldw	r2,108(sp)
   153ec:	d811883a 	mov	r8,sp
   153f0:	003e9106 	br	14e38 <___svfiprintf_internal_r+0xa6c>
   153f4:	010000b4 	movhi	r4,2
   153f8:	211e7704 	addi	r4,r4,31196
   153fc:	d9002215 	stw	r4,136(sp)
   15400:	003ead06 	br	14eb8 <___svfiprintf_internal_r+0xaec>
   15404:	58800104 	addi	r2,r11,4
   15408:	5f000017 	ldw	fp,0(r11)
   1540c:	0013883a 	mov	r9,zero
   15410:	803e610e 	bge	r16,zero,14d98 <___svfiprintf_internal_r+0x9cc>
   15414:	003fcb06 	br	15344 <___svfiprintf_internal_r+0xf78>
   15418:	58800104 	addi	r2,r11,4
   1541c:	5f000017 	ldw	fp,0(r11)
   15420:	0013883a 	mov	r9,zero
   15424:	803e420e 	bge	r16,zero,14d30 <___svfiprintf_internal_r+0x964>
   15428:	003f7e06 	br	15224 <___svfiprintf_internal_r+0xe58>
   1542c:	5f000017 	ldw	fp,0(r11)
   15430:	5ac00104 	addi	r11,r11,4
   15434:	0013883a 	mov	r9,zero
   15438:	dac02315 	stw	r11,140(sp)
   1543c:	003cce06 	br	14778 <___svfiprintf_internal_r+0x3ac>
   15440:	8809883a 	mov	r4,r17
   15444:	da002c15 	stw	r8,176(sp)
   15448:	00141640 	call	14164 <strlen>
   1544c:	d8802115 	stw	r2,132(sp)
   15450:	da801d83 	ldbu	r10,118(sp)
   15454:	df002315 	stw	fp,140(sp)
   15458:	0021883a 	mov	r16,zero
   1545c:	da002c17 	ldw	r8,176(sp)
   15460:	003cf606 	br	1483c <___svfiprintf_internal_r+0x470>
   15464:	00800184 	movi	r2,6
   15468:	1400012e 	bgeu	r2,r16,15470 <___svfiprintf_internal_r+0x10a4>
   1546c:	1021883a 	mov	r16,r2
   15470:	dc002115 	stw	r16,132(sp)
   15474:	8005883a 	mov	r2,r16
   15478:	80003c16 	blt	r16,zero,1556c <___svfiprintf_internal_r+0x11a0>
   1547c:	044000b4 	movhi	r17,2
   15480:	d8802015 	stw	r2,128(sp)
   15484:	df002315 	stw	fp,140(sp)
   15488:	8c5e1304 	addi	r17,r17,30796
   1548c:	003d2e06 	br	14948 <___svfiprintf_internal_r+0x57c>
   15490:	04001004 	movi	r16,64
   15494:	800b883a 	mov	r5,r16
   15498:	00124700 	call	12470 <_malloc_r>
   1549c:	dac02717 	ldw	r11,156(sp)
   154a0:	58800015 	stw	r2,0(r11)
   154a4:	58800415 	stw	r2,16(r11)
   154a8:	10004826 	beq	r2,zero,155cc <___svfiprintf_internal_r+0x1200>
   154ac:	dac02717 	ldw	r11,156(sp)
   154b0:	5c000515 	stw	r16,20(r11)
   154b4:	003bd906 	br	1441c <___svfiprintf_internal_r+0x50>
   154b8:	9080004c 	andi	r2,r18,1
   154bc:	0015883a 	mov	r10,zero
   154c0:	10000626 	beq	r2,zero,154dc <___svfiprintf_internal_r+0x1110>
   154c4:	dac02b17 	ldw	r11,172(sp)
   154c8:	00800c04 	movi	r2,48
   154cc:	d88019c5 	stb	r2,103(sp)
   154d0:	dac02115 	stw	r11,132(sp)
   154d4:	dc4019c4 	addi	r17,sp,103
   154d8:	003cd806 	br	1483c <___svfiprintf_internal_r+0x470>
   154dc:	d8002115 	stw	zero,132(sp)
   154e0:	dc401a04 	addi	r17,sp,104
   154e4:	003cd506 	br	1483c <___svfiprintf_internal_r+0x470>
   154e8:	010000b4 	movhi	r4,2
   154ec:	211e7b04 	addi	r4,r4,31212
   154f0:	d9002815 	stw	r4,160(sp)
   154f4:	003d4306 	br	14a04 <___svfiprintf_internal_r+0x638>
   154f8:	00bfffc4 	movi	r2,-1
   154fc:	003ec606 	br	15018 <___svfiprintf_internal_r+0xc4c>
   15500:	00800044 	movi	r2,1
   15504:	10803fcc 	andi	r2,r2,255
   15508:	00c00044 	movi	r3,1
   1550c:	10fd8026 	beq	r2,r3,14b10 <___svfiprintf_internal_r+0x744>
   15510:	00c00084 	movi	r3,2
   15514:	10fca426 	beq	r2,r3,147a8 <___svfiprintf_internal_r+0x3dc>
   15518:	003ce806 	br	148bc <___svfiprintf_internal_r+0x4f0>
   1551c:	010000b4 	movhi	r4,2
   15520:	211e7b04 	addi	r4,r4,31212
   15524:	d9002815 	stw	r4,160(sp)
   15528:	003e9906 	br	14f90 <___svfiprintf_internal_r+0xbc4>
   1552c:	1025883a 	mov	r18,r2
   15530:	0015883a 	mov	r10,zero
   15534:	00800084 	movi	r2,2
   15538:	003ff206 	br	15504 <___svfiprintf_internal_r+0x1138>
   1553c:	014000b4 	movhi	r5,2
   15540:	295e7704 	addi	r5,r5,31196
   15544:	d9402215 	stw	r5,136(sp)
   15548:	003ee206 	br	150d4 <___svfiprintf_internal_r+0xd08>
   1554c:	5827883a 	mov	r19,r11
   15550:	0021883a 	mov	r16,zero
   15554:	003bed06 	br	1450c <___svfiprintf_internal_r+0x140>
   15558:	dc002115 	stw	r16,132(sp)
   1555c:	da801d83 	ldbu	r10,118(sp)
   15560:	df002315 	stw	fp,140(sp)
   15564:	0021883a 	mov	r16,zero
   15568:	003cb406 	br	1483c <___svfiprintf_internal_r+0x470>
   1556c:	0005883a 	mov	r2,zero
   15570:	003fc206 	br	1547c <___svfiprintf_internal_r+0x10b0>
   15574:	d8802317 	ldw	r2,140(sp)
   15578:	98c00043 	ldbu	r3,1(r19)
   1557c:	5827883a 	mov	r19,r11
   15580:	14000017 	ldw	r16,0(r2)
   15584:	10800104 	addi	r2,r2,4
   15588:	d8802315 	stw	r2,140(sp)
   1558c:	803f760e 	bge	r16,zero,15368 <___svfiprintf_internal_r+0xf9c>
   15590:	18c03fcc 	andi	r3,r3,255
   15594:	18c0201c 	xori	r3,r3,128
   15598:	043fffc4 	movi	r16,-1
   1559c:	18ffe004 	addi	r3,r3,-128
   155a0:	003bd906 	br	14508 <___svfiprintf_internal_r+0x13c>
   155a4:	d9c01d85 	stb	r7,118(sp)
   155a8:	003cb606 	br	14884 <___svfiprintf_internal_r+0x4b8>
   155ac:	d9c01d85 	stb	r7,118(sp)
   155b0:	003d2106 	br	14a38 <___svfiprintf_internal_r+0x66c>
   155b4:	d9c01d85 	stb	r7,118(sp)
   155b8:	003d8e06 	br	14bf4 <___svfiprintf_internal_r+0x828>
   155bc:	d9c01d85 	stb	r7,118(sp)
   155c0:	003db306 	br	14c90 <___svfiprintf_internal_r+0x8c4>
   155c4:	d9c01d85 	stb	r7,118(sp)
   155c8:	003c8a06 	br	147f4 <___svfiprintf_internal_r+0x428>
   155cc:	dac02a17 	ldw	r11,168(sp)
   155d0:	00800304 	movi	r2,12
   155d4:	58800015 	stw	r2,0(r11)
   155d8:	00bfffc4 	movi	r2,-1
   155dc:	003e8e06 	br	15018 <___svfiprintf_internal_r+0xc4c>
   155e0:	d9c01d85 	stb	r7,118(sp)
   155e4:	003dc706 	br	14d04 <___svfiprintf_internal_r+0x938>
   155e8:	d9c01d85 	stb	r7,118(sp)
   155ec:	003ddf06 	br	14d6c <___svfiprintf_internal_r+0x9a0>
   155f0:	d9c01d85 	stb	r7,118(sp)
   155f4:	003d3706 	br	14ad4 <___svfiprintf_internal_r+0x708>
   155f8:	d9c01d85 	stb	r7,118(sp)
   155fc:	003c5406 	br	14750 <___svfiprintf_internal_r+0x384>
   15600:	d9c01d85 	stb	r7,118(sp)
   15604:	003d1d06 	br	14a7c <___svfiprintf_internal_r+0x6b0>

00015608 <__sprint_r.part.0>:
   15608:	28801917 	ldw	r2,100(r5)
   1560c:	defff604 	addi	sp,sp,-40
   15610:	dd400515 	stw	r21,20(sp)
   15614:	dfc00915 	stw	ra,36(sp)
   15618:	df000815 	stw	fp,32(sp)
   1561c:	ddc00715 	stw	r23,28(sp)
   15620:	dd800615 	stw	r22,24(sp)
   15624:	dd000415 	stw	r20,16(sp)
   15628:	dcc00315 	stw	r19,12(sp)
   1562c:	dc800215 	stw	r18,8(sp)
   15630:	dc400115 	stw	r17,4(sp)
   15634:	dc000015 	stw	r16,0(sp)
   15638:	1088000c 	andi	r2,r2,8192
   1563c:	302b883a 	mov	r21,r6
   15640:	10002e26 	beq	r2,zero,156fc <__sprint_r.part.0+0xf4>
   15644:	30800217 	ldw	r2,8(r6)
   15648:	35800017 	ldw	r22,0(r6)
   1564c:	10002926 	beq	r2,zero,156f4 <__sprint_r.part.0+0xec>
   15650:	2827883a 	mov	r19,r5
   15654:	2029883a 	mov	r20,r4
   15658:	b5c00104 	addi	r23,r22,4
   1565c:	04bfffc4 	movi	r18,-1
   15660:	bc400017 	ldw	r17,0(r23)
   15664:	b4000017 	ldw	r16,0(r22)
   15668:	0039883a 	mov	fp,zero
   1566c:	8822d0ba 	srli	r17,r17,2
   15670:	8800031e 	bne	r17,zero,15680 <__sprint_r.part.0+0x78>
   15674:	00001806 	br	156d8 <__sprint_r.part.0+0xd0>
   15678:	84000104 	addi	r16,r16,4
   1567c:	8f001526 	beq	r17,fp,156d4 <__sprint_r.part.0+0xcc>
   15680:	81400017 	ldw	r5,0(r16)
   15684:	980d883a 	mov	r6,r19
   15688:	a009883a 	mov	r4,r20
   1568c:	00170300 	call	17030 <_fputwc_r>
   15690:	e7000044 	addi	fp,fp,1
   15694:	14bff81e 	bne	r2,r18,15678 <__sprint_r.part.0+0x70>
   15698:	9005883a 	mov	r2,r18
   1569c:	a8000215 	stw	zero,8(r21)
   156a0:	a8000115 	stw	zero,4(r21)
   156a4:	dfc00917 	ldw	ra,36(sp)
   156a8:	df000817 	ldw	fp,32(sp)
   156ac:	ddc00717 	ldw	r23,28(sp)
   156b0:	dd800617 	ldw	r22,24(sp)
   156b4:	dd400517 	ldw	r21,20(sp)
   156b8:	dd000417 	ldw	r20,16(sp)
   156bc:	dcc00317 	ldw	r19,12(sp)
   156c0:	dc800217 	ldw	r18,8(sp)
   156c4:	dc400117 	ldw	r17,4(sp)
   156c8:	dc000017 	ldw	r16,0(sp)
   156cc:	dec00a04 	addi	sp,sp,40
   156d0:	f800283a 	ret
   156d4:	a8800217 	ldw	r2,8(r21)
   156d8:	8c63883a 	add	r17,r17,r17
   156dc:	8c63883a 	add	r17,r17,r17
   156e0:	1445c83a 	sub	r2,r2,r17
   156e4:	a8800215 	stw	r2,8(r21)
   156e8:	b5800204 	addi	r22,r22,8
   156ec:	bdc00204 	addi	r23,r23,8
   156f0:	103fdb1e 	bne	r2,zero,15660 <__sprint_r.part.0+0x58>
   156f4:	0005883a 	mov	r2,zero
   156f8:	003fe806 	br	1569c <__sprint_r.part.0+0x94>
   156fc:	00171300 	call	17130 <__sfvwrite_r>
   15700:	003fe606 	br	1569c <__sprint_r.part.0+0x94>

00015704 <__sprint_r>:
   15704:	30c00217 	ldw	r3,8(r6)
   15708:	18000126 	beq	r3,zero,15710 <__sprint_r+0xc>
   1570c:	00156081 	jmpi	15608 <__sprint_r.part.0>
   15710:	30000115 	stw	zero,4(r6)
   15714:	0005883a 	mov	r2,zero
   15718:	f800283a 	ret

0001571c <___vfiprintf_internal_r>:
   1571c:	deffc904 	addi	sp,sp,-220
   15720:	df003515 	stw	fp,212(sp)
   15724:	dd003115 	stw	r20,196(sp)
   15728:	dfc03615 	stw	ra,216(sp)
   1572c:	ddc03415 	stw	r23,208(sp)
   15730:	dd803315 	stw	r22,204(sp)
   15734:	dd403215 	stw	r21,200(sp)
   15738:	dcc03015 	stw	r19,192(sp)
   1573c:	dc802f15 	stw	r18,188(sp)
   15740:	dc402e15 	stw	r17,184(sp)
   15744:	dc002d15 	stw	r16,180(sp)
   15748:	d9002015 	stw	r4,128(sp)
   1574c:	d9c02215 	stw	r7,136(sp)
   15750:	2829883a 	mov	r20,r5
   15754:	3039883a 	mov	fp,r6
   15758:	20000226 	beq	r4,zero,15764 <___vfiprintf_internal_r+0x48>
   1575c:	20800e17 	ldw	r2,56(r4)
   15760:	1000cf26 	beq	r2,zero,15aa0 <___vfiprintf_internal_r+0x384>
   15764:	a080030b 	ldhu	r2,12(r20)
   15768:	10c8000c 	andi	r3,r2,8192
   1576c:	1800061e 	bne	r3,zero,15788 <___vfiprintf_internal_r+0x6c>
   15770:	a1001917 	ldw	r4,100(r20)
   15774:	00f7ffc4 	movi	r3,-8193
   15778:	10880014 	ori	r2,r2,8192
   1577c:	20c6703a 	and	r3,r4,r3
   15780:	a080030d 	sth	r2,12(r20)
   15784:	a0c01915 	stw	r3,100(r20)
   15788:	10c0020c 	andi	r3,r2,8
   1578c:	1800a926 	beq	r3,zero,15a34 <___vfiprintf_internal_r+0x318>
   15790:	a0c00417 	ldw	r3,16(r20)
   15794:	1800a726 	beq	r3,zero,15a34 <___vfiprintf_internal_r+0x318>
   15798:	1080068c 	andi	r2,r2,26
   1579c:	00c00284 	movi	r3,10
   157a0:	10c0ac26 	beq	r2,r3,15a54 <___vfiprintf_internal_r+0x338>
   157a4:	da801a04 	addi	r10,sp,104
   157a8:	da801e15 	stw	r10,120(sp)
   157ac:	d8801e17 	ldw	r2,120(sp)
   157b0:	da8019c4 	addi	r10,sp,103
   157b4:	058000b4 	movhi	r22,2
   157b8:	05c000b4 	movhi	r23,2
   157bc:	da801f15 	stw	r10,124(sp)
   157c0:	1295c83a 	sub	r10,r2,r10
   157c4:	b59e8304 	addi	r22,r22,31244
   157c8:	bdde7f04 	addi	r23,r23,31228
   157cc:	dec01a15 	stw	sp,104(sp)
   157d0:	d8001c15 	stw	zero,112(sp)
   157d4:	d8001b15 	stw	zero,108(sp)
   157d8:	d8002615 	stw	zero,152(sp)
   157dc:	d8002315 	stw	zero,140(sp)
   157e0:	da802715 	stw	r10,156(sp)
   157e4:	d811883a 	mov	r8,sp
   157e8:	dd002115 	stw	r20,132(sp)
   157ec:	e021883a 	mov	r16,fp
   157f0:	80800007 	ldb	r2,0(r16)
   157f4:	1003ea26 	beq	r2,zero,167a0 <___vfiprintf_internal_r+0x1084>
   157f8:	00c00944 	movi	r3,37
   157fc:	8025883a 	mov	r18,r16
   15800:	10c0021e 	bne	r2,r3,1580c <___vfiprintf_internal_r+0xf0>
   15804:	00001606 	br	15860 <___vfiprintf_internal_r+0x144>
   15808:	10c00326 	beq	r2,r3,15818 <___vfiprintf_internal_r+0xfc>
   1580c:	94800044 	addi	r18,r18,1
   15810:	90800007 	ldb	r2,0(r18)
   15814:	103ffc1e 	bne	r2,zero,15808 <___vfiprintf_internal_r+0xec>
   15818:	9423c83a 	sub	r17,r18,r16
   1581c:	88001026 	beq	r17,zero,15860 <___vfiprintf_internal_r+0x144>
   15820:	d8c01c17 	ldw	r3,112(sp)
   15824:	d8801b17 	ldw	r2,108(sp)
   15828:	44000015 	stw	r16,0(r8)
   1582c:	88c7883a 	add	r3,r17,r3
   15830:	10800044 	addi	r2,r2,1
   15834:	44400115 	stw	r17,4(r8)
   15838:	d8c01c15 	stw	r3,112(sp)
   1583c:	d8801b15 	stw	r2,108(sp)
   15840:	010001c4 	movi	r4,7
   15844:	2080760e 	bge	r4,r2,15a20 <___vfiprintf_internal_r+0x304>
   15848:	1803821e 	bne	r3,zero,16654 <___vfiprintf_internal_r+0xf38>
   1584c:	da802317 	ldw	r10,140(sp)
   15850:	d8001b15 	stw	zero,108(sp)
   15854:	d811883a 	mov	r8,sp
   15858:	5455883a 	add	r10,r10,r17
   1585c:	da802315 	stw	r10,140(sp)
   15860:	90800007 	ldb	r2,0(r18)
   15864:	10044626 	beq	r2,zero,16980 <___vfiprintf_internal_r+0x1264>
   15868:	90c00047 	ldb	r3,1(r18)
   1586c:	94000044 	addi	r16,r18,1
   15870:	d8001d85 	stb	zero,118(sp)
   15874:	0009883a 	mov	r4,zero
   15878:	000f883a 	mov	r7,zero
   1587c:	027fffc4 	movi	r9,-1
   15880:	0023883a 	mov	r17,zero
   15884:	0029883a 	mov	r20,zero
   15888:	01401604 	movi	r5,88
   1588c:	01800244 	movi	r6,9
   15890:	03400a84 	movi	r13,42
   15894:	03001b04 	movi	r12,108
   15898:	84000044 	addi	r16,r16,1
   1589c:	18bff804 	addi	r2,r3,-32
   158a0:	28827336 	bltu	r5,r2,16270 <___vfiprintf_internal_r+0xb54>
   158a4:	100490ba 	slli	r2,r2,2
   158a8:	02800074 	movhi	r10,1
   158ac:	52962f04 	addi	r10,r10,22716
   158b0:	1285883a 	add	r2,r2,r10
   158b4:	10800017 	ldw	r2,0(r2)
   158b8:	1000683a 	jmp	r2
   158bc:	00015fa4 	muli	zero,zero,1406
   158c0:	00016270 	cmpltui	zero,zero,1417
   158c4:	00016270 	cmpltui	zero,zero,1417
   158c8:	00015fc4 	movi	zero,1407
   158cc:	00016270 	cmpltui	zero,zero,1417
   158d0:	00016270 	cmpltui	zero,zero,1417
   158d4:	00016270 	cmpltui	zero,zero,1417
   158d8:	00016270 	cmpltui	zero,zero,1417
   158dc:	00016270 	cmpltui	zero,zero,1417
   158e0:	00016270 	cmpltui	zero,zero,1417
   158e4:	000161ac 	andhi	zero,zero,1414
   158e8:	000161c8 	cmpgei	zero,zero,1415
   158ec:	00016270 	cmpltui	zero,zero,1417
   158f0:	00015ab0 	cmpltui	zero,zero,1386
   158f4:	000161d8 	cmpnei	zero,zero,1415
   158f8:	00016270 	cmpltui	zero,zero,1417
   158fc:	00015fd0 	cmplti	zero,zero,1407
   15900:	00015fdc 	xori	zero,zero,1407
   15904:	00015fdc 	xori	zero,zero,1407
   15908:	00015fdc 	xori	zero,zero,1407
   1590c:	00015fdc 	xori	zero,zero,1407
   15910:	00015fdc 	xori	zero,zero,1407
   15914:	00015fdc 	xori	zero,zero,1407
   15918:	00015fdc 	xori	zero,zero,1407
   1591c:	00015fdc 	xori	zero,zero,1407
   15920:	00015fdc 	xori	zero,zero,1407
   15924:	00016270 	cmpltui	zero,zero,1417
   15928:	00016270 	cmpltui	zero,zero,1417
   1592c:	00016270 	cmpltui	zero,zero,1417
   15930:	00016270 	cmpltui	zero,zero,1417
   15934:	00016270 	cmpltui	zero,zero,1417
   15938:	00016270 	cmpltui	zero,zero,1417
   1593c:	00016270 	cmpltui	zero,zero,1417
   15940:	00016270 	cmpltui	zero,zero,1417
   15944:	00016270 	cmpltui	zero,zero,1417
   15948:	00016270 	cmpltui	zero,zero,1417
   1594c:	00016008 	cmpgei	zero,zero,1408
   15950:	00016270 	cmpltui	zero,zero,1417
   15954:	00016270 	cmpltui	zero,zero,1417
   15958:	00016270 	cmpltui	zero,zero,1417
   1595c:	00016270 	cmpltui	zero,zero,1417
   15960:	00016270 	cmpltui	zero,zero,1417
   15964:	00016270 	cmpltui	zero,zero,1417
   15968:	00016270 	cmpltui	zero,zero,1417
   1596c:	00016270 	cmpltui	zero,zero,1417
   15970:	00016270 	cmpltui	zero,zero,1417
   15974:	00016270 	cmpltui	zero,zero,1417
   15978:	00016040 	call	1604 <spencerNeutralPose1+0x2ec>
   1597c:	00016270 	cmpltui	zero,zero,1417
   15980:	00016270 	cmpltui	zero,zero,1417
   15984:	00016270 	cmpltui	zero,zero,1417
   15988:	00016270 	cmpltui	zero,zero,1417
   1598c:	00016270 	cmpltui	zero,zero,1417
   15990:	00016098 	cmpnei	zero,zero,1410
   15994:	00016270 	cmpltui	zero,zero,1417
   15998:	00016270 	cmpltui	zero,zero,1417
   1599c:	00016108 	cmpgei	zero,zero,1412
   159a0:	00016270 	cmpltui	zero,zero,1417
   159a4:	00016270 	cmpltui	zero,zero,1417
   159a8:	00016270 	cmpltui	zero,zero,1417
   159ac:	00016270 	cmpltui	zero,zero,1417
   159b0:	00016270 	cmpltui	zero,zero,1417
   159b4:	00016270 	cmpltui	zero,zero,1417
   159b8:	00016270 	cmpltui	zero,zero,1417
   159bc:	00016270 	cmpltui	zero,zero,1417
   159c0:	00016270 	cmpltui	zero,zero,1417
   159c4:	00016270 	cmpltui	zero,zero,1417
   159c8:	00015eb4 	movhi	zero,1402
   159cc:	00015ee0 	cmpeqi	zero,zero,1403
   159d0:	00016270 	cmpltui	zero,zero,1417
   159d4:	00016270 	cmpltui	zero,zero,1417
   159d8:	00016270 	cmpltui	zero,zero,1417
   159dc:	00016218 	cmpnei	zero,zero,1416
   159e0:	00015ee0 	cmpeqi	zero,zero,1403
   159e4:	00016270 	cmpltui	zero,zero,1417
   159e8:	00016270 	cmpltui	zero,zero,1417
   159ec:	00015d74 	movhi	zero,1397
   159f0:	00016270 	cmpltui	zero,zero,1417
   159f4:	00015d84 	movi	zero,1398
   159f8:	00015dc0 	call	15dc <spencerNeutralPose1+0x2c4>
   159fc:	00015abc 	xorhi	zero,zero,1386
   15a00:	00015d68 	cmpgeui	zero,zero,1397
   15a04:	00016270 	cmpltui	zero,zero,1417
   15a08:	00016144 	movi	zero,1413
   15a0c:	00016270 	cmpltui	zero,zero,1417
   15a10:	0001619c 	xori	zero,zero,1414
   15a14:	00016270 	cmpltui	zero,zero,1417
   15a18:	00016270 	cmpltui	zero,zero,1417
   15a1c:	00015e60 	cmpeqi	zero,zero,1401
   15a20:	42000204 	addi	r8,r8,8
   15a24:	da802317 	ldw	r10,140(sp)
   15a28:	5455883a 	add	r10,r10,r17
   15a2c:	da802315 	stw	r10,140(sp)
   15a30:	003f8b06 	br	15860 <___vfiprintf_internal_r+0x144>
   15a34:	d9002017 	ldw	r4,128(sp)
   15a38:	a00b883a 	mov	r5,r20
   15a3c:	000fbf80 	call	fbf8 <__swsetup_r>
   15a40:	1003b11e 	bne	r2,zero,16908 <___vfiprintf_internal_r+0x11ec>
   15a44:	a080030b 	ldhu	r2,12(r20)
   15a48:	00c00284 	movi	r3,10
   15a4c:	1080068c 	andi	r2,r2,26
   15a50:	10ff541e 	bne	r2,r3,157a4 <___vfiprintf_internal_r+0x88>
   15a54:	a080038f 	ldh	r2,14(r20)
   15a58:	103f5216 	blt	r2,zero,157a4 <___vfiprintf_internal_r+0x88>
   15a5c:	d9c02217 	ldw	r7,136(sp)
   15a60:	d9002017 	ldw	r4,128(sp)
   15a64:	e00d883a 	mov	r6,fp
   15a68:	a00b883a 	mov	r5,r20
   15a6c:	0016b940 	call	16b94 <__sbprintf>
   15a70:	dfc03617 	ldw	ra,216(sp)
   15a74:	df003517 	ldw	fp,212(sp)
   15a78:	ddc03417 	ldw	r23,208(sp)
   15a7c:	dd803317 	ldw	r22,204(sp)
   15a80:	dd403217 	ldw	r21,200(sp)
   15a84:	dd003117 	ldw	r20,196(sp)
   15a88:	dcc03017 	ldw	r19,192(sp)
   15a8c:	dc802f17 	ldw	r18,188(sp)
   15a90:	dc402e17 	ldw	r17,184(sp)
   15a94:	dc002d17 	ldw	r16,180(sp)
   15a98:	dec03704 	addi	sp,sp,220
   15a9c:	f800283a 	ret
   15aa0:	0011bcc0 	call	11bcc <__sinit>
   15aa4:	003f2f06 	br	15764 <___vfiprintf_internal_r+0x48>
   15aa8:	0463c83a 	sub	r17,zero,r17
   15aac:	d8802215 	stw	r2,136(sp)
   15ab0:	a5000114 	ori	r20,r20,4
   15ab4:	80c00007 	ldb	r3,0(r16)
   15ab8:	003f7706 	br	15898 <___vfiprintf_internal_r+0x17c>
   15abc:	00800c04 	movi	r2,48
   15ac0:	da802217 	ldw	r10,136(sp)
   15ac4:	d8801d05 	stb	r2,116(sp)
   15ac8:	00801e04 	movi	r2,120
   15acc:	d8801d45 	stb	r2,117(sp)
   15ad0:	d8001d85 	stb	zero,118(sp)
   15ad4:	50c00104 	addi	r3,r10,4
   15ad8:	54800017 	ldw	r18,0(r10)
   15adc:	0027883a 	mov	r19,zero
   15ae0:	a0800094 	ori	r2,r20,2
   15ae4:	48030b16 	blt	r9,zero,16714 <___vfiprintf_internal_r+0xff8>
   15ae8:	00bfdfc4 	movi	r2,-129
   15aec:	a096703a 	and	r11,r20,r2
   15af0:	d8c02215 	stw	r3,136(sp)
   15af4:	5d000094 	ori	r20,r11,2
   15af8:	90032b1e 	bne	r18,zero,167a8 <___vfiprintf_internal_r+0x108c>
   15afc:	008000b4 	movhi	r2,2
   15b00:	109e0e04 	addi	r2,r2,30776
   15b04:	d8802615 	stw	r2,152(sp)
   15b08:	0039883a 	mov	fp,zero
   15b0c:	48017b1e 	bne	r9,zero,160fc <___vfiprintf_internal_r+0x9e0>
   15b10:	0013883a 	mov	r9,zero
   15b14:	0027883a 	mov	r19,zero
   15b18:	dd401a04 	addi	r21,sp,104
   15b1c:	4825883a 	mov	r18,r9
   15b20:	4cc0010e 	bge	r9,r19,15b28 <___vfiprintf_internal_r+0x40c>
   15b24:	9825883a 	mov	r18,r19
   15b28:	e7003fcc 	andi	fp,fp,255
   15b2c:	e700201c 	xori	fp,fp,128
   15b30:	e73fe004 	addi	fp,fp,-128
   15b34:	e0000126 	beq	fp,zero,15b3c <___vfiprintf_internal_r+0x420>
   15b38:	94800044 	addi	r18,r18,1
   15b3c:	a380008c 	andi	r14,r20,2
   15b40:	70000126 	beq	r14,zero,15b48 <___vfiprintf_internal_r+0x42c>
   15b44:	94800084 	addi	r18,r18,2
   15b48:	a700210c 	andi	fp,r20,132
   15b4c:	e001df1e 	bne	fp,zero,162cc <___vfiprintf_internal_r+0xbb0>
   15b50:	8c87c83a 	sub	r3,r17,r18
   15b54:	00c1dd0e 	bge	zero,r3,162cc <___vfiprintf_internal_r+0xbb0>
   15b58:	01c00404 	movi	r7,16
   15b5c:	d8801c17 	ldw	r2,112(sp)
   15b60:	38c3ad0e 	bge	r7,r3,16a18 <___vfiprintf_internal_r+0x12fc>
   15b64:	028000b4 	movhi	r10,2
   15b68:	529e8304 	addi	r10,r10,31244
   15b6c:	dc002915 	stw	r16,164(sp)
   15b70:	d9801b17 	ldw	r6,108(sp)
   15b74:	da802415 	stw	r10,144(sp)
   15b78:	03c001c4 	movi	r15,7
   15b7c:	da402515 	stw	r9,148(sp)
   15b80:	db802815 	stw	r14,160(sp)
   15b84:	1821883a 	mov	r16,r3
   15b88:	00000506 	br	15ba0 <___vfiprintf_internal_r+0x484>
   15b8c:	31400084 	addi	r5,r6,2
   15b90:	42000204 	addi	r8,r8,8
   15b94:	200d883a 	mov	r6,r4
   15b98:	843ffc04 	addi	r16,r16,-16
   15b9c:	3c000d0e 	bge	r7,r16,15bd4 <___vfiprintf_internal_r+0x4b8>
   15ba0:	10800404 	addi	r2,r2,16
   15ba4:	31000044 	addi	r4,r6,1
   15ba8:	45800015 	stw	r22,0(r8)
   15bac:	41c00115 	stw	r7,4(r8)
   15bb0:	d8801c15 	stw	r2,112(sp)
   15bb4:	d9001b15 	stw	r4,108(sp)
   15bb8:	793ff40e 	bge	r15,r4,15b8c <___vfiprintf_internal_r+0x470>
   15bbc:	1001b51e 	bne	r2,zero,16294 <___vfiprintf_internal_r+0xb78>
   15bc0:	843ffc04 	addi	r16,r16,-16
   15bc4:	000d883a 	mov	r6,zero
   15bc8:	01400044 	movi	r5,1
   15bcc:	d811883a 	mov	r8,sp
   15bd0:	3c3ff316 	blt	r7,r16,15ba0 <___vfiprintf_internal_r+0x484>
   15bd4:	8007883a 	mov	r3,r16
   15bd8:	da402517 	ldw	r9,148(sp)
   15bdc:	db802817 	ldw	r14,160(sp)
   15be0:	dc002917 	ldw	r16,164(sp)
   15be4:	da802417 	ldw	r10,144(sp)
   15be8:	1885883a 	add	r2,r3,r2
   15bec:	40c00115 	stw	r3,4(r8)
   15bf0:	42800015 	stw	r10,0(r8)
   15bf4:	d8801c15 	stw	r2,112(sp)
   15bf8:	d9401b15 	stw	r5,108(sp)
   15bfc:	00c001c4 	movi	r3,7
   15c00:	19426016 	blt	r3,r5,16584 <___vfiprintf_internal_r+0xe68>
   15c04:	d8c01d87 	ldb	r3,118(sp)
   15c08:	42000204 	addi	r8,r8,8
   15c0c:	29000044 	addi	r4,r5,1
   15c10:	1801b31e 	bne	r3,zero,162e0 <___vfiprintf_internal_r+0xbc4>
   15c14:	7001c026 	beq	r14,zero,16318 <___vfiprintf_internal_r+0xbfc>
   15c18:	d8c01d04 	addi	r3,sp,116
   15c1c:	10800084 	addi	r2,r2,2
   15c20:	40c00015 	stw	r3,0(r8)
   15c24:	00c00084 	movi	r3,2
   15c28:	40c00115 	stw	r3,4(r8)
   15c2c:	d8801c15 	stw	r2,112(sp)
   15c30:	d9001b15 	stw	r4,108(sp)
   15c34:	00c001c4 	movi	r3,7
   15c38:	1902650e 	bge	r3,r4,165d0 <___vfiprintf_internal_r+0xeb4>
   15c3c:	10029a1e 	bne	r2,zero,166a8 <___vfiprintf_internal_r+0xf8c>
   15c40:	00c02004 	movi	r3,128
   15c44:	01000044 	movi	r4,1
   15c48:	000b883a 	mov	r5,zero
   15c4c:	d811883a 	mov	r8,sp
   15c50:	e0c1b31e 	bne	fp,r3,16320 <___vfiprintf_internal_r+0xc04>
   15c54:	8cb9c83a 	sub	fp,r17,r18
   15c58:	0701b10e 	bge	zero,fp,16320 <___vfiprintf_internal_r+0xc04>
   15c5c:	01c00404 	movi	r7,16
   15c60:	3f03890e 	bge	r7,fp,16a88 <___vfiprintf_internal_r+0x136c>
   15c64:	00c000b4 	movhi	r3,2
   15c68:	18de7f04 	addi	r3,r3,31228
   15c6c:	d8c02415 	stw	r3,144(sp)
   15c70:	8007883a 	mov	r3,r16
   15c74:	034001c4 	movi	r13,7
   15c78:	e021883a 	mov	r16,fp
   15c7c:	da402515 	stw	r9,148(sp)
   15c80:	1839883a 	mov	fp,r3
   15c84:	00000506 	br	15c9c <___vfiprintf_internal_r+0x580>
   15c88:	29800084 	addi	r6,r5,2
   15c8c:	42000204 	addi	r8,r8,8
   15c90:	180b883a 	mov	r5,r3
   15c94:	843ffc04 	addi	r16,r16,-16
   15c98:	3c000d0e 	bge	r7,r16,15cd0 <___vfiprintf_internal_r+0x5b4>
   15c9c:	10800404 	addi	r2,r2,16
   15ca0:	28c00044 	addi	r3,r5,1
   15ca4:	45c00015 	stw	r23,0(r8)
   15ca8:	41c00115 	stw	r7,4(r8)
   15cac:	d8801c15 	stw	r2,112(sp)
   15cb0:	d8c01b15 	stw	r3,108(sp)
   15cb4:	68fff40e 	bge	r13,r3,15c88 <___vfiprintf_internal_r+0x56c>
   15cb8:	1002241e 	bne	r2,zero,1654c <___vfiprintf_internal_r+0xe30>
   15cbc:	843ffc04 	addi	r16,r16,-16
   15cc0:	01800044 	movi	r6,1
   15cc4:	000b883a 	mov	r5,zero
   15cc8:	d811883a 	mov	r8,sp
   15ccc:	3c3ff316 	blt	r7,r16,15c9c <___vfiprintf_internal_r+0x580>
   15cd0:	da402517 	ldw	r9,148(sp)
   15cd4:	e007883a 	mov	r3,fp
   15cd8:	8039883a 	mov	fp,r16
   15cdc:	1821883a 	mov	r16,r3
   15ce0:	d8c02417 	ldw	r3,144(sp)
   15ce4:	1705883a 	add	r2,r2,fp
   15ce8:	47000115 	stw	fp,4(r8)
   15cec:	40c00015 	stw	r3,0(r8)
   15cf0:	d8801c15 	stw	r2,112(sp)
   15cf4:	d9801b15 	stw	r6,108(sp)
   15cf8:	00c001c4 	movi	r3,7
   15cfc:	19827616 	blt	r3,r6,166d8 <___vfiprintf_internal_r+0xfbc>
   15d00:	4cf9c83a 	sub	fp,r9,r19
   15d04:	42000204 	addi	r8,r8,8
   15d08:	31000044 	addi	r4,r6,1
   15d0c:	300b883a 	mov	r5,r6
   15d10:	07018516 	blt	zero,fp,16328 <___vfiprintf_internal_r+0xc0c>
   15d14:	9885883a 	add	r2,r19,r2
   15d18:	45400015 	stw	r21,0(r8)
   15d1c:	44c00115 	stw	r19,4(r8)
   15d20:	d8801c15 	stw	r2,112(sp)
   15d24:	d9001b15 	stw	r4,108(sp)
   15d28:	00c001c4 	movi	r3,7
   15d2c:	1901dd0e 	bge	r3,r4,164a4 <___vfiprintf_internal_r+0xd88>
   15d30:	1002401e 	bne	r2,zero,16634 <___vfiprintf_internal_r+0xf18>
   15d34:	d8001b15 	stw	zero,108(sp)
   15d38:	a2c0010c 	andi	r11,r20,4
   15d3c:	58000226 	beq	r11,zero,15d48 <___vfiprintf_internal_r+0x62c>
   15d40:	8ca7c83a 	sub	r19,r17,r18
   15d44:	04c2f216 	blt	zero,r19,16910 <___vfiprintf_internal_r+0x11f4>
   15d48:	8c80010e 	bge	r17,r18,15d50 <___vfiprintf_internal_r+0x634>
   15d4c:	9023883a 	mov	r17,r18
   15d50:	da802317 	ldw	r10,140(sp)
   15d54:	5455883a 	add	r10,r10,r17
   15d58:	da802315 	stw	r10,140(sp)
   15d5c:	d8001b15 	stw	zero,108(sp)
   15d60:	d811883a 	mov	r8,sp
   15d64:	003ea206 	br	157f0 <___vfiprintf_internal_r+0xd4>
   15d68:	a5000814 	ori	r20,r20,32
   15d6c:	80c00007 	ldb	r3,0(r16)
   15d70:	003ec906 	br	15898 <___vfiprintf_internal_r+0x17c>
   15d74:	80c00007 	ldb	r3,0(r16)
   15d78:	1b030926 	beq	r3,r12,169a0 <___vfiprintf_internal_r+0x1284>
   15d7c:	a5000414 	ori	r20,r20,16
   15d80:	003ec506 	br	15898 <___vfiprintf_internal_r+0x17c>
   15d84:	21003fcc 	andi	r4,r4,255
   15d88:	20035e1e 	bne	r4,zero,16b04 <___vfiprintf_internal_r+0x13e8>
   15d8c:	a080080c 	andi	r2,r20,32
   15d90:	1002a526 	beq	r2,zero,16828 <___vfiprintf_internal_r+0x110c>
   15d94:	da802217 	ldw	r10,136(sp)
   15d98:	50800017 	ldw	r2,0(r10)
   15d9c:	da802317 	ldw	r10,140(sp)
   15da0:	5007d7fa 	srai	r3,r10,31
   15da4:	da802217 	ldw	r10,136(sp)
   15da8:	10c00115 	stw	r3,4(r2)
   15dac:	52800104 	addi	r10,r10,4
   15db0:	da802215 	stw	r10,136(sp)
   15db4:	da802317 	ldw	r10,140(sp)
   15db8:	12800015 	stw	r10,0(r2)
   15dbc:	003e8c06 	br	157f0 <___vfiprintf_internal_r+0xd4>
   15dc0:	21003fcc 	andi	r4,r4,255
   15dc4:	2003511e 	bne	r4,zero,16b0c <___vfiprintf_internal_r+0x13f0>
   15dc8:	a080080c 	andi	r2,r20,32
   15dcc:	1000a126 	beq	r2,zero,16054 <___vfiprintf_internal_r+0x938>
   15dd0:	da802217 	ldw	r10,136(sp)
   15dd4:	d8001d85 	stb	zero,118(sp)
   15dd8:	50800204 	addi	r2,r10,8
   15ddc:	54800017 	ldw	r18,0(r10)
   15de0:	54c00117 	ldw	r19,4(r10)
   15de4:	4802b416 	blt	r9,zero,168b8 <___vfiprintf_internal_r+0x119c>
   15de8:	013fdfc4 	movi	r4,-129
   15dec:	94c6b03a 	or	r3,r18,r19
   15df0:	d8802215 	stw	r2,136(sp)
   15df4:	a128703a 	and	r20,r20,r4
   15df8:	1800a226 	beq	r3,zero,16084 <___vfiprintf_internal_r+0x968>
   15dfc:	0039883a 	mov	fp,zero
   15e00:	dd401a04 	addi	r21,sp,104
   15e04:	9006d0fa 	srli	r3,r18,3
   15e08:	9808977a 	slli	r4,r19,29
   15e0c:	9826d0fa 	srli	r19,r19,3
   15e10:	948001cc 	andi	r18,r18,7
   15e14:	90800c04 	addi	r2,r18,48
   15e18:	ad7fffc4 	addi	r21,r21,-1
   15e1c:	20e4b03a 	or	r18,r4,r3
   15e20:	a8800005 	stb	r2,0(r21)
   15e24:	94c6b03a 	or	r3,r18,r19
   15e28:	183ff61e 	bne	r3,zero,15e04 <___vfiprintf_internal_r+0x6e8>
   15e2c:	a0c0004c 	andi	r3,r20,1
   15e30:	18005926 	beq	r3,zero,15f98 <___vfiprintf_internal_r+0x87c>
   15e34:	10803fcc 	andi	r2,r2,255
   15e38:	1080201c 	xori	r2,r2,128
   15e3c:	10bfe004 	addi	r2,r2,-128
   15e40:	00c00c04 	movi	r3,48
   15e44:	10c05426 	beq	r2,r3,15f98 <___vfiprintf_internal_r+0x87c>
   15e48:	da801e17 	ldw	r10,120(sp)
   15e4c:	a8bfffc4 	addi	r2,r21,-1
   15e50:	a8ffffc5 	stb	r3,-1(r21)
   15e54:	50a7c83a 	sub	r19,r10,r2
   15e58:	102b883a 	mov	r21,r2
   15e5c:	003f2f06 	br	15b1c <___vfiprintf_internal_r+0x400>
   15e60:	21003fcc 	andi	r4,r4,255
   15e64:	2003421e 	bne	r4,zero,16b70 <___vfiprintf_internal_r+0x1454>
   15e68:	008000b4 	movhi	r2,2
   15e6c:	109e0e04 	addi	r2,r2,30776
   15e70:	d8802615 	stw	r2,152(sp)
   15e74:	a080080c 	andi	r2,r20,32
   15e78:	1000aa26 	beq	r2,zero,16124 <___vfiprintf_internal_r+0xa08>
   15e7c:	da802217 	ldw	r10,136(sp)
   15e80:	54800017 	ldw	r18,0(r10)
   15e84:	54c00117 	ldw	r19,4(r10)
   15e88:	52800204 	addi	r10,r10,8
   15e8c:	da802215 	stw	r10,136(sp)
   15e90:	a080004c 	andi	r2,r20,1
   15e94:	1001d226 	beq	r2,zero,165e0 <___vfiprintf_internal_r+0xec4>
   15e98:	94c4b03a 	or	r2,r18,r19
   15e9c:	1002351e 	bne	r2,zero,16774 <___vfiprintf_internal_r+0x1058>
   15ea0:	d8001d85 	stb	zero,118(sp)
   15ea4:	48022216 	blt	r9,zero,16730 <___vfiprintf_internal_r+0x1014>
   15ea8:	00bfdfc4 	movi	r2,-129
   15eac:	a0a8703a 	and	r20,r20,r2
   15eb0:	003f1506 	br	15b08 <___vfiprintf_internal_r+0x3ec>
   15eb4:	da802217 	ldw	r10,136(sp)
   15eb8:	04800044 	movi	r18,1
   15ebc:	d8001d85 	stb	zero,118(sp)
   15ec0:	50800017 	ldw	r2,0(r10)
   15ec4:	52800104 	addi	r10,r10,4
   15ec8:	da802215 	stw	r10,136(sp)
   15ecc:	d8801005 	stb	r2,64(sp)
   15ed0:	9027883a 	mov	r19,r18
   15ed4:	dd401004 	addi	r21,sp,64
   15ed8:	0013883a 	mov	r9,zero
   15edc:	003f1706 	br	15b3c <___vfiprintf_internal_r+0x420>
   15ee0:	21003fcc 	andi	r4,r4,255
   15ee4:	2003201e 	bne	r4,zero,16b68 <___vfiprintf_internal_r+0x144c>
   15ee8:	a080080c 	andi	r2,r20,32
   15eec:	10004b26 	beq	r2,zero,1601c <___vfiprintf_internal_r+0x900>
   15ef0:	da802217 	ldw	r10,136(sp)
   15ef4:	50800117 	ldw	r2,4(r10)
   15ef8:	54800017 	ldw	r18,0(r10)
   15efc:	52800204 	addi	r10,r10,8
   15f00:	da802215 	stw	r10,136(sp)
   15f04:	1027883a 	mov	r19,r2
   15f08:	10022c16 	blt	r2,zero,167bc <___vfiprintf_internal_r+0x10a0>
   15f0c:	df001d83 	ldbu	fp,118(sp)
   15f10:	48007216 	blt	r9,zero,160dc <___vfiprintf_internal_r+0x9c0>
   15f14:	00ffdfc4 	movi	r3,-129
   15f18:	94c4b03a 	or	r2,r18,r19
   15f1c:	a0e8703a 	and	r20,r20,r3
   15f20:	1000cc26 	beq	r2,zero,16254 <___vfiprintf_internal_r+0xb38>
   15f24:	98021026 	beq	r19,zero,16768 <___vfiprintf_internal_r+0x104c>
   15f28:	dc402415 	stw	r17,144(sp)
   15f2c:	dc002515 	stw	r16,148(sp)
   15f30:	9823883a 	mov	r17,r19
   15f34:	9021883a 	mov	r16,r18
   15f38:	dd401a04 	addi	r21,sp,104
   15f3c:	4825883a 	mov	r18,r9
   15f40:	4027883a 	mov	r19,r8
   15f44:	8009883a 	mov	r4,r16
   15f48:	880b883a 	mov	r5,r17
   15f4c:	01800284 	movi	r6,10
   15f50:	000f883a 	mov	r7,zero
   15f54:	00186780 	call	18678 <__umoddi3>
   15f58:	10800c04 	addi	r2,r2,48
   15f5c:	ad7fffc4 	addi	r21,r21,-1
   15f60:	8009883a 	mov	r4,r16
   15f64:	880b883a 	mov	r5,r17
   15f68:	a8800005 	stb	r2,0(r21)
   15f6c:	01800284 	movi	r6,10
   15f70:	000f883a 	mov	r7,zero
   15f74:	00181000 	call	18100 <__udivdi3>
   15f78:	1021883a 	mov	r16,r2
   15f7c:	10c4b03a 	or	r2,r2,r3
   15f80:	1823883a 	mov	r17,r3
   15f84:	103fef1e 	bne	r2,zero,15f44 <___vfiprintf_internal_r+0x828>
   15f88:	dc402417 	ldw	r17,144(sp)
   15f8c:	dc002517 	ldw	r16,148(sp)
   15f90:	9013883a 	mov	r9,r18
   15f94:	9811883a 	mov	r8,r19
   15f98:	da801e17 	ldw	r10,120(sp)
   15f9c:	5567c83a 	sub	r19,r10,r21
   15fa0:	003ede06 	br	15b1c <___vfiprintf_internal_r+0x400>
   15fa4:	38803fcc 	andi	r2,r7,255
   15fa8:	1080201c 	xori	r2,r2,128
   15fac:	10bfe004 	addi	r2,r2,-128
   15fb0:	1002371e 	bne	r2,zero,16890 <___vfiprintf_internal_r+0x1174>
   15fb4:	01000044 	movi	r4,1
   15fb8:	01c00804 	movi	r7,32
   15fbc:	80c00007 	ldb	r3,0(r16)
   15fc0:	003e3506 	br	15898 <___vfiprintf_internal_r+0x17c>
   15fc4:	a5000054 	ori	r20,r20,1
   15fc8:	80c00007 	ldb	r3,0(r16)
   15fcc:	003e3206 	br	15898 <___vfiprintf_internal_r+0x17c>
   15fd0:	a5002014 	ori	r20,r20,128
   15fd4:	80c00007 	ldb	r3,0(r16)
   15fd8:	003e2f06 	br	15898 <___vfiprintf_internal_r+0x17c>
   15fdc:	8015883a 	mov	r10,r16
   15fe0:	0023883a 	mov	r17,zero
   15fe4:	18bff404 	addi	r2,r3,-48
   15fe8:	50c00007 	ldb	r3,0(r10)
   15fec:	8c4002a4 	muli	r17,r17,10
   15ff0:	84000044 	addi	r16,r16,1
   15ff4:	8015883a 	mov	r10,r16
   15ff8:	1463883a 	add	r17,r2,r17
   15ffc:	18bff404 	addi	r2,r3,-48
   16000:	30bff92e 	bgeu	r6,r2,15fe8 <___vfiprintf_internal_r+0x8cc>
   16004:	003e2506 	br	1589c <___vfiprintf_internal_r+0x180>
   16008:	21003fcc 	andi	r4,r4,255
   1600c:	2002d41e 	bne	r4,zero,16b60 <___vfiprintf_internal_r+0x1444>
   16010:	a5000414 	ori	r20,r20,16
   16014:	a080080c 	andi	r2,r20,32
   16018:	103fb51e 	bne	r2,zero,15ef0 <___vfiprintf_internal_r+0x7d4>
   1601c:	a080040c 	andi	r2,r20,16
   16020:	1001f826 	beq	r2,zero,16804 <___vfiprintf_internal_r+0x10e8>
   16024:	da802217 	ldw	r10,136(sp)
   16028:	54800017 	ldw	r18,0(r10)
   1602c:	52800104 	addi	r10,r10,4
   16030:	da802215 	stw	r10,136(sp)
   16034:	9027d7fa 	srai	r19,r18,31
   16038:	9805883a 	mov	r2,r19
   1603c:	003fb206 	br	15f08 <___vfiprintf_internal_r+0x7ec>
   16040:	21003fcc 	andi	r4,r4,255
   16044:	2002c41e 	bne	r4,zero,16b58 <___vfiprintf_internal_r+0x143c>
   16048:	a5000414 	ori	r20,r20,16
   1604c:	a080080c 	andi	r2,r20,32
   16050:	103f5f1e 	bne	r2,zero,15dd0 <___vfiprintf_internal_r+0x6b4>
   16054:	a080040c 	andi	r2,r20,16
   16058:	10020f26 	beq	r2,zero,16898 <___vfiprintf_internal_r+0x117c>
   1605c:	da802217 	ldw	r10,136(sp)
   16060:	d8001d85 	stb	zero,118(sp)
   16064:	0027883a 	mov	r19,zero
   16068:	50800104 	addi	r2,r10,4
   1606c:	54800017 	ldw	r18,0(r10)
   16070:	48021116 	blt	r9,zero,168b8 <___vfiprintf_internal_r+0x119c>
   16074:	00ffdfc4 	movi	r3,-129
   16078:	d8802215 	stw	r2,136(sp)
   1607c:	a0e8703a 	and	r20,r20,r3
   16080:	903f5e1e 	bne	r18,zero,15dfc <___vfiprintf_internal_r+0x6e0>
   16084:	0039883a 	mov	fp,zero
   16088:	4802a626 	beq	r9,zero,16b24 <___vfiprintf_internal_r+0x1408>
   1608c:	0025883a 	mov	r18,zero
   16090:	0027883a 	mov	r19,zero
   16094:	003f5a06 	br	15e00 <___vfiprintf_internal_r+0x6e4>
   16098:	21003fcc 	andi	r4,r4,255
   1609c:	20029f1e 	bne	r4,zero,16b1c <___vfiprintf_internal_r+0x1400>
   160a0:	a5000414 	ori	r20,r20,16
   160a4:	a080080c 	andi	r2,r20,32
   160a8:	10005e1e 	bne	r2,zero,16224 <___vfiprintf_internal_r+0xb08>
   160ac:	a080040c 	andi	r2,r20,16
   160b0:	1001a21e 	bne	r2,zero,1673c <___vfiprintf_internal_r+0x1020>
   160b4:	a080100c 	andi	r2,r20,64
   160b8:	d8001d85 	stb	zero,118(sp)
   160bc:	da802217 	ldw	r10,136(sp)
   160c0:	1002231e 	bne	r2,zero,16950 <___vfiprintf_internal_r+0x1234>
   160c4:	50800104 	addi	r2,r10,4
   160c8:	54800017 	ldw	r18,0(r10)
   160cc:	0027883a 	mov	r19,zero
   160d0:	4801a00e 	bge	r9,zero,16754 <___vfiprintf_internal_r+0x1038>
   160d4:	d8802215 	stw	r2,136(sp)
   160d8:	0039883a 	mov	fp,zero
   160dc:	94c4b03a 	or	r2,r18,r19
   160e0:	103f901e 	bne	r2,zero,15f24 <___vfiprintf_internal_r+0x808>
   160e4:	00800044 	movi	r2,1
   160e8:	10803fcc 	andi	r2,r2,255
   160ec:	00c00044 	movi	r3,1
   160f0:	10c05926 	beq	r2,r3,16258 <___vfiprintf_internal_r+0xb3c>
   160f4:	00c00084 	movi	r3,2
   160f8:	10ffe41e 	bne	r2,r3,1608c <___vfiprintf_internal_r+0x970>
   160fc:	0025883a 	mov	r18,zero
   16100:	0027883a 	mov	r19,zero
   16104:	00013d06 	br	165fc <___vfiprintf_internal_r+0xee0>
   16108:	21003fcc 	andi	r4,r4,255
   1610c:	2002811e 	bne	r4,zero,16b14 <___vfiprintf_internal_r+0x13f8>
   16110:	008000b4 	movhi	r2,2
   16114:	109e0904 	addi	r2,r2,30756
   16118:	d8802615 	stw	r2,152(sp)
   1611c:	a080080c 	andi	r2,r20,32
   16120:	103f561e 	bne	r2,zero,15e7c <___vfiprintf_internal_r+0x760>
   16124:	a080040c 	andi	r2,r20,16
   16128:	1001d126 	beq	r2,zero,16870 <___vfiprintf_internal_r+0x1154>
   1612c:	da802217 	ldw	r10,136(sp)
   16130:	0027883a 	mov	r19,zero
   16134:	54800017 	ldw	r18,0(r10)
   16138:	52800104 	addi	r10,r10,4
   1613c:	da802215 	stw	r10,136(sp)
   16140:	003f5306 	br	15e90 <___vfiprintf_internal_r+0x774>
   16144:	da802217 	ldw	r10,136(sp)
   16148:	d8001d85 	stb	zero,118(sp)
   1614c:	55400017 	ldw	r21,0(r10)
   16150:	50c00104 	addi	r3,r10,4
   16154:	a8024226 	beq	r21,zero,16a60 <___vfiprintf_internal_r+0x1344>
   16158:	48021816 	blt	r9,zero,169bc <___vfiprintf_internal_r+0x12a0>
   1615c:	480d883a 	mov	r6,r9
   16160:	000b883a 	mov	r5,zero
   16164:	a809883a 	mov	r4,r21
   16168:	d8c02a15 	stw	r3,168(sp)
   1616c:	da002b15 	stw	r8,172(sp)
   16170:	da402c15 	stw	r9,176(sp)
   16174:	0012c7c0 	call	12c7c <memchr>
   16178:	d8c02a17 	ldw	r3,168(sp)
   1617c:	da002b17 	ldw	r8,172(sp)
   16180:	da402c17 	ldw	r9,176(sp)
   16184:	10024826 	beq	r2,zero,16aa8 <___vfiprintf_internal_r+0x138c>
   16188:	1567c83a 	sub	r19,r2,r21
   1618c:	df001d83 	ldbu	fp,118(sp)
   16190:	d8c02215 	stw	r3,136(sp)
   16194:	0013883a 	mov	r9,zero
   16198:	003e6006 	br	15b1c <___vfiprintf_internal_r+0x400>
   1619c:	21003fcc 	andi	r4,r4,255
   161a0:	203fc026 	beq	r4,zero,160a4 <___vfiprintf_internal_r+0x988>
   161a4:	d9c01d85 	stb	r7,118(sp)
   161a8:	003fbe06 	br	160a4 <___vfiprintf_internal_r+0x988>
   161ac:	da802217 	ldw	r10,136(sp)
   161b0:	54400017 	ldw	r17,0(r10)
   161b4:	50800104 	addi	r2,r10,4
   161b8:	883e3b16 	blt	r17,zero,15aa8 <___vfiprintf_internal_r+0x38c>
   161bc:	d8802215 	stw	r2,136(sp)
   161c0:	80c00007 	ldb	r3,0(r16)
   161c4:	003db406 	br	15898 <___vfiprintf_internal_r+0x17c>
   161c8:	01000044 	movi	r4,1
   161cc:	01c00ac4 	movi	r7,43
   161d0:	80c00007 	ldb	r3,0(r16)
   161d4:	003db006 	br	15898 <___vfiprintf_internal_r+0x17c>
   161d8:	80c00007 	ldb	r3,0(r16)
   161dc:	82800044 	addi	r10,r16,1
   161e0:	1b423c26 	beq	r3,r13,16ad4 <___vfiprintf_internal_r+0x13b8>
   161e4:	18bff404 	addi	r2,r3,-48
   161e8:	0013883a 	mov	r9,zero
   161ec:	30822b36 	bltu	r6,r2,16a9c <___vfiprintf_internal_r+0x1380>
   161f0:	50c00007 	ldb	r3,0(r10)
   161f4:	4a4002a4 	muli	r9,r9,10
   161f8:	54000044 	addi	r16,r10,1
   161fc:	8015883a 	mov	r10,r16
   16200:	4893883a 	add	r9,r9,r2
   16204:	18bff404 	addi	r2,r3,-48
   16208:	30bff92e 	bgeu	r6,r2,161f0 <___vfiprintf_internal_r+0xad4>
   1620c:	483da30e 	bge	r9,zero,1589c <___vfiprintf_internal_r+0x180>
   16210:	027fffc4 	movi	r9,-1
   16214:	003da106 	br	1589c <___vfiprintf_internal_r+0x180>
   16218:	a5001014 	ori	r20,r20,64
   1621c:	80c00007 	ldb	r3,0(r16)
   16220:	003d9d06 	br	15898 <___vfiprintf_internal_r+0x17c>
   16224:	da802217 	ldw	r10,136(sp)
   16228:	d8001d85 	stb	zero,118(sp)
   1622c:	50c00204 	addi	r3,r10,8
   16230:	54800017 	ldw	r18,0(r10)
   16234:	54c00117 	ldw	r19,4(r10)
   16238:	4801ca16 	blt	r9,zero,16964 <___vfiprintf_internal_r+0x1248>
   1623c:	013fdfc4 	movi	r4,-129
   16240:	94c4b03a 	or	r2,r18,r19
   16244:	d8c02215 	stw	r3,136(sp)
   16248:	a128703a 	and	r20,r20,r4
   1624c:	0039883a 	mov	fp,zero
   16250:	103f341e 	bne	r2,zero,15f24 <___vfiprintf_internal_r+0x808>
   16254:	483e2e26 	beq	r9,zero,15b10 <___vfiprintf_internal_r+0x3f4>
   16258:	0025883a 	mov	r18,zero
   1625c:	94800c04 	addi	r18,r18,48
   16260:	dc8019c5 	stb	r18,103(sp)
   16264:	dcc02717 	ldw	r19,156(sp)
   16268:	dd4019c4 	addi	r21,sp,103
   1626c:	003e2b06 	br	15b1c <___vfiprintf_internal_r+0x400>
   16270:	21003fcc 	andi	r4,r4,255
   16274:	2002361e 	bne	r4,zero,16b50 <___vfiprintf_internal_r+0x1434>
   16278:	1801c126 	beq	r3,zero,16980 <___vfiprintf_internal_r+0x1264>
   1627c:	04800044 	movi	r18,1
   16280:	d8c01005 	stb	r3,64(sp)
   16284:	d8001d85 	stb	zero,118(sp)
   16288:	9027883a 	mov	r19,r18
   1628c:	dd401004 	addi	r21,sp,64
   16290:	003f1106 	br	15ed8 <___vfiprintf_internal_r+0x7bc>
   16294:	d9402117 	ldw	r5,132(sp)
   16298:	d9002017 	ldw	r4,128(sp)
   1629c:	d9801a04 	addi	r6,sp,104
   162a0:	d9c02b15 	stw	r7,172(sp)
   162a4:	dbc02a15 	stw	r15,168(sp)
   162a8:	00156080 	call	15608 <__sprint_r.part.0>
   162ac:	d9c02b17 	ldw	r7,172(sp)
   162b0:	dbc02a17 	ldw	r15,168(sp)
   162b4:	10006d1e 	bne	r2,zero,1646c <___vfiprintf_internal_r+0xd50>
   162b8:	d9801b17 	ldw	r6,108(sp)
   162bc:	d8801c17 	ldw	r2,112(sp)
   162c0:	d811883a 	mov	r8,sp
   162c4:	31400044 	addi	r5,r6,1
   162c8:	003e3306 	br	15b98 <___vfiprintf_internal_r+0x47c>
   162cc:	d9401b17 	ldw	r5,108(sp)
   162d0:	d8801c17 	ldw	r2,112(sp)
   162d4:	29000044 	addi	r4,r5,1
   162d8:	d8c01d87 	ldb	r3,118(sp)
   162dc:	183e4d26 	beq	r3,zero,15c14 <___vfiprintf_internal_r+0x4f8>
   162e0:	00c00044 	movi	r3,1
   162e4:	d9401d84 	addi	r5,sp,118
   162e8:	10c5883a 	add	r2,r2,r3
   162ec:	41400015 	stw	r5,0(r8)
   162f0:	40c00115 	stw	r3,4(r8)
   162f4:	d8801c15 	stw	r2,112(sp)
   162f8:	d9001b15 	stw	r4,108(sp)
   162fc:	014001c4 	movi	r5,7
   16300:	2900a90e 	bge	r5,r4,165a8 <___vfiprintf_internal_r+0xe8c>
   16304:	1000da1e 	bne	r2,zero,16670 <___vfiprintf_internal_r+0xf54>
   16308:	7000ab1e 	bne	r14,zero,165b8 <___vfiprintf_internal_r+0xe9c>
   1630c:	000b883a 	mov	r5,zero
   16310:	1809883a 	mov	r4,r3
   16314:	d811883a 	mov	r8,sp
   16318:	00c02004 	movi	r3,128
   1631c:	e0fe4d26 	beq	fp,r3,15c54 <___vfiprintf_internal_r+0x538>
   16320:	4cf9c83a 	sub	fp,r9,r19
   16324:	073e7b0e 	bge	zero,fp,15d14 <___vfiprintf_internal_r+0x5f8>
   16328:	01c00404 	movi	r7,16
   1632c:	3f01900e 	bge	r7,fp,16970 <___vfiprintf_internal_r+0x1254>
   16330:	00c000b4 	movhi	r3,2
   16334:	18de7f04 	addi	r3,r3,31228
   16338:	d8c02415 	stw	r3,144(sp)
   1633c:	034001c4 	movi	r13,7
   16340:	00000506 	br	16358 <___vfiprintf_internal_r+0xc3c>
   16344:	29000084 	addi	r4,r5,2
   16348:	42000204 	addi	r8,r8,8
   1634c:	180b883a 	mov	r5,r3
   16350:	e73ffc04 	addi	fp,fp,-16
   16354:	3f000d0e 	bge	r7,fp,1638c <___vfiprintf_internal_r+0xc70>
   16358:	10800404 	addi	r2,r2,16
   1635c:	28c00044 	addi	r3,r5,1
   16360:	45c00015 	stw	r23,0(r8)
   16364:	41c00115 	stw	r7,4(r8)
   16368:	d8801c15 	stw	r2,112(sp)
   1636c:	d8c01b15 	stw	r3,108(sp)
   16370:	68fff40e 	bge	r13,r3,16344 <___vfiprintf_internal_r+0xc28>
   16374:	1000101e 	bne	r2,zero,163b8 <___vfiprintf_internal_r+0xc9c>
   16378:	e73ffc04 	addi	fp,fp,-16
   1637c:	01000044 	movi	r4,1
   16380:	000b883a 	mov	r5,zero
   16384:	d811883a 	mov	r8,sp
   16388:	3f3ff316 	blt	r7,fp,16358 <___vfiprintf_internal_r+0xc3c>
   1638c:	da802417 	ldw	r10,144(sp)
   16390:	1705883a 	add	r2,r2,fp
   16394:	47000115 	stw	fp,4(r8)
   16398:	42800015 	stw	r10,0(r8)
   1639c:	d8801c15 	stw	r2,112(sp)
   163a0:	d9001b15 	stw	r4,108(sp)
   163a4:	00c001c4 	movi	r3,7
   163a8:	19003616 	blt	r3,r4,16484 <___vfiprintf_internal_r+0xd68>
   163ac:	42000204 	addi	r8,r8,8
   163b0:	21000044 	addi	r4,r4,1
   163b4:	003e5706 	br	15d14 <___vfiprintf_internal_r+0x5f8>
   163b8:	d9402117 	ldw	r5,132(sp)
   163bc:	d9002017 	ldw	r4,128(sp)
   163c0:	d9801a04 	addi	r6,sp,104
   163c4:	d9c02b15 	stw	r7,172(sp)
   163c8:	db402a15 	stw	r13,168(sp)
   163cc:	00156080 	call	15608 <__sprint_r.part.0>
   163d0:	d9c02b17 	ldw	r7,172(sp)
   163d4:	db402a17 	ldw	r13,168(sp)
   163d8:	1000241e 	bne	r2,zero,1646c <___vfiprintf_internal_r+0xd50>
   163dc:	d9401b17 	ldw	r5,108(sp)
   163e0:	d8801c17 	ldw	r2,112(sp)
   163e4:	d811883a 	mov	r8,sp
   163e8:	29000044 	addi	r4,r5,1
   163ec:	003fd806 	br	16350 <___vfiprintf_internal_r+0xc34>
   163f0:	d9401b17 	ldw	r5,108(sp)
   163f4:	00c000b4 	movhi	r3,2
   163f8:	18de8304 	addi	r3,r3,31244
   163fc:	d8c02415 	stw	r3,144(sp)
   16400:	29400044 	addi	r5,r5,1
   16404:	d8c02417 	ldw	r3,144(sp)
   16408:	14c5883a 	add	r2,r2,r19
   1640c:	44c00115 	stw	r19,4(r8)
   16410:	40c00015 	stw	r3,0(r8)
   16414:	d8801c15 	stw	r2,112(sp)
   16418:	d9401b15 	stw	r5,108(sp)
   1641c:	00c001c4 	movi	r3,7
   16420:	1940070e 	bge	r3,r5,16440 <___vfiprintf_internal_r+0xd24>
   16424:	103e4826 	beq	r2,zero,15d48 <___vfiprintf_internal_r+0x62c>
   16428:	d9402117 	ldw	r5,132(sp)
   1642c:	d9002017 	ldw	r4,128(sp)
   16430:	d9801a04 	addi	r6,sp,104
   16434:	00156080 	call	15608 <__sprint_r.part.0>
   16438:	10000c1e 	bne	r2,zero,1646c <___vfiprintf_internal_r+0xd50>
   1643c:	d8801c17 	ldw	r2,112(sp)
   16440:	8c80010e 	bge	r17,r18,16448 <___vfiprintf_internal_r+0xd2c>
   16444:	9023883a 	mov	r17,r18
   16448:	da802317 	ldw	r10,140(sp)
   1644c:	5455883a 	add	r10,r10,r17
   16450:	da802315 	stw	r10,140(sp)
   16454:	103e4126 	beq	r2,zero,15d5c <___vfiprintf_internal_r+0x640>
   16458:	d9402117 	ldw	r5,132(sp)
   1645c:	d9002017 	ldw	r4,128(sp)
   16460:	d9801a04 	addi	r6,sp,104
   16464:	00156080 	call	15608 <__sprint_r.part.0>
   16468:	103e3c26 	beq	r2,zero,15d5c <___vfiprintf_internal_r+0x640>
   1646c:	dd002117 	ldw	r20,132(sp)
   16470:	a080030b 	ldhu	r2,12(r20)
   16474:	1080100c 	andi	r2,r2,64
   16478:	1001231e 	bne	r2,zero,16908 <___vfiprintf_internal_r+0x11ec>
   1647c:	d8802317 	ldw	r2,140(sp)
   16480:	003d7b06 	br	15a70 <___vfiprintf_internal_r+0x354>
   16484:	1000991e 	bne	r2,zero,166ec <___vfiprintf_internal_r+0xfd0>
   16488:	00c00044 	movi	r3,1
   1648c:	9805883a 	mov	r2,r19
   16490:	dd400015 	stw	r21,0(sp)
   16494:	dcc00115 	stw	r19,4(sp)
   16498:	dcc01c15 	stw	r19,112(sp)
   1649c:	d8c01b15 	stw	r3,108(sp)
   164a0:	d811883a 	mov	r8,sp
   164a4:	42000204 	addi	r8,r8,8
   164a8:	a2c0010c 	andi	r11,r20,4
   164ac:	583fe426 	beq	r11,zero,16440 <___vfiprintf_internal_r+0xd24>
   164b0:	8ca7c83a 	sub	r19,r17,r18
   164b4:	04ffe20e 	bge	zero,r19,16440 <___vfiprintf_internal_r+0xd24>
   164b8:	01c00404 	movi	r7,16
   164bc:	3cffcc0e 	bge	r7,r19,163f0 <___vfiprintf_internal_r+0xcd4>
   164c0:	028000b4 	movhi	r10,2
   164c4:	529e8304 	addi	r10,r10,31244
   164c8:	d9001b17 	ldw	r4,108(sp)
   164cc:	da802415 	stw	r10,144(sp)
   164d0:	382b883a 	mov	r21,r7
   164d4:	050001c4 	movi	r20,7
   164d8:	df002017 	ldw	fp,128(sp)
   164dc:	00000506 	br	164f4 <___vfiprintf_internal_r+0xdd8>
   164e0:	21400084 	addi	r5,r4,2
   164e4:	42000204 	addi	r8,r8,8
   164e8:	1809883a 	mov	r4,r3
   164ec:	9cfffc04 	addi	r19,r19,-16
   164f0:	acffc40e 	bge	r21,r19,16404 <___vfiprintf_internal_r+0xce8>
   164f4:	10800404 	addi	r2,r2,16
   164f8:	20c00044 	addi	r3,r4,1
   164fc:	45800015 	stw	r22,0(r8)
   16500:	45400115 	stw	r21,4(r8)
   16504:	d8801c15 	stw	r2,112(sp)
   16508:	d8c01b15 	stw	r3,108(sp)
   1650c:	a0fff40e 	bge	r20,r3,164e0 <___vfiprintf_internal_r+0xdc4>
   16510:	1000041e 	bne	r2,zero,16524 <___vfiprintf_internal_r+0xe08>
   16514:	01400044 	movi	r5,1
   16518:	0009883a 	mov	r4,zero
   1651c:	d811883a 	mov	r8,sp
   16520:	003ff206 	br	164ec <___vfiprintf_internal_r+0xdd0>
   16524:	d9402117 	ldw	r5,132(sp)
   16528:	d9801a04 	addi	r6,sp,104
   1652c:	e009883a 	mov	r4,fp
   16530:	00156080 	call	15608 <__sprint_r.part.0>
   16534:	103fcd1e 	bne	r2,zero,1646c <___vfiprintf_internal_r+0xd50>
   16538:	d9001b17 	ldw	r4,108(sp)
   1653c:	d8801c17 	ldw	r2,112(sp)
   16540:	d811883a 	mov	r8,sp
   16544:	21400044 	addi	r5,r4,1
   16548:	003fe806 	br	164ec <___vfiprintf_internal_r+0xdd0>
   1654c:	d9402117 	ldw	r5,132(sp)
   16550:	d9002017 	ldw	r4,128(sp)
   16554:	d9801a04 	addi	r6,sp,104
   16558:	d9c02b15 	stw	r7,172(sp)
   1655c:	db402a15 	stw	r13,168(sp)
   16560:	00156080 	call	15608 <__sprint_r.part.0>
   16564:	d9c02b17 	ldw	r7,172(sp)
   16568:	db402a17 	ldw	r13,168(sp)
   1656c:	103fbf1e 	bne	r2,zero,1646c <___vfiprintf_internal_r+0xd50>
   16570:	d9401b17 	ldw	r5,108(sp)
   16574:	d8801c17 	ldw	r2,112(sp)
   16578:	d811883a 	mov	r8,sp
   1657c:	29800044 	addi	r6,r5,1
   16580:	003dc406 	br	15c94 <___vfiprintf_internal_r+0x578>
   16584:	1000d21e 	bne	r2,zero,168d0 <___vfiprintf_internal_r+0x11b4>
   16588:	d8c01d87 	ldb	r3,118(sp)
   1658c:	18009526 	beq	r3,zero,167e4 <___vfiprintf_internal_r+0x10c8>
   16590:	00800044 	movi	r2,1
   16594:	d8c01d84 	addi	r3,sp,118
   16598:	1009883a 	mov	r4,r2
   1659c:	d8c00015 	stw	r3,0(sp)
   165a0:	d8800115 	stw	r2,4(sp)
   165a4:	d811883a 	mov	r8,sp
   165a8:	200b883a 	mov	r5,r4
   165ac:	42000204 	addi	r8,r8,8
   165b0:	21000044 	addi	r4,r4,1
   165b4:	003d9706 	br	15c14 <___vfiprintf_internal_r+0x4f8>
   165b8:	d9001d04 	addi	r4,sp,116
   165bc:	00800084 	movi	r2,2
   165c0:	d9000015 	stw	r4,0(sp)
   165c4:	d8800115 	stw	r2,4(sp)
   165c8:	1809883a 	mov	r4,r3
   165cc:	d811883a 	mov	r8,sp
   165d0:	200b883a 	mov	r5,r4
   165d4:	42000204 	addi	r8,r8,8
   165d8:	21000044 	addi	r4,r4,1
   165dc:	003f4e06 	br	16318 <___vfiprintf_internal_r+0xbfc>
   165e0:	d8001d85 	stb	zero,118(sp)
   165e4:	48005016 	blt	r9,zero,16728 <___vfiprintf_internal_r+0x100c>
   165e8:	00ffdfc4 	movi	r3,-129
   165ec:	94c4b03a 	or	r2,r18,r19
   165f0:	a0e8703a 	and	r20,r20,r3
   165f4:	103d4426 	beq	r2,zero,15b08 <___vfiprintf_internal_r+0x3ec>
   165f8:	0039883a 	mov	fp,zero
   165fc:	d9002617 	ldw	r4,152(sp)
   16600:	dd401a04 	addi	r21,sp,104
   16604:	908003cc 	andi	r2,r18,15
   16608:	9806973a 	slli	r3,r19,28
   1660c:	2085883a 	add	r2,r4,r2
   16610:	9024d13a 	srli	r18,r18,4
   16614:	10800003 	ldbu	r2,0(r2)
   16618:	9826d13a 	srli	r19,r19,4
   1661c:	ad7fffc4 	addi	r21,r21,-1
   16620:	1ca4b03a 	or	r18,r3,r18
   16624:	a8800005 	stb	r2,0(r21)
   16628:	94c4b03a 	or	r2,r18,r19
   1662c:	103ff51e 	bne	r2,zero,16604 <___vfiprintf_internal_r+0xee8>
   16630:	003e5906 	br	15f98 <___vfiprintf_internal_r+0x87c>
   16634:	d9402117 	ldw	r5,132(sp)
   16638:	d9002017 	ldw	r4,128(sp)
   1663c:	d9801a04 	addi	r6,sp,104
   16640:	00156080 	call	15608 <__sprint_r.part.0>
   16644:	103f891e 	bne	r2,zero,1646c <___vfiprintf_internal_r+0xd50>
   16648:	d8801c17 	ldw	r2,112(sp)
   1664c:	d811883a 	mov	r8,sp
   16650:	003f9506 	br	164a8 <___vfiprintf_internal_r+0xd8c>
   16654:	d9402117 	ldw	r5,132(sp)
   16658:	d9002017 	ldw	r4,128(sp)
   1665c:	d9801a04 	addi	r6,sp,104
   16660:	00156080 	call	15608 <__sprint_r.part.0>
   16664:	103f811e 	bne	r2,zero,1646c <___vfiprintf_internal_r+0xd50>
   16668:	d811883a 	mov	r8,sp
   1666c:	003ced06 	br	15a24 <___vfiprintf_internal_r+0x308>
   16670:	d9402117 	ldw	r5,132(sp)
   16674:	d9002017 	ldw	r4,128(sp)
   16678:	d9801a04 	addi	r6,sp,104
   1667c:	da402c15 	stw	r9,176(sp)
   16680:	db802a15 	stw	r14,168(sp)
   16684:	00156080 	call	15608 <__sprint_r.part.0>
   16688:	da402c17 	ldw	r9,176(sp)
   1668c:	db802a17 	ldw	r14,168(sp)
   16690:	103f761e 	bne	r2,zero,1646c <___vfiprintf_internal_r+0xd50>
   16694:	d9401b17 	ldw	r5,108(sp)
   16698:	d8801c17 	ldw	r2,112(sp)
   1669c:	d811883a 	mov	r8,sp
   166a0:	29000044 	addi	r4,r5,1
   166a4:	003d5b06 	br	15c14 <___vfiprintf_internal_r+0x4f8>
   166a8:	d9402117 	ldw	r5,132(sp)
   166ac:	d9002017 	ldw	r4,128(sp)
   166b0:	d9801a04 	addi	r6,sp,104
   166b4:	da402c15 	stw	r9,176(sp)
   166b8:	00156080 	call	15608 <__sprint_r.part.0>
   166bc:	da402c17 	ldw	r9,176(sp)
   166c0:	103f6a1e 	bne	r2,zero,1646c <___vfiprintf_internal_r+0xd50>
   166c4:	d9401b17 	ldw	r5,108(sp)
   166c8:	d8801c17 	ldw	r2,112(sp)
   166cc:	d811883a 	mov	r8,sp
   166d0:	29000044 	addi	r4,r5,1
   166d4:	003f1006 	br	16318 <___vfiprintf_internal_r+0xbfc>
   166d8:	1000c31e 	bne	r2,zero,169e8 <___vfiprintf_internal_r+0x12cc>
   166dc:	01000044 	movi	r4,1
   166e0:	000b883a 	mov	r5,zero
   166e4:	d811883a 	mov	r8,sp
   166e8:	003f0d06 	br	16320 <___vfiprintf_internal_r+0xc04>
   166ec:	d9402117 	ldw	r5,132(sp)
   166f0:	d9002017 	ldw	r4,128(sp)
   166f4:	d9801a04 	addi	r6,sp,104
   166f8:	00156080 	call	15608 <__sprint_r.part.0>
   166fc:	103f5b1e 	bne	r2,zero,1646c <___vfiprintf_internal_r+0xd50>
   16700:	d9001b17 	ldw	r4,108(sp)
   16704:	d8801c17 	ldw	r2,112(sp)
   16708:	d811883a 	mov	r8,sp
   1670c:	21000044 	addi	r4,r4,1
   16710:	003d8006 	br	15d14 <___vfiprintf_internal_r+0x5f8>
   16714:	010000b4 	movhi	r4,2
   16718:	211e0e04 	addi	r4,r4,30776
   1671c:	d9002615 	stw	r4,152(sp)
   16720:	d8c02215 	stw	r3,136(sp)
   16724:	1029883a 	mov	r20,r2
   16728:	94c4b03a 	or	r2,r18,r19
   1672c:	103fb21e 	bne	r2,zero,165f8 <___vfiprintf_internal_r+0xedc>
   16730:	0039883a 	mov	fp,zero
   16734:	00800084 	movi	r2,2
   16738:	003e6b06 	br	160e8 <___vfiprintf_internal_r+0x9cc>
   1673c:	da802217 	ldw	r10,136(sp)
   16740:	d8001d85 	stb	zero,118(sp)
   16744:	0027883a 	mov	r19,zero
   16748:	50800104 	addi	r2,r10,4
   1674c:	54800017 	ldw	r18,0(r10)
   16750:	483e6016 	blt	r9,zero,160d4 <___vfiprintf_internal_r+0x9b8>
   16754:	00ffdfc4 	movi	r3,-129
   16758:	d8802215 	stw	r2,136(sp)
   1675c:	a0e8703a 	and	r20,r20,r3
   16760:	0039883a 	mov	fp,zero
   16764:	903ebb26 	beq	r18,zero,16254 <___vfiprintf_internal_r+0xb38>
   16768:	00800244 	movi	r2,9
   1676c:	14bdee36 	bltu	r2,r18,15f28 <___vfiprintf_internal_r+0x80c>
   16770:	003eba06 	br	1625c <___vfiprintf_internal_r+0xb40>
   16774:	00800c04 	movi	r2,48
   16778:	d8c01d45 	stb	r3,117(sp)
   1677c:	d8801d05 	stb	r2,116(sp)
   16780:	d8001d85 	stb	zero,118(sp)
   16784:	a0c00094 	ori	r3,r20,2
   16788:	4800a916 	blt	r9,zero,16a30 <___vfiprintf_internal_r+0x1314>
   1678c:	00bfdfc4 	movi	r2,-129
   16790:	a096703a 	and	r11,r20,r2
   16794:	5d000094 	ori	r20,r11,2
   16798:	0039883a 	mov	fp,zero
   1679c:	003f9706 	br	165fc <___vfiprintf_internal_r+0xee0>
   167a0:	8025883a 	mov	r18,r16
   167a4:	003c2e06 	br	15860 <___vfiprintf_internal_r+0x144>
   167a8:	008000b4 	movhi	r2,2
   167ac:	109e0e04 	addi	r2,r2,30776
   167b0:	0039883a 	mov	fp,zero
   167b4:	d8802615 	stw	r2,152(sp)
   167b8:	003f9006 	br	165fc <___vfiprintf_internal_r+0xee0>
   167bc:	04a5c83a 	sub	r18,zero,r18
   167c0:	07000b44 	movi	fp,45
   167c4:	9004c03a 	cmpne	r2,r18,zero
   167c8:	04e7c83a 	sub	r19,zero,r19
   167cc:	df001d85 	stb	fp,118(sp)
   167d0:	98a7c83a 	sub	r19,r19,r2
   167d4:	48009f16 	blt	r9,zero,16a54 <___vfiprintf_internal_r+0x1338>
   167d8:	00bfdfc4 	movi	r2,-129
   167dc:	a0a8703a 	and	r20,r20,r2
   167e0:	003dd006 	br	15f24 <___vfiprintf_internal_r+0x808>
   167e4:	70004c26 	beq	r14,zero,16918 <___vfiprintf_internal_r+0x11fc>
   167e8:	00800084 	movi	r2,2
   167ec:	d8c01d04 	addi	r3,sp,116
   167f0:	d8c00015 	stw	r3,0(sp)
   167f4:	d8800115 	stw	r2,4(sp)
   167f8:	01000044 	movi	r4,1
   167fc:	d811883a 	mov	r8,sp
   16800:	003f7306 	br	165d0 <___vfiprintf_internal_r+0xeb4>
   16804:	a080100c 	andi	r2,r20,64
   16808:	da802217 	ldw	r10,136(sp)
   1680c:	103e0626 	beq	r2,zero,16028 <___vfiprintf_internal_r+0x90c>
   16810:	5480000f 	ldh	r18,0(r10)
   16814:	52800104 	addi	r10,r10,4
   16818:	da802215 	stw	r10,136(sp)
   1681c:	9027d7fa 	srai	r19,r18,31
   16820:	9805883a 	mov	r2,r19
   16824:	003db806 	br	15f08 <___vfiprintf_internal_r+0x7ec>
   16828:	a080040c 	andi	r2,r20,16
   1682c:	1000091e 	bne	r2,zero,16854 <___vfiprintf_internal_r+0x1138>
   16830:	a2c0100c 	andi	r11,r20,64
   16834:	58000726 	beq	r11,zero,16854 <___vfiprintf_internal_r+0x1138>
   16838:	da802217 	ldw	r10,136(sp)
   1683c:	50800017 	ldw	r2,0(r10)
   16840:	52800104 	addi	r10,r10,4
   16844:	da802215 	stw	r10,136(sp)
   16848:	da802317 	ldw	r10,140(sp)
   1684c:	1280000d 	sth	r10,0(r2)
   16850:	003be706 	br	157f0 <___vfiprintf_internal_r+0xd4>
   16854:	da802217 	ldw	r10,136(sp)
   16858:	50800017 	ldw	r2,0(r10)
   1685c:	52800104 	addi	r10,r10,4
   16860:	da802215 	stw	r10,136(sp)
   16864:	da802317 	ldw	r10,140(sp)
   16868:	12800015 	stw	r10,0(r2)
   1686c:	003be006 	br	157f0 <___vfiprintf_internal_r+0xd4>
   16870:	a080100c 	andi	r2,r20,64
   16874:	da802217 	ldw	r10,136(sp)
   16878:	10003026 	beq	r2,zero,1693c <___vfiprintf_internal_r+0x1220>
   1687c:	5480000b 	ldhu	r18,0(r10)
   16880:	52800104 	addi	r10,r10,4
   16884:	0027883a 	mov	r19,zero
   16888:	da802215 	stw	r10,136(sp)
   1688c:	003d8006 	br	15e90 <___vfiprintf_internal_r+0x774>
   16890:	80c00007 	ldb	r3,0(r16)
   16894:	003c0006 	br	15898 <___vfiprintf_internal_r+0x17c>
   16898:	a080100c 	andi	r2,r20,64
   1689c:	d8001d85 	stb	zero,118(sp)
   168a0:	da802217 	ldw	r10,136(sp)
   168a4:	1000201e 	bne	r2,zero,16928 <___vfiprintf_internal_r+0x120c>
   168a8:	50800104 	addi	r2,r10,4
   168ac:	54800017 	ldw	r18,0(r10)
   168b0:	0027883a 	mov	r19,zero
   168b4:	483def0e 	bge	r9,zero,16074 <___vfiprintf_internal_r+0x958>
   168b8:	94c6b03a 	or	r3,r18,r19
   168bc:	d8802215 	stw	r2,136(sp)
   168c0:	183d4e1e 	bne	r3,zero,15dfc <___vfiprintf_internal_r+0x6e0>
   168c4:	0039883a 	mov	fp,zero
   168c8:	0005883a 	mov	r2,zero
   168cc:	003e0606 	br	160e8 <___vfiprintf_internal_r+0x9cc>
   168d0:	d9402117 	ldw	r5,132(sp)
   168d4:	d9002017 	ldw	r4,128(sp)
   168d8:	d9801a04 	addi	r6,sp,104
   168dc:	da402c15 	stw	r9,176(sp)
   168e0:	db802a15 	stw	r14,168(sp)
   168e4:	00156080 	call	15608 <__sprint_r.part.0>
   168e8:	da402c17 	ldw	r9,176(sp)
   168ec:	db802a17 	ldw	r14,168(sp)
   168f0:	103ede1e 	bne	r2,zero,1646c <___vfiprintf_internal_r+0xd50>
   168f4:	d9401b17 	ldw	r5,108(sp)
   168f8:	d8801c17 	ldw	r2,112(sp)
   168fc:	d811883a 	mov	r8,sp
   16900:	29000044 	addi	r4,r5,1
   16904:	003e7406 	br	162d8 <___vfiprintf_internal_r+0xbbc>
   16908:	00bfffc4 	movi	r2,-1
   1690c:	003c5806 	br	15a70 <___vfiprintf_internal_r+0x354>
   16910:	d811883a 	mov	r8,sp
   16914:	003ee806 	br	164b8 <___vfiprintf_internal_r+0xd9c>
   16918:	000b883a 	mov	r5,zero
   1691c:	01000044 	movi	r4,1
   16920:	d811883a 	mov	r8,sp
   16924:	003e7c06 	br	16318 <___vfiprintf_internal_r+0xbfc>
   16928:	50800104 	addi	r2,r10,4
   1692c:	5480000b 	ldhu	r18,0(r10)
   16930:	0027883a 	mov	r19,zero
   16934:	483dcf0e 	bge	r9,zero,16074 <___vfiprintf_internal_r+0x958>
   16938:	003fdf06 	br	168b8 <___vfiprintf_internal_r+0x119c>
   1693c:	54800017 	ldw	r18,0(r10)
   16940:	52800104 	addi	r10,r10,4
   16944:	0027883a 	mov	r19,zero
   16948:	da802215 	stw	r10,136(sp)
   1694c:	003d5006 	br	15e90 <___vfiprintf_internal_r+0x774>
   16950:	50800104 	addi	r2,r10,4
   16954:	5480000b 	ldhu	r18,0(r10)
   16958:	0027883a 	mov	r19,zero
   1695c:	483f7d0e 	bge	r9,zero,16754 <___vfiprintf_internal_r+0x1038>
   16960:	003ddc06 	br	160d4 <___vfiprintf_internal_r+0x9b8>
   16964:	d8c02215 	stw	r3,136(sp)
   16968:	0039883a 	mov	fp,zero
   1696c:	003ddb06 	br	160dc <___vfiprintf_internal_r+0x9c0>
   16970:	028000b4 	movhi	r10,2
   16974:	529e7f04 	addi	r10,r10,31228
   16978:	da802415 	stw	r10,144(sp)
   1697c:	003e8306 	br	1638c <___vfiprintf_internal_r+0xc70>
   16980:	d8801c17 	ldw	r2,112(sp)
   16984:	dd002117 	ldw	r20,132(sp)
   16988:	103eb926 	beq	r2,zero,16470 <___vfiprintf_internal_r+0xd54>
   1698c:	d9002017 	ldw	r4,128(sp)
   16990:	d9801a04 	addi	r6,sp,104
   16994:	a00b883a 	mov	r5,r20
   16998:	00156080 	call	15608 <__sprint_r.part.0>
   1699c:	003eb406 	br	16470 <___vfiprintf_internal_r+0xd54>
   169a0:	80c00043 	ldbu	r3,1(r16)
   169a4:	a5000814 	ori	r20,r20,32
   169a8:	84000044 	addi	r16,r16,1
   169ac:	18c03fcc 	andi	r3,r3,255
   169b0:	18c0201c 	xori	r3,r3,128
   169b4:	18ffe004 	addi	r3,r3,-128
   169b8:	003bb706 	br	15898 <___vfiprintf_internal_r+0x17c>
   169bc:	a809883a 	mov	r4,r21
   169c0:	d8c02a15 	stw	r3,168(sp)
   169c4:	da002b15 	stw	r8,172(sp)
   169c8:	00141640 	call	14164 <strlen>
   169cc:	d8c02a17 	ldw	r3,168(sp)
   169d0:	1027883a 	mov	r19,r2
   169d4:	df001d83 	ldbu	fp,118(sp)
   169d8:	d8c02215 	stw	r3,136(sp)
   169dc:	0013883a 	mov	r9,zero
   169e0:	da002b17 	ldw	r8,172(sp)
   169e4:	003c4d06 	br	15b1c <___vfiprintf_internal_r+0x400>
   169e8:	d9402117 	ldw	r5,132(sp)
   169ec:	d9002017 	ldw	r4,128(sp)
   169f0:	d9801a04 	addi	r6,sp,104
   169f4:	da402c15 	stw	r9,176(sp)
   169f8:	00156080 	call	15608 <__sprint_r.part.0>
   169fc:	da402c17 	ldw	r9,176(sp)
   16a00:	103e9a1e 	bne	r2,zero,1646c <___vfiprintf_internal_r+0xd50>
   16a04:	d9401b17 	ldw	r5,108(sp)
   16a08:	d8801c17 	ldw	r2,112(sp)
   16a0c:	d811883a 	mov	r8,sp
   16a10:	29000044 	addi	r4,r5,1
   16a14:	003e4206 	br	16320 <___vfiprintf_internal_r+0xc04>
   16a18:	d9401b17 	ldw	r5,108(sp)
   16a1c:	010000b4 	movhi	r4,2
   16a20:	211e8304 	addi	r4,r4,31244
   16a24:	d9002415 	stw	r4,144(sp)
   16a28:	29400044 	addi	r5,r5,1
   16a2c:	003c6d06 	br	15be4 <___vfiprintf_internal_r+0x4c8>
   16a30:	0039883a 	mov	fp,zero
   16a34:	00800084 	movi	r2,2
   16a38:	10803fcc 	andi	r2,r2,255
   16a3c:	01000044 	movi	r4,1
   16a40:	11001e26 	beq	r2,r4,16abc <___vfiprintf_internal_r+0x13a0>
   16a44:	01000084 	movi	r4,2
   16a48:	11001e1e 	bne	r2,r4,16ac4 <___vfiprintf_internal_r+0x13a8>
   16a4c:	1829883a 	mov	r20,r3
   16a50:	003eea06 	br	165fc <___vfiprintf_internal_r+0xee0>
   16a54:	a007883a 	mov	r3,r20
   16a58:	00800044 	movi	r2,1
   16a5c:	003ff606 	br	16a38 <___vfiprintf_internal_r+0x131c>
   16a60:	00800184 	movi	r2,6
   16a64:	1240012e 	bgeu	r2,r9,16a6c <___vfiprintf_internal_r+0x1350>
   16a68:	1013883a 	mov	r9,r2
   16a6c:	4827883a 	mov	r19,r9
   16a70:	4825883a 	mov	r18,r9
   16a74:	48001516 	blt	r9,zero,16acc <___vfiprintf_internal_r+0x13b0>
   16a78:	054000b4 	movhi	r21,2
   16a7c:	d8c02215 	stw	r3,136(sp)
   16a80:	ad5e1304 	addi	r21,r21,30796
   16a84:	003d1406 	br	15ed8 <___vfiprintf_internal_r+0x7bc>
   16a88:	028000b4 	movhi	r10,2
   16a8c:	529e7f04 	addi	r10,r10,31228
   16a90:	da802415 	stw	r10,144(sp)
   16a94:	200d883a 	mov	r6,r4
   16a98:	003c9106 	br	15ce0 <___vfiprintf_internal_r+0x5c4>
   16a9c:	5021883a 	mov	r16,r10
   16aa0:	0013883a 	mov	r9,zero
   16aa4:	003b7d06 	br	1589c <___vfiprintf_internal_r+0x180>
   16aa8:	4827883a 	mov	r19,r9
   16aac:	df001d83 	ldbu	fp,118(sp)
   16ab0:	d8c02215 	stw	r3,136(sp)
   16ab4:	0013883a 	mov	r9,zero
   16ab8:	003c1806 	br	15b1c <___vfiprintf_internal_r+0x400>
   16abc:	1829883a 	mov	r20,r3
   16ac0:	003d1806 	br	15f24 <___vfiprintf_internal_r+0x808>
   16ac4:	1829883a 	mov	r20,r3
   16ac8:	003ccd06 	br	15e00 <___vfiprintf_internal_r+0x6e4>
   16acc:	0025883a 	mov	r18,zero
   16ad0:	003fe906 	br	16a78 <___vfiprintf_internal_r+0x135c>
   16ad4:	d8802217 	ldw	r2,136(sp)
   16ad8:	80c00043 	ldbu	r3,1(r16)
   16adc:	5021883a 	mov	r16,r10
   16ae0:	12400017 	ldw	r9,0(r2)
   16ae4:	10800104 	addi	r2,r2,4
   16ae8:	d8802215 	stw	r2,136(sp)
   16aec:	483faf0e 	bge	r9,zero,169ac <___vfiprintf_internal_r+0x1290>
   16af0:	18c03fcc 	andi	r3,r3,255
   16af4:	18c0201c 	xori	r3,r3,128
   16af8:	027fffc4 	movi	r9,-1
   16afc:	18ffe004 	addi	r3,r3,-128
   16b00:	003b6506 	br	15898 <___vfiprintf_internal_r+0x17c>
   16b04:	d9c01d85 	stb	r7,118(sp)
   16b08:	003ca006 	br	15d8c <___vfiprintf_internal_r+0x670>
   16b0c:	d9c01d85 	stb	r7,118(sp)
   16b10:	003cad06 	br	15dc8 <___vfiprintf_internal_r+0x6ac>
   16b14:	d9c01d85 	stb	r7,118(sp)
   16b18:	003d7d06 	br	16110 <___vfiprintf_internal_r+0x9f4>
   16b1c:	d9c01d85 	stb	r7,118(sp)
   16b20:	003d5f06 	br	160a0 <___vfiprintf_internal_r+0x984>
   16b24:	a080004c 	andi	r2,r20,1
   16b28:	0039883a 	mov	fp,zero
   16b2c:	10000526 	beq	r2,zero,16b44 <___vfiprintf_internal_r+0x1428>
   16b30:	00800c04 	movi	r2,48
   16b34:	d88019c5 	stb	r2,103(sp)
   16b38:	dcc02717 	ldw	r19,156(sp)
   16b3c:	dd4019c4 	addi	r21,sp,103
   16b40:	003bf606 	br	15b1c <___vfiprintf_internal_r+0x400>
   16b44:	0027883a 	mov	r19,zero
   16b48:	dd401a04 	addi	r21,sp,104
   16b4c:	003bf306 	br	15b1c <___vfiprintf_internal_r+0x400>
   16b50:	d9c01d85 	stb	r7,118(sp)
   16b54:	003dc806 	br	16278 <___vfiprintf_internal_r+0xb5c>
   16b58:	d9c01d85 	stb	r7,118(sp)
   16b5c:	003d3a06 	br	16048 <___vfiprintf_internal_r+0x92c>
   16b60:	d9c01d85 	stb	r7,118(sp)
   16b64:	003d2a06 	br	16010 <___vfiprintf_internal_r+0x8f4>
   16b68:	d9c01d85 	stb	r7,118(sp)
   16b6c:	003cde06 	br	15ee8 <___vfiprintf_internal_r+0x7cc>
   16b70:	d9c01d85 	stb	r7,118(sp)
   16b74:	003cbc06 	br	15e68 <___vfiprintf_internal_r+0x74c>

00016b78 <__vfiprintf_internal>:
   16b78:	008000f4 	movhi	r2,3
   16b7c:	10a66f04 	addi	r2,r2,-26180
   16b80:	300f883a 	mov	r7,r6
   16b84:	280d883a 	mov	r6,r5
   16b88:	200b883a 	mov	r5,r4
   16b8c:	11000017 	ldw	r4,0(r2)
   16b90:	001571c1 	jmpi	1571c <___vfiprintf_internal_r>

00016b94 <__sbprintf>:
   16b94:	2880030b 	ldhu	r2,12(r5)
   16b98:	2ac01917 	ldw	r11,100(r5)
   16b9c:	2a80038b 	ldhu	r10,14(r5)
   16ba0:	2a400717 	ldw	r9,28(r5)
   16ba4:	2a000917 	ldw	r8,36(r5)
   16ba8:	defee204 	addi	sp,sp,-1144
   16bac:	00c10004 	movi	r3,1024
   16bb0:	dc011a15 	stw	r16,1128(sp)
   16bb4:	10bfff4c 	andi	r2,r2,65533
   16bb8:	2821883a 	mov	r16,r5
   16bbc:	d8cb883a 	add	r5,sp,r3
   16bc0:	dc811c15 	stw	r18,1136(sp)
   16bc4:	dc411b15 	stw	r17,1132(sp)
   16bc8:	dfc11d15 	stw	ra,1140(sp)
   16bcc:	2025883a 	mov	r18,r4
   16bd0:	d881030d 	sth	r2,1036(sp)
   16bd4:	dac11915 	stw	r11,1124(sp)
   16bd8:	da81038d 	sth	r10,1038(sp)
   16bdc:	da410715 	stw	r9,1052(sp)
   16be0:	da010915 	stw	r8,1060(sp)
   16be4:	dec10015 	stw	sp,1024(sp)
   16be8:	dec10415 	stw	sp,1040(sp)
   16bec:	d8c10215 	stw	r3,1032(sp)
   16bf0:	d8c10515 	stw	r3,1044(sp)
   16bf4:	d8010615 	stw	zero,1048(sp)
   16bf8:	001571c0 	call	1571c <___vfiprintf_internal_r>
   16bfc:	1023883a 	mov	r17,r2
   16c00:	10000416 	blt	r2,zero,16c14 <__sbprintf+0x80>
   16c04:	d9410004 	addi	r5,sp,1024
   16c08:	9009883a 	mov	r4,r18
   16c0c:	00117f00 	call	117f0 <_fflush_r>
   16c10:	10000d1e 	bne	r2,zero,16c48 <__sbprintf+0xb4>
   16c14:	d881030b 	ldhu	r2,1036(sp)
   16c18:	1080100c 	andi	r2,r2,64
   16c1c:	10000326 	beq	r2,zero,16c2c <__sbprintf+0x98>
   16c20:	8080030b 	ldhu	r2,12(r16)
   16c24:	10801014 	ori	r2,r2,64
   16c28:	8080030d 	sth	r2,12(r16)
   16c2c:	8805883a 	mov	r2,r17
   16c30:	dfc11d17 	ldw	ra,1140(sp)
   16c34:	dc811c17 	ldw	r18,1136(sp)
   16c38:	dc411b17 	ldw	r17,1132(sp)
   16c3c:	dc011a17 	ldw	r16,1128(sp)
   16c40:	dec11e04 	addi	sp,sp,1144
   16c44:	f800283a 	ret
   16c48:	047fffc4 	movi	r17,-1
   16c4c:	003ff106 	br	16c14 <__sbprintf+0x80>

00016c50 <_write_r>:
   16c50:	defffd04 	addi	sp,sp,-12
   16c54:	2805883a 	mov	r2,r5
   16c58:	dc000015 	stw	r16,0(sp)
   16c5c:	040000f4 	movhi	r16,3
   16c60:	dc400115 	stw	r17,4(sp)
   16c64:	300b883a 	mov	r5,r6
   16c68:	842e3a04 	addi	r16,r16,-18200
   16c6c:	2023883a 	mov	r17,r4
   16c70:	380d883a 	mov	r6,r7
   16c74:	1009883a 	mov	r4,r2
   16c78:	dfc00215 	stw	ra,8(sp)
   16c7c:	80000015 	stw	zero,0(r16)
   16c80:	001bad00 	call	1bad0 <write>
   16c84:	00ffffc4 	movi	r3,-1
   16c88:	10c00526 	beq	r2,r3,16ca0 <_write_r+0x50>
   16c8c:	dfc00217 	ldw	ra,8(sp)
   16c90:	dc400117 	ldw	r17,4(sp)
   16c94:	dc000017 	ldw	r16,0(sp)
   16c98:	dec00304 	addi	sp,sp,12
   16c9c:	f800283a 	ret
   16ca0:	80c00017 	ldw	r3,0(r16)
   16ca4:	183ff926 	beq	r3,zero,16c8c <_write_r+0x3c>
   16ca8:	88c00015 	stw	r3,0(r17)
   16cac:	003ff706 	br	16c8c <_write_r+0x3c>

00016cb0 <_close_r>:
   16cb0:	defffd04 	addi	sp,sp,-12
   16cb4:	dc000015 	stw	r16,0(sp)
   16cb8:	040000f4 	movhi	r16,3
   16cbc:	dc400115 	stw	r17,4(sp)
   16cc0:	842e3a04 	addi	r16,r16,-18200
   16cc4:	2023883a 	mov	r17,r4
   16cc8:	2809883a 	mov	r4,r5
   16ccc:	dfc00215 	stw	ra,8(sp)
   16cd0:	80000015 	stw	zero,0(r16)
   16cd4:	001b2c80 	call	1b2c8 <close>
   16cd8:	00ffffc4 	movi	r3,-1
   16cdc:	10c00526 	beq	r2,r3,16cf4 <_close_r+0x44>
   16ce0:	dfc00217 	ldw	ra,8(sp)
   16ce4:	dc400117 	ldw	r17,4(sp)
   16ce8:	dc000017 	ldw	r16,0(sp)
   16cec:	dec00304 	addi	sp,sp,12
   16cf0:	f800283a 	ret
   16cf4:	80c00017 	ldw	r3,0(r16)
   16cf8:	183ff926 	beq	r3,zero,16ce0 <_close_r+0x30>
   16cfc:	88c00015 	stw	r3,0(r17)
   16d00:	003ff706 	br	16ce0 <_close_r+0x30>

00016d04 <_calloc_r>:
   16d04:	298b383a 	mul	r5,r5,r6
   16d08:	defffe04 	addi	sp,sp,-8
   16d0c:	dfc00115 	stw	ra,4(sp)
   16d10:	dc000015 	stw	r16,0(sp)
   16d14:	00124700 	call	12470 <_malloc_r>
   16d18:	10002926 	beq	r2,zero,16dc0 <_calloc_r+0xbc>
   16d1c:	11bfff17 	ldw	r6,-4(r2)
   16d20:	1021883a 	mov	r16,r2
   16d24:	00bfff04 	movi	r2,-4
   16d28:	308c703a 	and	r6,r6,r2
   16d2c:	00c00904 	movi	r3,36
   16d30:	308d883a 	add	r6,r6,r2
   16d34:	19801636 	bltu	r3,r6,16d90 <_calloc_r+0x8c>
   16d38:	008004c4 	movi	r2,19
   16d3c:	11800b2e 	bgeu	r2,r6,16d6c <_calloc_r+0x68>
   16d40:	80000015 	stw	zero,0(r16)
   16d44:	80000115 	stw	zero,4(r16)
   16d48:	008006c4 	movi	r2,27
   16d4c:	11801a2e 	bgeu	r2,r6,16db8 <_calloc_r+0xb4>
   16d50:	80000215 	stw	zero,8(r16)
   16d54:	80000315 	stw	zero,12(r16)
   16d58:	30c0151e 	bne	r6,r3,16db0 <_calloc_r+0xac>
   16d5c:	80000415 	stw	zero,16(r16)
   16d60:	80800604 	addi	r2,r16,24
   16d64:	80000515 	stw	zero,20(r16)
   16d68:	00000106 	br	16d70 <_calloc_r+0x6c>
   16d6c:	8005883a 	mov	r2,r16
   16d70:	10000015 	stw	zero,0(r2)
   16d74:	10000115 	stw	zero,4(r2)
   16d78:	10000215 	stw	zero,8(r2)
   16d7c:	8005883a 	mov	r2,r16
   16d80:	dfc00117 	ldw	ra,4(sp)
   16d84:	dc000017 	ldw	r16,0(sp)
   16d88:	dec00204 	addi	sp,sp,8
   16d8c:	f800283a 	ret
   16d90:	000b883a 	mov	r5,zero
   16d94:	8009883a 	mov	r4,r16
   16d98:	0012d600 	call	12d60 <memset>
   16d9c:	8005883a 	mov	r2,r16
   16da0:	dfc00117 	ldw	ra,4(sp)
   16da4:	dc000017 	ldw	r16,0(sp)
   16da8:	dec00204 	addi	sp,sp,8
   16dac:	f800283a 	ret
   16db0:	80800404 	addi	r2,r16,16
   16db4:	003fee06 	br	16d70 <_calloc_r+0x6c>
   16db8:	80800204 	addi	r2,r16,8
   16dbc:	003fec06 	br	16d70 <_calloc_r+0x6c>
   16dc0:	0005883a 	mov	r2,zero
   16dc4:	003fee06 	br	16d80 <_calloc_r+0x7c>

00016dc8 <_fclose_r>:
   16dc8:	28003926 	beq	r5,zero,16eb0 <_fclose_r+0xe8>
   16dcc:	defffc04 	addi	sp,sp,-16
   16dd0:	dc400115 	stw	r17,4(sp)
   16dd4:	dc000015 	stw	r16,0(sp)
   16dd8:	dfc00315 	stw	ra,12(sp)
   16ddc:	dc800215 	stw	r18,8(sp)
   16de0:	2023883a 	mov	r17,r4
   16de4:	2821883a 	mov	r16,r5
   16de8:	20000226 	beq	r4,zero,16df4 <_fclose_r+0x2c>
   16dec:	20800e17 	ldw	r2,56(r4)
   16df0:	10002726 	beq	r2,zero,16e90 <_fclose_r+0xc8>
   16df4:	8080030f 	ldh	r2,12(r16)
   16df8:	1000071e 	bne	r2,zero,16e18 <_fclose_r+0x50>
   16dfc:	0005883a 	mov	r2,zero
   16e00:	dfc00317 	ldw	ra,12(sp)
   16e04:	dc800217 	ldw	r18,8(sp)
   16e08:	dc400117 	ldw	r17,4(sp)
   16e0c:	dc000017 	ldw	r16,0(sp)
   16e10:	dec00404 	addi	sp,sp,16
   16e14:	f800283a 	ret
   16e18:	800b883a 	mov	r5,r16
   16e1c:	8809883a 	mov	r4,r17
   16e20:	00115d40 	call	115d4 <__sflush_r>
   16e24:	1025883a 	mov	r18,r2
   16e28:	80800b17 	ldw	r2,44(r16)
   16e2c:	10000426 	beq	r2,zero,16e40 <_fclose_r+0x78>
   16e30:	81400717 	ldw	r5,28(r16)
   16e34:	8809883a 	mov	r4,r17
   16e38:	103ee83a 	callr	r2
   16e3c:	10001616 	blt	r2,zero,16e98 <_fclose_r+0xd0>
   16e40:	8080030b 	ldhu	r2,12(r16)
   16e44:	1080200c 	andi	r2,r2,128
   16e48:	1000151e 	bne	r2,zero,16ea0 <_fclose_r+0xd8>
   16e4c:	81400c17 	ldw	r5,48(r16)
   16e50:	28000526 	beq	r5,zero,16e68 <_fclose_r+0xa0>
   16e54:	80801004 	addi	r2,r16,64
   16e58:	28800226 	beq	r5,r2,16e64 <_fclose_r+0x9c>
   16e5c:	8809883a 	mov	r4,r17
   16e60:	0011d400 	call	11d40 <_free_r>
   16e64:	80000c15 	stw	zero,48(r16)
   16e68:	81401117 	ldw	r5,68(r16)
   16e6c:	28000326 	beq	r5,zero,16e7c <_fclose_r+0xb4>
   16e70:	8809883a 	mov	r4,r17
   16e74:	0011d400 	call	11d40 <_free_r>
   16e78:	80001115 	stw	zero,68(r16)
   16e7c:	0011bdc0 	call	11bdc <__sfp_lock_acquire>
   16e80:	8000030d 	sth	zero,12(r16)
   16e84:	0011be00 	call	11be0 <__sfp_lock_release>
   16e88:	9005883a 	mov	r2,r18
   16e8c:	003fdc06 	br	16e00 <_fclose_r+0x38>
   16e90:	0011bcc0 	call	11bcc <__sinit>
   16e94:	003fd706 	br	16df4 <_fclose_r+0x2c>
   16e98:	04bfffc4 	movi	r18,-1
   16e9c:	003fe806 	br	16e40 <_fclose_r+0x78>
   16ea0:	81400417 	ldw	r5,16(r16)
   16ea4:	8809883a 	mov	r4,r17
   16ea8:	0011d400 	call	11d40 <_free_r>
   16eac:	003fe706 	br	16e4c <_fclose_r+0x84>
   16eb0:	0005883a 	mov	r2,zero
   16eb4:	f800283a 	ret

00016eb8 <fclose>:
   16eb8:	008000f4 	movhi	r2,3
   16ebc:	10a66f04 	addi	r2,r2,-26180
   16ec0:	200b883a 	mov	r5,r4
   16ec4:	11000017 	ldw	r4,0(r2)
   16ec8:	0016dc81 	jmpi	16dc8 <_fclose_r>

00016ecc <__fputwc>:
   16ecc:	defff804 	addi	sp,sp,-32
   16ed0:	dcc00415 	stw	r19,16(sp)
   16ed4:	dc800315 	stw	r18,12(sp)
   16ed8:	dc000115 	stw	r16,4(sp)
   16edc:	dfc00715 	stw	ra,28(sp)
   16ee0:	dd400615 	stw	r21,24(sp)
   16ee4:	dd000515 	stw	r20,20(sp)
   16ee8:	dc400215 	stw	r17,8(sp)
   16eec:	2027883a 	mov	r19,r4
   16ef0:	2825883a 	mov	r18,r5
   16ef4:	3021883a 	mov	r16,r6
   16ef8:	00122600 	call	12260 <__locale_mb_cur_max>
   16efc:	00c00044 	movi	r3,1
   16f00:	10c03e26 	beq	r2,r3,16ffc <__fputwc+0x130>
   16f04:	81c01704 	addi	r7,r16,92
   16f08:	900d883a 	mov	r6,r18
   16f0c:	d80b883a 	mov	r5,sp
   16f10:	9809883a 	mov	r4,r19
   16f14:	0017f180 	call	17f18 <_wcrtomb_r>
   16f18:	1029883a 	mov	r20,r2
   16f1c:	00bfffc4 	movi	r2,-1
   16f20:	a0802026 	beq	r20,r2,16fa4 <__fputwc+0xd8>
   16f24:	d9400003 	ldbu	r5,0(sp)
   16f28:	a0001c26 	beq	r20,zero,16f9c <__fputwc+0xd0>
   16f2c:	0023883a 	mov	r17,zero
   16f30:	05400284 	movi	r21,10
   16f34:	00000906 	br	16f5c <__fputwc+0x90>
   16f38:	80800017 	ldw	r2,0(r16)
   16f3c:	11400005 	stb	r5,0(r2)
   16f40:	80c00017 	ldw	r3,0(r16)
   16f44:	18c00044 	addi	r3,r3,1
   16f48:	80c00015 	stw	r3,0(r16)
   16f4c:	8c400044 	addi	r17,r17,1
   16f50:	dc45883a 	add	r2,sp,r17
   16f54:	8d00112e 	bgeu	r17,r20,16f9c <__fputwc+0xd0>
   16f58:	11400003 	ldbu	r5,0(r2)
   16f5c:	80c00217 	ldw	r3,8(r16)
   16f60:	18ffffc4 	addi	r3,r3,-1
   16f64:	80c00215 	stw	r3,8(r16)
   16f68:	183ff30e 	bge	r3,zero,16f38 <__fputwc+0x6c>
   16f6c:	80800617 	ldw	r2,24(r16)
   16f70:	18801916 	blt	r3,r2,16fd8 <__fputwc+0x10c>
   16f74:	80800017 	ldw	r2,0(r16)
   16f78:	11400005 	stb	r5,0(r2)
   16f7c:	80800017 	ldw	r2,0(r16)
   16f80:	10c00003 	ldbu	r3,0(r2)
   16f84:	10800044 	addi	r2,r2,1
   16f88:	1d402326 	beq	r3,r21,17018 <__fputwc+0x14c>
   16f8c:	80800015 	stw	r2,0(r16)
   16f90:	8c400044 	addi	r17,r17,1
   16f94:	dc45883a 	add	r2,sp,r17
   16f98:	8d3fef36 	bltu	r17,r20,16f58 <__fputwc+0x8c>
   16f9c:	9005883a 	mov	r2,r18
   16fa0:	00000406 	br	16fb4 <__fputwc+0xe8>
   16fa4:	80c0030b 	ldhu	r3,12(r16)
   16fa8:	a005883a 	mov	r2,r20
   16fac:	18c01014 	ori	r3,r3,64
   16fb0:	80c0030d 	sth	r3,12(r16)
   16fb4:	dfc00717 	ldw	ra,28(sp)
   16fb8:	dd400617 	ldw	r21,24(sp)
   16fbc:	dd000517 	ldw	r20,20(sp)
   16fc0:	dcc00417 	ldw	r19,16(sp)
   16fc4:	dc800317 	ldw	r18,12(sp)
   16fc8:	dc400217 	ldw	r17,8(sp)
   16fcc:	dc000117 	ldw	r16,4(sp)
   16fd0:	dec00804 	addi	sp,sp,32
   16fd4:	f800283a 	ret
   16fd8:	800d883a 	mov	r6,r16
   16fdc:	29403fcc 	andi	r5,r5,255
   16fe0:	9809883a 	mov	r4,r19
   16fe4:	0017dc00 	call	17dc0 <__swbuf_r>
   16fe8:	10bfffe0 	cmpeqi	r2,r2,-1
   16fec:	10803fcc 	andi	r2,r2,255
   16ff0:	103fd626 	beq	r2,zero,16f4c <__fputwc+0x80>
   16ff4:	00bfffc4 	movi	r2,-1
   16ff8:	003fee06 	br	16fb4 <__fputwc+0xe8>
   16ffc:	90ffffc4 	addi	r3,r18,-1
   17000:	01003f84 	movi	r4,254
   17004:	20ffbf36 	bltu	r4,r3,16f04 <__fputwc+0x38>
   17008:	900b883a 	mov	r5,r18
   1700c:	dc800005 	stb	r18,0(sp)
   17010:	1029883a 	mov	r20,r2
   17014:	003fc506 	br	16f2c <__fputwc+0x60>
   17018:	800d883a 	mov	r6,r16
   1701c:	a80b883a 	mov	r5,r21
   17020:	9809883a 	mov	r4,r19
   17024:	0017dc00 	call	17dc0 <__swbuf_r>
   17028:	10bfffe0 	cmpeqi	r2,r2,-1
   1702c:	003fef06 	br	16fec <__fputwc+0x120>

00017030 <_fputwc_r>:
   17030:	3080030b 	ldhu	r2,12(r6)
   17034:	10c8000c 	andi	r3,r2,8192
   17038:	1800051e 	bne	r3,zero,17050 <_fputwc_r+0x20>
   1703c:	30c01917 	ldw	r3,100(r6)
   17040:	10880014 	ori	r2,r2,8192
   17044:	3080030d 	sth	r2,12(r6)
   17048:	18880014 	ori	r2,r3,8192
   1704c:	30801915 	stw	r2,100(r6)
   17050:	0016ecc1 	jmpi	16ecc <__fputwc>

00017054 <fputwc>:
   17054:	008000f4 	movhi	r2,3
   17058:	defffc04 	addi	sp,sp,-16
   1705c:	10a66f04 	addi	r2,r2,-26180
   17060:	dc000115 	stw	r16,4(sp)
   17064:	14000017 	ldw	r16,0(r2)
   17068:	dc400215 	stw	r17,8(sp)
   1706c:	dfc00315 	stw	ra,12(sp)
   17070:	2023883a 	mov	r17,r4
   17074:	80000226 	beq	r16,zero,17080 <fputwc+0x2c>
   17078:	80800e17 	ldw	r2,56(r16)
   1707c:	10001026 	beq	r2,zero,170c0 <fputwc+0x6c>
   17080:	2880030b 	ldhu	r2,12(r5)
   17084:	10c8000c 	andi	r3,r2,8192
   17088:	1800051e 	bne	r3,zero,170a0 <fputwc+0x4c>
   1708c:	28c01917 	ldw	r3,100(r5)
   17090:	10880014 	ori	r2,r2,8192
   17094:	2880030d 	sth	r2,12(r5)
   17098:	18880014 	ori	r2,r3,8192
   1709c:	28801915 	stw	r2,100(r5)
   170a0:	280d883a 	mov	r6,r5
   170a4:	8009883a 	mov	r4,r16
   170a8:	880b883a 	mov	r5,r17
   170ac:	dfc00317 	ldw	ra,12(sp)
   170b0:	dc400217 	ldw	r17,8(sp)
   170b4:	dc000117 	ldw	r16,4(sp)
   170b8:	dec00404 	addi	sp,sp,16
   170bc:	0016ecc1 	jmpi	16ecc <__fputwc>
   170c0:	8009883a 	mov	r4,r16
   170c4:	d9400015 	stw	r5,0(sp)
   170c8:	0011bcc0 	call	11bcc <__sinit>
   170cc:	d9400017 	ldw	r5,0(sp)
   170d0:	003feb06 	br	17080 <fputwc+0x2c>

000170d4 <_fstat_r>:
   170d4:	defffd04 	addi	sp,sp,-12
   170d8:	2805883a 	mov	r2,r5
   170dc:	dc000015 	stw	r16,0(sp)
   170e0:	040000f4 	movhi	r16,3
   170e4:	dc400115 	stw	r17,4(sp)
   170e8:	842e3a04 	addi	r16,r16,-18200
   170ec:	2023883a 	mov	r17,r4
   170f0:	300b883a 	mov	r5,r6
   170f4:	1009883a 	mov	r4,r2
   170f8:	dfc00215 	stw	ra,8(sp)
   170fc:	80000015 	stw	zero,0(r16)
   17100:	001b4000 	call	1b400 <fstat>
   17104:	00ffffc4 	movi	r3,-1
   17108:	10c00526 	beq	r2,r3,17120 <_fstat_r+0x4c>
   1710c:	dfc00217 	ldw	ra,8(sp)
   17110:	dc400117 	ldw	r17,4(sp)
   17114:	dc000017 	ldw	r16,0(sp)
   17118:	dec00304 	addi	sp,sp,12
   1711c:	f800283a 	ret
   17120:	80c00017 	ldw	r3,0(r16)
   17124:	183ff926 	beq	r3,zero,1710c <_fstat_r+0x38>
   17128:	88c00015 	stw	r3,0(r17)
   1712c:	003ff706 	br	1710c <_fstat_r+0x38>

00017130 <__sfvwrite_r>:
   17130:	30800217 	ldw	r2,8(r6)
   17134:	10006726 	beq	r2,zero,172d4 <__sfvwrite_r+0x1a4>
   17138:	28c0030b 	ldhu	r3,12(r5)
   1713c:	defff404 	addi	sp,sp,-48
   17140:	dd400715 	stw	r21,28(sp)
   17144:	dd000615 	stw	r20,24(sp)
   17148:	dc000215 	stw	r16,8(sp)
   1714c:	dfc00b15 	stw	ra,44(sp)
   17150:	df000a15 	stw	fp,40(sp)
   17154:	ddc00915 	stw	r23,36(sp)
   17158:	dd800815 	stw	r22,32(sp)
   1715c:	dcc00515 	stw	r19,20(sp)
   17160:	dc800415 	stw	r18,16(sp)
   17164:	dc400315 	stw	r17,12(sp)
   17168:	1880020c 	andi	r2,r3,8
   1716c:	2821883a 	mov	r16,r5
   17170:	202b883a 	mov	r21,r4
   17174:	3029883a 	mov	r20,r6
   17178:	10002726 	beq	r2,zero,17218 <__sfvwrite_r+0xe8>
   1717c:	28800417 	ldw	r2,16(r5)
   17180:	10002526 	beq	r2,zero,17218 <__sfvwrite_r+0xe8>
   17184:	1880008c 	andi	r2,r3,2
   17188:	a4400017 	ldw	r17,0(r20)
   1718c:	10002a26 	beq	r2,zero,17238 <__sfvwrite_r+0x108>
   17190:	05a00034 	movhi	r22,32768
   17194:	0027883a 	mov	r19,zero
   17198:	0025883a 	mov	r18,zero
   1719c:	b5bf0004 	addi	r22,r22,-1024
   171a0:	980d883a 	mov	r6,r19
   171a4:	a809883a 	mov	r4,r21
   171a8:	90004626 	beq	r18,zero,172c4 <__sfvwrite_r+0x194>
   171ac:	900f883a 	mov	r7,r18
   171b0:	b480022e 	bgeu	r22,r18,171bc <__sfvwrite_r+0x8c>
   171b4:	01e00034 	movhi	r7,32768
   171b8:	39ff0004 	addi	r7,r7,-1024
   171bc:	80800917 	ldw	r2,36(r16)
   171c0:	81400717 	ldw	r5,28(r16)
   171c4:	103ee83a 	callr	r2
   171c8:	0080570e 	bge	zero,r2,17328 <__sfvwrite_r+0x1f8>
   171cc:	a0c00217 	ldw	r3,8(r20)
   171d0:	98a7883a 	add	r19,r19,r2
   171d4:	90a5c83a 	sub	r18,r18,r2
   171d8:	1885c83a 	sub	r2,r3,r2
   171dc:	a0800215 	stw	r2,8(r20)
   171e0:	103fef1e 	bne	r2,zero,171a0 <__sfvwrite_r+0x70>
   171e4:	0005883a 	mov	r2,zero
   171e8:	dfc00b17 	ldw	ra,44(sp)
   171ec:	df000a17 	ldw	fp,40(sp)
   171f0:	ddc00917 	ldw	r23,36(sp)
   171f4:	dd800817 	ldw	r22,32(sp)
   171f8:	dd400717 	ldw	r21,28(sp)
   171fc:	dd000617 	ldw	r20,24(sp)
   17200:	dcc00517 	ldw	r19,20(sp)
   17204:	dc800417 	ldw	r18,16(sp)
   17208:	dc400317 	ldw	r17,12(sp)
   1720c:	dc000217 	ldw	r16,8(sp)
   17210:	dec00c04 	addi	sp,sp,48
   17214:	f800283a 	ret
   17218:	800b883a 	mov	r5,r16
   1721c:	a809883a 	mov	r4,r21
   17220:	000fbf80 	call	fbf8 <__swsetup_r>
   17224:	1000eb1e 	bne	r2,zero,175d4 <__sfvwrite_r+0x4a4>
   17228:	80c0030b 	ldhu	r3,12(r16)
   1722c:	a4400017 	ldw	r17,0(r20)
   17230:	1880008c 	andi	r2,r3,2
   17234:	103fd61e 	bne	r2,zero,17190 <__sfvwrite_r+0x60>
   17238:	1880004c 	andi	r2,r3,1
   1723c:	10003f1e 	bne	r2,zero,1733c <__sfvwrite_r+0x20c>
   17240:	0039883a 	mov	fp,zero
   17244:	0025883a 	mov	r18,zero
   17248:	90001a26 	beq	r18,zero,172b4 <__sfvwrite_r+0x184>
   1724c:	1880800c 	andi	r2,r3,512
   17250:	84c00217 	ldw	r19,8(r16)
   17254:	10002126 	beq	r2,zero,172dc <__sfvwrite_r+0x1ac>
   17258:	982f883a 	mov	r23,r19
   1725c:	94c09336 	bltu	r18,r19,174ac <__sfvwrite_r+0x37c>
   17260:	1881200c 	andi	r2,r3,1152
   17264:	10009e1e 	bne	r2,zero,174e0 <__sfvwrite_r+0x3b0>
   17268:	81000017 	ldw	r4,0(r16)
   1726c:	b80d883a 	mov	r6,r23
   17270:	e00b883a 	mov	r5,fp
   17274:	00176a00 	call	176a0 <memmove>
   17278:	80c00217 	ldw	r3,8(r16)
   1727c:	81000017 	ldw	r4,0(r16)
   17280:	9005883a 	mov	r2,r18
   17284:	1ce7c83a 	sub	r19,r3,r19
   17288:	25cf883a 	add	r7,r4,r23
   1728c:	84c00215 	stw	r19,8(r16)
   17290:	81c00015 	stw	r7,0(r16)
   17294:	a0c00217 	ldw	r3,8(r20)
   17298:	e0b9883a 	add	fp,fp,r2
   1729c:	90a5c83a 	sub	r18,r18,r2
   172a0:	18a7c83a 	sub	r19,r3,r2
   172a4:	a4c00215 	stw	r19,8(r20)
   172a8:	983fce26 	beq	r19,zero,171e4 <__sfvwrite_r+0xb4>
   172ac:	80c0030b 	ldhu	r3,12(r16)
   172b0:	903fe61e 	bne	r18,zero,1724c <__sfvwrite_r+0x11c>
   172b4:	8f000017 	ldw	fp,0(r17)
   172b8:	8c800117 	ldw	r18,4(r17)
   172bc:	8c400204 	addi	r17,r17,8
   172c0:	003fe106 	br	17248 <__sfvwrite_r+0x118>
   172c4:	8cc00017 	ldw	r19,0(r17)
   172c8:	8c800117 	ldw	r18,4(r17)
   172cc:	8c400204 	addi	r17,r17,8
   172d0:	003fb306 	br	171a0 <__sfvwrite_r+0x70>
   172d4:	0005883a 	mov	r2,zero
   172d8:	f800283a 	ret
   172dc:	81000017 	ldw	r4,0(r16)
   172e0:	80800417 	ldw	r2,16(r16)
   172e4:	11005736 	bltu	r2,r4,17444 <__sfvwrite_r+0x314>
   172e8:	85c00517 	ldw	r23,20(r16)
   172ec:	95c05536 	bltu	r18,r23,17444 <__sfvwrite_r+0x314>
   172f0:	00a00034 	movhi	r2,32768
   172f4:	10bfffc4 	addi	r2,r2,-1
   172f8:	9009883a 	mov	r4,r18
   172fc:	1480012e 	bgeu	r2,r18,17304 <__sfvwrite_r+0x1d4>
   17300:	1009883a 	mov	r4,r2
   17304:	b80b883a 	mov	r5,r23
   17308:	0018bb00 	call	18bb0 <__divsi3>
   1730c:	15cf383a 	mul	r7,r2,r23
   17310:	81400717 	ldw	r5,28(r16)
   17314:	80800917 	ldw	r2,36(r16)
   17318:	e00d883a 	mov	r6,fp
   1731c:	a809883a 	mov	r4,r21
   17320:	103ee83a 	callr	r2
   17324:	00bfdb16 	blt	zero,r2,17294 <__sfvwrite_r+0x164>
   17328:	8080030b 	ldhu	r2,12(r16)
   1732c:	10801014 	ori	r2,r2,64
   17330:	8080030d 	sth	r2,12(r16)
   17334:	00bfffc4 	movi	r2,-1
   17338:	003fab06 	br	171e8 <__sfvwrite_r+0xb8>
   1733c:	0027883a 	mov	r19,zero
   17340:	0011883a 	mov	r8,zero
   17344:	0039883a 	mov	fp,zero
   17348:	0025883a 	mov	r18,zero
   1734c:	90001f26 	beq	r18,zero,173cc <__sfvwrite_r+0x29c>
   17350:	40005a26 	beq	r8,zero,174bc <__sfvwrite_r+0x38c>
   17354:	982d883a 	mov	r22,r19
   17358:	94c0012e 	bgeu	r18,r19,17360 <__sfvwrite_r+0x230>
   1735c:	902d883a 	mov	r22,r18
   17360:	81000017 	ldw	r4,0(r16)
   17364:	80800417 	ldw	r2,16(r16)
   17368:	b02f883a 	mov	r23,r22
   1736c:	81c00517 	ldw	r7,20(r16)
   17370:	1100032e 	bgeu	r2,r4,17380 <__sfvwrite_r+0x250>
   17374:	80c00217 	ldw	r3,8(r16)
   17378:	38c7883a 	add	r3,r7,r3
   1737c:	1d801816 	blt	r3,r22,173e0 <__sfvwrite_r+0x2b0>
   17380:	b1c03e16 	blt	r22,r7,1747c <__sfvwrite_r+0x34c>
   17384:	80800917 	ldw	r2,36(r16)
   17388:	81400717 	ldw	r5,28(r16)
   1738c:	e00d883a 	mov	r6,fp
   17390:	da000115 	stw	r8,4(sp)
   17394:	a809883a 	mov	r4,r21
   17398:	103ee83a 	callr	r2
   1739c:	102f883a 	mov	r23,r2
   173a0:	da000117 	ldw	r8,4(sp)
   173a4:	00bfe00e 	bge	zero,r2,17328 <__sfvwrite_r+0x1f8>
   173a8:	9de7c83a 	sub	r19,r19,r23
   173ac:	98001f26 	beq	r19,zero,1742c <__sfvwrite_r+0x2fc>
   173b0:	a0800217 	ldw	r2,8(r20)
   173b4:	e5f9883a 	add	fp,fp,r23
   173b8:	95e5c83a 	sub	r18,r18,r23
   173bc:	15efc83a 	sub	r23,r2,r23
   173c0:	a5c00215 	stw	r23,8(r20)
   173c4:	b83f8726 	beq	r23,zero,171e4 <__sfvwrite_r+0xb4>
   173c8:	903fe11e 	bne	r18,zero,17350 <__sfvwrite_r+0x220>
   173cc:	8f000017 	ldw	fp,0(r17)
   173d0:	8c800117 	ldw	r18,4(r17)
   173d4:	0011883a 	mov	r8,zero
   173d8:	8c400204 	addi	r17,r17,8
   173dc:	003fdb06 	br	1734c <__sfvwrite_r+0x21c>
   173e0:	180d883a 	mov	r6,r3
   173e4:	e00b883a 	mov	r5,fp
   173e8:	da000115 	stw	r8,4(sp)
   173ec:	d8c00015 	stw	r3,0(sp)
   173f0:	00176a00 	call	176a0 <memmove>
   173f4:	d8c00017 	ldw	r3,0(sp)
   173f8:	80800017 	ldw	r2,0(r16)
   173fc:	800b883a 	mov	r5,r16
   17400:	a809883a 	mov	r4,r21
   17404:	10c5883a 	add	r2,r2,r3
   17408:	80800015 	stw	r2,0(r16)
   1740c:	d8c00015 	stw	r3,0(sp)
   17410:	00117f00 	call	117f0 <_fflush_r>
   17414:	d8c00017 	ldw	r3,0(sp)
   17418:	da000117 	ldw	r8,4(sp)
   1741c:	103fc21e 	bne	r2,zero,17328 <__sfvwrite_r+0x1f8>
   17420:	182f883a 	mov	r23,r3
   17424:	9de7c83a 	sub	r19,r19,r23
   17428:	983fe11e 	bne	r19,zero,173b0 <__sfvwrite_r+0x280>
   1742c:	800b883a 	mov	r5,r16
   17430:	a809883a 	mov	r4,r21
   17434:	00117f00 	call	117f0 <_fflush_r>
   17438:	103fbb1e 	bne	r2,zero,17328 <__sfvwrite_r+0x1f8>
   1743c:	0011883a 	mov	r8,zero
   17440:	003fdb06 	br	173b0 <__sfvwrite_r+0x280>
   17444:	94c0012e 	bgeu	r18,r19,1744c <__sfvwrite_r+0x31c>
   17448:	9027883a 	mov	r19,r18
   1744c:	980d883a 	mov	r6,r19
   17450:	e00b883a 	mov	r5,fp
   17454:	00176a00 	call	176a0 <memmove>
   17458:	80800217 	ldw	r2,8(r16)
   1745c:	80c00017 	ldw	r3,0(r16)
   17460:	14c5c83a 	sub	r2,r2,r19
   17464:	1cc7883a 	add	r3,r3,r19
   17468:	80800215 	stw	r2,8(r16)
   1746c:	80c00015 	stw	r3,0(r16)
   17470:	10004326 	beq	r2,zero,17580 <__sfvwrite_r+0x450>
   17474:	9805883a 	mov	r2,r19
   17478:	003f8606 	br	17294 <__sfvwrite_r+0x164>
   1747c:	b00d883a 	mov	r6,r22
   17480:	e00b883a 	mov	r5,fp
   17484:	da000115 	stw	r8,4(sp)
   17488:	00176a00 	call	176a0 <memmove>
   1748c:	80800217 	ldw	r2,8(r16)
   17490:	80c00017 	ldw	r3,0(r16)
   17494:	da000117 	ldw	r8,4(sp)
   17498:	1585c83a 	sub	r2,r2,r22
   1749c:	1dad883a 	add	r22,r3,r22
   174a0:	80800215 	stw	r2,8(r16)
   174a4:	85800015 	stw	r22,0(r16)
   174a8:	003fbf06 	br	173a8 <__sfvwrite_r+0x278>
   174ac:	81000017 	ldw	r4,0(r16)
   174b0:	9027883a 	mov	r19,r18
   174b4:	902f883a 	mov	r23,r18
   174b8:	003f6c06 	br	1726c <__sfvwrite_r+0x13c>
   174bc:	900d883a 	mov	r6,r18
   174c0:	01400284 	movi	r5,10
   174c4:	e009883a 	mov	r4,fp
   174c8:	0012c7c0 	call	12c7c <memchr>
   174cc:	10003e26 	beq	r2,zero,175c8 <__sfvwrite_r+0x498>
   174d0:	10800044 	addi	r2,r2,1
   174d4:	1727c83a 	sub	r19,r2,fp
   174d8:	02000044 	movi	r8,1
   174dc:	003f9d06 	br	17354 <__sfvwrite_r+0x224>
   174e0:	80800517 	ldw	r2,20(r16)
   174e4:	81400417 	ldw	r5,16(r16)
   174e8:	81c00017 	ldw	r7,0(r16)
   174ec:	10a7883a 	add	r19,r2,r2
   174f0:	9885883a 	add	r2,r19,r2
   174f4:	1026d7fa 	srli	r19,r2,31
   174f8:	396dc83a 	sub	r22,r7,r5
   174fc:	b1000044 	addi	r4,r22,1
   17500:	9885883a 	add	r2,r19,r2
   17504:	1027d07a 	srai	r19,r2,1
   17508:	2485883a 	add	r2,r4,r18
   1750c:	980d883a 	mov	r6,r19
   17510:	9880022e 	bgeu	r19,r2,1751c <__sfvwrite_r+0x3ec>
   17514:	1027883a 	mov	r19,r2
   17518:	100d883a 	mov	r6,r2
   1751c:	18c1000c 	andi	r3,r3,1024
   17520:	18001c26 	beq	r3,zero,17594 <__sfvwrite_r+0x464>
   17524:	300b883a 	mov	r5,r6
   17528:	a809883a 	mov	r4,r21
   1752c:	00124700 	call	12470 <_malloc_r>
   17530:	102f883a 	mov	r23,r2
   17534:	10002926 	beq	r2,zero,175dc <__sfvwrite_r+0x4ac>
   17538:	81400417 	ldw	r5,16(r16)
   1753c:	b00d883a 	mov	r6,r22
   17540:	1009883a 	mov	r4,r2
   17544:	000b4600 	call	b460 <memcpy>
   17548:	8080030b 	ldhu	r2,12(r16)
   1754c:	00fedfc4 	movi	r3,-1153
   17550:	10c4703a 	and	r2,r2,r3
   17554:	10802014 	ori	r2,r2,128
   17558:	8080030d 	sth	r2,12(r16)
   1755c:	bd89883a 	add	r4,r23,r22
   17560:	9d8fc83a 	sub	r7,r19,r22
   17564:	85c00415 	stw	r23,16(r16)
   17568:	84c00515 	stw	r19,20(r16)
   1756c:	81000015 	stw	r4,0(r16)
   17570:	9027883a 	mov	r19,r18
   17574:	81c00215 	stw	r7,8(r16)
   17578:	902f883a 	mov	r23,r18
   1757c:	003f3b06 	br	1726c <__sfvwrite_r+0x13c>
   17580:	800b883a 	mov	r5,r16
   17584:	a809883a 	mov	r4,r21
   17588:	00117f00 	call	117f0 <_fflush_r>
   1758c:	103fb926 	beq	r2,zero,17474 <__sfvwrite_r+0x344>
   17590:	003f6506 	br	17328 <__sfvwrite_r+0x1f8>
   17594:	a809883a 	mov	r4,r21
   17598:	001785c0 	call	1785c <_realloc_r>
   1759c:	102f883a 	mov	r23,r2
   175a0:	103fee1e 	bne	r2,zero,1755c <__sfvwrite_r+0x42c>
   175a4:	81400417 	ldw	r5,16(r16)
   175a8:	a809883a 	mov	r4,r21
   175ac:	0011d400 	call	11d40 <_free_r>
   175b0:	8080030b 	ldhu	r2,12(r16)
   175b4:	00ffdfc4 	movi	r3,-129
   175b8:	1884703a 	and	r2,r3,r2
   175bc:	00c00304 	movi	r3,12
   175c0:	a8c00015 	stw	r3,0(r21)
   175c4:	003f5906 	br	1732c <__sfvwrite_r+0x1fc>
   175c8:	94c00044 	addi	r19,r18,1
   175cc:	02000044 	movi	r8,1
   175d0:	003f6006 	br	17354 <__sfvwrite_r+0x224>
   175d4:	00bfffc4 	movi	r2,-1
   175d8:	003f0306 	br	171e8 <__sfvwrite_r+0xb8>
   175dc:	00800304 	movi	r2,12
   175e0:	a8800015 	stw	r2,0(r21)
   175e4:	8080030b 	ldhu	r2,12(r16)
   175e8:	003f5006 	br	1732c <__sfvwrite_r+0x1fc>

000175ec <_isatty_r>:
   175ec:	defffd04 	addi	sp,sp,-12
   175f0:	dc000015 	stw	r16,0(sp)
   175f4:	040000f4 	movhi	r16,3
   175f8:	dc400115 	stw	r17,4(sp)
   175fc:	842e3a04 	addi	r16,r16,-18200
   17600:	2023883a 	mov	r17,r4
   17604:	2809883a 	mov	r4,r5
   17608:	dfc00215 	stw	ra,8(sp)
   1760c:	80000015 	stw	zero,0(r16)
   17610:	001b4ec0 	call	1b4ec <isatty>
   17614:	00ffffc4 	movi	r3,-1
   17618:	10c00526 	beq	r2,r3,17630 <_isatty_r+0x44>
   1761c:	dfc00217 	ldw	ra,8(sp)
   17620:	dc400117 	ldw	r17,4(sp)
   17624:	dc000017 	ldw	r16,0(sp)
   17628:	dec00304 	addi	sp,sp,12
   1762c:	f800283a 	ret
   17630:	80c00017 	ldw	r3,0(r16)
   17634:	183ff926 	beq	r3,zero,1761c <_isatty_r+0x30>
   17638:	88c00015 	stw	r3,0(r17)
   1763c:	003ff706 	br	1761c <_isatty_r+0x30>

00017640 <_lseek_r>:
   17640:	defffd04 	addi	sp,sp,-12
   17644:	2805883a 	mov	r2,r5
   17648:	dc000015 	stw	r16,0(sp)
   1764c:	040000f4 	movhi	r16,3
   17650:	dc400115 	stw	r17,4(sp)
   17654:	300b883a 	mov	r5,r6
   17658:	842e3a04 	addi	r16,r16,-18200
   1765c:	2023883a 	mov	r17,r4
   17660:	380d883a 	mov	r6,r7
   17664:	1009883a 	mov	r4,r2
   17668:	dfc00215 	stw	ra,8(sp)
   1766c:	80000015 	stw	zero,0(r16)
   17670:	001b6b80 	call	1b6b8 <lseek>
   17674:	00ffffc4 	movi	r3,-1
   17678:	10c00526 	beq	r2,r3,17690 <_lseek_r+0x50>
   1767c:	dfc00217 	ldw	ra,8(sp)
   17680:	dc400117 	ldw	r17,4(sp)
   17684:	dc000017 	ldw	r16,0(sp)
   17688:	dec00304 	addi	sp,sp,12
   1768c:	f800283a 	ret
   17690:	80c00017 	ldw	r3,0(r16)
   17694:	183ff926 	beq	r3,zero,1767c <_lseek_r+0x3c>
   17698:	88c00015 	stw	r3,0(r17)
   1769c:	003ff706 	br	1767c <_lseek_r+0x3c>

000176a0 <memmove>:
   176a0:	2005883a 	mov	r2,r4
   176a4:	29000b2e 	bgeu	r5,r4,176d4 <memmove+0x34>
   176a8:	298f883a 	add	r7,r5,r6
   176ac:	21c0092e 	bgeu	r4,r7,176d4 <memmove+0x34>
   176b0:	2187883a 	add	r3,r4,r6
   176b4:	198bc83a 	sub	r5,r3,r6
   176b8:	30004826 	beq	r6,zero,177dc <memmove+0x13c>
   176bc:	39ffffc4 	addi	r7,r7,-1
   176c0:	39000003 	ldbu	r4,0(r7)
   176c4:	18ffffc4 	addi	r3,r3,-1
   176c8:	19000005 	stb	r4,0(r3)
   176cc:	28fffb1e 	bne	r5,r3,176bc <memmove+0x1c>
   176d0:	f800283a 	ret
   176d4:	00c003c4 	movi	r3,15
   176d8:	1980412e 	bgeu	r3,r6,177e0 <memmove+0x140>
   176dc:	2886b03a 	or	r3,r5,r2
   176e0:	18c000cc 	andi	r3,r3,3
   176e4:	1800401e 	bne	r3,zero,177e8 <memmove+0x148>
   176e8:	33fffc04 	addi	r15,r6,-16
   176ec:	781ed13a 	srli	r15,r15,4
   176f0:	28c00104 	addi	r3,r5,4
   176f4:	13400104 	addi	r13,r2,4
   176f8:	781c913a 	slli	r14,r15,4
   176fc:	2b000204 	addi	r12,r5,8
   17700:	12c00204 	addi	r11,r2,8
   17704:	73800504 	addi	r14,r14,20
   17708:	2a800304 	addi	r10,r5,12
   1770c:	12400304 	addi	r9,r2,12
   17710:	2b9d883a 	add	r14,r5,r14
   17714:	2811883a 	mov	r8,r5
   17718:	100f883a 	mov	r7,r2
   1771c:	41000017 	ldw	r4,0(r8)
   17720:	39c00404 	addi	r7,r7,16
   17724:	18c00404 	addi	r3,r3,16
   17728:	393ffc15 	stw	r4,-16(r7)
   1772c:	193ffc17 	ldw	r4,-16(r3)
   17730:	6b400404 	addi	r13,r13,16
   17734:	5ac00404 	addi	r11,r11,16
   17738:	693ffc15 	stw	r4,-16(r13)
   1773c:	61000017 	ldw	r4,0(r12)
   17740:	4a400404 	addi	r9,r9,16
   17744:	42000404 	addi	r8,r8,16
   17748:	593ffc15 	stw	r4,-16(r11)
   1774c:	51000017 	ldw	r4,0(r10)
   17750:	63000404 	addi	r12,r12,16
   17754:	52800404 	addi	r10,r10,16
   17758:	493ffc15 	stw	r4,-16(r9)
   1775c:	1bbfef1e 	bne	r3,r14,1771c <memmove+0x7c>
   17760:	79000044 	addi	r4,r15,1
   17764:	2008913a 	slli	r4,r4,4
   17768:	328003cc 	andi	r10,r6,15
   1776c:	02c000c4 	movi	r11,3
   17770:	1107883a 	add	r3,r2,r4
   17774:	290b883a 	add	r5,r5,r4
   17778:	5a801e2e 	bgeu	r11,r10,177f4 <memmove+0x154>
   1777c:	1813883a 	mov	r9,r3
   17780:	2811883a 	mov	r8,r5
   17784:	500f883a 	mov	r7,r10
   17788:	41000017 	ldw	r4,0(r8)
   1778c:	4a400104 	addi	r9,r9,4
   17790:	39ffff04 	addi	r7,r7,-4
   17794:	493fff15 	stw	r4,-4(r9)
   17798:	42000104 	addi	r8,r8,4
   1779c:	59fffa36 	bltu	r11,r7,17788 <memmove+0xe8>
   177a0:	513fff04 	addi	r4,r10,-4
   177a4:	2008d0ba 	srli	r4,r4,2
   177a8:	318000cc 	andi	r6,r6,3
   177ac:	21000044 	addi	r4,r4,1
   177b0:	2109883a 	add	r4,r4,r4
   177b4:	2109883a 	add	r4,r4,r4
   177b8:	1907883a 	add	r3,r3,r4
   177bc:	290b883a 	add	r5,r5,r4
   177c0:	30000b26 	beq	r6,zero,177f0 <memmove+0x150>
   177c4:	198d883a 	add	r6,r3,r6
   177c8:	29c00003 	ldbu	r7,0(r5)
   177cc:	18c00044 	addi	r3,r3,1
   177d0:	29400044 	addi	r5,r5,1
   177d4:	19ffffc5 	stb	r7,-1(r3)
   177d8:	19bffb1e 	bne	r3,r6,177c8 <memmove+0x128>
   177dc:	f800283a 	ret
   177e0:	1007883a 	mov	r3,r2
   177e4:	003ff606 	br	177c0 <memmove+0x120>
   177e8:	1007883a 	mov	r3,r2
   177ec:	003ff506 	br	177c4 <memmove+0x124>
   177f0:	f800283a 	ret
   177f4:	500d883a 	mov	r6,r10
   177f8:	003ff106 	br	177c0 <memmove+0x120>

000177fc <_read_r>:
   177fc:	defffd04 	addi	sp,sp,-12
   17800:	2805883a 	mov	r2,r5
   17804:	dc000015 	stw	r16,0(sp)
   17808:	040000f4 	movhi	r16,3
   1780c:	dc400115 	stw	r17,4(sp)
   17810:	300b883a 	mov	r5,r6
   17814:	842e3a04 	addi	r16,r16,-18200
   17818:	2023883a 	mov	r17,r4
   1781c:	380d883a 	mov	r6,r7
   17820:	1009883a 	mov	r4,r2
   17824:	dfc00215 	stw	ra,8(sp)
   17828:	80000015 	stw	zero,0(r16)
   1782c:	001b8840 	call	1b884 <read>
   17830:	00ffffc4 	movi	r3,-1
   17834:	10c00526 	beq	r2,r3,1784c <_read_r+0x50>
   17838:	dfc00217 	ldw	ra,8(sp)
   1783c:	dc400117 	ldw	r17,4(sp)
   17840:	dc000017 	ldw	r16,0(sp)
   17844:	dec00304 	addi	sp,sp,12
   17848:	f800283a 	ret
   1784c:	80c00017 	ldw	r3,0(r16)
   17850:	183ff926 	beq	r3,zero,17838 <_read_r+0x3c>
   17854:	88c00015 	stw	r3,0(r17)
   17858:	003ff706 	br	17838 <_read_r+0x3c>

0001785c <_realloc_r>:
   1785c:	defff604 	addi	sp,sp,-40
   17860:	dc800215 	stw	r18,8(sp)
   17864:	dfc00915 	stw	ra,36(sp)
   17868:	df000815 	stw	fp,32(sp)
   1786c:	ddc00715 	stw	r23,28(sp)
   17870:	dd800615 	stw	r22,24(sp)
   17874:	dd400515 	stw	r21,20(sp)
   17878:	dd000415 	stw	r20,16(sp)
   1787c:	dcc00315 	stw	r19,12(sp)
   17880:	dc400115 	stw	r17,4(sp)
   17884:	dc000015 	stw	r16,0(sp)
   17888:	3025883a 	mov	r18,r6
   1788c:	2800b726 	beq	r5,zero,17b6c <_realloc_r+0x310>
   17890:	282b883a 	mov	r21,r5
   17894:	2029883a 	mov	r20,r4
   17898:	001bcec0 	call	1bcec <__malloc_lock>
   1789c:	a8bfff17 	ldw	r2,-4(r21)
   178a0:	043fff04 	movi	r16,-4
   178a4:	90c002c4 	addi	r3,r18,11
   178a8:	01000584 	movi	r4,22
   178ac:	acfffe04 	addi	r19,r21,-8
   178b0:	1420703a 	and	r16,r2,r16
   178b4:	20c0332e 	bgeu	r4,r3,17984 <_realloc_r+0x128>
   178b8:	047ffe04 	movi	r17,-8
   178bc:	1c62703a 	and	r17,r3,r17
   178c0:	8807883a 	mov	r3,r17
   178c4:	88005816 	blt	r17,zero,17a28 <_realloc_r+0x1cc>
   178c8:	8c805736 	bltu	r17,r18,17a28 <_realloc_r+0x1cc>
   178cc:	80c0300e 	bge	r16,r3,17990 <_realloc_r+0x134>
   178d0:	070000f4 	movhi	fp,3
   178d4:	e7204304 	addi	fp,fp,-32500
   178d8:	e1c00217 	ldw	r7,8(fp)
   178dc:	9c09883a 	add	r4,r19,r16
   178e0:	22000117 	ldw	r8,4(r4)
   178e4:	21c06326 	beq	r4,r7,17a74 <_realloc_r+0x218>
   178e8:	017fff84 	movi	r5,-2
   178ec:	414a703a 	and	r5,r8,r5
   178f0:	214b883a 	add	r5,r4,r5
   178f4:	29800117 	ldw	r6,4(r5)
   178f8:	3180004c 	andi	r6,r6,1
   178fc:	30003f26 	beq	r6,zero,179fc <_realloc_r+0x1a0>
   17900:	1080004c 	andi	r2,r2,1
   17904:	10008326 	beq	r2,zero,17b14 <_realloc_r+0x2b8>
   17908:	900b883a 	mov	r5,r18
   1790c:	a009883a 	mov	r4,r20
   17910:	00124700 	call	12470 <_malloc_r>
   17914:	1025883a 	mov	r18,r2
   17918:	10011e26 	beq	r2,zero,17d94 <_realloc_r+0x538>
   1791c:	a93fff17 	ldw	r4,-4(r21)
   17920:	10fffe04 	addi	r3,r2,-8
   17924:	00bfff84 	movi	r2,-2
   17928:	2084703a 	and	r2,r4,r2
   1792c:	9885883a 	add	r2,r19,r2
   17930:	1880ee26 	beq	r3,r2,17cec <_realloc_r+0x490>
   17934:	81bfff04 	addi	r6,r16,-4
   17938:	00800904 	movi	r2,36
   1793c:	1180b836 	bltu	r2,r6,17c20 <_realloc_r+0x3c4>
   17940:	00c004c4 	movi	r3,19
   17944:	19809636 	bltu	r3,r6,17ba0 <_realloc_r+0x344>
   17948:	9005883a 	mov	r2,r18
   1794c:	a807883a 	mov	r3,r21
   17950:	19000017 	ldw	r4,0(r3)
   17954:	11000015 	stw	r4,0(r2)
   17958:	19000117 	ldw	r4,4(r3)
   1795c:	11000115 	stw	r4,4(r2)
   17960:	18c00217 	ldw	r3,8(r3)
   17964:	10c00215 	stw	r3,8(r2)
   17968:	a80b883a 	mov	r5,r21
   1796c:	a009883a 	mov	r4,r20
   17970:	0011d400 	call	11d40 <_free_r>
   17974:	a009883a 	mov	r4,r20
   17978:	001be0c0 	call	1be0c <__malloc_unlock>
   1797c:	9005883a 	mov	r2,r18
   17980:	00001206 	br	179cc <_realloc_r+0x170>
   17984:	00c00404 	movi	r3,16
   17988:	1823883a 	mov	r17,r3
   1798c:	003fce06 	br	178c8 <_realloc_r+0x6c>
   17990:	a825883a 	mov	r18,r21
   17994:	8445c83a 	sub	r2,r16,r17
   17998:	00c003c4 	movi	r3,15
   1799c:	18802636 	bltu	r3,r2,17a38 <_realloc_r+0x1dc>
   179a0:	99800117 	ldw	r6,4(r19)
   179a4:	9c07883a 	add	r3,r19,r16
   179a8:	3180004c 	andi	r6,r6,1
   179ac:	3420b03a 	or	r16,r6,r16
   179b0:	9c000115 	stw	r16,4(r19)
   179b4:	18800117 	ldw	r2,4(r3)
   179b8:	10800054 	ori	r2,r2,1
   179bc:	18800115 	stw	r2,4(r3)
   179c0:	a009883a 	mov	r4,r20
   179c4:	001be0c0 	call	1be0c <__malloc_unlock>
   179c8:	9005883a 	mov	r2,r18
   179cc:	dfc00917 	ldw	ra,36(sp)
   179d0:	df000817 	ldw	fp,32(sp)
   179d4:	ddc00717 	ldw	r23,28(sp)
   179d8:	dd800617 	ldw	r22,24(sp)
   179dc:	dd400517 	ldw	r21,20(sp)
   179e0:	dd000417 	ldw	r20,16(sp)
   179e4:	dcc00317 	ldw	r19,12(sp)
   179e8:	dc800217 	ldw	r18,8(sp)
   179ec:	dc400117 	ldw	r17,4(sp)
   179f0:	dc000017 	ldw	r16,0(sp)
   179f4:	dec00a04 	addi	sp,sp,40
   179f8:	f800283a 	ret
   179fc:	017fff04 	movi	r5,-4
   17a00:	414a703a 	and	r5,r8,r5
   17a04:	814d883a 	add	r6,r16,r5
   17a08:	30c01f16 	blt	r6,r3,17a88 <_realloc_r+0x22c>
   17a0c:	20800317 	ldw	r2,12(r4)
   17a10:	20c00217 	ldw	r3,8(r4)
   17a14:	a825883a 	mov	r18,r21
   17a18:	3021883a 	mov	r16,r6
   17a1c:	18800315 	stw	r2,12(r3)
   17a20:	10c00215 	stw	r3,8(r2)
   17a24:	003fdb06 	br	17994 <_realloc_r+0x138>
   17a28:	00800304 	movi	r2,12
   17a2c:	a0800015 	stw	r2,0(r20)
   17a30:	0005883a 	mov	r2,zero
   17a34:	003fe506 	br	179cc <_realloc_r+0x170>
   17a38:	98c00117 	ldw	r3,4(r19)
   17a3c:	9c4b883a 	add	r5,r19,r17
   17a40:	11000054 	ori	r4,r2,1
   17a44:	18c0004c 	andi	r3,r3,1
   17a48:	1c62b03a 	or	r17,r3,r17
   17a4c:	9c400115 	stw	r17,4(r19)
   17a50:	29000115 	stw	r4,4(r5)
   17a54:	2885883a 	add	r2,r5,r2
   17a58:	10c00117 	ldw	r3,4(r2)
   17a5c:	29400204 	addi	r5,r5,8
   17a60:	a009883a 	mov	r4,r20
   17a64:	18c00054 	ori	r3,r3,1
   17a68:	10c00115 	stw	r3,4(r2)
   17a6c:	0011d400 	call	11d40 <_free_r>
   17a70:	003fd306 	br	179c0 <_realloc_r+0x164>
   17a74:	017fff04 	movi	r5,-4
   17a78:	414a703a 	and	r5,r8,r5
   17a7c:	89800404 	addi	r6,r17,16
   17a80:	8151883a 	add	r8,r16,r5
   17a84:	4180590e 	bge	r8,r6,17bec <_realloc_r+0x390>
   17a88:	1080004c 	andi	r2,r2,1
   17a8c:	103f9e1e 	bne	r2,zero,17908 <_realloc_r+0xac>
   17a90:	adbffe17 	ldw	r22,-8(r21)
   17a94:	00bfff04 	movi	r2,-4
   17a98:	9dadc83a 	sub	r22,r19,r22
   17a9c:	b1800117 	ldw	r6,4(r22)
   17aa0:	3084703a 	and	r2,r6,r2
   17aa4:	20002026 	beq	r4,zero,17b28 <_realloc_r+0x2cc>
   17aa8:	80af883a 	add	r23,r16,r2
   17aac:	b96f883a 	add	r23,r23,r5
   17ab0:	21c05f26 	beq	r4,r7,17c30 <_realloc_r+0x3d4>
   17ab4:	b8c01c16 	blt	r23,r3,17b28 <_realloc_r+0x2cc>
   17ab8:	20800317 	ldw	r2,12(r4)
   17abc:	20c00217 	ldw	r3,8(r4)
   17ac0:	81bfff04 	addi	r6,r16,-4
   17ac4:	01000904 	movi	r4,36
   17ac8:	18800315 	stw	r2,12(r3)
   17acc:	10c00215 	stw	r3,8(r2)
   17ad0:	b0c00217 	ldw	r3,8(r22)
   17ad4:	b0800317 	ldw	r2,12(r22)
   17ad8:	b4800204 	addi	r18,r22,8
   17adc:	18800315 	stw	r2,12(r3)
   17ae0:	10c00215 	stw	r3,8(r2)
   17ae4:	21801b36 	bltu	r4,r6,17b54 <_realloc_r+0x2f8>
   17ae8:	008004c4 	movi	r2,19
   17aec:	1180352e 	bgeu	r2,r6,17bc4 <_realloc_r+0x368>
   17af0:	a8800017 	ldw	r2,0(r21)
   17af4:	b0800215 	stw	r2,8(r22)
   17af8:	a8800117 	ldw	r2,4(r21)
   17afc:	b0800315 	stw	r2,12(r22)
   17b00:	008006c4 	movi	r2,27
   17b04:	11807f36 	bltu	r2,r6,17d04 <_realloc_r+0x4a8>
   17b08:	b0800404 	addi	r2,r22,16
   17b0c:	ad400204 	addi	r21,r21,8
   17b10:	00002d06 	br	17bc8 <_realloc_r+0x36c>
   17b14:	adbffe17 	ldw	r22,-8(r21)
   17b18:	00bfff04 	movi	r2,-4
   17b1c:	9dadc83a 	sub	r22,r19,r22
   17b20:	b1000117 	ldw	r4,4(r22)
   17b24:	2084703a 	and	r2,r4,r2
   17b28:	b03f7726 	beq	r22,zero,17908 <_realloc_r+0xac>
   17b2c:	80af883a 	add	r23,r16,r2
   17b30:	b8ff7516 	blt	r23,r3,17908 <_realloc_r+0xac>
   17b34:	b0800317 	ldw	r2,12(r22)
   17b38:	b0c00217 	ldw	r3,8(r22)
   17b3c:	81bfff04 	addi	r6,r16,-4
   17b40:	01000904 	movi	r4,36
   17b44:	18800315 	stw	r2,12(r3)
   17b48:	10c00215 	stw	r3,8(r2)
   17b4c:	b4800204 	addi	r18,r22,8
   17b50:	21bfe52e 	bgeu	r4,r6,17ae8 <_realloc_r+0x28c>
   17b54:	a80b883a 	mov	r5,r21
   17b58:	9009883a 	mov	r4,r18
   17b5c:	00176a00 	call	176a0 <memmove>
   17b60:	b821883a 	mov	r16,r23
   17b64:	b027883a 	mov	r19,r22
   17b68:	003f8a06 	br	17994 <_realloc_r+0x138>
   17b6c:	300b883a 	mov	r5,r6
   17b70:	dfc00917 	ldw	ra,36(sp)
   17b74:	df000817 	ldw	fp,32(sp)
   17b78:	ddc00717 	ldw	r23,28(sp)
   17b7c:	dd800617 	ldw	r22,24(sp)
   17b80:	dd400517 	ldw	r21,20(sp)
   17b84:	dd000417 	ldw	r20,16(sp)
   17b88:	dcc00317 	ldw	r19,12(sp)
   17b8c:	dc800217 	ldw	r18,8(sp)
   17b90:	dc400117 	ldw	r17,4(sp)
   17b94:	dc000017 	ldw	r16,0(sp)
   17b98:	dec00a04 	addi	sp,sp,40
   17b9c:	00124701 	jmpi	12470 <_malloc_r>
   17ba0:	a8c00017 	ldw	r3,0(r21)
   17ba4:	90c00015 	stw	r3,0(r18)
   17ba8:	a8c00117 	ldw	r3,4(r21)
   17bac:	90c00115 	stw	r3,4(r18)
   17bb0:	00c006c4 	movi	r3,27
   17bb4:	19804536 	bltu	r3,r6,17ccc <_realloc_r+0x470>
   17bb8:	90800204 	addi	r2,r18,8
   17bbc:	a8c00204 	addi	r3,r21,8
   17bc0:	003f6306 	br	17950 <_realloc_r+0xf4>
   17bc4:	9005883a 	mov	r2,r18
   17bc8:	a8c00017 	ldw	r3,0(r21)
   17bcc:	b821883a 	mov	r16,r23
   17bd0:	b027883a 	mov	r19,r22
   17bd4:	10c00015 	stw	r3,0(r2)
   17bd8:	a8c00117 	ldw	r3,4(r21)
   17bdc:	10c00115 	stw	r3,4(r2)
   17be0:	a8c00217 	ldw	r3,8(r21)
   17be4:	10c00215 	stw	r3,8(r2)
   17be8:	003f6a06 	br	17994 <_realloc_r+0x138>
   17bec:	9c67883a 	add	r19,r19,r17
   17bf0:	4445c83a 	sub	r2,r8,r17
   17bf4:	e4c00215 	stw	r19,8(fp)
   17bf8:	10800054 	ori	r2,r2,1
   17bfc:	98800115 	stw	r2,4(r19)
   17c00:	a8bfff17 	ldw	r2,-4(r21)
   17c04:	a009883a 	mov	r4,r20
   17c08:	1080004c 	andi	r2,r2,1
   17c0c:	1462b03a 	or	r17,r2,r17
   17c10:	ac7fff15 	stw	r17,-4(r21)
   17c14:	001be0c0 	call	1be0c <__malloc_unlock>
   17c18:	a805883a 	mov	r2,r21
   17c1c:	003f6b06 	br	179cc <_realloc_r+0x170>
   17c20:	a80b883a 	mov	r5,r21
   17c24:	9009883a 	mov	r4,r18
   17c28:	00176a00 	call	176a0 <memmove>
   17c2c:	003f4e06 	br	17968 <_realloc_r+0x10c>
   17c30:	89000404 	addi	r4,r17,16
   17c34:	b93fbc16 	blt	r23,r4,17b28 <_realloc_r+0x2cc>
   17c38:	b0800317 	ldw	r2,12(r22)
   17c3c:	b0c00217 	ldw	r3,8(r22)
   17c40:	81bfff04 	addi	r6,r16,-4
   17c44:	01000904 	movi	r4,36
   17c48:	18800315 	stw	r2,12(r3)
   17c4c:	10c00215 	stw	r3,8(r2)
   17c50:	b4800204 	addi	r18,r22,8
   17c54:	21804336 	bltu	r4,r6,17d64 <_realloc_r+0x508>
   17c58:	008004c4 	movi	r2,19
   17c5c:	11803f2e 	bgeu	r2,r6,17d5c <_realloc_r+0x500>
   17c60:	a8800017 	ldw	r2,0(r21)
   17c64:	b0800215 	stw	r2,8(r22)
   17c68:	a8800117 	ldw	r2,4(r21)
   17c6c:	b0800315 	stw	r2,12(r22)
   17c70:	008006c4 	movi	r2,27
   17c74:	11803f36 	bltu	r2,r6,17d74 <_realloc_r+0x518>
   17c78:	b0800404 	addi	r2,r22,16
   17c7c:	ad400204 	addi	r21,r21,8
   17c80:	a8c00017 	ldw	r3,0(r21)
   17c84:	10c00015 	stw	r3,0(r2)
   17c88:	a8c00117 	ldw	r3,4(r21)
   17c8c:	10c00115 	stw	r3,4(r2)
   17c90:	a8c00217 	ldw	r3,8(r21)
   17c94:	10c00215 	stw	r3,8(r2)
   17c98:	b447883a 	add	r3,r22,r17
   17c9c:	bc45c83a 	sub	r2,r23,r17
   17ca0:	e0c00215 	stw	r3,8(fp)
   17ca4:	10800054 	ori	r2,r2,1
   17ca8:	18800115 	stw	r2,4(r3)
   17cac:	b0800117 	ldw	r2,4(r22)
   17cb0:	a009883a 	mov	r4,r20
   17cb4:	1080004c 	andi	r2,r2,1
   17cb8:	1462b03a 	or	r17,r2,r17
   17cbc:	b4400115 	stw	r17,4(r22)
   17cc0:	001be0c0 	call	1be0c <__malloc_unlock>
   17cc4:	9005883a 	mov	r2,r18
   17cc8:	003f4006 	br	179cc <_realloc_r+0x170>
   17ccc:	a8c00217 	ldw	r3,8(r21)
   17cd0:	90c00215 	stw	r3,8(r18)
   17cd4:	a8c00317 	ldw	r3,12(r21)
   17cd8:	90c00315 	stw	r3,12(r18)
   17cdc:	30801126 	beq	r6,r2,17d24 <_realloc_r+0x4c8>
   17ce0:	90800404 	addi	r2,r18,16
   17ce4:	a8c00404 	addi	r3,r21,16
   17ce8:	003f1906 	br	17950 <_realloc_r+0xf4>
   17cec:	90ffff17 	ldw	r3,-4(r18)
   17cf0:	00bfff04 	movi	r2,-4
   17cf4:	a825883a 	mov	r18,r21
   17cf8:	1884703a 	and	r2,r3,r2
   17cfc:	80a1883a 	add	r16,r16,r2
   17d00:	003f2406 	br	17994 <_realloc_r+0x138>
   17d04:	a8800217 	ldw	r2,8(r21)
   17d08:	b0800415 	stw	r2,16(r22)
   17d0c:	a8800317 	ldw	r2,12(r21)
   17d10:	b0800515 	stw	r2,20(r22)
   17d14:	31000a26 	beq	r6,r4,17d40 <_realloc_r+0x4e4>
   17d18:	b0800604 	addi	r2,r22,24
   17d1c:	ad400404 	addi	r21,r21,16
   17d20:	003fa906 	br	17bc8 <_realloc_r+0x36c>
   17d24:	a9000417 	ldw	r4,16(r21)
   17d28:	90800604 	addi	r2,r18,24
   17d2c:	a8c00604 	addi	r3,r21,24
   17d30:	91000415 	stw	r4,16(r18)
   17d34:	a9000517 	ldw	r4,20(r21)
   17d38:	91000515 	stw	r4,20(r18)
   17d3c:	003f0406 	br	17950 <_realloc_r+0xf4>
   17d40:	a8c00417 	ldw	r3,16(r21)
   17d44:	ad400604 	addi	r21,r21,24
   17d48:	b0800804 	addi	r2,r22,32
   17d4c:	b0c00615 	stw	r3,24(r22)
   17d50:	a8ffff17 	ldw	r3,-4(r21)
   17d54:	b0c00715 	stw	r3,28(r22)
   17d58:	003f9b06 	br	17bc8 <_realloc_r+0x36c>
   17d5c:	9005883a 	mov	r2,r18
   17d60:	003fc706 	br	17c80 <_realloc_r+0x424>
   17d64:	a80b883a 	mov	r5,r21
   17d68:	9009883a 	mov	r4,r18
   17d6c:	00176a00 	call	176a0 <memmove>
   17d70:	003fc906 	br	17c98 <_realloc_r+0x43c>
   17d74:	a8800217 	ldw	r2,8(r21)
   17d78:	b0800415 	stw	r2,16(r22)
   17d7c:	a8800317 	ldw	r2,12(r21)
   17d80:	b0800515 	stw	r2,20(r22)
   17d84:	31000726 	beq	r6,r4,17da4 <_realloc_r+0x548>
   17d88:	b0800604 	addi	r2,r22,24
   17d8c:	ad400404 	addi	r21,r21,16
   17d90:	003fbb06 	br	17c80 <_realloc_r+0x424>
   17d94:	a009883a 	mov	r4,r20
   17d98:	001be0c0 	call	1be0c <__malloc_unlock>
   17d9c:	0005883a 	mov	r2,zero
   17da0:	003f0a06 	br	179cc <_realloc_r+0x170>
   17da4:	a8c00417 	ldw	r3,16(r21)
   17da8:	ad400604 	addi	r21,r21,24
   17dac:	b0800804 	addi	r2,r22,32
   17db0:	b0c00615 	stw	r3,24(r22)
   17db4:	a8ffff17 	ldw	r3,-4(r21)
   17db8:	b0c00715 	stw	r3,28(r22)
   17dbc:	003fb006 	br	17c80 <_realloc_r+0x424>

00017dc0 <__swbuf_r>:
   17dc0:	defffb04 	addi	sp,sp,-20
   17dc4:	dcc00315 	stw	r19,12(sp)
   17dc8:	dc800215 	stw	r18,8(sp)
   17dcc:	dc000015 	stw	r16,0(sp)
   17dd0:	dfc00415 	stw	ra,16(sp)
   17dd4:	dc400115 	stw	r17,4(sp)
   17dd8:	2025883a 	mov	r18,r4
   17ddc:	2827883a 	mov	r19,r5
   17de0:	3021883a 	mov	r16,r6
   17de4:	20000226 	beq	r4,zero,17df0 <__swbuf_r+0x30>
   17de8:	20800e17 	ldw	r2,56(r4)
   17dec:	10004226 	beq	r2,zero,17ef8 <__swbuf_r+0x138>
   17df0:	80800617 	ldw	r2,24(r16)
   17df4:	8100030b 	ldhu	r4,12(r16)
   17df8:	80800215 	stw	r2,8(r16)
   17dfc:	2080020c 	andi	r2,r4,8
   17e00:	10003626 	beq	r2,zero,17edc <__swbuf_r+0x11c>
   17e04:	80c00417 	ldw	r3,16(r16)
   17e08:	18003426 	beq	r3,zero,17edc <__swbuf_r+0x11c>
   17e0c:	2088000c 	andi	r2,r4,8192
   17e10:	9c403fcc 	andi	r17,r19,255
   17e14:	10001a26 	beq	r2,zero,17e80 <__swbuf_r+0xc0>
   17e18:	80800017 	ldw	r2,0(r16)
   17e1c:	81000517 	ldw	r4,20(r16)
   17e20:	10c7c83a 	sub	r3,r2,r3
   17e24:	1900200e 	bge	r3,r4,17ea8 <__swbuf_r+0xe8>
   17e28:	18c00044 	addi	r3,r3,1
   17e2c:	81000217 	ldw	r4,8(r16)
   17e30:	11400044 	addi	r5,r2,1
   17e34:	81400015 	stw	r5,0(r16)
   17e38:	213fffc4 	addi	r4,r4,-1
   17e3c:	81000215 	stw	r4,8(r16)
   17e40:	14c00005 	stb	r19,0(r2)
   17e44:	80800517 	ldw	r2,20(r16)
   17e48:	10c01e26 	beq	r2,r3,17ec4 <__swbuf_r+0x104>
   17e4c:	8080030b 	ldhu	r2,12(r16)
   17e50:	1080004c 	andi	r2,r2,1
   17e54:	10000226 	beq	r2,zero,17e60 <__swbuf_r+0xa0>
   17e58:	00800284 	movi	r2,10
   17e5c:	88801926 	beq	r17,r2,17ec4 <__swbuf_r+0x104>
   17e60:	8805883a 	mov	r2,r17
   17e64:	dfc00417 	ldw	ra,16(sp)
   17e68:	dcc00317 	ldw	r19,12(sp)
   17e6c:	dc800217 	ldw	r18,8(sp)
   17e70:	dc400117 	ldw	r17,4(sp)
   17e74:	dc000017 	ldw	r16,0(sp)
   17e78:	dec00504 	addi	sp,sp,20
   17e7c:	f800283a 	ret
   17e80:	81401917 	ldw	r5,100(r16)
   17e84:	00b7ffc4 	movi	r2,-8193
   17e88:	21080014 	ori	r4,r4,8192
   17e8c:	2884703a 	and	r2,r5,r2
   17e90:	80801915 	stw	r2,100(r16)
   17e94:	80800017 	ldw	r2,0(r16)
   17e98:	8100030d 	sth	r4,12(r16)
   17e9c:	81000517 	ldw	r4,20(r16)
   17ea0:	10c7c83a 	sub	r3,r2,r3
   17ea4:	193fe016 	blt	r3,r4,17e28 <__swbuf_r+0x68>
   17ea8:	800b883a 	mov	r5,r16
   17eac:	9009883a 	mov	r4,r18
   17eb0:	00117f00 	call	117f0 <_fflush_r>
   17eb4:	1000071e 	bne	r2,zero,17ed4 <__swbuf_r+0x114>
   17eb8:	80800017 	ldw	r2,0(r16)
   17ebc:	00c00044 	movi	r3,1
   17ec0:	003fda06 	br	17e2c <__swbuf_r+0x6c>
   17ec4:	800b883a 	mov	r5,r16
   17ec8:	9009883a 	mov	r4,r18
   17ecc:	00117f00 	call	117f0 <_fflush_r>
   17ed0:	103fe326 	beq	r2,zero,17e60 <__swbuf_r+0xa0>
   17ed4:	00bfffc4 	movi	r2,-1
   17ed8:	003fe206 	br	17e64 <__swbuf_r+0xa4>
   17edc:	800b883a 	mov	r5,r16
   17ee0:	9009883a 	mov	r4,r18
   17ee4:	000fbf80 	call	fbf8 <__swsetup_r>
   17ee8:	103ffa1e 	bne	r2,zero,17ed4 <__swbuf_r+0x114>
   17eec:	8100030b 	ldhu	r4,12(r16)
   17ef0:	80c00417 	ldw	r3,16(r16)
   17ef4:	003fc506 	br	17e0c <__swbuf_r+0x4c>
   17ef8:	0011bcc0 	call	11bcc <__sinit>
   17efc:	003fbc06 	br	17df0 <__swbuf_r+0x30>

00017f00 <__swbuf>:
   17f00:	008000f4 	movhi	r2,3
   17f04:	10a66f04 	addi	r2,r2,-26180
   17f08:	280d883a 	mov	r6,r5
   17f0c:	200b883a 	mov	r5,r4
   17f10:	11000017 	ldw	r4,0(r2)
   17f14:	0017dc01 	jmpi	17dc0 <__swbuf_r>

00017f18 <_wcrtomb_r>:
   17f18:	defff604 	addi	sp,sp,-40
   17f1c:	008000f4 	movhi	r2,3
   17f20:	dc800815 	stw	r18,32(sp)
   17f24:	dc400715 	stw	r17,28(sp)
   17f28:	dc000615 	stw	r16,24(sp)
   17f2c:	10a67304 	addi	r2,r2,-26164
   17f30:	dfc00915 	stw	ra,36(sp)
   17f34:	2021883a 	mov	r16,r4
   17f38:	3823883a 	mov	r17,r7
   17f3c:	14800017 	ldw	r18,0(r2)
   17f40:	28001426 	beq	r5,zero,17f94 <_wcrtomb_r+0x7c>
   17f44:	d9400415 	stw	r5,16(sp)
   17f48:	d9800515 	stw	r6,20(sp)
   17f4c:	00122540 	call	12254 <__locale_charset>
   17f50:	d9800517 	ldw	r6,20(sp)
   17f54:	d9400417 	ldw	r5,16(sp)
   17f58:	100f883a 	mov	r7,r2
   17f5c:	dc400015 	stw	r17,0(sp)
   17f60:	8009883a 	mov	r4,r16
   17f64:	903ee83a 	callr	r18
   17f68:	00ffffc4 	movi	r3,-1
   17f6c:	10c0031e 	bne	r2,r3,17f7c <_wcrtomb_r+0x64>
   17f70:	88000015 	stw	zero,0(r17)
   17f74:	00c02284 	movi	r3,138
   17f78:	80c00015 	stw	r3,0(r16)
   17f7c:	dfc00917 	ldw	ra,36(sp)
   17f80:	dc800817 	ldw	r18,32(sp)
   17f84:	dc400717 	ldw	r17,28(sp)
   17f88:	dc000617 	ldw	r16,24(sp)
   17f8c:	dec00a04 	addi	sp,sp,40
   17f90:	f800283a 	ret
   17f94:	00122540 	call	12254 <__locale_charset>
   17f98:	100f883a 	mov	r7,r2
   17f9c:	dc400015 	stw	r17,0(sp)
   17fa0:	000d883a 	mov	r6,zero
   17fa4:	d9400104 	addi	r5,sp,4
   17fa8:	8009883a 	mov	r4,r16
   17fac:	903ee83a 	callr	r18
   17fb0:	003fed06 	br	17f68 <_wcrtomb_r+0x50>

00017fb4 <wcrtomb>:
   17fb4:	defff604 	addi	sp,sp,-40
   17fb8:	008000f4 	movhi	r2,3
   17fbc:	dc800615 	stw	r18,24(sp)
   17fc0:	dc400515 	stw	r17,20(sp)
   17fc4:	10a66f04 	addi	r2,r2,-26180
   17fc8:	dfc00915 	stw	ra,36(sp)
   17fcc:	dd000815 	stw	r20,32(sp)
   17fd0:	dcc00715 	stw	r19,28(sp)
   17fd4:	dc000415 	stw	r16,16(sp)
   17fd8:	3025883a 	mov	r18,r6
   17fdc:	14400017 	ldw	r17,0(r2)
   17fe0:	20001926 	beq	r4,zero,18048 <wcrtomb+0x94>
   17fe4:	008000f4 	movhi	r2,3
   17fe8:	10a67304 	addi	r2,r2,-26164
   17fec:	15000017 	ldw	r20,0(r2)
   17ff0:	2021883a 	mov	r16,r4
   17ff4:	2827883a 	mov	r19,r5
   17ff8:	00122540 	call	12254 <__locale_charset>
   17ffc:	100f883a 	mov	r7,r2
   18000:	dc800015 	stw	r18,0(sp)
   18004:	980d883a 	mov	r6,r19
   18008:	800b883a 	mov	r5,r16
   1800c:	8809883a 	mov	r4,r17
   18010:	a03ee83a 	callr	r20
   18014:	00ffffc4 	movi	r3,-1
   18018:	10c0031e 	bne	r2,r3,18028 <wcrtomb+0x74>
   1801c:	90000015 	stw	zero,0(r18)
   18020:	00c02284 	movi	r3,138
   18024:	88c00015 	stw	r3,0(r17)
   18028:	dfc00917 	ldw	ra,36(sp)
   1802c:	dd000817 	ldw	r20,32(sp)
   18030:	dcc00717 	ldw	r19,28(sp)
   18034:	dc800617 	ldw	r18,24(sp)
   18038:	dc400517 	ldw	r17,20(sp)
   1803c:	dc000417 	ldw	r16,16(sp)
   18040:	dec00a04 	addi	sp,sp,40
   18044:	f800283a 	ret
   18048:	008000f4 	movhi	r2,3
   1804c:	10a67304 	addi	r2,r2,-26164
   18050:	14000017 	ldw	r16,0(r2)
   18054:	00122540 	call	12254 <__locale_charset>
   18058:	100f883a 	mov	r7,r2
   1805c:	dc800015 	stw	r18,0(sp)
   18060:	000d883a 	mov	r6,zero
   18064:	d9400104 	addi	r5,sp,4
   18068:	8809883a 	mov	r4,r17
   1806c:	803ee83a 	callr	r16
   18070:	003fe806 	br	18014 <wcrtomb+0x60>

00018074 <__ascii_wctomb>:
   18074:	28000526 	beq	r5,zero,1808c <__ascii_wctomb+0x18>
   18078:	00803fc4 	movi	r2,255
   1807c:	11800536 	bltu	r2,r6,18094 <__ascii_wctomb+0x20>
   18080:	29800005 	stb	r6,0(r5)
   18084:	00800044 	movi	r2,1
   18088:	f800283a 	ret
   1808c:	0005883a 	mov	r2,zero
   18090:	f800283a 	ret
   18094:	00802284 	movi	r2,138
   18098:	20800015 	stw	r2,0(r4)
   1809c:	00bfffc4 	movi	r2,-1
   180a0:	f800283a 	ret

000180a4 <_wctomb_r>:
   180a4:	008000f4 	movhi	r2,3
   180a8:	defff904 	addi	sp,sp,-28
   180ac:	10a67304 	addi	r2,r2,-26164
   180b0:	dfc00615 	stw	ra,24(sp)
   180b4:	dc400515 	stw	r17,20(sp)
   180b8:	dc000415 	stw	r16,16(sp)
   180bc:	3823883a 	mov	r17,r7
   180c0:	14000017 	ldw	r16,0(r2)
   180c4:	d9000115 	stw	r4,4(sp)
   180c8:	d9400215 	stw	r5,8(sp)
   180cc:	d9800315 	stw	r6,12(sp)
   180d0:	00122540 	call	12254 <__locale_charset>
   180d4:	d9800317 	ldw	r6,12(sp)
   180d8:	d9400217 	ldw	r5,8(sp)
   180dc:	d9000117 	ldw	r4,4(sp)
   180e0:	100f883a 	mov	r7,r2
   180e4:	dc400015 	stw	r17,0(sp)
   180e8:	803ee83a 	callr	r16
   180ec:	dfc00617 	ldw	ra,24(sp)
   180f0:	dc400517 	ldw	r17,20(sp)
   180f4:	dc000417 	ldw	r16,16(sp)
   180f8:	dec00704 	addi	sp,sp,28
   180fc:	f800283a 	ret

00018100 <__udivdi3>:
   18100:	defff504 	addi	sp,sp,-44
   18104:	dcc00415 	stw	r19,16(sp)
   18108:	dc000115 	stw	r16,4(sp)
   1810c:	dfc00a15 	stw	ra,40(sp)
   18110:	df000915 	stw	fp,36(sp)
   18114:	ddc00815 	stw	r23,32(sp)
   18118:	dd800715 	stw	r22,28(sp)
   1811c:	dd400615 	stw	r21,24(sp)
   18120:	dd000515 	stw	r20,20(sp)
   18124:	dc800315 	stw	r18,12(sp)
   18128:	dc400215 	stw	r17,8(sp)
   1812c:	2027883a 	mov	r19,r4
   18130:	2821883a 	mov	r16,r5
   18134:	3800411e 	bne	r7,zero,1823c <__udivdi3+0x13c>
   18138:	3023883a 	mov	r17,r6
   1813c:	2025883a 	mov	r18,r4
   18140:	2980522e 	bgeu	r5,r6,1828c <__udivdi3+0x18c>
   18144:	00bfffd4 	movui	r2,65535
   18148:	282d883a 	mov	r22,r5
   1814c:	1180a836 	bltu	r2,r6,183f0 <__udivdi3+0x2f0>
   18150:	00803fc4 	movi	r2,255
   18154:	1185803a 	cmpltu	r2,r2,r6
   18158:	100490fa 	slli	r2,r2,3
   1815c:	3086d83a 	srl	r3,r6,r2
   18160:	010000b4 	movhi	r4,2
   18164:	211dc4c4 	addi	r4,r4,30483
   18168:	20c7883a 	add	r3,r4,r3
   1816c:	18c00003 	ldbu	r3,0(r3)
   18170:	1885883a 	add	r2,r3,r2
   18174:	00c00804 	movi	r3,32
   18178:	1887c83a 	sub	r3,r3,r2
   1817c:	18000526 	beq	r3,zero,18194 <__udivdi3+0x94>
   18180:	80e0983a 	sll	r16,r16,r3
   18184:	9884d83a 	srl	r2,r19,r2
   18188:	30e2983a 	sll	r17,r6,r3
   1818c:	98e4983a 	sll	r18,r19,r3
   18190:	142cb03a 	or	r22,r2,r16
   18194:	882ad43a 	srli	r21,r17,16
   18198:	b009883a 	mov	r4,r22
   1819c:	8d3fffcc 	andi	r20,r17,65535
   181a0:	a80b883a 	mov	r5,r21
   181a4:	0018d0c0 	call	18d0c <__umodsi3>
   181a8:	b009883a 	mov	r4,r22
   181ac:	a80b883a 	mov	r5,r21
   181b0:	1027883a 	mov	r19,r2
   181b4:	0018ca80 	call	18ca8 <__udivsi3>
   181b8:	102d883a 	mov	r22,r2
   181bc:	9826943a 	slli	r19,r19,16
   181c0:	9004d43a 	srli	r2,r18,16
   181c4:	a5a1383a 	mul	r16,r20,r22
   181c8:	14c4b03a 	or	r2,r2,r19
   181cc:	1400052e 	bgeu	r2,r16,181e4 <__udivdi3+0xe4>
   181d0:	1445883a 	add	r2,r2,r17
   181d4:	b0ffffc4 	addi	r3,r22,-1
   181d8:	14400136 	bltu	r2,r17,181e0 <__udivdi3+0xe0>
   181dc:	14012336 	bltu	r2,r16,1866c <__udivdi3+0x56c>
   181e0:	182d883a 	mov	r22,r3
   181e4:	1421c83a 	sub	r16,r2,r16
   181e8:	a80b883a 	mov	r5,r21
   181ec:	8009883a 	mov	r4,r16
   181f0:	0018d0c0 	call	18d0c <__umodsi3>
   181f4:	1027883a 	mov	r19,r2
   181f8:	a80b883a 	mov	r5,r21
   181fc:	8009883a 	mov	r4,r16
   18200:	0018ca80 	call	18ca8 <__udivsi3>
   18204:	9826943a 	slli	r19,r19,16
   18208:	a0a9383a 	mul	r20,r20,r2
   1820c:	94bfffcc 	andi	r18,r18,65535
   18210:	94e4b03a 	or	r18,r18,r19
   18214:	9500052e 	bgeu	r18,r20,1822c <__udivdi3+0x12c>
   18218:	8ca5883a 	add	r18,r17,r18
   1821c:	10ffffc4 	addi	r3,r2,-1
   18220:	9440f136 	bltu	r18,r17,185e8 <__udivdi3+0x4e8>
   18224:	9500f02e 	bgeu	r18,r20,185e8 <__udivdi3+0x4e8>
   18228:	10bfff84 	addi	r2,r2,-2
   1822c:	b00c943a 	slli	r6,r22,16
   18230:	0007883a 	mov	r3,zero
   18234:	3084b03a 	or	r2,r6,r2
   18238:	00005906 	br	183a0 <__udivdi3+0x2a0>
   1823c:	29c05636 	bltu	r5,r7,18398 <__udivdi3+0x298>
   18240:	00bfffd4 	movui	r2,65535
   18244:	11c0622e 	bgeu	r2,r7,183d0 <__udivdi3+0x2d0>
   18248:	00804034 	movhi	r2,256
   1824c:	10bfffc4 	addi	r2,r2,-1
   18250:	11c0ee36 	bltu	r2,r7,1860c <__udivdi3+0x50c>
   18254:	00800404 	movi	r2,16
   18258:	3886d83a 	srl	r3,r7,r2
   1825c:	010000b4 	movhi	r4,2
   18260:	211dc4c4 	addi	r4,r4,30483
   18264:	20c7883a 	add	r3,r4,r3
   18268:	18c00003 	ldbu	r3,0(r3)
   1826c:	05400804 	movi	r21,32
   18270:	1885883a 	add	r2,r3,r2
   18274:	a8abc83a 	sub	r21,r21,r2
   18278:	a800621e 	bne	r21,zero,18404 <__udivdi3+0x304>
   1827c:	3c00e936 	bltu	r7,r16,18624 <__udivdi3+0x524>
   18280:	9985403a 	cmpgeu	r2,r19,r6
   18284:	0007883a 	mov	r3,zero
   18288:	00004506 	br	183a0 <__udivdi3+0x2a0>
   1828c:	3000041e 	bne	r6,zero,182a0 <__udivdi3+0x1a0>
   18290:	000b883a 	mov	r5,zero
   18294:	01000044 	movi	r4,1
   18298:	0018ca80 	call	18ca8 <__udivsi3>
   1829c:	1023883a 	mov	r17,r2
   182a0:	00bfffd4 	movui	r2,65535
   182a4:	14404e2e 	bgeu	r2,r17,183e0 <__udivdi3+0x2e0>
   182a8:	00804034 	movhi	r2,256
   182ac:	10bfffc4 	addi	r2,r2,-1
   182b0:	1440d836 	bltu	r2,r17,18614 <__udivdi3+0x514>
   182b4:	00800404 	movi	r2,16
   182b8:	8886d83a 	srl	r3,r17,r2
   182bc:	010000b4 	movhi	r4,2
   182c0:	211dc4c4 	addi	r4,r4,30483
   182c4:	20c7883a 	add	r3,r4,r3
   182c8:	18c00003 	ldbu	r3,0(r3)
   182cc:	1885883a 	add	r2,r3,r2
   182d0:	00c00804 	movi	r3,32
   182d4:	1887c83a 	sub	r3,r3,r2
   182d8:	18008f1e 	bne	r3,zero,18518 <__udivdi3+0x418>
   182dc:	882ad43a 	srli	r21,r17,16
   182e0:	8461c83a 	sub	r16,r16,r17
   182e4:	8d3fffcc 	andi	r20,r17,65535
   182e8:	00c00044 	movi	r3,1
   182ec:	8009883a 	mov	r4,r16
   182f0:	a80b883a 	mov	r5,r21
   182f4:	d8c00015 	stw	r3,0(sp)
   182f8:	0018d0c0 	call	18d0c <__umodsi3>
   182fc:	8009883a 	mov	r4,r16
   18300:	a80b883a 	mov	r5,r21
   18304:	1027883a 	mov	r19,r2
   18308:	0018ca80 	call	18ca8 <__udivsi3>
   1830c:	9826943a 	slli	r19,r19,16
   18310:	9008d43a 	srli	r4,r18,16
   18314:	1521383a 	mul	r16,r2,r20
   18318:	102d883a 	mov	r22,r2
   1831c:	24c8b03a 	or	r4,r4,r19
   18320:	d8c00017 	ldw	r3,0(sp)
   18324:	2400052e 	bgeu	r4,r16,1833c <__udivdi3+0x23c>
   18328:	2449883a 	add	r4,r4,r17
   1832c:	b0bfffc4 	addi	r2,r22,-1
   18330:	24400136 	bltu	r4,r17,18338 <__udivdi3+0x238>
   18334:	2400ca36 	bltu	r4,r16,18660 <__udivdi3+0x560>
   18338:	102d883a 	mov	r22,r2
   1833c:	2421c83a 	sub	r16,r4,r16
   18340:	a80b883a 	mov	r5,r21
   18344:	8009883a 	mov	r4,r16
   18348:	d8c00015 	stw	r3,0(sp)
   1834c:	0018d0c0 	call	18d0c <__umodsi3>
   18350:	1027883a 	mov	r19,r2
   18354:	a80b883a 	mov	r5,r21
   18358:	8009883a 	mov	r4,r16
   1835c:	0018ca80 	call	18ca8 <__udivsi3>
   18360:	9826943a 	slli	r19,r19,16
   18364:	1529383a 	mul	r20,r2,r20
   18368:	94bfffcc 	andi	r18,r18,65535
   1836c:	94e4b03a 	or	r18,r18,r19
   18370:	d8c00017 	ldw	r3,0(sp)
   18374:	9500052e 	bgeu	r18,r20,1838c <__udivdi3+0x28c>
   18378:	8ca5883a 	add	r18,r17,r18
   1837c:	113fffc4 	addi	r4,r2,-1
   18380:	94409736 	bltu	r18,r17,185e0 <__udivdi3+0x4e0>
   18384:	9500962e 	bgeu	r18,r20,185e0 <__udivdi3+0x4e0>
   18388:	10bfff84 	addi	r2,r2,-2
   1838c:	b00c943a 	slli	r6,r22,16
   18390:	3084b03a 	or	r2,r6,r2
   18394:	00000206 	br	183a0 <__udivdi3+0x2a0>
   18398:	0007883a 	mov	r3,zero
   1839c:	0005883a 	mov	r2,zero
   183a0:	dfc00a17 	ldw	ra,40(sp)
   183a4:	df000917 	ldw	fp,36(sp)
   183a8:	ddc00817 	ldw	r23,32(sp)
   183ac:	dd800717 	ldw	r22,28(sp)
   183b0:	dd400617 	ldw	r21,24(sp)
   183b4:	dd000517 	ldw	r20,20(sp)
   183b8:	dcc00417 	ldw	r19,16(sp)
   183bc:	dc800317 	ldw	r18,12(sp)
   183c0:	dc400217 	ldw	r17,8(sp)
   183c4:	dc000117 	ldw	r16,4(sp)
   183c8:	dec00b04 	addi	sp,sp,44
   183cc:	f800283a 	ret
   183d0:	00803fc4 	movi	r2,255
   183d4:	11c5803a 	cmpltu	r2,r2,r7
   183d8:	100490fa 	slli	r2,r2,3
   183dc:	003f9e06 	br	18258 <__udivdi3+0x158>
   183e0:	00803fc4 	movi	r2,255
   183e4:	1445803a 	cmpltu	r2,r2,r17
   183e8:	100490fa 	slli	r2,r2,3
   183ec:	003fb206 	br	182b8 <__udivdi3+0x1b8>
   183f0:	00804034 	movhi	r2,256
   183f4:	10bfffc4 	addi	r2,r2,-1
   183f8:	11808836 	bltu	r2,r6,1861c <__udivdi3+0x51c>
   183fc:	00800404 	movi	r2,16
   18400:	003f5606 	br	1815c <__udivdi3+0x5c>
   18404:	30aed83a 	srl	r23,r6,r2
   18408:	3d4e983a 	sll	r7,r7,r21
   1840c:	80acd83a 	srl	r22,r16,r2
   18410:	9884d83a 	srl	r2,r19,r2
   18414:	3deeb03a 	or	r23,r7,r23
   18418:	b824d43a 	srli	r18,r23,16
   1841c:	8560983a 	sll	r16,r16,r21
   18420:	b009883a 	mov	r4,r22
   18424:	900b883a 	mov	r5,r18
   18428:	3568983a 	sll	r20,r6,r21
   1842c:	1420b03a 	or	r16,r2,r16
   18430:	0018d0c0 	call	18d0c <__umodsi3>
   18434:	b009883a 	mov	r4,r22
   18438:	900b883a 	mov	r5,r18
   1843c:	1023883a 	mov	r17,r2
   18440:	0018ca80 	call	18ca8 <__udivsi3>
   18444:	8808943a 	slli	r4,r17,16
   18448:	bf3fffcc 	andi	fp,r23,65535
   1844c:	8006d43a 	srli	r3,r16,16
   18450:	e0a3383a 	mul	r17,fp,r2
   18454:	100d883a 	mov	r6,r2
   18458:	1906b03a 	or	r3,r3,r4
   1845c:	1c40042e 	bgeu	r3,r17,18470 <__udivdi3+0x370>
   18460:	1dc7883a 	add	r3,r3,r23
   18464:	10bfffc4 	addi	r2,r2,-1
   18468:	1dc0752e 	bgeu	r3,r23,18640 <__udivdi3+0x540>
   1846c:	100d883a 	mov	r6,r2
   18470:	1c63c83a 	sub	r17,r3,r17
   18474:	900b883a 	mov	r5,r18
   18478:	8809883a 	mov	r4,r17
   1847c:	d9800015 	stw	r6,0(sp)
   18480:	0018d0c0 	call	18d0c <__umodsi3>
   18484:	102d883a 	mov	r22,r2
   18488:	8809883a 	mov	r4,r17
   1848c:	900b883a 	mov	r5,r18
   18490:	0018ca80 	call	18ca8 <__udivsi3>
   18494:	b02c943a 	slli	r22,r22,16
   18498:	e089383a 	mul	r4,fp,r2
   1849c:	843fffcc 	andi	r16,r16,65535
   184a0:	85a0b03a 	or	r16,r16,r22
   184a4:	d9800017 	ldw	r6,0(sp)
   184a8:	8100042e 	bgeu	r16,r4,184bc <__udivdi3+0x3bc>
   184ac:	85e1883a 	add	r16,r16,r23
   184b0:	10ffffc4 	addi	r3,r2,-1
   184b4:	85c05e2e 	bgeu	r16,r23,18630 <__udivdi3+0x530>
   184b8:	1805883a 	mov	r2,r3
   184bc:	300c943a 	slli	r6,r6,16
   184c0:	a17fffcc 	andi	r5,r20,65535
   184c4:	a028d43a 	srli	r20,r20,16
   184c8:	3084b03a 	or	r2,r6,r2
   184cc:	10ffffcc 	andi	r3,r2,65535
   184d0:	100cd43a 	srli	r6,r2,16
   184d4:	194f383a 	mul	r7,r3,r5
   184d8:	1d07383a 	mul	r3,r3,r20
   184dc:	314b383a 	mul	r5,r6,r5
   184e0:	3810d43a 	srli	r8,r7,16
   184e4:	8121c83a 	sub	r16,r16,r4
   184e8:	1947883a 	add	r3,r3,r5
   184ec:	40c7883a 	add	r3,r8,r3
   184f0:	350d383a 	mul	r6,r6,r20
   184f4:	1940022e 	bgeu	r3,r5,18500 <__udivdi3+0x400>
   184f8:	01000074 	movhi	r4,1
   184fc:	310d883a 	add	r6,r6,r4
   18500:	1828d43a 	srli	r20,r3,16
   18504:	a18d883a 	add	r6,r20,r6
   18508:	81803e36 	bltu	r16,r6,18604 <__udivdi3+0x504>
   1850c:	81803826 	beq	r16,r6,185f0 <__udivdi3+0x4f0>
   18510:	0007883a 	mov	r3,zero
   18514:	003fa206 	br	183a0 <__udivdi3+0x2a0>
   18518:	88e2983a 	sll	r17,r17,r3
   1851c:	80a8d83a 	srl	r20,r16,r2
   18520:	80e0983a 	sll	r16,r16,r3
   18524:	882ad43a 	srli	r21,r17,16
   18528:	9884d83a 	srl	r2,r19,r2
   1852c:	a009883a 	mov	r4,r20
   18530:	a80b883a 	mov	r5,r21
   18534:	142eb03a 	or	r23,r2,r16
   18538:	98e4983a 	sll	r18,r19,r3
   1853c:	0018d0c0 	call	18d0c <__umodsi3>
   18540:	a009883a 	mov	r4,r20
   18544:	a80b883a 	mov	r5,r21
   18548:	1021883a 	mov	r16,r2
   1854c:	0018ca80 	call	18ca8 <__udivsi3>
   18550:	1039883a 	mov	fp,r2
   18554:	8d3fffcc 	andi	r20,r17,65535
   18558:	8020943a 	slli	r16,r16,16
   1855c:	b804d43a 	srli	r2,r23,16
   18560:	a72d383a 	mul	r22,r20,fp
   18564:	1404b03a 	or	r2,r2,r16
   18568:	1580062e 	bgeu	r2,r22,18584 <__udivdi3+0x484>
   1856c:	1445883a 	add	r2,r2,r17
   18570:	e0ffffc4 	addi	r3,fp,-1
   18574:	14403836 	bltu	r2,r17,18658 <__udivdi3+0x558>
   18578:	1580372e 	bgeu	r2,r22,18658 <__udivdi3+0x558>
   1857c:	e73fff84 	addi	fp,fp,-2
   18580:	1445883a 	add	r2,r2,r17
   18584:	15adc83a 	sub	r22,r2,r22
   18588:	a80b883a 	mov	r5,r21
   1858c:	b009883a 	mov	r4,r22
   18590:	0018d0c0 	call	18d0c <__umodsi3>
   18594:	1027883a 	mov	r19,r2
   18598:	b009883a 	mov	r4,r22
   1859c:	a80b883a 	mov	r5,r21
   185a0:	0018ca80 	call	18ca8 <__udivsi3>
   185a4:	9826943a 	slli	r19,r19,16
   185a8:	a0a1383a 	mul	r16,r20,r2
   185ac:	b93fffcc 	andi	r4,r23,65535
   185b0:	24c8b03a 	or	r4,r4,r19
   185b4:	2400062e 	bgeu	r4,r16,185d0 <__udivdi3+0x4d0>
   185b8:	2449883a 	add	r4,r4,r17
   185bc:	10ffffc4 	addi	r3,r2,-1
   185c0:	24402336 	bltu	r4,r17,18650 <__udivdi3+0x550>
   185c4:	2400222e 	bgeu	r4,r16,18650 <__udivdi3+0x550>
   185c8:	10bfff84 	addi	r2,r2,-2
   185cc:	2449883a 	add	r4,r4,r17
   185d0:	e038943a 	slli	fp,fp,16
   185d4:	2421c83a 	sub	r16,r4,r16
   185d8:	e086b03a 	or	r3,fp,r2
   185dc:	003f4306 	br	182ec <__udivdi3+0x1ec>
   185e0:	2005883a 	mov	r2,r4
   185e4:	003f6906 	br	1838c <__udivdi3+0x28c>
   185e8:	1805883a 	mov	r2,r3
   185ec:	003f0f06 	br	1822c <__udivdi3+0x12c>
   185f0:	1806943a 	slli	r3,r3,16
   185f4:	9d66983a 	sll	r19,r19,r21
   185f8:	39ffffcc 	andi	r7,r7,65535
   185fc:	19c7883a 	add	r3,r3,r7
   18600:	98ffc32e 	bgeu	r19,r3,18510 <__udivdi3+0x410>
   18604:	10bfffc4 	addi	r2,r2,-1
   18608:	003fc106 	br	18510 <__udivdi3+0x410>
   1860c:	00800604 	movi	r2,24
   18610:	003f1106 	br	18258 <__udivdi3+0x158>
   18614:	00800604 	movi	r2,24
   18618:	003f2706 	br	182b8 <__udivdi3+0x1b8>
   1861c:	00800604 	movi	r2,24
   18620:	003ece06 	br	1815c <__udivdi3+0x5c>
   18624:	0007883a 	mov	r3,zero
   18628:	00800044 	movi	r2,1
   1862c:	003f5c06 	br	183a0 <__udivdi3+0x2a0>
   18630:	813fa12e 	bgeu	r16,r4,184b8 <__udivdi3+0x3b8>
   18634:	10bfff84 	addi	r2,r2,-2
   18638:	85e1883a 	add	r16,r16,r23
   1863c:	003f9f06 	br	184bc <__udivdi3+0x3bc>
   18640:	1c7f8a2e 	bgeu	r3,r17,1846c <__udivdi3+0x36c>
   18644:	31bfff84 	addi	r6,r6,-2
   18648:	1dc7883a 	add	r3,r3,r23
   1864c:	003f8806 	br	18470 <__udivdi3+0x370>
   18650:	1805883a 	mov	r2,r3
   18654:	003fde06 	br	185d0 <__udivdi3+0x4d0>
   18658:	1839883a 	mov	fp,r3
   1865c:	003fc906 	br	18584 <__udivdi3+0x484>
   18660:	b5bfff84 	addi	r22,r22,-2
   18664:	2449883a 	add	r4,r4,r17
   18668:	003f3406 	br	1833c <__udivdi3+0x23c>
   1866c:	b5bfff84 	addi	r22,r22,-2
   18670:	1445883a 	add	r2,r2,r17
   18674:	003edb06 	br	181e4 <__udivdi3+0xe4>

00018678 <__umoddi3>:
   18678:	defff404 	addi	sp,sp,-48
   1867c:	df000a15 	stw	fp,40(sp)
   18680:	dc400315 	stw	r17,12(sp)
   18684:	dc000215 	stw	r16,8(sp)
   18688:	dfc00b15 	stw	ra,44(sp)
   1868c:	ddc00915 	stw	r23,36(sp)
   18690:	dd800815 	stw	r22,32(sp)
   18694:	dd400715 	stw	r21,28(sp)
   18698:	dd000615 	stw	r20,24(sp)
   1869c:	dcc00515 	stw	r19,20(sp)
   186a0:	dc800415 	stw	r18,16(sp)
   186a4:	2021883a 	mov	r16,r4
   186a8:	2823883a 	mov	r17,r5
   186ac:	2839883a 	mov	fp,r5
   186b0:	38003c1e 	bne	r7,zero,187a4 <__umoddi3+0x12c>
   186b4:	3027883a 	mov	r19,r6
   186b8:	2029883a 	mov	r20,r4
   186bc:	2980512e 	bgeu	r5,r6,18804 <__umoddi3+0x18c>
   186c0:	00bfffd4 	movui	r2,65535
   186c4:	11809a36 	bltu	r2,r6,18930 <__umoddi3+0x2b8>
   186c8:	01003fc4 	movi	r4,255
   186cc:	2189803a 	cmpltu	r4,r4,r6
   186d0:	200890fa 	slli	r4,r4,3
   186d4:	3104d83a 	srl	r2,r6,r4
   186d8:	00c000b4 	movhi	r3,2
   186dc:	18ddc4c4 	addi	r3,r3,30483
   186e0:	1885883a 	add	r2,r3,r2
   186e4:	10c00003 	ldbu	r3,0(r2)
   186e8:	00800804 	movi	r2,32
   186ec:	1909883a 	add	r4,r3,r4
   186f0:	1125c83a 	sub	r18,r2,r4
   186f4:	90000526 	beq	r18,zero,1870c <__umoddi3+0x94>
   186f8:	8ca2983a 	sll	r17,r17,r18
   186fc:	8108d83a 	srl	r4,r16,r4
   18700:	34a6983a 	sll	r19,r6,r18
   18704:	84a8983a 	sll	r20,r16,r18
   18708:	2478b03a 	or	fp,r4,r17
   1870c:	982ed43a 	srli	r23,r19,16
   18710:	e009883a 	mov	r4,fp
   18714:	9dbfffcc 	andi	r22,r19,65535
   18718:	b80b883a 	mov	r5,r23
   1871c:	0018d0c0 	call	18d0c <__umodsi3>
   18720:	e009883a 	mov	r4,fp
   18724:	b80b883a 	mov	r5,r23
   18728:	102b883a 	mov	r21,r2
   1872c:	0018ca80 	call	18ca8 <__udivsi3>
   18730:	a806943a 	slli	r3,r21,16
   18734:	a008d43a 	srli	r4,r20,16
   18738:	b085383a 	mul	r2,r22,r2
   1873c:	20c8b03a 	or	r4,r4,r3
   18740:	2080032e 	bgeu	r4,r2,18750 <__umoddi3+0xd8>
   18744:	24c9883a 	add	r4,r4,r19
   18748:	24c00136 	bltu	r4,r19,18750 <__umoddi3+0xd8>
   1874c:	20811036 	bltu	r4,r2,18b90 <__umoddi3+0x518>
   18750:	20abc83a 	sub	r21,r4,r2
   18754:	b80b883a 	mov	r5,r23
   18758:	a809883a 	mov	r4,r21
   1875c:	0018d0c0 	call	18d0c <__umodsi3>
   18760:	1023883a 	mov	r17,r2
   18764:	b80b883a 	mov	r5,r23
   18768:	a809883a 	mov	r4,r21
   1876c:	0018ca80 	call	18ca8 <__udivsi3>
   18770:	8822943a 	slli	r17,r17,16
   18774:	b085383a 	mul	r2,r22,r2
   18778:	a0ffffcc 	andi	r3,r20,65535
   1877c:	1c46b03a 	or	r3,r3,r17
   18780:	1880042e 	bgeu	r3,r2,18794 <__umoddi3+0x11c>
   18784:	1cc7883a 	add	r3,r3,r19
   18788:	1cc00236 	bltu	r3,r19,18794 <__umoddi3+0x11c>
   1878c:	1880012e 	bgeu	r3,r2,18794 <__umoddi3+0x11c>
   18790:	1cc7883a 	add	r3,r3,r19
   18794:	1885c83a 	sub	r2,r3,r2
   18798:	1484d83a 	srl	r2,r2,r18
   1879c:	0007883a 	mov	r3,zero
   187a0:	00004f06 	br	188e0 <__umoddi3+0x268>
   187a4:	29c04c36 	bltu	r5,r7,188d8 <__umoddi3+0x260>
   187a8:	00bfffd4 	movui	r2,65535
   187ac:	11c0582e 	bgeu	r2,r7,18910 <__umoddi3+0x298>
   187b0:	00804034 	movhi	r2,256
   187b4:	10bfffc4 	addi	r2,r2,-1
   187b8:	11c0e736 	bltu	r2,r7,18b58 <__umoddi3+0x4e0>
   187bc:	01000404 	movi	r4,16
   187c0:	3904d83a 	srl	r2,r7,r4
   187c4:	00c000b4 	movhi	r3,2
   187c8:	18ddc4c4 	addi	r3,r3,30483
   187cc:	1885883a 	add	r2,r3,r2
   187d0:	14c00003 	ldbu	r19,0(r2)
   187d4:	00c00804 	movi	r3,32
   187d8:	9927883a 	add	r19,r19,r4
   187dc:	1ce9c83a 	sub	r20,r3,r19
   187e0:	a000581e 	bne	r20,zero,18944 <__umoddi3+0x2cc>
   187e4:	3c400136 	bltu	r7,r17,187ec <__umoddi3+0x174>
   187e8:	8180eb36 	bltu	r16,r6,18b98 <__umoddi3+0x520>
   187ec:	8185c83a 	sub	r2,r16,r6
   187f0:	89e3c83a 	sub	r17,r17,r7
   187f4:	8089803a 	cmpltu	r4,r16,r2
   187f8:	8939c83a 	sub	fp,r17,r4
   187fc:	e007883a 	mov	r3,fp
   18800:	00003706 	br	188e0 <__umoddi3+0x268>
   18804:	3000041e 	bne	r6,zero,18818 <__umoddi3+0x1a0>
   18808:	000b883a 	mov	r5,zero
   1880c:	01000044 	movi	r4,1
   18810:	0018ca80 	call	18ca8 <__udivsi3>
   18814:	1027883a 	mov	r19,r2
   18818:	00bfffd4 	movui	r2,65535
   1881c:	14c0402e 	bgeu	r2,r19,18920 <__umoddi3+0x2a8>
   18820:	00804034 	movhi	r2,256
   18824:	10bfffc4 	addi	r2,r2,-1
   18828:	14c0cd36 	bltu	r2,r19,18b60 <__umoddi3+0x4e8>
   1882c:	00800404 	movi	r2,16
   18830:	9886d83a 	srl	r3,r19,r2
   18834:	010000b4 	movhi	r4,2
   18838:	211dc4c4 	addi	r4,r4,30483
   1883c:	20c7883a 	add	r3,r4,r3
   18840:	18c00003 	ldbu	r3,0(r3)
   18844:	1887883a 	add	r3,r3,r2
   18848:	00800804 	movi	r2,32
   1884c:	10e5c83a 	sub	r18,r2,r3
   18850:	9000901e 	bne	r18,zero,18a94 <__umoddi3+0x41c>
   18854:	982cd43a 	srli	r22,r19,16
   18858:	8ce3c83a 	sub	r17,r17,r19
   1885c:	9d7fffcc 	andi	r21,r19,65535
   18860:	b00b883a 	mov	r5,r22
   18864:	8809883a 	mov	r4,r17
   18868:	0018d0c0 	call	18d0c <__umodsi3>
   1886c:	8809883a 	mov	r4,r17
   18870:	b00b883a 	mov	r5,r22
   18874:	1021883a 	mov	r16,r2
   18878:	0018ca80 	call	18ca8 <__udivsi3>
   1887c:	8006943a 	slli	r3,r16,16
   18880:	a008d43a 	srli	r4,r20,16
   18884:	1545383a 	mul	r2,r2,r21
   18888:	20c8b03a 	or	r4,r4,r3
   1888c:	2080042e 	bgeu	r4,r2,188a0 <__umoddi3+0x228>
   18890:	24c9883a 	add	r4,r4,r19
   18894:	24c00236 	bltu	r4,r19,188a0 <__umoddi3+0x228>
   18898:	2080012e 	bgeu	r4,r2,188a0 <__umoddi3+0x228>
   1889c:	24c9883a 	add	r4,r4,r19
   188a0:	20a1c83a 	sub	r16,r4,r2
   188a4:	b00b883a 	mov	r5,r22
   188a8:	8009883a 	mov	r4,r16
   188ac:	0018d0c0 	call	18d0c <__umodsi3>
   188b0:	1023883a 	mov	r17,r2
   188b4:	b00b883a 	mov	r5,r22
   188b8:	8009883a 	mov	r4,r16
   188bc:	0018ca80 	call	18ca8 <__udivsi3>
   188c0:	8822943a 	slli	r17,r17,16
   188c4:	1545383a 	mul	r2,r2,r21
   188c8:	a53fffcc 	andi	r20,r20,65535
   188cc:	a446b03a 	or	r3,r20,r17
   188d0:	18bfb02e 	bgeu	r3,r2,18794 <__umoddi3+0x11c>
   188d4:	003fab06 	br	18784 <__umoddi3+0x10c>
   188d8:	2005883a 	mov	r2,r4
   188dc:	2807883a 	mov	r3,r5
   188e0:	dfc00b17 	ldw	ra,44(sp)
   188e4:	df000a17 	ldw	fp,40(sp)
   188e8:	ddc00917 	ldw	r23,36(sp)
   188ec:	dd800817 	ldw	r22,32(sp)
   188f0:	dd400717 	ldw	r21,28(sp)
   188f4:	dd000617 	ldw	r20,24(sp)
   188f8:	dcc00517 	ldw	r19,20(sp)
   188fc:	dc800417 	ldw	r18,16(sp)
   18900:	dc400317 	ldw	r17,12(sp)
   18904:	dc000217 	ldw	r16,8(sp)
   18908:	dec00c04 	addi	sp,sp,48
   1890c:	f800283a 	ret
   18910:	04c03fc4 	movi	r19,255
   18914:	99c9803a 	cmpltu	r4,r19,r7
   18918:	200890fa 	slli	r4,r4,3
   1891c:	003fa806 	br	187c0 <__umoddi3+0x148>
   18920:	00803fc4 	movi	r2,255
   18924:	14c5803a 	cmpltu	r2,r2,r19
   18928:	100490fa 	slli	r2,r2,3
   1892c:	003fc006 	br	18830 <__umoddi3+0x1b8>
   18930:	00804034 	movhi	r2,256
   18934:	10bfffc4 	addi	r2,r2,-1
   18938:	11808b36 	bltu	r2,r6,18b68 <__umoddi3+0x4f0>
   1893c:	01000404 	movi	r4,16
   18940:	003f6406 	br	186d4 <__umoddi3+0x5c>
   18944:	34c4d83a 	srl	r2,r6,r19
   18948:	3d0e983a 	sll	r7,r7,r20
   1894c:	8cf8d83a 	srl	fp,r17,r19
   18950:	8d10983a 	sll	r8,r17,r20
   18954:	38aab03a 	or	r21,r7,r2
   18958:	a82cd43a 	srli	r22,r21,16
   1895c:	84e2d83a 	srl	r17,r16,r19
   18960:	e009883a 	mov	r4,fp
   18964:	b00b883a 	mov	r5,r22
   18968:	8a22b03a 	or	r17,r17,r8
   1896c:	3524983a 	sll	r18,r6,r20
   18970:	0018d0c0 	call	18d0c <__umodsi3>
   18974:	e009883a 	mov	r4,fp
   18978:	b00b883a 	mov	r5,r22
   1897c:	102f883a 	mov	r23,r2
   18980:	0018ca80 	call	18ca8 <__udivsi3>
   18984:	100d883a 	mov	r6,r2
   18988:	b808943a 	slli	r4,r23,16
   1898c:	aa3fffcc 	andi	r8,r21,65535
   18990:	8804d43a 	srli	r2,r17,16
   18994:	41af383a 	mul	r23,r8,r6
   18998:	8520983a 	sll	r16,r16,r20
   1899c:	1104b03a 	or	r2,r2,r4
   189a0:	15c0042e 	bgeu	r2,r23,189b4 <__umoddi3+0x33c>
   189a4:	1545883a 	add	r2,r2,r21
   189a8:	30ffffc4 	addi	r3,r6,-1
   189ac:	1540742e 	bgeu	r2,r21,18b80 <__umoddi3+0x508>
   189b0:	180d883a 	mov	r6,r3
   189b4:	15efc83a 	sub	r23,r2,r23
   189b8:	b00b883a 	mov	r5,r22
   189bc:	b809883a 	mov	r4,r23
   189c0:	d9800115 	stw	r6,4(sp)
   189c4:	da000015 	stw	r8,0(sp)
   189c8:	0018d0c0 	call	18d0c <__umodsi3>
   189cc:	b00b883a 	mov	r5,r22
   189d0:	b809883a 	mov	r4,r23
   189d4:	1039883a 	mov	fp,r2
   189d8:	0018ca80 	call	18ca8 <__udivsi3>
   189dc:	da000017 	ldw	r8,0(sp)
   189e0:	e038943a 	slli	fp,fp,16
   189e4:	100b883a 	mov	r5,r2
   189e8:	4089383a 	mul	r4,r8,r2
   189ec:	8a3fffcc 	andi	r8,r17,65535
   189f0:	4710b03a 	or	r8,r8,fp
   189f4:	d9800117 	ldw	r6,4(sp)
   189f8:	4100042e 	bgeu	r8,r4,18a0c <__umoddi3+0x394>
   189fc:	4551883a 	add	r8,r8,r21
   18a00:	10bfffc4 	addi	r2,r2,-1
   18a04:	45405a2e 	bgeu	r8,r21,18b70 <__umoddi3+0x4f8>
   18a08:	100b883a 	mov	r5,r2
   18a0c:	300c943a 	slli	r6,r6,16
   18a10:	91ffffcc 	andi	r7,r18,65535
   18a14:	9004d43a 	srli	r2,r18,16
   18a18:	314cb03a 	or	r6,r6,r5
   18a1c:	317fffcc 	andi	r5,r6,65535
   18a20:	300cd43a 	srli	r6,r6,16
   18a24:	29d3383a 	mul	r9,r5,r7
   18a28:	288b383a 	mul	r5,r5,r2
   18a2c:	31cf383a 	mul	r7,r6,r7
   18a30:	4806d43a 	srli	r3,r9,16
   18a34:	4111c83a 	sub	r8,r8,r4
   18a38:	29cb883a 	add	r5,r5,r7
   18a3c:	194b883a 	add	r5,r3,r5
   18a40:	3085383a 	mul	r2,r6,r2
   18a44:	29c0022e 	bgeu	r5,r7,18a50 <__umoddi3+0x3d8>
   18a48:	00c00074 	movhi	r3,1
   18a4c:	10c5883a 	add	r2,r2,r3
   18a50:	2808d43a 	srli	r4,r5,16
   18a54:	280a943a 	slli	r5,r5,16
   18a58:	4a7fffcc 	andi	r9,r9,65535
   18a5c:	2085883a 	add	r2,r4,r2
   18a60:	2a4b883a 	add	r5,r5,r9
   18a64:	40803636 	bltu	r8,r2,18b40 <__umoddi3+0x4c8>
   18a68:	40804d26 	beq	r8,r2,18ba0 <__umoddi3+0x528>
   18a6c:	4089c83a 	sub	r4,r8,r2
   18a70:	280f883a 	mov	r7,r5
   18a74:	81cfc83a 	sub	r7,r16,r7
   18a78:	81c7803a 	cmpltu	r3,r16,r7
   18a7c:	20c7c83a 	sub	r3,r4,r3
   18a80:	1cc4983a 	sll	r2,r3,r19
   18a84:	3d0ed83a 	srl	r7,r7,r20
   18a88:	1d06d83a 	srl	r3,r3,r20
   18a8c:	11c4b03a 	or	r2,r2,r7
   18a90:	003f9306 	br	188e0 <__umoddi3+0x268>
   18a94:	9ca6983a 	sll	r19,r19,r18
   18a98:	88e8d83a 	srl	r20,r17,r3
   18a9c:	80c4d83a 	srl	r2,r16,r3
   18aa0:	982cd43a 	srli	r22,r19,16
   18aa4:	8ca2983a 	sll	r17,r17,r18
   18aa8:	a009883a 	mov	r4,r20
   18aac:	b00b883a 	mov	r5,r22
   18ab0:	1478b03a 	or	fp,r2,r17
   18ab4:	0018d0c0 	call	18d0c <__umodsi3>
   18ab8:	a009883a 	mov	r4,r20
   18abc:	b00b883a 	mov	r5,r22
   18ac0:	1023883a 	mov	r17,r2
   18ac4:	0018ca80 	call	18ca8 <__udivsi3>
   18ac8:	9d7fffcc 	andi	r21,r19,65535
   18acc:	880a943a 	slli	r5,r17,16
   18ad0:	e008d43a 	srli	r4,fp,16
   18ad4:	a885383a 	mul	r2,r21,r2
   18ad8:	84a8983a 	sll	r20,r16,r18
   18adc:	2148b03a 	or	r4,r4,r5
   18ae0:	2080042e 	bgeu	r4,r2,18af4 <__umoddi3+0x47c>
   18ae4:	24c9883a 	add	r4,r4,r19
   18ae8:	24c00236 	bltu	r4,r19,18af4 <__umoddi3+0x47c>
   18aec:	2080012e 	bgeu	r4,r2,18af4 <__umoddi3+0x47c>
   18af0:	24c9883a 	add	r4,r4,r19
   18af4:	20a3c83a 	sub	r17,r4,r2
   18af8:	b00b883a 	mov	r5,r22
   18afc:	8809883a 	mov	r4,r17
   18b00:	0018d0c0 	call	18d0c <__umodsi3>
   18b04:	102f883a 	mov	r23,r2
   18b08:	8809883a 	mov	r4,r17
   18b0c:	b00b883a 	mov	r5,r22
   18b10:	0018ca80 	call	18ca8 <__udivsi3>
   18b14:	b82e943a 	slli	r23,r23,16
   18b18:	a885383a 	mul	r2,r21,r2
   18b1c:	e13fffcc 	andi	r4,fp,65535
   18b20:	25c8b03a 	or	r4,r4,r23
   18b24:	2080042e 	bgeu	r4,r2,18b38 <__umoddi3+0x4c0>
   18b28:	24c9883a 	add	r4,r4,r19
   18b2c:	24c00236 	bltu	r4,r19,18b38 <__umoddi3+0x4c0>
   18b30:	2080012e 	bgeu	r4,r2,18b38 <__umoddi3+0x4c0>
   18b34:	24c9883a 	add	r4,r4,r19
   18b38:	20a3c83a 	sub	r17,r4,r2
   18b3c:	003f4806 	br	18860 <__umoddi3+0x1e8>
   18b40:	2c8fc83a 	sub	r7,r5,r18
   18b44:	1545c83a 	sub	r2,r2,r21
   18b48:	29cb803a 	cmpltu	r5,r5,r7
   18b4c:	1145c83a 	sub	r2,r2,r5
   18b50:	4089c83a 	sub	r4,r8,r2
   18b54:	003fc706 	br	18a74 <__umoddi3+0x3fc>
   18b58:	01000604 	movi	r4,24
   18b5c:	003f1806 	br	187c0 <__umoddi3+0x148>
   18b60:	00800604 	movi	r2,24
   18b64:	003f3206 	br	18830 <__umoddi3+0x1b8>
   18b68:	01000604 	movi	r4,24
   18b6c:	003ed906 	br	186d4 <__umoddi3+0x5c>
   18b70:	413fa52e 	bgeu	r8,r4,18a08 <__umoddi3+0x390>
   18b74:	297fff84 	addi	r5,r5,-2
   18b78:	4551883a 	add	r8,r8,r21
   18b7c:	003fa306 	br	18a0c <__umoddi3+0x394>
   18b80:	15ff8b2e 	bgeu	r2,r23,189b0 <__umoddi3+0x338>
   18b84:	31bfff84 	addi	r6,r6,-2
   18b88:	1545883a 	add	r2,r2,r21
   18b8c:	003f8906 	br	189b4 <__umoddi3+0x33c>
   18b90:	24c9883a 	add	r4,r4,r19
   18b94:	003eee06 	br	18750 <__umoddi3+0xd8>
   18b98:	8005883a 	mov	r2,r16
   18b9c:	003f1706 	br	187fc <__umoddi3+0x184>
   18ba0:	817fe736 	bltu	r16,r5,18b40 <__umoddi3+0x4c8>
   18ba4:	280f883a 	mov	r7,r5
   18ba8:	0009883a 	mov	r4,zero
   18bac:	003fb106 	br	18a74 <__umoddi3+0x3fc>

00018bb0 <__divsi3>:
   18bb0:	20001b16 	blt	r4,zero,18c20 <__divsi3+0x70>
   18bb4:	000f883a 	mov	r7,zero
   18bb8:	28001616 	blt	r5,zero,18c14 <__divsi3+0x64>
   18bbc:	200d883a 	mov	r6,r4
   18bc0:	29001a2e 	bgeu	r5,r4,18c2c <__divsi3+0x7c>
   18bc4:	00800804 	movi	r2,32
   18bc8:	00c00044 	movi	r3,1
   18bcc:	00000106 	br	18bd4 <__divsi3+0x24>
   18bd0:	10000d26 	beq	r2,zero,18c08 <__divsi3+0x58>
   18bd4:	294b883a 	add	r5,r5,r5
   18bd8:	10bfffc4 	addi	r2,r2,-1
   18bdc:	18c7883a 	add	r3,r3,r3
   18be0:	293ffb36 	bltu	r5,r4,18bd0 <__divsi3+0x20>
   18be4:	0005883a 	mov	r2,zero
   18be8:	18000726 	beq	r3,zero,18c08 <__divsi3+0x58>
   18bec:	0005883a 	mov	r2,zero
   18bf0:	31400236 	bltu	r6,r5,18bfc <__divsi3+0x4c>
   18bf4:	314dc83a 	sub	r6,r6,r5
   18bf8:	10c4b03a 	or	r2,r2,r3
   18bfc:	1806d07a 	srli	r3,r3,1
   18c00:	280ad07a 	srli	r5,r5,1
   18c04:	183ffa1e 	bne	r3,zero,18bf0 <__divsi3+0x40>
   18c08:	38000126 	beq	r7,zero,18c10 <__divsi3+0x60>
   18c0c:	0085c83a 	sub	r2,zero,r2
   18c10:	f800283a 	ret
   18c14:	014bc83a 	sub	r5,zero,r5
   18c18:	39c0005c 	xori	r7,r7,1
   18c1c:	003fe706 	br	18bbc <__divsi3+0xc>
   18c20:	0109c83a 	sub	r4,zero,r4
   18c24:	01c00044 	movi	r7,1
   18c28:	003fe306 	br	18bb8 <__divsi3+0x8>
   18c2c:	00c00044 	movi	r3,1
   18c30:	003fee06 	br	18bec <__divsi3+0x3c>

00018c34 <__modsi3>:
   18c34:	20001716 	blt	r4,zero,18c94 <__modsi3+0x60>
   18c38:	000f883a 	mov	r7,zero
   18c3c:	2005883a 	mov	r2,r4
   18c40:	28001216 	blt	r5,zero,18c8c <__modsi3+0x58>
   18c44:	2900162e 	bgeu	r5,r4,18ca0 <__modsi3+0x6c>
   18c48:	01800804 	movi	r6,32
   18c4c:	00c00044 	movi	r3,1
   18c50:	00000106 	br	18c58 <__modsi3+0x24>
   18c54:	30000a26 	beq	r6,zero,18c80 <__modsi3+0x4c>
   18c58:	294b883a 	add	r5,r5,r5
   18c5c:	31bfffc4 	addi	r6,r6,-1
   18c60:	18c7883a 	add	r3,r3,r3
   18c64:	293ffb36 	bltu	r5,r4,18c54 <__modsi3+0x20>
   18c68:	18000526 	beq	r3,zero,18c80 <__modsi3+0x4c>
   18c6c:	1806d07a 	srli	r3,r3,1
   18c70:	11400136 	bltu	r2,r5,18c78 <__modsi3+0x44>
   18c74:	1145c83a 	sub	r2,r2,r5
   18c78:	280ad07a 	srli	r5,r5,1
   18c7c:	183ffb1e 	bne	r3,zero,18c6c <__modsi3+0x38>
   18c80:	38000126 	beq	r7,zero,18c88 <__modsi3+0x54>
   18c84:	0085c83a 	sub	r2,zero,r2
   18c88:	f800283a 	ret
   18c8c:	014bc83a 	sub	r5,zero,r5
   18c90:	003fec06 	br	18c44 <__modsi3+0x10>
   18c94:	0109c83a 	sub	r4,zero,r4
   18c98:	01c00044 	movi	r7,1
   18c9c:	003fe706 	br	18c3c <__modsi3+0x8>
   18ca0:	00c00044 	movi	r3,1
   18ca4:	003ff106 	br	18c6c <__modsi3+0x38>

00018ca8 <__udivsi3>:
   18ca8:	200d883a 	mov	r6,r4
   18cac:	2900152e 	bgeu	r5,r4,18d04 <__udivsi3+0x5c>
   18cb0:	28001416 	blt	r5,zero,18d04 <__udivsi3+0x5c>
   18cb4:	00800804 	movi	r2,32
   18cb8:	00c00044 	movi	r3,1
   18cbc:	00000206 	br	18cc8 <__udivsi3+0x20>
   18cc0:	10000e26 	beq	r2,zero,18cfc <__udivsi3+0x54>
   18cc4:	28000516 	blt	r5,zero,18cdc <__udivsi3+0x34>
   18cc8:	294b883a 	add	r5,r5,r5
   18ccc:	10bfffc4 	addi	r2,r2,-1
   18cd0:	18c7883a 	add	r3,r3,r3
   18cd4:	293ffa36 	bltu	r5,r4,18cc0 <__udivsi3+0x18>
   18cd8:	18000826 	beq	r3,zero,18cfc <__udivsi3+0x54>
   18cdc:	0005883a 	mov	r2,zero
   18ce0:	31400236 	bltu	r6,r5,18cec <__udivsi3+0x44>
   18ce4:	314dc83a 	sub	r6,r6,r5
   18ce8:	10c4b03a 	or	r2,r2,r3
   18cec:	1806d07a 	srli	r3,r3,1
   18cf0:	280ad07a 	srli	r5,r5,1
   18cf4:	183ffa1e 	bne	r3,zero,18ce0 <__udivsi3+0x38>
   18cf8:	f800283a 	ret
   18cfc:	0005883a 	mov	r2,zero
   18d00:	f800283a 	ret
   18d04:	00c00044 	movi	r3,1
   18d08:	003ff406 	br	18cdc <__udivsi3+0x34>

00018d0c <__umodsi3>:
   18d0c:	2005883a 	mov	r2,r4
   18d10:	2900122e 	bgeu	r5,r4,18d5c <__umodsi3+0x50>
   18d14:	28001116 	blt	r5,zero,18d5c <__umodsi3+0x50>
   18d18:	01800804 	movi	r6,32
   18d1c:	00c00044 	movi	r3,1
   18d20:	00000206 	br	18d2c <__umodsi3+0x20>
   18d24:	30000c26 	beq	r6,zero,18d58 <__umodsi3+0x4c>
   18d28:	28000516 	blt	r5,zero,18d40 <__umodsi3+0x34>
   18d2c:	294b883a 	add	r5,r5,r5
   18d30:	31bfffc4 	addi	r6,r6,-1
   18d34:	18c7883a 	add	r3,r3,r3
   18d38:	293ffa36 	bltu	r5,r4,18d24 <__umodsi3+0x18>
   18d3c:	18000626 	beq	r3,zero,18d58 <__umodsi3+0x4c>
   18d40:	1806d07a 	srli	r3,r3,1
   18d44:	11400136 	bltu	r2,r5,18d4c <__umodsi3+0x40>
   18d48:	1145c83a 	sub	r2,r2,r5
   18d4c:	280ad07a 	srli	r5,r5,1
   18d50:	183ffb1e 	bne	r3,zero,18d40 <__umodsi3+0x34>
   18d54:	f800283a 	ret
   18d58:	f800283a 	ret
   18d5c:	00c00044 	movi	r3,1
   18d60:	003ff706 	br	18d40 <__umodsi3+0x34>

00018d64 <__adddf3>:
   18d64:	02c00434 	movhi	r11,16
   18d68:	5affffc4 	addi	r11,r11,-1
   18d6c:	2806d7fa 	srli	r3,r5,31
   18d70:	2ad4703a 	and	r10,r5,r11
   18d74:	3ad2703a 	and	r9,r7,r11
   18d78:	3804d53a 	srli	r2,r7,20
   18d7c:	3018d77a 	srli	r12,r6,29
   18d80:	280ad53a 	srli	r5,r5,20
   18d84:	501490fa 	slli	r10,r10,3
   18d88:	2010d77a 	srli	r8,r4,29
   18d8c:	481290fa 	slli	r9,r9,3
   18d90:	380ed7fa 	srli	r7,r7,31
   18d94:	defffb04 	addi	sp,sp,-20
   18d98:	dc800215 	stw	r18,8(sp)
   18d9c:	dc400115 	stw	r17,4(sp)
   18da0:	dc000015 	stw	r16,0(sp)
   18da4:	dfc00415 	stw	ra,16(sp)
   18da8:	dcc00315 	stw	r19,12(sp)
   18dac:	1c803fcc 	andi	r18,r3,255
   18db0:	2c01ffcc 	andi	r16,r5,2047
   18db4:	5210b03a 	or	r8,r10,r8
   18db8:	202290fa 	slli	r17,r4,3
   18dbc:	1081ffcc 	andi	r2,r2,2047
   18dc0:	4b12b03a 	or	r9,r9,r12
   18dc4:	300c90fa 	slli	r6,r6,3
   18dc8:	91c07526 	beq	r18,r7,18fa0 <__adddf3+0x23c>
   18dcc:	8087c83a 	sub	r3,r16,r2
   18dd0:	00c0ab0e 	bge	zero,r3,19080 <__adddf3+0x31c>
   18dd4:	10002a1e 	bne	r2,zero,18e80 <__adddf3+0x11c>
   18dd8:	4984b03a 	or	r2,r9,r6
   18ddc:	1000961e 	bne	r2,zero,19038 <__adddf3+0x2d4>
   18de0:	888001cc 	andi	r2,r17,7
   18de4:	10000726 	beq	r2,zero,18e04 <__adddf3+0xa0>
   18de8:	888003cc 	andi	r2,r17,15
   18dec:	00c00104 	movi	r3,4
   18df0:	10c00426 	beq	r2,r3,18e04 <__adddf3+0xa0>
   18df4:	88c7883a 	add	r3,r17,r3
   18df8:	1c63803a 	cmpltu	r17,r3,r17
   18dfc:	4451883a 	add	r8,r8,r17
   18e00:	1823883a 	mov	r17,r3
   18e04:	4080202c 	andhi	r2,r8,128
   18e08:	10005926 	beq	r2,zero,18f70 <__adddf3+0x20c>
   18e0c:	84000044 	addi	r16,r16,1
   18e10:	0081ffc4 	movi	r2,2047
   18e14:	8080ba26 	beq	r16,r2,19100 <__adddf3+0x39c>
   18e18:	00bfe034 	movhi	r2,65408
   18e1c:	10bfffc4 	addi	r2,r2,-1
   18e20:	4090703a 	and	r8,r8,r2
   18e24:	4004977a 	slli	r2,r8,29
   18e28:	4010927a 	slli	r8,r8,9
   18e2c:	8822d0fa 	srli	r17,r17,3
   18e30:	8401ffcc 	andi	r16,r16,2047
   18e34:	4010d33a 	srli	r8,r8,12
   18e38:	9007883a 	mov	r3,r18
   18e3c:	1444b03a 	or	r2,r2,r17
   18e40:	8401ffcc 	andi	r16,r16,2047
   18e44:	8020953a 	slli	r16,r16,20
   18e48:	18c03fcc 	andi	r3,r3,255
   18e4c:	01000434 	movhi	r4,16
   18e50:	213fffc4 	addi	r4,r4,-1
   18e54:	180697fa 	slli	r3,r3,31
   18e58:	4110703a 	and	r8,r8,r4
   18e5c:	4410b03a 	or	r8,r8,r16
   18e60:	40c6b03a 	or	r3,r8,r3
   18e64:	dfc00417 	ldw	ra,16(sp)
   18e68:	dcc00317 	ldw	r19,12(sp)
   18e6c:	dc800217 	ldw	r18,8(sp)
   18e70:	dc400117 	ldw	r17,4(sp)
   18e74:	dc000017 	ldw	r16,0(sp)
   18e78:	dec00504 	addi	sp,sp,20
   18e7c:	f800283a 	ret
   18e80:	0081ffc4 	movi	r2,2047
   18e84:	80bfd626 	beq	r16,r2,18de0 <__adddf3+0x7c>
   18e88:	4a402034 	orhi	r9,r9,128
   18e8c:	00800e04 	movi	r2,56
   18e90:	10c09f16 	blt	r2,r3,19110 <__adddf3+0x3ac>
   18e94:	008007c4 	movi	r2,31
   18e98:	10c0c216 	blt	r2,r3,191a4 <__adddf3+0x440>
   18e9c:	00800804 	movi	r2,32
   18ea0:	10c5c83a 	sub	r2,r2,r3
   18ea4:	488a983a 	sll	r5,r9,r2
   18ea8:	30c8d83a 	srl	r4,r6,r3
   18eac:	3084983a 	sll	r2,r6,r2
   18eb0:	48c6d83a 	srl	r3,r9,r3
   18eb4:	290cb03a 	or	r6,r5,r4
   18eb8:	1004c03a 	cmpne	r2,r2,zero
   18ebc:	308cb03a 	or	r6,r6,r2
   18ec0:	898dc83a 	sub	r6,r17,r6
   18ec4:	89a3803a 	cmpltu	r17,r17,r6
   18ec8:	40d1c83a 	sub	r8,r8,r3
   18ecc:	4451c83a 	sub	r8,r8,r17
   18ed0:	3023883a 	mov	r17,r6
   18ed4:	4080202c 	andhi	r2,r8,128
   18ed8:	10002326 	beq	r2,zero,18f68 <__adddf3+0x204>
   18edc:	04c02034 	movhi	r19,128
   18ee0:	9cffffc4 	addi	r19,r19,-1
   18ee4:	44e6703a 	and	r19,r8,r19
   18ee8:	98007626 	beq	r19,zero,190c4 <__adddf3+0x360>
   18eec:	9809883a 	mov	r4,r19
   18ef0:	000b3fc0 	call	b3fc <__clzsi2>
   18ef4:	10fffe04 	addi	r3,r2,-8
   18ef8:	010007c4 	movi	r4,31
   18efc:	20c07716 	blt	r4,r3,190dc <__adddf3+0x378>
   18f00:	00800804 	movi	r2,32
   18f04:	10c5c83a 	sub	r2,r2,r3
   18f08:	8884d83a 	srl	r2,r17,r2
   18f0c:	98d0983a 	sll	r8,r19,r3
   18f10:	88e2983a 	sll	r17,r17,r3
   18f14:	1204b03a 	or	r2,r2,r8
   18f18:	1c007416 	blt	r3,r16,190ec <__adddf3+0x388>
   18f1c:	1c21c83a 	sub	r16,r3,r16
   18f20:	82000044 	addi	r8,r16,1
   18f24:	00c007c4 	movi	r3,31
   18f28:	1a009116 	blt	r3,r8,19170 <__adddf3+0x40c>
   18f2c:	00c00804 	movi	r3,32
   18f30:	1a07c83a 	sub	r3,r3,r8
   18f34:	8a08d83a 	srl	r4,r17,r8
   18f38:	88e2983a 	sll	r17,r17,r3
   18f3c:	10c6983a 	sll	r3,r2,r3
   18f40:	1210d83a 	srl	r8,r2,r8
   18f44:	8804c03a 	cmpne	r2,r17,zero
   18f48:	1906b03a 	or	r3,r3,r4
   18f4c:	18a2b03a 	or	r17,r3,r2
   18f50:	0021883a 	mov	r16,zero
   18f54:	003fa206 	br	18de0 <__adddf3+0x7c>
   18f58:	1890b03a 	or	r8,r3,r2
   18f5c:	40017d26 	beq	r8,zero,19554 <__adddf3+0x7f0>
   18f60:	1011883a 	mov	r8,r2
   18f64:	1823883a 	mov	r17,r3
   18f68:	888001cc 	andi	r2,r17,7
   18f6c:	103f9e1e 	bne	r2,zero,18de8 <__adddf3+0x84>
   18f70:	4004977a 	slli	r2,r8,29
   18f74:	8822d0fa 	srli	r17,r17,3
   18f78:	4010d0fa 	srli	r8,r8,3
   18f7c:	9007883a 	mov	r3,r18
   18f80:	1444b03a 	or	r2,r2,r17
   18f84:	0101ffc4 	movi	r4,2047
   18f88:	81002426 	beq	r16,r4,1901c <__adddf3+0x2b8>
   18f8c:	8120703a 	and	r16,r16,r4
   18f90:	01000434 	movhi	r4,16
   18f94:	213fffc4 	addi	r4,r4,-1
   18f98:	4110703a 	and	r8,r8,r4
   18f9c:	003fa806 	br	18e40 <__adddf3+0xdc>
   18fa0:	8089c83a 	sub	r4,r16,r2
   18fa4:	01005e0e 	bge	zero,r4,19120 <__adddf3+0x3bc>
   18fa8:	10002b26 	beq	r2,zero,19058 <__adddf3+0x2f4>
   18fac:	0081ffc4 	movi	r2,2047
   18fb0:	80bf8b26 	beq	r16,r2,18de0 <__adddf3+0x7c>
   18fb4:	4a402034 	orhi	r9,r9,128
   18fb8:	00800e04 	movi	r2,56
   18fbc:	1100a40e 	bge	r2,r4,19250 <__adddf3+0x4ec>
   18fc0:	498cb03a 	or	r6,r9,r6
   18fc4:	300ac03a 	cmpne	r5,r6,zero
   18fc8:	0013883a 	mov	r9,zero
   18fcc:	2c4b883a 	add	r5,r5,r17
   18fd0:	2c63803a 	cmpltu	r17,r5,r17
   18fd4:	4a11883a 	add	r8,r9,r8
   18fd8:	8a11883a 	add	r8,r17,r8
   18fdc:	2823883a 	mov	r17,r5
   18fe0:	4080202c 	andhi	r2,r8,128
   18fe4:	103fe026 	beq	r2,zero,18f68 <__adddf3+0x204>
   18fe8:	84000044 	addi	r16,r16,1
   18fec:	0081ffc4 	movi	r2,2047
   18ff0:	8080d226 	beq	r16,r2,1933c <__adddf3+0x5d8>
   18ff4:	00bfe034 	movhi	r2,65408
   18ff8:	10bfffc4 	addi	r2,r2,-1
   18ffc:	4090703a 	and	r8,r8,r2
   19000:	880ad07a 	srli	r5,r17,1
   19004:	400897fa 	slli	r4,r8,31
   19008:	88c0004c 	andi	r3,r17,1
   1900c:	28e2b03a 	or	r17,r5,r3
   19010:	4010d07a 	srli	r8,r8,1
   19014:	2462b03a 	or	r17,r4,r17
   19018:	003f7106 	br	18de0 <__adddf3+0x7c>
   1901c:	4088b03a 	or	r4,r8,r2
   19020:	20014526 	beq	r4,zero,19538 <__adddf3+0x7d4>
   19024:	01000434 	movhi	r4,16
   19028:	42000234 	orhi	r8,r8,8
   1902c:	213fffc4 	addi	r4,r4,-1
   19030:	4110703a 	and	r8,r8,r4
   19034:	003f8206 	br	18e40 <__adddf3+0xdc>
   19038:	18ffffc4 	addi	r3,r3,-1
   1903c:	1800491e 	bne	r3,zero,19164 <__adddf3+0x400>
   19040:	898bc83a 	sub	r5,r17,r6
   19044:	8963803a 	cmpltu	r17,r17,r5
   19048:	4251c83a 	sub	r8,r8,r9
   1904c:	4451c83a 	sub	r8,r8,r17
   19050:	2823883a 	mov	r17,r5
   19054:	003f9f06 	br	18ed4 <__adddf3+0x170>
   19058:	4984b03a 	or	r2,r9,r6
   1905c:	103f6026 	beq	r2,zero,18de0 <__adddf3+0x7c>
   19060:	213fffc4 	addi	r4,r4,-1
   19064:	2000931e 	bne	r4,zero,192b4 <__adddf3+0x550>
   19068:	898d883a 	add	r6,r17,r6
   1906c:	3463803a 	cmpltu	r17,r6,r17
   19070:	4251883a 	add	r8,r8,r9
   19074:	8a11883a 	add	r8,r17,r8
   19078:	3023883a 	mov	r17,r6
   1907c:	003fd806 	br	18fe0 <__adddf3+0x27c>
   19080:	1800541e 	bne	r3,zero,191d4 <__adddf3+0x470>
   19084:	80800044 	addi	r2,r16,1
   19088:	1081ffcc 	andi	r2,r2,2047
   1908c:	00c00044 	movi	r3,1
   19090:	1880a00e 	bge	r3,r2,19314 <__adddf3+0x5b0>
   19094:	8989c83a 	sub	r4,r17,r6
   19098:	8905803a 	cmpltu	r2,r17,r4
   1909c:	4267c83a 	sub	r19,r8,r9
   190a0:	98a7c83a 	sub	r19,r19,r2
   190a4:	9880202c 	andhi	r2,r19,128
   190a8:	10006326 	beq	r2,zero,19238 <__adddf3+0x4d4>
   190ac:	3463c83a 	sub	r17,r6,r17
   190b0:	4a07c83a 	sub	r3,r9,r8
   190b4:	344d803a 	cmpltu	r6,r6,r17
   190b8:	19a7c83a 	sub	r19,r3,r6
   190bc:	3825883a 	mov	r18,r7
   190c0:	983f8a1e 	bne	r19,zero,18eec <__adddf3+0x188>
   190c4:	8809883a 	mov	r4,r17
   190c8:	000b3fc0 	call	b3fc <__clzsi2>
   190cc:	10800804 	addi	r2,r2,32
   190d0:	10fffe04 	addi	r3,r2,-8
   190d4:	010007c4 	movi	r4,31
   190d8:	20ff890e 	bge	r4,r3,18f00 <__adddf3+0x19c>
   190dc:	10bff604 	addi	r2,r2,-40
   190e0:	8884983a 	sll	r2,r17,r2
   190e4:	0023883a 	mov	r17,zero
   190e8:	1c3f8c0e 	bge	r3,r16,18f1c <__adddf3+0x1b8>
   190ec:	023fe034 	movhi	r8,65408
   190f0:	423fffc4 	addi	r8,r8,-1
   190f4:	80e1c83a 	sub	r16,r16,r3
   190f8:	1210703a 	and	r8,r2,r8
   190fc:	003f3806 	br	18de0 <__adddf3+0x7c>
   19100:	9007883a 	mov	r3,r18
   19104:	0011883a 	mov	r8,zero
   19108:	0005883a 	mov	r2,zero
   1910c:	003f4c06 	br	18e40 <__adddf3+0xdc>
   19110:	498cb03a 	or	r6,r9,r6
   19114:	300cc03a 	cmpne	r6,r6,zero
   19118:	0007883a 	mov	r3,zero
   1911c:	003f6806 	br	18ec0 <__adddf3+0x15c>
   19120:	20009c1e 	bne	r4,zero,19394 <__adddf3+0x630>
   19124:	80800044 	addi	r2,r16,1
   19128:	1141ffcc 	andi	r5,r2,2047
   1912c:	01000044 	movi	r4,1
   19130:	2140670e 	bge	r4,r5,192d0 <__adddf3+0x56c>
   19134:	0101ffc4 	movi	r4,2047
   19138:	11007f26 	beq	r2,r4,19338 <__adddf3+0x5d4>
   1913c:	898d883a 	add	r6,r17,r6
   19140:	4247883a 	add	r3,r8,r9
   19144:	3451803a 	cmpltu	r8,r6,r17
   19148:	40d1883a 	add	r8,r8,r3
   1914c:	402297fa 	slli	r17,r8,31
   19150:	300cd07a 	srli	r6,r6,1
   19154:	4010d07a 	srli	r8,r8,1
   19158:	1021883a 	mov	r16,r2
   1915c:	89a2b03a 	or	r17,r17,r6
   19160:	003f1f06 	br	18de0 <__adddf3+0x7c>
   19164:	0081ffc4 	movi	r2,2047
   19168:	80bf481e 	bne	r16,r2,18e8c <__adddf3+0x128>
   1916c:	003f1c06 	br	18de0 <__adddf3+0x7c>
   19170:	843ff844 	addi	r16,r16,-31
   19174:	01000804 	movi	r4,32
   19178:	1406d83a 	srl	r3,r2,r16
   1917c:	41005026 	beq	r8,r4,192c0 <__adddf3+0x55c>
   19180:	01001004 	movi	r4,64
   19184:	2211c83a 	sub	r8,r4,r8
   19188:	1204983a 	sll	r2,r2,r8
   1918c:	88a2b03a 	or	r17,r17,r2
   19190:	8822c03a 	cmpne	r17,r17,zero
   19194:	1c62b03a 	or	r17,r3,r17
   19198:	0011883a 	mov	r8,zero
   1919c:	0021883a 	mov	r16,zero
   191a0:	003f7106 	br	18f68 <__adddf3+0x204>
   191a4:	193ff804 	addi	r4,r3,-32
   191a8:	00800804 	movi	r2,32
   191ac:	4908d83a 	srl	r4,r9,r4
   191b0:	18804526 	beq	r3,r2,192c8 <__adddf3+0x564>
   191b4:	00801004 	movi	r2,64
   191b8:	10c5c83a 	sub	r2,r2,r3
   191bc:	4886983a 	sll	r3,r9,r2
   191c0:	198cb03a 	or	r6,r3,r6
   191c4:	300cc03a 	cmpne	r6,r6,zero
   191c8:	218cb03a 	or	r6,r4,r6
   191cc:	0007883a 	mov	r3,zero
   191d0:	003f3b06 	br	18ec0 <__adddf3+0x15c>
   191d4:	80002a26 	beq	r16,zero,19280 <__adddf3+0x51c>
   191d8:	0101ffc4 	movi	r4,2047
   191dc:	11006826 	beq	r2,r4,19380 <__adddf3+0x61c>
   191e0:	00c7c83a 	sub	r3,zero,r3
   191e4:	42002034 	orhi	r8,r8,128
   191e8:	01000e04 	movi	r4,56
   191ec:	20c07c16 	blt	r4,r3,193e0 <__adddf3+0x67c>
   191f0:	010007c4 	movi	r4,31
   191f4:	20c0da16 	blt	r4,r3,19560 <__adddf3+0x7fc>
   191f8:	01000804 	movi	r4,32
   191fc:	20c9c83a 	sub	r4,r4,r3
   19200:	4114983a 	sll	r10,r8,r4
   19204:	88cad83a 	srl	r5,r17,r3
   19208:	8908983a 	sll	r4,r17,r4
   1920c:	40c6d83a 	srl	r3,r8,r3
   19210:	5162b03a 	or	r17,r10,r5
   19214:	2008c03a 	cmpne	r4,r4,zero
   19218:	8922b03a 	or	r17,r17,r4
   1921c:	3463c83a 	sub	r17,r6,r17
   19220:	48c7c83a 	sub	r3,r9,r3
   19224:	344d803a 	cmpltu	r6,r6,r17
   19228:	1991c83a 	sub	r8,r3,r6
   1922c:	1021883a 	mov	r16,r2
   19230:	3825883a 	mov	r18,r7
   19234:	003f2706 	br	18ed4 <__adddf3+0x170>
   19238:	24d0b03a 	or	r8,r4,r19
   1923c:	40001b1e 	bne	r8,zero,192ac <__adddf3+0x548>
   19240:	0005883a 	mov	r2,zero
   19244:	0007883a 	mov	r3,zero
   19248:	0021883a 	mov	r16,zero
   1924c:	003f4d06 	br	18f84 <__adddf3+0x220>
   19250:	008007c4 	movi	r2,31
   19254:	11003c16 	blt	r2,r4,19348 <__adddf3+0x5e4>
   19258:	00800804 	movi	r2,32
   1925c:	1105c83a 	sub	r2,r2,r4
   19260:	488e983a 	sll	r7,r9,r2
   19264:	310ad83a 	srl	r5,r6,r4
   19268:	3084983a 	sll	r2,r6,r2
   1926c:	4912d83a 	srl	r9,r9,r4
   19270:	394ab03a 	or	r5,r7,r5
   19274:	1004c03a 	cmpne	r2,r2,zero
   19278:	288ab03a 	or	r5,r5,r2
   1927c:	003f5306 	br	18fcc <__adddf3+0x268>
   19280:	4448b03a 	or	r4,r8,r17
   19284:	20003e26 	beq	r4,zero,19380 <__adddf3+0x61c>
   19288:	00c6303a 	nor	r3,zero,r3
   1928c:	18003a1e 	bne	r3,zero,19378 <__adddf3+0x614>
   19290:	3463c83a 	sub	r17,r6,r17
   19294:	4a07c83a 	sub	r3,r9,r8
   19298:	344d803a 	cmpltu	r6,r6,r17
   1929c:	1991c83a 	sub	r8,r3,r6
   192a0:	1021883a 	mov	r16,r2
   192a4:	3825883a 	mov	r18,r7
   192a8:	003f0a06 	br	18ed4 <__adddf3+0x170>
   192ac:	2023883a 	mov	r17,r4
   192b0:	003f0d06 	br	18ee8 <__adddf3+0x184>
   192b4:	0081ffc4 	movi	r2,2047
   192b8:	80bf3f1e 	bne	r16,r2,18fb8 <__adddf3+0x254>
   192bc:	003ec806 	br	18de0 <__adddf3+0x7c>
   192c0:	0005883a 	mov	r2,zero
   192c4:	003fb106 	br	1918c <__adddf3+0x428>
   192c8:	0007883a 	mov	r3,zero
   192cc:	003fbc06 	br	191c0 <__adddf3+0x45c>
   192d0:	4444b03a 	or	r2,r8,r17
   192d4:	8000871e 	bne	r16,zero,194f4 <__adddf3+0x790>
   192d8:	1000ba26 	beq	r2,zero,195c4 <__adddf3+0x860>
   192dc:	4984b03a 	or	r2,r9,r6
   192e0:	103ebf26 	beq	r2,zero,18de0 <__adddf3+0x7c>
   192e4:	8985883a 	add	r2,r17,r6
   192e8:	4247883a 	add	r3,r8,r9
   192ec:	1451803a 	cmpltu	r8,r2,r17
   192f0:	40d1883a 	add	r8,r8,r3
   192f4:	40c0202c 	andhi	r3,r8,128
   192f8:	1023883a 	mov	r17,r2
   192fc:	183f1a26 	beq	r3,zero,18f68 <__adddf3+0x204>
   19300:	00bfe034 	movhi	r2,65408
   19304:	10bfffc4 	addi	r2,r2,-1
   19308:	2021883a 	mov	r16,r4
   1930c:	4090703a 	and	r8,r8,r2
   19310:	003eb306 	br	18de0 <__adddf3+0x7c>
   19314:	4444b03a 	or	r2,r8,r17
   19318:	8000291e 	bne	r16,zero,193c0 <__adddf3+0x65c>
   1931c:	10004b1e 	bne	r2,zero,1944c <__adddf3+0x6e8>
   19320:	4990b03a 	or	r8,r9,r6
   19324:	40008b26 	beq	r8,zero,19554 <__adddf3+0x7f0>
   19328:	4811883a 	mov	r8,r9
   1932c:	3023883a 	mov	r17,r6
   19330:	3825883a 	mov	r18,r7
   19334:	003eaa06 	br	18de0 <__adddf3+0x7c>
   19338:	1021883a 	mov	r16,r2
   1933c:	0011883a 	mov	r8,zero
   19340:	0005883a 	mov	r2,zero
   19344:	003f0f06 	br	18f84 <__adddf3+0x220>
   19348:	217ff804 	addi	r5,r4,-32
   1934c:	00800804 	movi	r2,32
   19350:	494ad83a 	srl	r5,r9,r5
   19354:	20807d26 	beq	r4,r2,1954c <__adddf3+0x7e8>
   19358:	00801004 	movi	r2,64
   1935c:	1109c83a 	sub	r4,r2,r4
   19360:	4912983a 	sll	r9,r9,r4
   19364:	498cb03a 	or	r6,r9,r6
   19368:	300cc03a 	cmpne	r6,r6,zero
   1936c:	298ab03a 	or	r5,r5,r6
   19370:	0013883a 	mov	r9,zero
   19374:	003f1506 	br	18fcc <__adddf3+0x268>
   19378:	0101ffc4 	movi	r4,2047
   1937c:	113f9a1e 	bne	r2,r4,191e8 <__adddf3+0x484>
   19380:	4811883a 	mov	r8,r9
   19384:	3023883a 	mov	r17,r6
   19388:	1021883a 	mov	r16,r2
   1938c:	3825883a 	mov	r18,r7
   19390:	003e9306 	br	18de0 <__adddf3+0x7c>
   19394:	8000161e 	bne	r16,zero,193f0 <__adddf3+0x68c>
   19398:	444ab03a 	or	r5,r8,r17
   1939c:	28005126 	beq	r5,zero,194e4 <__adddf3+0x780>
   193a0:	0108303a 	nor	r4,zero,r4
   193a4:	20004d1e 	bne	r4,zero,194dc <__adddf3+0x778>
   193a8:	89a3883a 	add	r17,r17,r6
   193ac:	4253883a 	add	r9,r8,r9
   193b0:	898d803a 	cmpltu	r6,r17,r6
   193b4:	3251883a 	add	r8,r6,r9
   193b8:	1021883a 	mov	r16,r2
   193bc:	003f0806 	br	18fe0 <__adddf3+0x27c>
   193c0:	1000301e 	bne	r2,zero,19484 <__adddf3+0x720>
   193c4:	4984b03a 	or	r2,r9,r6
   193c8:	10007126 	beq	r2,zero,19590 <__adddf3+0x82c>
   193cc:	4811883a 	mov	r8,r9
   193d0:	3023883a 	mov	r17,r6
   193d4:	3825883a 	mov	r18,r7
   193d8:	0401ffc4 	movi	r16,2047
   193dc:	003e8006 	br	18de0 <__adddf3+0x7c>
   193e0:	4462b03a 	or	r17,r8,r17
   193e4:	8822c03a 	cmpne	r17,r17,zero
   193e8:	0007883a 	mov	r3,zero
   193ec:	003f8b06 	br	1921c <__adddf3+0x4b8>
   193f0:	0141ffc4 	movi	r5,2047
   193f4:	11403b26 	beq	r2,r5,194e4 <__adddf3+0x780>
   193f8:	0109c83a 	sub	r4,zero,r4
   193fc:	42002034 	orhi	r8,r8,128
   19400:	01400e04 	movi	r5,56
   19404:	29006716 	blt	r5,r4,195a4 <__adddf3+0x840>
   19408:	014007c4 	movi	r5,31
   1940c:	29007016 	blt	r5,r4,195d0 <__adddf3+0x86c>
   19410:	01400804 	movi	r5,32
   19414:	290bc83a 	sub	r5,r5,r4
   19418:	4154983a 	sll	r10,r8,r5
   1941c:	890ed83a 	srl	r7,r17,r4
   19420:	894a983a 	sll	r5,r17,r5
   19424:	4108d83a 	srl	r4,r8,r4
   19428:	51e2b03a 	or	r17,r10,r7
   1942c:	280ac03a 	cmpne	r5,r5,zero
   19430:	8962b03a 	or	r17,r17,r5
   19434:	89a3883a 	add	r17,r17,r6
   19438:	2253883a 	add	r9,r4,r9
   1943c:	898d803a 	cmpltu	r6,r17,r6
   19440:	3251883a 	add	r8,r6,r9
   19444:	1021883a 	mov	r16,r2
   19448:	003ee506 	br	18fe0 <__adddf3+0x27c>
   1944c:	4984b03a 	or	r2,r9,r6
   19450:	103e6326 	beq	r2,zero,18de0 <__adddf3+0x7c>
   19454:	8987c83a 	sub	r3,r17,r6
   19458:	88c9803a 	cmpltu	r4,r17,r3
   1945c:	4245c83a 	sub	r2,r8,r9
   19460:	1105c83a 	sub	r2,r2,r4
   19464:	1100202c 	andhi	r4,r2,128
   19468:	203ebb26 	beq	r4,zero,18f58 <__adddf3+0x1f4>
   1946c:	3463c83a 	sub	r17,r6,r17
   19470:	4a07c83a 	sub	r3,r9,r8
   19474:	344d803a 	cmpltu	r6,r6,r17
   19478:	1991c83a 	sub	r8,r3,r6
   1947c:	3825883a 	mov	r18,r7
   19480:	003e5706 	br	18de0 <__adddf3+0x7c>
   19484:	4984b03a 	or	r2,r9,r6
   19488:	10002e26 	beq	r2,zero,19544 <__adddf3+0x7e0>
   1948c:	4004d0fa 	srli	r2,r8,3
   19490:	8822d0fa 	srli	r17,r17,3
   19494:	4010977a 	slli	r8,r8,29
   19498:	10c0022c 	andhi	r3,r2,8
   1949c:	4462b03a 	or	r17,r8,r17
   194a0:	18000826 	beq	r3,zero,194c4 <__adddf3+0x760>
   194a4:	4808d0fa 	srli	r4,r9,3
   194a8:	20c0022c 	andhi	r3,r4,8
   194ac:	1800051e 	bne	r3,zero,194c4 <__adddf3+0x760>
   194b0:	300cd0fa 	srli	r6,r6,3
   194b4:	4806977a 	slli	r3,r9,29
   194b8:	2005883a 	mov	r2,r4
   194bc:	3825883a 	mov	r18,r7
   194c0:	19a2b03a 	or	r17,r3,r6
   194c4:	8810d77a 	srli	r8,r17,29
   194c8:	100490fa 	slli	r2,r2,3
   194cc:	882290fa 	slli	r17,r17,3
   194d0:	0401ffc4 	movi	r16,2047
   194d4:	4090b03a 	or	r8,r8,r2
   194d8:	003e4106 	br	18de0 <__adddf3+0x7c>
   194dc:	0141ffc4 	movi	r5,2047
   194e0:	117fc71e 	bne	r2,r5,19400 <__adddf3+0x69c>
   194e4:	4811883a 	mov	r8,r9
   194e8:	3023883a 	mov	r17,r6
   194ec:	1021883a 	mov	r16,r2
   194f0:	003e3b06 	br	18de0 <__adddf3+0x7c>
   194f4:	10002f26 	beq	r2,zero,195b4 <__adddf3+0x850>
   194f8:	4984b03a 	or	r2,r9,r6
   194fc:	10001126 	beq	r2,zero,19544 <__adddf3+0x7e0>
   19500:	4004d0fa 	srli	r2,r8,3
   19504:	8822d0fa 	srli	r17,r17,3
   19508:	4010977a 	slli	r8,r8,29
   1950c:	10c0022c 	andhi	r3,r2,8
   19510:	4462b03a 	or	r17,r8,r17
   19514:	183feb26 	beq	r3,zero,194c4 <__adddf3+0x760>
   19518:	4808d0fa 	srli	r4,r9,3
   1951c:	20c0022c 	andhi	r3,r4,8
   19520:	183fe81e 	bne	r3,zero,194c4 <__adddf3+0x760>
   19524:	300cd0fa 	srli	r6,r6,3
   19528:	4806977a 	slli	r3,r9,29
   1952c:	2005883a 	mov	r2,r4
   19530:	19a2b03a 	or	r17,r3,r6
   19534:	003fe306 	br	194c4 <__adddf3+0x760>
   19538:	0011883a 	mov	r8,zero
   1953c:	0005883a 	mov	r2,zero
   19540:	003e3f06 	br	18e40 <__adddf3+0xdc>
   19544:	0401ffc4 	movi	r16,2047
   19548:	003e2506 	br	18de0 <__adddf3+0x7c>
   1954c:	0013883a 	mov	r9,zero
   19550:	003f8406 	br	19364 <__adddf3+0x600>
   19554:	0005883a 	mov	r2,zero
   19558:	0007883a 	mov	r3,zero
   1955c:	003e8906 	br	18f84 <__adddf3+0x220>
   19560:	197ff804 	addi	r5,r3,-32
   19564:	01000804 	movi	r4,32
   19568:	414ad83a 	srl	r5,r8,r5
   1956c:	19002426 	beq	r3,r4,19600 <__adddf3+0x89c>
   19570:	01001004 	movi	r4,64
   19574:	20c7c83a 	sub	r3,r4,r3
   19578:	40c6983a 	sll	r3,r8,r3
   1957c:	1c46b03a 	or	r3,r3,r17
   19580:	1806c03a 	cmpne	r3,r3,zero
   19584:	28e2b03a 	or	r17,r5,r3
   19588:	0007883a 	mov	r3,zero
   1958c:	003f2306 	br	1921c <__adddf3+0x4b8>
   19590:	0007883a 	mov	r3,zero
   19594:	5811883a 	mov	r8,r11
   19598:	00bfffc4 	movi	r2,-1
   1959c:	0401ffc4 	movi	r16,2047
   195a0:	003e7806 	br	18f84 <__adddf3+0x220>
   195a4:	4462b03a 	or	r17,r8,r17
   195a8:	8822c03a 	cmpne	r17,r17,zero
   195ac:	0009883a 	mov	r4,zero
   195b0:	003fa006 	br	19434 <__adddf3+0x6d0>
   195b4:	4811883a 	mov	r8,r9
   195b8:	3023883a 	mov	r17,r6
   195bc:	0401ffc4 	movi	r16,2047
   195c0:	003e0706 	br	18de0 <__adddf3+0x7c>
   195c4:	4811883a 	mov	r8,r9
   195c8:	3023883a 	mov	r17,r6
   195cc:	003e0406 	br	18de0 <__adddf3+0x7c>
   195d0:	21fff804 	addi	r7,r4,-32
   195d4:	01400804 	movi	r5,32
   195d8:	41ced83a 	srl	r7,r8,r7
   195dc:	21400a26 	beq	r4,r5,19608 <__adddf3+0x8a4>
   195e0:	01401004 	movi	r5,64
   195e4:	2909c83a 	sub	r4,r5,r4
   195e8:	4108983a 	sll	r4,r8,r4
   195ec:	2448b03a 	or	r4,r4,r17
   195f0:	2008c03a 	cmpne	r4,r4,zero
   195f4:	3922b03a 	or	r17,r7,r4
   195f8:	0009883a 	mov	r4,zero
   195fc:	003f8d06 	br	19434 <__adddf3+0x6d0>
   19600:	0007883a 	mov	r3,zero
   19604:	003fdd06 	br	1957c <__adddf3+0x818>
   19608:	0009883a 	mov	r4,zero
   1960c:	003ff706 	br	195ec <__adddf3+0x888>

00019610 <__divdf3>:
   19610:	defff204 	addi	sp,sp,-56
   19614:	dd400915 	stw	r21,36(sp)
   19618:	282ad53a 	srli	r21,r5,20
   1961c:	dd000815 	stw	r20,32(sp)
   19620:	2828d7fa 	srli	r20,r5,31
   19624:	dc000415 	stw	r16,16(sp)
   19628:	04000434 	movhi	r16,16
   1962c:	df000c15 	stw	fp,48(sp)
   19630:	843fffc4 	addi	r16,r16,-1
   19634:	dfc00d15 	stw	ra,52(sp)
   19638:	ddc00b15 	stw	r23,44(sp)
   1963c:	dd800a15 	stw	r22,40(sp)
   19640:	dcc00715 	stw	r19,28(sp)
   19644:	dc800615 	stw	r18,24(sp)
   19648:	dc400515 	stw	r17,20(sp)
   1964c:	ad41ffcc 	andi	r21,r21,2047
   19650:	2c20703a 	and	r16,r5,r16
   19654:	a7003fcc 	andi	fp,r20,255
   19658:	a8006126 	beq	r21,zero,197e0 <__divdf3+0x1d0>
   1965c:	0081ffc4 	movi	r2,2047
   19660:	2025883a 	mov	r18,r4
   19664:	a8803726 	beq	r21,r2,19744 <__divdf3+0x134>
   19668:	80800434 	orhi	r2,r16,16
   1966c:	100490fa 	slli	r2,r2,3
   19670:	2020d77a 	srli	r16,r4,29
   19674:	202490fa 	slli	r18,r4,3
   19678:	ad7f0044 	addi	r21,r21,-1023
   1967c:	80a0b03a 	or	r16,r16,r2
   19680:	0027883a 	mov	r19,zero
   19684:	0013883a 	mov	r9,zero
   19688:	3804d53a 	srli	r2,r7,20
   1968c:	382cd7fa 	srli	r22,r7,31
   19690:	04400434 	movhi	r17,16
   19694:	8c7fffc4 	addi	r17,r17,-1
   19698:	1081ffcc 	andi	r2,r2,2047
   1969c:	3011883a 	mov	r8,r6
   196a0:	3c62703a 	and	r17,r7,r17
   196a4:	b5c03fcc 	andi	r23,r22,255
   196a8:	10006c26 	beq	r2,zero,1985c <__divdf3+0x24c>
   196ac:	00c1ffc4 	movi	r3,2047
   196b0:	10c06426 	beq	r2,r3,19844 <__divdf3+0x234>
   196b4:	88c00434 	orhi	r3,r17,16
   196b8:	180690fa 	slli	r3,r3,3
   196bc:	3022d77a 	srli	r17,r6,29
   196c0:	301090fa 	slli	r8,r6,3
   196c4:	10bf0044 	addi	r2,r2,-1023
   196c8:	88e2b03a 	or	r17,r17,r3
   196cc:	000f883a 	mov	r7,zero
   196d0:	a58cf03a 	xor	r6,r20,r22
   196d4:	3cc8b03a 	or	r4,r7,r19
   196d8:	a8abc83a 	sub	r21,r21,r2
   196dc:	008003c4 	movi	r2,15
   196e0:	3007883a 	mov	r3,r6
   196e4:	34c03fcc 	andi	r19,r6,255
   196e8:	11009036 	bltu	r2,r4,1992c <__divdf3+0x31c>
   196ec:	200890ba 	slli	r4,r4,2
   196f0:	008000b4 	movhi	r2,2
   196f4:	10a5c104 	addi	r2,r2,-26876
   196f8:	2089883a 	add	r4,r4,r2
   196fc:	20800017 	ldw	r2,0(r4)
   19700:	1000683a 	jmp	r2
   19704:	0001992c 	andhi	zero,zero,1636
   19708:	0001977c 	xorhi	zero,zero,1629
   1970c:	0001991c 	xori	zero,zero,1636
   19710:	00019770 	cmpltui	zero,zero,1629
   19714:	0001991c 	xori	zero,zero,1636
   19718:	000198f0 	cmpltui	zero,zero,1635
   1971c:	0001991c 	xori	zero,zero,1636
   19720:	00019770 	cmpltui	zero,zero,1629
   19724:	0001977c 	xorhi	zero,zero,1629
   19728:	0001977c 	xorhi	zero,zero,1629
   1972c:	000198f0 	cmpltui	zero,zero,1635
   19730:	00019770 	cmpltui	zero,zero,1629
   19734:	00019760 	cmpeqi	zero,zero,1629
   19738:	00019760 	cmpeqi	zero,zero,1629
   1973c:	00019760 	cmpeqi	zero,zero,1629
   19740:	00019c10 	cmplti	zero,zero,1648
   19744:	2404b03a 	or	r2,r4,r16
   19748:	1000661e 	bne	r2,zero,198e4 <__divdf3+0x2d4>
   1974c:	04c00204 	movi	r19,8
   19750:	0021883a 	mov	r16,zero
   19754:	0025883a 	mov	r18,zero
   19758:	02400084 	movi	r9,2
   1975c:	003fca06 	br	19688 <__divdf3+0x78>
   19760:	8023883a 	mov	r17,r16
   19764:	9011883a 	mov	r8,r18
   19768:	e02f883a 	mov	r23,fp
   1976c:	480f883a 	mov	r7,r9
   19770:	00800084 	movi	r2,2
   19774:	3881311e 	bne	r7,r2,19c3c <__divdf3+0x62c>
   19778:	b827883a 	mov	r19,r23
   1977c:	98c0004c 	andi	r3,r19,1
   19780:	0081ffc4 	movi	r2,2047
   19784:	000b883a 	mov	r5,zero
   19788:	0025883a 	mov	r18,zero
   1978c:	1004953a 	slli	r2,r2,20
   19790:	18c03fcc 	andi	r3,r3,255
   19794:	04400434 	movhi	r17,16
   19798:	8c7fffc4 	addi	r17,r17,-1
   1979c:	180697fa 	slli	r3,r3,31
   197a0:	2c4a703a 	and	r5,r5,r17
   197a4:	288ab03a 	or	r5,r5,r2
   197a8:	28c6b03a 	or	r3,r5,r3
   197ac:	9005883a 	mov	r2,r18
   197b0:	dfc00d17 	ldw	ra,52(sp)
   197b4:	df000c17 	ldw	fp,48(sp)
   197b8:	ddc00b17 	ldw	r23,44(sp)
   197bc:	dd800a17 	ldw	r22,40(sp)
   197c0:	dd400917 	ldw	r21,36(sp)
   197c4:	dd000817 	ldw	r20,32(sp)
   197c8:	dcc00717 	ldw	r19,28(sp)
   197cc:	dc800617 	ldw	r18,24(sp)
   197d0:	dc400517 	ldw	r17,20(sp)
   197d4:	dc000417 	ldw	r16,16(sp)
   197d8:	dec00e04 	addi	sp,sp,56
   197dc:	f800283a 	ret
   197e0:	2404b03a 	or	r2,r4,r16
   197e4:	2027883a 	mov	r19,r4
   197e8:	10003926 	beq	r2,zero,198d0 <__divdf3+0x2c0>
   197ec:	80012e26 	beq	r16,zero,19ca8 <__divdf3+0x698>
   197f0:	8009883a 	mov	r4,r16
   197f4:	d9800315 	stw	r6,12(sp)
   197f8:	d9c00215 	stw	r7,8(sp)
   197fc:	000b3fc0 	call	b3fc <__clzsi2>
   19800:	d9800317 	ldw	r6,12(sp)
   19804:	d9c00217 	ldw	r7,8(sp)
   19808:	113ffd44 	addi	r4,r2,-11
   1980c:	00c00704 	movi	r3,28
   19810:	19012116 	blt	r3,r4,19c98 <__divdf3+0x688>
   19814:	00c00744 	movi	r3,29
   19818:	147ffe04 	addi	r17,r2,-8
   1981c:	1907c83a 	sub	r3,r3,r4
   19820:	8460983a 	sll	r16,r16,r17
   19824:	98c6d83a 	srl	r3,r19,r3
   19828:	9c64983a 	sll	r18,r19,r17
   1982c:	1c20b03a 	or	r16,r3,r16
   19830:	1080fcc4 	addi	r2,r2,1011
   19834:	00abc83a 	sub	r21,zero,r2
   19838:	0027883a 	mov	r19,zero
   1983c:	0013883a 	mov	r9,zero
   19840:	003f9106 	br	19688 <__divdf3+0x78>
   19844:	3446b03a 	or	r3,r6,r17
   19848:	18001f1e 	bne	r3,zero,198c8 <__divdf3+0x2b8>
   1984c:	0023883a 	mov	r17,zero
   19850:	0011883a 	mov	r8,zero
   19854:	01c00084 	movi	r7,2
   19858:	003f9d06 	br	196d0 <__divdf3+0xc0>
   1985c:	3446b03a 	or	r3,r6,r17
   19860:	18001526 	beq	r3,zero,198b8 <__divdf3+0x2a8>
   19864:	88011b26 	beq	r17,zero,19cd4 <__divdf3+0x6c4>
   19868:	8809883a 	mov	r4,r17
   1986c:	d9800315 	stw	r6,12(sp)
   19870:	da400115 	stw	r9,4(sp)
   19874:	000b3fc0 	call	b3fc <__clzsi2>
   19878:	d9800317 	ldw	r6,12(sp)
   1987c:	da400117 	ldw	r9,4(sp)
   19880:	113ffd44 	addi	r4,r2,-11
   19884:	00c00704 	movi	r3,28
   19888:	19010e16 	blt	r3,r4,19cc4 <__divdf3+0x6b4>
   1988c:	00c00744 	movi	r3,29
   19890:	123ffe04 	addi	r8,r2,-8
   19894:	1907c83a 	sub	r3,r3,r4
   19898:	8a22983a 	sll	r17,r17,r8
   1989c:	30c6d83a 	srl	r3,r6,r3
   198a0:	3210983a 	sll	r8,r6,r8
   198a4:	1c62b03a 	or	r17,r3,r17
   198a8:	1080fcc4 	addi	r2,r2,1011
   198ac:	0085c83a 	sub	r2,zero,r2
   198b0:	000f883a 	mov	r7,zero
   198b4:	003f8606 	br	196d0 <__divdf3+0xc0>
   198b8:	0023883a 	mov	r17,zero
   198bc:	0011883a 	mov	r8,zero
   198c0:	01c00044 	movi	r7,1
   198c4:	003f8206 	br	196d0 <__divdf3+0xc0>
   198c8:	01c000c4 	movi	r7,3
   198cc:	003f8006 	br	196d0 <__divdf3+0xc0>
   198d0:	04c00104 	movi	r19,4
   198d4:	0021883a 	mov	r16,zero
   198d8:	0025883a 	mov	r18,zero
   198dc:	02400044 	movi	r9,1
   198e0:	003f6906 	br	19688 <__divdf3+0x78>
   198e4:	04c00304 	movi	r19,12
   198e8:	024000c4 	movi	r9,3
   198ec:	003f6606 	br	19688 <__divdf3+0x78>
   198f0:	01400434 	movhi	r5,16
   198f4:	0007883a 	mov	r3,zero
   198f8:	297fffc4 	addi	r5,r5,-1
   198fc:	04bfffc4 	movi	r18,-1
   19900:	0081ffc4 	movi	r2,2047
   19904:	003fa106 	br	1978c <__divdf3+0x17c>
   19908:	00c00044 	movi	r3,1
   1990c:	1887c83a 	sub	r3,r3,r2
   19910:	01000e04 	movi	r4,56
   19914:	20c1210e 	bge	r4,r3,19d9c <__divdf3+0x78c>
   19918:	98c0004c 	andi	r3,r19,1
   1991c:	0005883a 	mov	r2,zero
   19920:	000b883a 	mov	r5,zero
   19924:	0025883a 	mov	r18,zero
   19928:	003f9806 	br	1978c <__divdf3+0x17c>
   1992c:	8c00fd36 	bltu	r17,r16,19d24 <__divdf3+0x714>
   19930:	8440fb26 	beq	r16,r17,19d20 <__divdf3+0x710>
   19934:	8007883a 	mov	r3,r16
   19938:	ad7fffc4 	addi	r21,r21,-1
   1993c:	0021883a 	mov	r16,zero
   19940:	4004d63a 	srli	r2,r8,24
   19944:	8822923a 	slli	r17,r17,8
   19948:	1809883a 	mov	r4,r3
   1994c:	402c923a 	slli	r22,r8,8
   19950:	88b8b03a 	or	fp,r17,r2
   19954:	e028d43a 	srli	r20,fp,16
   19958:	d8c00015 	stw	r3,0(sp)
   1995c:	e5ffffcc 	andi	r23,fp,65535
   19960:	a00b883a 	mov	r5,r20
   19964:	0018ca80 	call	18ca8 <__udivsi3>
   19968:	d8c00017 	ldw	r3,0(sp)
   1996c:	a00b883a 	mov	r5,r20
   19970:	d8800315 	stw	r2,12(sp)
   19974:	1809883a 	mov	r4,r3
   19978:	0018d0c0 	call	18d0c <__umodsi3>
   1997c:	d9800317 	ldw	r6,12(sp)
   19980:	1006943a 	slli	r3,r2,16
   19984:	9004d43a 	srli	r2,r18,16
   19988:	b9a3383a 	mul	r17,r23,r6
   1998c:	10c4b03a 	or	r2,r2,r3
   19990:	1440062e 	bgeu	r2,r17,199ac <__divdf3+0x39c>
   19994:	1705883a 	add	r2,r2,fp
   19998:	30ffffc4 	addi	r3,r6,-1
   1999c:	1700ee36 	bltu	r2,fp,19d58 <__divdf3+0x748>
   199a0:	1440ed2e 	bgeu	r2,r17,19d58 <__divdf3+0x748>
   199a4:	31bfff84 	addi	r6,r6,-2
   199a8:	1705883a 	add	r2,r2,fp
   199ac:	1463c83a 	sub	r17,r2,r17
   199b0:	a00b883a 	mov	r5,r20
   199b4:	8809883a 	mov	r4,r17
   199b8:	d9800315 	stw	r6,12(sp)
   199bc:	0018ca80 	call	18ca8 <__udivsi3>
   199c0:	a00b883a 	mov	r5,r20
   199c4:	8809883a 	mov	r4,r17
   199c8:	d8800215 	stw	r2,8(sp)
   199cc:	0018d0c0 	call	18d0c <__umodsi3>
   199d0:	d9c00217 	ldw	r7,8(sp)
   199d4:	1004943a 	slli	r2,r2,16
   199d8:	94bfffcc 	andi	r18,r18,65535
   199dc:	b9d1383a 	mul	r8,r23,r7
   199e0:	90a4b03a 	or	r18,r18,r2
   199e4:	d9800317 	ldw	r6,12(sp)
   199e8:	9200062e 	bgeu	r18,r8,19a04 <__divdf3+0x3f4>
   199ec:	9725883a 	add	r18,r18,fp
   199f0:	38bfffc4 	addi	r2,r7,-1
   199f4:	9700d636 	bltu	r18,fp,19d50 <__divdf3+0x740>
   199f8:	9200d52e 	bgeu	r18,r8,19d50 <__divdf3+0x740>
   199fc:	39ffff84 	addi	r7,r7,-2
   19a00:	9725883a 	add	r18,r18,fp
   19a04:	3004943a 	slli	r2,r6,16
   19a08:	b012d43a 	srli	r9,r22,16
   19a0c:	b1bfffcc 	andi	r6,r22,65535
   19a10:	11e2b03a 	or	r17,r2,r7
   19a14:	8806d43a 	srli	r3,r17,16
   19a18:	893fffcc 	andi	r4,r17,65535
   19a1c:	218b383a 	mul	r5,r4,r6
   19a20:	30c5383a 	mul	r2,r6,r3
   19a24:	2249383a 	mul	r4,r4,r9
   19a28:	280ed43a 	srli	r7,r5,16
   19a2c:	9225c83a 	sub	r18,r18,r8
   19a30:	2089883a 	add	r4,r4,r2
   19a34:	3909883a 	add	r4,r7,r4
   19a38:	1a47383a 	mul	r3,r3,r9
   19a3c:	2080022e 	bgeu	r4,r2,19a48 <__divdf3+0x438>
   19a40:	00800074 	movhi	r2,1
   19a44:	1887883a 	add	r3,r3,r2
   19a48:	2004d43a 	srli	r2,r4,16
   19a4c:	2008943a 	slli	r4,r4,16
   19a50:	297fffcc 	andi	r5,r5,65535
   19a54:	10c7883a 	add	r3,r2,r3
   19a58:	2149883a 	add	r4,r4,r5
   19a5c:	90c0a536 	bltu	r18,r3,19cf4 <__divdf3+0x6e4>
   19a60:	90c0bf26 	beq	r18,r3,19d60 <__divdf3+0x750>
   19a64:	90c7c83a 	sub	r3,r18,r3
   19a68:	810fc83a 	sub	r7,r16,r4
   19a6c:	81e5803a 	cmpltu	r18,r16,r7
   19a70:	1ca5c83a 	sub	r18,r3,r18
   19a74:	e480c126 	beq	fp,r18,19d7c <__divdf3+0x76c>
   19a78:	a00b883a 	mov	r5,r20
   19a7c:	9009883a 	mov	r4,r18
   19a80:	d9800315 	stw	r6,12(sp)
   19a84:	d9c00215 	stw	r7,8(sp)
   19a88:	da400115 	stw	r9,4(sp)
   19a8c:	0018ca80 	call	18ca8 <__udivsi3>
   19a90:	a00b883a 	mov	r5,r20
   19a94:	9009883a 	mov	r4,r18
   19a98:	d8800015 	stw	r2,0(sp)
   19a9c:	0018d0c0 	call	18d0c <__umodsi3>
   19aa0:	d9c00217 	ldw	r7,8(sp)
   19aa4:	da000017 	ldw	r8,0(sp)
   19aa8:	1006943a 	slli	r3,r2,16
   19aac:	3804d43a 	srli	r2,r7,16
   19ab0:	ba21383a 	mul	r16,r23,r8
   19ab4:	d9800317 	ldw	r6,12(sp)
   19ab8:	10c4b03a 	or	r2,r2,r3
   19abc:	da400117 	ldw	r9,4(sp)
   19ac0:	1400062e 	bgeu	r2,r16,19adc <__divdf3+0x4cc>
   19ac4:	1705883a 	add	r2,r2,fp
   19ac8:	40ffffc4 	addi	r3,r8,-1
   19acc:	1700ad36 	bltu	r2,fp,19d84 <__divdf3+0x774>
   19ad0:	1400ac2e 	bgeu	r2,r16,19d84 <__divdf3+0x774>
   19ad4:	423fff84 	addi	r8,r8,-2
   19ad8:	1705883a 	add	r2,r2,fp
   19adc:	1421c83a 	sub	r16,r2,r16
   19ae0:	a00b883a 	mov	r5,r20
   19ae4:	8009883a 	mov	r4,r16
   19ae8:	d9800315 	stw	r6,12(sp)
   19aec:	d9c00215 	stw	r7,8(sp)
   19af0:	da000015 	stw	r8,0(sp)
   19af4:	da400115 	stw	r9,4(sp)
   19af8:	0018ca80 	call	18ca8 <__udivsi3>
   19afc:	8009883a 	mov	r4,r16
   19b00:	a00b883a 	mov	r5,r20
   19b04:	1025883a 	mov	r18,r2
   19b08:	0018d0c0 	call	18d0c <__umodsi3>
   19b0c:	d9c00217 	ldw	r7,8(sp)
   19b10:	1004943a 	slli	r2,r2,16
   19b14:	bcaf383a 	mul	r23,r23,r18
   19b18:	393fffcc 	andi	r4,r7,65535
   19b1c:	2088b03a 	or	r4,r4,r2
   19b20:	d9800317 	ldw	r6,12(sp)
   19b24:	da000017 	ldw	r8,0(sp)
   19b28:	da400117 	ldw	r9,4(sp)
   19b2c:	25c0062e 	bgeu	r4,r23,19b48 <__divdf3+0x538>
   19b30:	2709883a 	add	r4,r4,fp
   19b34:	90bfffc4 	addi	r2,r18,-1
   19b38:	27009436 	bltu	r4,fp,19d8c <__divdf3+0x77c>
   19b3c:	25c0932e 	bgeu	r4,r23,19d8c <__divdf3+0x77c>
   19b40:	94bfff84 	addi	r18,r18,-2
   19b44:	2709883a 	add	r4,r4,fp
   19b48:	4004943a 	slli	r2,r8,16
   19b4c:	25efc83a 	sub	r23,r4,r23
   19b50:	1490b03a 	or	r8,r2,r18
   19b54:	4008d43a 	srli	r4,r8,16
   19b58:	40ffffcc 	andi	r3,r8,65535
   19b5c:	30c5383a 	mul	r2,r6,r3
   19b60:	1a47383a 	mul	r3,r3,r9
   19b64:	310d383a 	mul	r6,r6,r4
   19b68:	100ad43a 	srli	r5,r2,16
   19b6c:	4913383a 	mul	r9,r9,r4
   19b70:	1987883a 	add	r3,r3,r6
   19b74:	28c7883a 	add	r3,r5,r3
   19b78:	1980022e 	bgeu	r3,r6,19b84 <__divdf3+0x574>
   19b7c:	01000074 	movhi	r4,1
   19b80:	4913883a 	add	r9,r9,r4
   19b84:	1808d43a 	srli	r4,r3,16
   19b88:	1806943a 	slli	r3,r3,16
   19b8c:	10bfffcc 	andi	r2,r2,65535
   19b90:	2253883a 	add	r9,r4,r9
   19b94:	1887883a 	add	r3,r3,r2
   19b98:	ba403836 	bltu	r23,r9,19c7c <__divdf3+0x66c>
   19b9c:	ba403626 	beq	r23,r9,19c78 <__divdf3+0x668>
   19ba0:	42000054 	ori	r8,r8,1
   19ba4:	a880ffc4 	addi	r2,r21,1023
   19ba8:	00bf570e 	bge	zero,r2,19908 <__divdf3+0x2f8>
   19bac:	40c001cc 	andi	r3,r8,7
   19bb0:	18000726 	beq	r3,zero,19bd0 <__divdf3+0x5c0>
   19bb4:	40c003cc 	andi	r3,r8,15
   19bb8:	01000104 	movi	r4,4
   19bbc:	19000426 	beq	r3,r4,19bd0 <__divdf3+0x5c0>
   19bc0:	4107883a 	add	r3,r8,r4
   19bc4:	1a11803a 	cmpltu	r8,r3,r8
   19bc8:	8a23883a 	add	r17,r17,r8
   19bcc:	1811883a 	mov	r8,r3
   19bd0:	88c0402c 	andhi	r3,r17,256
   19bd4:	18000426 	beq	r3,zero,19be8 <__divdf3+0x5d8>
   19bd8:	00ffc034 	movhi	r3,65280
   19bdc:	18ffffc4 	addi	r3,r3,-1
   19be0:	a8810004 	addi	r2,r21,1024
   19be4:	88e2703a 	and	r17,r17,r3
   19be8:	00c1ff84 	movi	r3,2046
   19bec:	18bee316 	blt	r3,r2,1977c <__divdf3+0x16c>
   19bf0:	8824977a 	slli	r18,r17,29
   19bf4:	4010d0fa 	srli	r8,r8,3
   19bf8:	8822927a 	slli	r17,r17,9
   19bfc:	1081ffcc 	andi	r2,r2,2047
   19c00:	9224b03a 	or	r18,r18,r8
   19c04:	880ad33a 	srli	r5,r17,12
   19c08:	98c0004c 	andi	r3,r19,1
   19c0c:	003edf06 	br	1978c <__divdf3+0x17c>
   19c10:	8080022c 	andhi	r2,r16,8
   19c14:	10001226 	beq	r2,zero,19c60 <__divdf3+0x650>
   19c18:	8880022c 	andhi	r2,r17,8
   19c1c:	1000101e 	bne	r2,zero,19c60 <__divdf3+0x650>
   19c20:	00800434 	movhi	r2,16
   19c24:	89400234 	orhi	r5,r17,8
   19c28:	10bfffc4 	addi	r2,r2,-1
   19c2c:	b007883a 	mov	r3,r22
   19c30:	288a703a 	and	r5,r5,r2
   19c34:	4025883a 	mov	r18,r8
   19c38:	003f3106 	br	19900 <__divdf3+0x2f0>
   19c3c:	008000c4 	movi	r2,3
   19c40:	3880a626 	beq	r7,r2,19edc <__divdf3+0x8cc>
   19c44:	00800044 	movi	r2,1
   19c48:	3880521e 	bne	r7,r2,19d94 <__divdf3+0x784>
   19c4c:	b807883a 	mov	r3,r23
   19c50:	0005883a 	mov	r2,zero
   19c54:	000b883a 	mov	r5,zero
   19c58:	0025883a 	mov	r18,zero
   19c5c:	003ecb06 	br	1978c <__divdf3+0x17c>
   19c60:	00800434 	movhi	r2,16
   19c64:	81400234 	orhi	r5,r16,8
   19c68:	10bfffc4 	addi	r2,r2,-1
   19c6c:	a007883a 	mov	r3,r20
   19c70:	288a703a 	and	r5,r5,r2
   19c74:	003f2206 	br	19900 <__divdf3+0x2f0>
   19c78:	183fca26 	beq	r3,zero,19ba4 <__divdf3+0x594>
   19c7c:	e5ef883a 	add	r23,fp,r23
   19c80:	40bfffc4 	addi	r2,r8,-1
   19c84:	bf00392e 	bgeu	r23,fp,19d6c <__divdf3+0x75c>
   19c88:	1011883a 	mov	r8,r2
   19c8c:	ba7fc41e 	bne	r23,r9,19ba0 <__divdf3+0x590>
   19c90:	b0ffc31e 	bne	r22,r3,19ba0 <__divdf3+0x590>
   19c94:	003fc306 	br	19ba4 <__divdf3+0x594>
   19c98:	143ff604 	addi	r16,r2,-40
   19c9c:	9c20983a 	sll	r16,r19,r16
   19ca0:	0025883a 	mov	r18,zero
   19ca4:	003ee206 	br	19830 <__divdf3+0x220>
   19ca8:	d9800315 	stw	r6,12(sp)
   19cac:	d9c00215 	stw	r7,8(sp)
   19cb0:	000b3fc0 	call	b3fc <__clzsi2>
   19cb4:	10800804 	addi	r2,r2,32
   19cb8:	d9c00217 	ldw	r7,8(sp)
   19cbc:	d9800317 	ldw	r6,12(sp)
   19cc0:	003ed106 	br	19808 <__divdf3+0x1f8>
   19cc4:	147ff604 	addi	r17,r2,-40
   19cc8:	3462983a 	sll	r17,r6,r17
   19ccc:	0011883a 	mov	r8,zero
   19cd0:	003ef506 	br	198a8 <__divdf3+0x298>
   19cd4:	3009883a 	mov	r4,r6
   19cd8:	d9800315 	stw	r6,12(sp)
   19cdc:	da400115 	stw	r9,4(sp)
   19ce0:	000b3fc0 	call	b3fc <__clzsi2>
   19ce4:	10800804 	addi	r2,r2,32
   19ce8:	da400117 	ldw	r9,4(sp)
   19cec:	d9800317 	ldw	r6,12(sp)
   19cf0:	003ee306 	br	19880 <__divdf3+0x270>
   19cf4:	85a1883a 	add	r16,r16,r22
   19cf8:	8585803a 	cmpltu	r2,r16,r22
   19cfc:	1705883a 	add	r2,r2,fp
   19d00:	14a5883a 	add	r18,r2,r18
   19d04:	88bfffc4 	addi	r2,r17,-1
   19d08:	e4800c2e 	bgeu	fp,r18,19d3c <__divdf3+0x72c>
   19d0c:	90c03e36 	bltu	r18,r3,19e08 <__divdf3+0x7f8>
   19d10:	1c806926 	beq	r3,r18,19eb8 <__divdf3+0x8a8>
   19d14:	90c7c83a 	sub	r3,r18,r3
   19d18:	1023883a 	mov	r17,r2
   19d1c:	003f5206 	br	19a68 <__divdf3+0x458>
   19d20:	923f0436 	bltu	r18,r8,19934 <__divdf3+0x324>
   19d24:	800897fa 	slli	r4,r16,31
   19d28:	9004d07a 	srli	r2,r18,1
   19d2c:	8006d07a 	srli	r3,r16,1
   19d30:	902097fa 	slli	r16,r18,31
   19d34:	20a4b03a 	or	r18,r4,r2
   19d38:	003f0106 	br	19940 <__divdf3+0x330>
   19d3c:	e4bff51e 	bne	fp,r18,19d14 <__divdf3+0x704>
   19d40:	85bff22e 	bgeu	r16,r22,19d0c <__divdf3+0x6fc>
   19d44:	e0c7c83a 	sub	r3,fp,r3
   19d48:	1023883a 	mov	r17,r2
   19d4c:	003f4606 	br	19a68 <__divdf3+0x458>
   19d50:	100f883a 	mov	r7,r2
   19d54:	003f2b06 	br	19a04 <__divdf3+0x3f4>
   19d58:	180d883a 	mov	r6,r3
   19d5c:	003f1306 	br	199ac <__divdf3+0x39c>
   19d60:	813fe436 	bltu	r16,r4,19cf4 <__divdf3+0x6e4>
   19d64:	0007883a 	mov	r3,zero
   19d68:	003f3f06 	br	19a68 <__divdf3+0x458>
   19d6c:	ba402c36 	bltu	r23,r9,19e20 <__divdf3+0x810>
   19d70:	4dc05426 	beq	r9,r23,19ec4 <__divdf3+0x8b4>
   19d74:	1011883a 	mov	r8,r2
   19d78:	003f8906 	br	19ba0 <__divdf3+0x590>
   19d7c:	023fffc4 	movi	r8,-1
   19d80:	003f8806 	br	19ba4 <__divdf3+0x594>
   19d84:	1811883a 	mov	r8,r3
   19d88:	003f5406 	br	19adc <__divdf3+0x4cc>
   19d8c:	1025883a 	mov	r18,r2
   19d90:	003f6d06 	br	19b48 <__divdf3+0x538>
   19d94:	b827883a 	mov	r19,r23
   19d98:	003f8206 	br	19ba4 <__divdf3+0x594>
   19d9c:	010007c4 	movi	r4,31
   19da0:	20c02616 	blt	r4,r3,19e3c <__divdf3+0x82c>
   19da4:	00800804 	movi	r2,32
   19da8:	10c5c83a 	sub	r2,r2,r3
   19dac:	888a983a 	sll	r5,r17,r2
   19db0:	40c8d83a 	srl	r4,r8,r3
   19db4:	4084983a 	sll	r2,r8,r2
   19db8:	88e2d83a 	srl	r17,r17,r3
   19dbc:	2906b03a 	or	r3,r5,r4
   19dc0:	1004c03a 	cmpne	r2,r2,zero
   19dc4:	1886b03a 	or	r3,r3,r2
   19dc8:	188001cc 	andi	r2,r3,7
   19dcc:	10000726 	beq	r2,zero,19dec <__divdf3+0x7dc>
   19dd0:	188003cc 	andi	r2,r3,15
   19dd4:	01000104 	movi	r4,4
   19dd8:	11000426 	beq	r2,r4,19dec <__divdf3+0x7dc>
   19ddc:	1805883a 	mov	r2,r3
   19de0:	10c00104 	addi	r3,r2,4
   19de4:	1885803a 	cmpltu	r2,r3,r2
   19de8:	88a3883a 	add	r17,r17,r2
   19dec:	8880202c 	andhi	r2,r17,128
   19df0:	10002726 	beq	r2,zero,19e90 <__divdf3+0x880>
   19df4:	98c0004c 	andi	r3,r19,1
   19df8:	00800044 	movi	r2,1
   19dfc:	000b883a 	mov	r5,zero
   19e00:	0025883a 	mov	r18,zero
   19e04:	003e6106 	br	1978c <__divdf3+0x17c>
   19e08:	85a1883a 	add	r16,r16,r22
   19e0c:	8585803a 	cmpltu	r2,r16,r22
   19e10:	1705883a 	add	r2,r2,fp
   19e14:	14a5883a 	add	r18,r2,r18
   19e18:	8c7fff84 	addi	r17,r17,-2
   19e1c:	003f1106 	br	19a64 <__divdf3+0x454>
   19e20:	b589883a 	add	r4,r22,r22
   19e24:	25ad803a 	cmpltu	r22,r4,r22
   19e28:	b739883a 	add	fp,r22,fp
   19e2c:	40bfff84 	addi	r2,r8,-2
   19e30:	bf2f883a 	add	r23,r23,fp
   19e34:	202d883a 	mov	r22,r4
   19e38:	003f9306 	br	19c88 <__divdf3+0x678>
   19e3c:	013ff844 	movi	r4,-31
   19e40:	2085c83a 	sub	r2,r4,r2
   19e44:	8888d83a 	srl	r4,r17,r2
   19e48:	00800804 	movi	r2,32
   19e4c:	18802126 	beq	r3,r2,19ed4 <__divdf3+0x8c4>
   19e50:	00801004 	movi	r2,64
   19e54:	10c5c83a 	sub	r2,r2,r3
   19e58:	8884983a 	sll	r2,r17,r2
   19e5c:	1204b03a 	or	r2,r2,r8
   19e60:	1004c03a 	cmpne	r2,r2,zero
   19e64:	2084b03a 	or	r2,r4,r2
   19e68:	144001cc 	andi	r17,r2,7
   19e6c:	88000d1e 	bne	r17,zero,19ea4 <__divdf3+0x894>
   19e70:	000b883a 	mov	r5,zero
   19e74:	1024d0fa 	srli	r18,r2,3
   19e78:	98c0004c 	andi	r3,r19,1
   19e7c:	0005883a 	mov	r2,zero
   19e80:	9464b03a 	or	r18,r18,r17
   19e84:	003e4106 	br	1978c <__divdf3+0x17c>
   19e88:	1007883a 	mov	r3,r2
   19e8c:	0023883a 	mov	r17,zero
   19e90:	880a927a 	slli	r5,r17,9
   19e94:	1805883a 	mov	r2,r3
   19e98:	8822977a 	slli	r17,r17,29
   19e9c:	280ad33a 	srli	r5,r5,12
   19ea0:	003ff406 	br	19e74 <__divdf3+0x864>
   19ea4:	10c003cc 	andi	r3,r2,15
   19ea8:	01000104 	movi	r4,4
   19eac:	193ff626 	beq	r3,r4,19e88 <__divdf3+0x878>
   19eb0:	0023883a 	mov	r17,zero
   19eb4:	003fca06 	br	19de0 <__divdf3+0x7d0>
   19eb8:	813fd336 	bltu	r16,r4,19e08 <__divdf3+0x7f8>
   19ebc:	1023883a 	mov	r17,r2
   19ec0:	003fa806 	br	19d64 <__divdf3+0x754>
   19ec4:	b0ffd636 	bltu	r22,r3,19e20 <__divdf3+0x810>
   19ec8:	1011883a 	mov	r8,r2
   19ecc:	b0ff341e 	bne	r22,r3,19ba0 <__divdf3+0x590>
   19ed0:	003f3406 	br	19ba4 <__divdf3+0x594>
   19ed4:	0005883a 	mov	r2,zero
   19ed8:	003fe006 	br	19e5c <__divdf3+0x84c>
   19edc:	00800434 	movhi	r2,16
   19ee0:	89400234 	orhi	r5,r17,8
   19ee4:	10bfffc4 	addi	r2,r2,-1
   19ee8:	b807883a 	mov	r3,r23
   19eec:	288a703a 	and	r5,r5,r2
   19ef0:	4025883a 	mov	r18,r8
   19ef4:	003e8206 	br	19900 <__divdf3+0x2f0>

00019ef8 <__eqdf2>:
   19ef8:	2804d53a 	srli	r2,r5,20
   19efc:	3806d53a 	srli	r3,r7,20
   19f00:	02000434 	movhi	r8,16
   19f04:	423fffc4 	addi	r8,r8,-1
   19f08:	1081ffcc 	andi	r2,r2,2047
   19f0c:	0281ffc4 	movi	r10,2047
   19f10:	2a12703a 	and	r9,r5,r8
   19f14:	18c1ffcc 	andi	r3,r3,2047
   19f18:	3a10703a 	and	r8,r7,r8
   19f1c:	280ad7fa 	srli	r5,r5,31
   19f20:	380ed7fa 	srli	r7,r7,31
   19f24:	12801026 	beq	r2,r10,19f68 <__eqdf2+0x70>
   19f28:	0281ffc4 	movi	r10,2047
   19f2c:	1a800a26 	beq	r3,r10,19f58 <__eqdf2+0x60>
   19f30:	10c00226 	beq	r2,r3,19f3c <__eqdf2+0x44>
   19f34:	00800044 	movi	r2,1
   19f38:	f800283a 	ret
   19f3c:	4a3ffd1e 	bne	r9,r8,19f34 <__eqdf2+0x3c>
   19f40:	21bffc1e 	bne	r4,r6,19f34 <__eqdf2+0x3c>
   19f44:	29c00c26 	beq	r5,r7,19f78 <__eqdf2+0x80>
   19f48:	103ffa1e 	bne	r2,zero,19f34 <__eqdf2+0x3c>
   19f4c:	2244b03a 	or	r2,r4,r9
   19f50:	1004c03a 	cmpne	r2,r2,zero
   19f54:	f800283a 	ret
   19f58:	3214b03a 	or	r10,r6,r8
   19f5c:	503ff426 	beq	r10,zero,19f30 <__eqdf2+0x38>
   19f60:	00800044 	movi	r2,1
   19f64:	f800283a 	ret
   19f68:	2254b03a 	or	r10,r4,r9
   19f6c:	503fee26 	beq	r10,zero,19f28 <__eqdf2+0x30>
   19f70:	00800044 	movi	r2,1
   19f74:	f800283a 	ret
   19f78:	0005883a 	mov	r2,zero
   19f7c:	f800283a 	ret

00019f80 <__ledf2>:
   19f80:	2804d53a 	srli	r2,r5,20
   19f84:	3810d53a 	srli	r8,r7,20
   19f88:	00c00434 	movhi	r3,16
   19f8c:	18ffffc4 	addi	r3,r3,-1
   19f90:	1081ffcc 	andi	r2,r2,2047
   19f94:	0241ffc4 	movi	r9,2047
   19f98:	28d4703a 	and	r10,r5,r3
   19f9c:	4201ffcc 	andi	r8,r8,2047
   19fa0:	38c6703a 	and	r3,r7,r3
   19fa4:	280ad7fa 	srli	r5,r5,31
   19fa8:	380ed7fa 	srli	r7,r7,31
   19fac:	12401f26 	beq	r2,r9,1a02c <__ledf2+0xac>
   19fb0:	0241ffc4 	movi	r9,2047
   19fb4:	42401426 	beq	r8,r9,1a008 <__ledf2+0x88>
   19fb8:	1000091e 	bne	r2,zero,19fe0 <__ledf2+0x60>
   19fbc:	2296b03a 	or	r11,r4,r10
   19fc0:	5813003a 	cmpeq	r9,r11,zero
   19fc4:	29403fcc 	andi	r5,r5,255
   19fc8:	40000a1e 	bne	r8,zero,19ff4 <__ledf2+0x74>
   19fcc:	30d8b03a 	or	r12,r6,r3
   19fd0:	6000081e 	bne	r12,zero,19ff4 <__ledf2+0x74>
   19fd4:	0005883a 	mov	r2,zero
   19fd8:	5800111e 	bne	r11,zero,1a020 <__ledf2+0xa0>
   19fdc:	f800283a 	ret
   19fe0:	29403fcc 	andi	r5,r5,255
   19fe4:	40000c1e 	bne	r8,zero,1a018 <__ledf2+0x98>
   19fe8:	30d2b03a 	or	r9,r6,r3
   19fec:	48000c26 	beq	r9,zero,1a020 <__ledf2+0xa0>
   19ff0:	0013883a 	mov	r9,zero
   19ff4:	39c03fcc 	andi	r7,r7,255
   19ff8:	48000826 	beq	r9,zero,1a01c <__ledf2+0x9c>
   19ffc:	38001126 	beq	r7,zero,1a044 <__ledf2+0xc4>
   1a000:	00800044 	movi	r2,1
   1a004:	f800283a 	ret
   1a008:	30d2b03a 	or	r9,r6,r3
   1a00c:	483fea26 	beq	r9,zero,19fb8 <__ledf2+0x38>
   1a010:	00800084 	movi	r2,2
   1a014:	f800283a 	ret
   1a018:	39c03fcc 	andi	r7,r7,255
   1a01c:	39400726 	beq	r7,r5,1a03c <__ledf2+0xbc>
   1a020:	2800081e 	bne	r5,zero,1a044 <__ledf2+0xc4>
   1a024:	00800044 	movi	r2,1
   1a028:	f800283a 	ret
   1a02c:	2292b03a 	or	r9,r4,r10
   1a030:	483fdf26 	beq	r9,zero,19fb0 <__ledf2+0x30>
   1a034:	00800084 	movi	r2,2
   1a038:	f800283a 	ret
   1a03c:	4080030e 	bge	r8,r2,1a04c <__ledf2+0xcc>
   1a040:	383fef26 	beq	r7,zero,1a000 <__ledf2+0x80>
   1a044:	00bfffc4 	movi	r2,-1
   1a048:	f800283a 	ret
   1a04c:	123feb16 	blt	r2,r8,19ffc <__ledf2+0x7c>
   1a050:	1abff336 	bltu	r3,r10,1a020 <__ledf2+0xa0>
   1a054:	50c00326 	beq	r10,r3,1a064 <__ledf2+0xe4>
   1a058:	50c0042e 	bgeu	r10,r3,1a06c <__ledf2+0xec>
   1a05c:	283fe81e 	bne	r5,zero,1a000 <__ledf2+0x80>
   1a060:	003ff806 	br	1a044 <__ledf2+0xc4>
   1a064:	313fee36 	bltu	r6,r4,1a020 <__ledf2+0xa0>
   1a068:	21bffc36 	bltu	r4,r6,1a05c <__ledf2+0xdc>
   1a06c:	0005883a 	mov	r2,zero
   1a070:	f800283a 	ret

0001a074 <__muldf3>:
   1a074:	defff304 	addi	sp,sp,-52
   1a078:	2804d53a 	srli	r2,r5,20
   1a07c:	dd800915 	stw	r22,36(sp)
   1a080:	282cd7fa 	srli	r22,r5,31
   1a084:	dc000315 	stw	r16,12(sp)
   1a088:	04000434 	movhi	r16,16
   1a08c:	dd400815 	stw	r21,32(sp)
   1a090:	dc800515 	stw	r18,20(sp)
   1a094:	843fffc4 	addi	r16,r16,-1
   1a098:	dfc00c15 	stw	ra,48(sp)
   1a09c:	df000b15 	stw	fp,44(sp)
   1a0a0:	ddc00a15 	stw	r23,40(sp)
   1a0a4:	dd000715 	stw	r20,28(sp)
   1a0a8:	dcc00615 	stw	r19,24(sp)
   1a0ac:	dc400415 	stw	r17,16(sp)
   1a0b0:	1481ffcc 	andi	r18,r2,2047
   1a0b4:	2c20703a 	and	r16,r5,r16
   1a0b8:	b02b883a 	mov	r21,r22
   1a0bc:	b2403fcc 	andi	r9,r22,255
   1a0c0:	90006026 	beq	r18,zero,1a244 <__muldf3+0x1d0>
   1a0c4:	0081ffc4 	movi	r2,2047
   1a0c8:	2029883a 	mov	r20,r4
   1a0cc:	90803626 	beq	r18,r2,1a1a8 <__muldf3+0x134>
   1a0d0:	80800434 	orhi	r2,r16,16
   1a0d4:	100490fa 	slli	r2,r2,3
   1a0d8:	2020d77a 	srli	r16,r4,29
   1a0dc:	202890fa 	slli	r20,r4,3
   1a0e0:	94bf0044 	addi	r18,r18,-1023
   1a0e4:	80a0b03a 	or	r16,r16,r2
   1a0e8:	0027883a 	mov	r19,zero
   1a0ec:	0039883a 	mov	fp,zero
   1a0f0:	3804d53a 	srli	r2,r7,20
   1a0f4:	382ed7fa 	srli	r23,r7,31
   1a0f8:	04400434 	movhi	r17,16
   1a0fc:	8c7fffc4 	addi	r17,r17,-1
   1a100:	1081ffcc 	andi	r2,r2,2047
   1a104:	3011883a 	mov	r8,r6
   1a108:	3c62703a 	and	r17,r7,r17
   1a10c:	ba803fcc 	andi	r10,r23,255
   1a110:	10006d26 	beq	r2,zero,1a2c8 <__muldf3+0x254>
   1a114:	00c1ffc4 	movi	r3,2047
   1a118:	10c06526 	beq	r2,r3,1a2b0 <__muldf3+0x23c>
   1a11c:	88c00434 	orhi	r3,r17,16
   1a120:	180690fa 	slli	r3,r3,3
   1a124:	3022d77a 	srli	r17,r6,29
   1a128:	301090fa 	slli	r8,r6,3
   1a12c:	10bf0044 	addi	r2,r2,-1023
   1a130:	88e2b03a 	or	r17,r17,r3
   1a134:	000b883a 	mov	r5,zero
   1a138:	9085883a 	add	r2,r18,r2
   1a13c:	2cc8b03a 	or	r4,r5,r19
   1a140:	00c003c4 	movi	r3,15
   1a144:	bdacf03a 	xor	r22,r23,r22
   1a148:	12c00044 	addi	r11,r2,1
   1a14c:	19009936 	bltu	r3,r4,1a3b4 <__muldf3+0x340>
   1a150:	200890ba 	slli	r4,r4,2
   1a154:	00c000b4 	movhi	r3,2
   1a158:	18e85a04 	addi	r3,r3,-24216
   1a15c:	20c9883a 	add	r4,r4,r3
   1a160:	20c00017 	ldw	r3,0(r4)
   1a164:	1800683a 	jmp	r3
   1a168:	0001a3b4 	movhi	zero,1678
   1a16c:	0001a1c8 	cmpgei	zero,zero,1671
   1a170:	0001a1c8 	cmpgei	zero,zero,1671
   1a174:	0001a1c4 	movi	zero,1671
   1a178:	0001a390 	cmplti	zero,zero,1678
   1a17c:	0001a390 	cmplti	zero,zero,1678
   1a180:	0001a378 	rdprs	zero,zero,1677
   1a184:	0001a1c4 	movi	zero,1671
   1a188:	0001a390 	cmplti	zero,zero,1678
   1a18c:	0001a378 	rdprs	zero,zero,1677
   1a190:	0001a390 	cmplti	zero,zero,1678
   1a194:	0001a1c4 	movi	zero,1671
   1a198:	0001a3a0 	cmpeqi	zero,zero,1678
   1a19c:	0001a3a0 	cmpeqi	zero,zero,1678
   1a1a0:	0001a3a0 	cmpeqi	zero,zero,1678
   1a1a4:	0001a5bc 	xorhi	zero,zero,1686
   1a1a8:	2404b03a 	or	r2,r4,r16
   1a1ac:	10006f1e 	bne	r2,zero,1a36c <__muldf3+0x2f8>
   1a1b0:	04c00204 	movi	r19,8
   1a1b4:	0021883a 	mov	r16,zero
   1a1b8:	0029883a 	mov	r20,zero
   1a1bc:	07000084 	movi	fp,2
   1a1c0:	003fcb06 	br	1a0f0 <__muldf3+0x7c>
   1a1c4:	502d883a 	mov	r22,r10
   1a1c8:	00800084 	movi	r2,2
   1a1cc:	28805726 	beq	r5,r2,1a32c <__muldf3+0x2b8>
   1a1d0:	008000c4 	movi	r2,3
   1a1d4:	28816626 	beq	r5,r2,1a770 <__muldf3+0x6fc>
   1a1d8:	00800044 	movi	r2,1
   1a1dc:	2881411e 	bne	r5,r2,1a6e4 <__muldf3+0x670>
   1a1e0:	b02b883a 	mov	r21,r22
   1a1e4:	0005883a 	mov	r2,zero
   1a1e8:	000b883a 	mov	r5,zero
   1a1ec:	0029883a 	mov	r20,zero
   1a1f0:	1004953a 	slli	r2,r2,20
   1a1f4:	a8c03fcc 	andi	r3,r21,255
   1a1f8:	04400434 	movhi	r17,16
   1a1fc:	8c7fffc4 	addi	r17,r17,-1
   1a200:	180697fa 	slli	r3,r3,31
   1a204:	2c4a703a 	and	r5,r5,r17
   1a208:	288ab03a 	or	r5,r5,r2
   1a20c:	28c6b03a 	or	r3,r5,r3
   1a210:	a005883a 	mov	r2,r20
   1a214:	dfc00c17 	ldw	ra,48(sp)
   1a218:	df000b17 	ldw	fp,44(sp)
   1a21c:	ddc00a17 	ldw	r23,40(sp)
   1a220:	dd800917 	ldw	r22,36(sp)
   1a224:	dd400817 	ldw	r21,32(sp)
   1a228:	dd000717 	ldw	r20,28(sp)
   1a22c:	dcc00617 	ldw	r19,24(sp)
   1a230:	dc800517 	ldw	r18,20(sp)
   1a234:	dc400417 	ldw	r17,16(sp)
   1a238:	dc000317 	ldw	r16,12(sp)
   1a23c:	dec00d04 	addi	sp,sp,52
   1a240:	f800283a 	ret
   1a244:	2404b03a 	or	r2,r4,r16
   1a248:	2027883a 	mov	r19,r4
   1a24c:	10004226 	beq	r2,zero,1a358 <__muldf3+0x2e4>
   1a250:	8000fc26 	beq	r16,zero,1a644 <__muldf3+0x5d0>
   1a254:	8009883a 	mov	r4,r16
   1a258:	d9800215 	stw	r6,8(sp)
   1a25c:	d9c00015 	stw	r7,0(sp)
   1a260:	da400115 	stw	r9,4(sp)
   1a264:	000b3fc0 	call	b3fc <__clzsi2>
   1a268:	d9800217 	ldw	r6,8(sp)
   1a26c:	d9c00017 	ldw	r7,0(sp)
   1a270:	da400117 	ldw	r9,4(sp)
   1a274:	113ffd44 	addi	r4,r2,-11
   1a278:	00c00704 	movi	r3,28
   1a27c:	1900ed16 	blt	r3,r4,1a634 <__muldf3+0x5c0>
   1a280:	00c00744 	movi	r3,29
   1a284:	147ffe04 	addi	r17,r2,-8
   1a288:	1907c83a 	sub	r3,r3,r4
   1a28c:	8460983a 	sll	r16,r16,r17
   1a290:	98c6d83a 	srl	r3,r19,r3
   1a294:	9c68983a 	sll	r20,r19,r17
   1a298:	1c20b03a 	or	r16,r3,r16
   1a29c:	1080fcc4 	addi	r2,r2,1011
   1a2a0:	00a5c83a 	sub	r18,zero,r2
   1a2a4:	0027883a 	mov	r19,zero
   1a2a8:	0039883a 	mov	fp,zero
   1a2ac:	003f9006 	br	1a0f0 <__muldf3+0x7c>
   1a2b0:	3446b03a 	or	r3,r6,r17
   1a2b4:	1800261e 	bne	r3,zero,1a350 <__muldf3+0x2dc>
   1a2b8:	0023883a 	mov	r17,zero
   1a2bc:	0011883a 	mov	r8,zero
   1a2c0:	01400084 	movi	r5,2
   1a2c4:	003f9c06 	br	1a138 <__muldf3+0xc4>
   1a2c8:	3446b03a 	or	r3,r6,r17
   1a2cc:	18001c26 	beq	r3,zero,1a340 <__muldf3+0x2cc>
   1a2d0:	8800ce26 	beq	r17,zero,1a60c <__muldf3+0x598>
   1a2d4:	8809883a 	mov	r4,r17
   1a2d8:	d9800215 	stw	r6,8(sp)
   1a2dc:	da400115 	stw	r9,4(sp)
   1a2e0:	da800015 	stw	r10,0(sp)
   1a2e4:	000b3fc0 	call	b3fc <__clzsi2>
   1a2e8:	d9800217 	ldw	r6,8(sp)
   1a2ec:	da400117 	ldw	r9,4(sp)
   1a2f0:	da800017 	ldw	r10,0(sp)
   1a2f4:	113ffd44 	addi	r4,r2,-11
   1a2f8:	00c00704 	movi	r3,28
   1a2fc:	1900bf16 	blt	r3,r4,1a5fc <__muldf3+0x588>
   1a300:	00c00744 	movi	r3,29
   1a304:	123ffe04 	addi	r8,r2,-8
   1a308:	1907c83a 	sub	r3,r3,r4
   1a30c:	8a22983a 	sll	r17,r17,r8
   1a310:	30c6d83a 	srl	r3,r6,r3
   1a314:	3210983a 	sll	r8,r6,r8
   1a318:	1c62b03a 	or	r17,r3,r17
   1a31c:	1080fcc4 	addi	r2,r2,1011
   1a320:	0085c83a 	sub	r2,zero,r2
   1a324:	000b883a 	mov	r5,zero
   1a328:	003f8306 	br	1a138 <__muldf3+0xc4>
   1a32c:	b02b883a 	mov	r21,r22
   1a330:	0081ffc4 	movi	r2,2047
   1a334:	000b883a 	mov	r5,zero
   1a338:	0029883a 	mov	r20,zero
   1a33c:	003fac06 	br	1a1f0 <__muldf3+0x17c>
   1a340:	0023883a 	mov	r17,zero
   1a344:	0011883a 	mov	r8,zero
   1a348:	01400044 	movi	r5,1
   1a34c:	003f7a06 	br	1a138 <__muldf3+0xc4>
   1a350:	014000c4 	movi	r5,3
   1a354:	003f7806 	br	1a138 <__muldf3+0xc4>
   1a358:	04c00104 	movi	r19,4
   1a35c:	0021883a 	mov	r16,zero
   1a360:	0029883a 	mov	r20,zero
   1a364:	07000044 	movi	fp,1
   1a368:	003f6106 	br	1a0f0 <__muldf3+0x7c>
   1a36c:	04c00304 	movi	r19,12
   1a370:	070000c4 	movi	fp,3
   1a374:	003f5e06 	br	1a0f0 <__muldf3+0x7c>
   1a378:	01400434 	movhi	r5,16
   1a37c:	002b883a 	mov	r21,zero
   1a380:	297fffc4 	addi	r5,r5,-1
   1a384:	053fffc4 	movi	r20,-1
   1a388:	0081ffc4 	movi	r2,2047
   1a38c:	003f9806 	br	1a1f0 <__muldf3+0x17c>
   1a390:	8023883a 	mov	r17,r16
   1a394:	a011883a 	mov	r8,r20
   1a398:	e00b883a 	mov	r5,fp
   1a39c:	003f8a06 	br	1a1c8 <__muldf3+0x154>
   1a3a0:	8023883a 	mov	r17,r16
   1a3a4:	a011883a 	mov	r8,r20
   1a3a8:	482d883a 	mov	r22,r9
   1a3ac:	e00b883a 	mov	r5,fp
   1a3b0:	003f8506 	br	1a1c8 <__muldf3+0x154>
   1a3b4:	a00ad43a 	srli	r5,r20,16
   1a3b8:	401ad43a 	srli	r13,r8,16
   1a3bc:	a53fffcc 	andi	r20,r20,65535
   1a3c0:	423fffcc 	andi	r8,r8,65535
   1a3c4:	4519383a 	mul	r12,r8,r20
   1a3c8:	4147383a 	mul	r3,r8,r5
   1a3cc:	6d09383a 	mul	r4,r13,r20
   1a3d0:	600cd43a 	srli	r6,r12,16
   1a3d4:	2b5d383a 	mul	r14,r5,r13
   1a3d8:	20c9883a 	add	r4,r4,r3
   1a3dc:	310d883a 	add	r6,r6,r4
   1a3e0:	30c0022e 	bgeu	r6,r3,1a3ec <__muldf3+0x378>
   1a3e4:	00c00074 	movhi	r3,1
   1a3e8:	70dd883a 	add	r14,r14,r3
   1a3ec:	8826d43a 	srli	r19,r17,16
   1a3f0:	8bffffcc 	andi	r15,r17,65535
   1a3f4:	7d23383a 	mul	r17,r15,r20
   1a3f8:	7949383a 	mul	r4,r15,r5
   1a3fc:	9d29383a 	mul	r20,r19,r20
   1a400:	8814d43a 	srli	r10,r17,16
   1a404:	3012943a 	slli	r9,r6,16
   1a408:	a129883a 	add	r20,r20,r4
   1a40c:	633fffcc 	andi	r12,r12,65535
   1a410:	5515883a 	add	r10,r10,r20
   1a414:	3006d43a 	srli	r3,r6,16
   1a418:	4b13883a 	add	r9,r9,r12
   1a41c:	2ccb383a 	mul	r5,r5,r19
   1a420:	5100022e 	bgeu	r10,r4,1a42c <__muldf3+0x3b8>
   1a424:	01000074 	movhi	r4,1
   1a428:	290b883a 	add	r5,r5,r4
   1a42c:	802ad43a 	srli	r21,r16,16
   1a430:	843fffcc 	andi	r16,r16,65535
   1a434:	440d383a 	mul	r6,r8,r16
   1a438:	4565383a 	mul	r18,r8,r21
   1a43c:	8349383a 	mul	r4,r16,r13
   1a440:	500e943a 	slli	r7,r10,16
   1a444:	3010d43a 	srli	r8,r6,16
   1a448:	5028d43a 	srli	r20,r10,16
   1a44c:	2489883a 	add	r4,r4,r18
   1a450:	8abfffcc 	andi	r10,r17,65535
   1a454:	3a95883a 	add	r10,r7,r10
   1a458:	4119883a 	add	r12,r8,r4
   1a45c:	a169883a 	add	r20,r20,r5
   1a460:	1a87883a 	add	r3,r3,r10
   1a464:	6d5b383a 	mul	r13,r13,r21
   1a468:	6480022e 	bgeu	r12,r18,1a474 <__muldf3+0x400>
   1a46c:	01000074 	movhi	r4,1
   1a470:	691b883a 	add	r13,r13,r4
   1a474:	7c25383a 	mul	r18,r15,r16
   1a478:	7d4b383a 	mul	r5,r15,r21
   1a47c:	84cf383a 	mul	r7,r16,r19
   1a480:	901ed43a 	srli	r15,r18,16
   1a484:	6008d43a 	srli	r4,r12,16
   1a488:	6010943a 	slli	r8,r12,16
   1a48c:	394f883a 	add	r7,r7,r5
   1a490:	333fffcc 	andi	r12,r6,65535
   1a494:	79df883a 	add	r15,r15,r7
   1a498:	235b883a 	add	r13,r4,r13
   1a49c:	9d63383a 	mul	r17,r19,r21
   1a4a0:	4309883a 	add	r4,r8,r12
   1a4a4:	7940022e 	bgeu	r15,r5,1a4b0 <__muldf3+0x43c>
   1a4a8:	01400074 	movhi	r5,1
   1a4ac:	8963883a 	add	r17,r17,r5
   1a4b0:	780a943a 	slli	r5,r15,16
   1a4b4:	91bfffcc 	andi	r6,r18,65535
   1a4b8:	70c7883a 	add	r3,r14,r3
   1a4bc:	298d883a 	add	r6,r5,r6
   1a4c0:	1a8f803a 	cmpltu	r7,r3,r10
   1a4c4:	350b883a 	add	r5,r6,r20
   1a4c8:	20c7883a 	add	r3,r4,r3
   1a4cc:	3955883a 	add	r10,r7,r5
   1a4d0:	1909803a 	cmpltu	r4,r3,r4
   1a4d4:	6a91883a 	add	r8,r13,r10
   1a4d8:	780cd43a 	srli	r6,r15,16
   1a4dc:	2219883a 	add	r12,r4,r8
   1a4e0:	2d0b803a 	cmpltu	r5,r5,r20
   1a4e4:	51cf803a 	cmpltu	r7,r10,r7
   1a4e8:	29ceb03a 	or	r7,r5,r7
   1a4ec:	4351803a 	cmpltu	r8,r8,r13
   1a4f0:	610b803a 	cmpltu	r5,r12,r4
   1a4f4:	4148b03a 	or	r4,r8,r5
   1a4f8:	398f883a 	add	r7,r7,r6
   1a4fc:	3909883a 	add	r4,r7,r4
   1a500:	1810927a 	slli	r8,r3,9
   1a504:	2449883a 	add	r4,r4,r17
   1a508:	2008927a 	slli	r4,r4,9
   1a50c:	6022d5fa 	srli	r17,r12,23
   1a510:	1806d5fa 	srli	r3,r3,23
   1a514:	4252b03a 	or	r9,r8,r9
   1a518:	600a927a 	slli	r5,r12,9
   1a51c:	4810c03a 	cmpne	r8,r9,zero
   1a520:	2462b03a 	or	r17,r4,r17
   1a524:	40c6b03a 	or	r3,r8,r3
   1a528:	8900402c 	andhi	r4,r17,256
   1a52c:	1950b03a 	or	r8,r3,r5
   1a530:	20000726 	beq	r4,zero,1a550 <__muldf3+0x4dc>
   1a534:	4006d07a 	srli	r3,r8,1
   1a538:	880497fa 	slli	r2,r17,31
   1a53c:	4200004c 	andi	r8,r8,1
   1a540:	8822d07a 	srli	r17,r17,1
   1a544:	1a10b03a 	or	r8,r3,r8
   1a548:	1210b03a 	or	r8,r2,r8
   1a54c:	5805883a 	mov	r2,r11
   1a550:	1140ffc4 	addi	r5,r2,1023
   1a554:	0140440e 	bge	zero,r5,1a668 <__muldf3+0x5f4>
   1a558:	40c001cc 	andi	r3,r8,7
   1a55c:	18000726 	beq	r3,zero,1a57c <__muldf3+0x508>
   1a560:	40c003cc 	andi	r3,r8,15
   1a564:	01000104 	movi	r4,4
   1a568:	19000426 	beq	r3,r4,1a57c <__muldf3+0x508>
   1a56c:	4107883a 	add	r3,r8,r4
   1a570:	1a11803a 	cmpltu	r8,r3,r8
   1a574:	8a23883a 	add	r17,r17,r8
   1a578:	1811883a 	mov	r8,r3
   1a57c:	88c0402c 	andhi	r3,r17,256
   1a580:	18000426 	beq	r3,zero,1a594 <__muldf3+0x520>
   1a584:	11410004 	addi	r5,r2,1024
   1a588:	00bfc034 	movhi	r2,65280
   1a58c:	10bfffc4 	addi	r2,r2,-1
   1a590:	88a2703a 	and	r17,r17,r2
   1a594:	0081ff84 	movi	r2,2046
   1a598:	117f6416 	blt	r2,r5,1a32c <__muldf3+0x2b8>
   1a59c:	8828977a 	slli	r20,r17,29
   1a5a0:	4010d0fa 	srli	r8,r8,3
   1a5a4:	8822927a 	slli	r17,r17,9
   1a5a8:	2881ffcc 	andi	r2,r5,2047
   1a5ac:	a228b03a 	or	r20,r20,r8
   1a5b0:	880ad33a 	srli	r5,r17,12
   1a5b4:	b02b883a 	mov	r21,r22
   1a5b8:	003f0d06 	br	1a1f0 <__muldf3+0x17c>
   1a5bc:	8080022c 	andhi	r2,r16,8
   1a5c0:	10000926 	beq	r2,zero,1a5e8 <__muldf3+0x574>
   1a5c4:	8880022c 	andhi	r2,r17,8
   1a5c8:	1000071e 	bne	r2,zero,1a5e8 <__muldf3+0x574>
   1a5cc:	00800434 	movhi	r2,16
   1a5d0:	89400234 	orhi	r5,r17,8
   1a5d4:	10bfffc4 	addi	r2,r2,-1
   1a5d8:	b82b883a 	mov	r21,r23
   1a5dc:	288a703a 	and	r5,r5,r2
   1a5e0:	4029883a 	mov	r20,r8
   1a5e4:	003f6806 	br	1a388 <__muldf3+0x314>
   1a5e8:	00800434 	movhi	r2,16
   1a5ec:	81400234 	orhi	r5,r16,8
   1a5f0:	10bfffc4 	addi	r2,r2,-1
   1a5f4:	288a703a 	and	r5,r5,r2
   1a5f8:	003f6306 	br	1a388 <__muldf3+0x314>
   1a5fc:	147ff604 	addi	r17,r2,-40
   1a600:	3462983a 	sll	r17,r6,r17
   1a604:	0011883a 	mov	r8,zero
   1a608:	003f4406 	br	1a31c <__muldf3+0x2a8>
   1a60c:	3009883a 	mov	r4,r6
   1a610:	d9800215 	stw	r6,8(sp)
   1a614:	da400115 	stw	r9,4(sp)
   1a618:	da800015 	stw	r10,0(sp)
   1a61c:	000b3fc0 	call	b3fc <__clzsi2>
   1a620:	10800804 	addi	r2,r2,32
   1a624:	da800017 	ldw	r10,0(sp)
   1a628:	da400117 	ldw	r9,4(sp)
   1a62c:	d9800217 	ldw	r6,8(sp)
   1a630:	003f3006 	br	1a2f4 <__muldf3+0x280>
   1a634:	143ff604 	addi	r16,r2,-40
   1a638:	9c20983a 	sll	r16,r19,r16
   1a63c:	0029883a 	mov	r20,zero
   1a640:	003f1606 	br	1a29c <__muldf3+0x228>
   1a644:	d9800215 	stw	r6,8(sp)
   1a648:	d9c00015 	stw	r7,0(sp)
   1a64c:	da400115 	stw	r9,4(sp)
   1a650:	000b3fc0 	call	b3fc <__clzsi2>
   1a654:	10800804 	addi	r2,r2,32
   1a658:	da400117 	ldw	r9,4(sp)
   1a65c:	d9c00017 	ldw	r7,0(sp)
   1a660:	d9800217 	ldw	r6,8(sp)
   1a664:	003f0306 	br	1a274 <__muldf3+0x200>
   1a668:	00c00044 	movi	r3,1
   1a66c:	1947c83a 	sub	r3,r3,r5
   1a670:	00800e04 	movi	r2,56
   1a674:	10feda16 	blt	r2,r3,1a1e0 <__muldf3+0x16c>
   1a678:	008007c4 	movi	r2,31
   1a67c:	10c01b16 	blt	r2,r3,1a6ec <__muldf3+0x678>
   1a680:	00800804 	movi	r2,32
   1a684:	10c5c83a 	sub	r2,r2,r3
   1a688:	888a983a 	sll	r5,r17,r2
   1a68c:	40c8d83a 	srl	r4,r8,r3
   1a690:	4084983a 	sll	r2,r8,r2
   1a694:	88e2d83a 	srl	r17,r17,r3
   1a698:	2906b03a 	or	r3,r5,r4
   1a69c:	1004c03a 	cmpne	r2,r2,zero
   1a6a0:	1886b03a 	or	r3,r3,r2
   1a6a4:	188001cc 	andi	r2,r3,7
   1a6a8:	10000726 	beq	r2,zero,1a6c8 <__muldf3+0x654>
   1a6ac:	188003cc 	andi	r2,r3,15
   1a6b0:	01000104 	movi	r4,4
   1a6b4:	11000426 	beq	r2,r4,1a6c8 <__muldf3+0x654>
   1a6b8:	1805883a 	mov	r2,r3
   1a6bc:	10c00104 	addi	r3,r2,4
   1a6c0:	1885803a 	cmpltu	r2,r3,r2
   1a6c4:	88a3883a 	add	r17,r17,r2
   1a6c8:	8880202c 	andhi	r2,r17,128
   1a6cc:	10001c26 	beq	r2,zero,1a740 <__muldf3+0x6cc>
   1a6d0:	b02b883a 	mov	r21,r22
   1a6d4:	00800044 	movi	r2,1
   1a6d8:	000b883a 	mov	r5,zero
   1a6dc:	0029883a 	mov	r20,zero
   1a6e0:	003ec306 	br	1a1f0 <__muldf3+0x17c>
   1a6e4:	5805883a 	mov	r2,r11
   1a6e8:	003f9906 	br	1a550 <__muldf3+0x4dc>
   1a6ec:	00bff844 	movi	r2,-31
   1a6f0:	1145c83a 	sub	r2,r2,r5
   1a6f4:	8888d83a 	srl	r4,r17,r2
   1a6f8:	00800804 	movi	r2,32
   1a6fc:	18801a26 	beq	r3,r2,1a768 <__muldf3+0x6f4>
   1a700:	00801004 	movi	r2,64
   1a704:	10c5c83a 	sub	r2,r2,r3
   1a708:	8884983a 	sll	r2,r17,r2
   1a70c:	1204b03a 	or	r2,r2,r8
   1a710:	1004c03a 	cmpne	r2,r2,zero
   1a714:	2084b03a 	or	r2,r4,r2
   1a718:	144001cc 	andi	r17,r2,7
   1a71c:	88000d1e 	bne	r17,zero,1a754 <__muldf3+0x6e0>
   1a720:	000b883a 	mov	r5,zero
   1a724:	1028d0fa 	srli	r20,r2,3
   1a728:	b02b883a 	mov	r21,r22
   1a72c:	0005883a 	mov	r2,zero
   1a730:	a468b03a 	or	r20,r20,r17
   1a734:	003eae06 	br	1a1f0 <__muldf3+0x17c>
   1a738:	1007883a 	mov	r3,r2
   1a73c:	0023883a 	mov	r17,zero
   1a740:	880a927a 	slli	r5,r17,9
   1a744:	1805883a 	mov	r2,r3
   1a748:	8822977a 	slli	r17,r17,29
   1a74c:	280ad33a 	srli	r5,r5,12
   1a750:	003ff406 	br	1a724 <__muldf3+0x6b0>
   1a754:	10c003cc 	andi	r3,r2,15
   1a758:	01000104 	movi	r4,4
   1a75c:	193ff626 	beq	r3,r4,1a738 <__muldf3+0x6c4>
   1a760:	0023883a 	mov	r17,zero
   1a764:	003fd506 	br	1a6bc <__muldf3+0x648>
   1a768:	0005883a 	mov	r2,zero
   1a76c:	003fe706 	br	1a70c <__muldf3+0x698>
   1a770:	00800434 	movhi	r2,16
   1a774:	89400234 	orhi	r5,r17,8
   1a778:	10bfffc4 	addi	r2,r2,-1
   1a77c:	b02b883a 	mov	r21,r22
   1a780:	288a703a 	and	r5,r5,r2
   1a784:	4029883a 	mov	r20,r8
   1a788:	003eff06 	br	1a388 <__muldf3+0x314>

0001a78c <__subdf3>:
   1a78c:	02000434 	movhi	r8,16
   1a790:	423fffc4 	addi	r8,r8,-1
   1a794:	defffb04 	addi	sp,sp,-20
   1a798:	2a14703a 	and	r10,r5,r8
   1a79c:	3812d53a 	srli	r9,r7,20
   1a7a0:	3a10703a 	and	r8,r7,r8
   1a7a4:	2006d77a 	srli	r3,r4,29
   1a7a8:	3004d77a 	srli	r2,r6,29
   1a7ac:	dc000015 	stw	r16,0(sp)
   1a7b0:	501490fa 	slli	r10,r10,3
   1a7b4:	2820d53a 	srli	r16,r5,20
   1a7b8:	401090fa 	slli	r8,r8,3
   1a7bc:	dc800215 	stw	r18,8(sp)
   1a7c0:	dc400115 	stw	r17,4(sp)
   1a7c4:	dfc00415 	stw	ra,16(sp)
   1a7c8:	202290fa 	slli	r17,r4,3
   1a7cc:	dcc00315 	stw	r19,12(sp)
   1a7d0:	4a41ffcc 	andi	r9,r9,2047
   1a7d4:	0101ffc4 	movi	r4,2047
   1a7d8:	2824d7fa 	srli	r18,r5,31
   1a7dc:	8401ffcc 	andi	r16,r16,2047
   1a7e0:	50c6b03a 	or	r3,r10,r3
   1a7e4:	380ed7fa 	srli	r7,r7,31
   1a7e8:	408ab03a 	or	r5,r8,r2
   1a7ec:	300c90fa 	slli	r6,r6,3
   1a7f0:	49009626 	beq	r9,r4,1aa4c <__subdf3+0x2c0>
   1a7f4:	39c0005c 	xori	r7,r7,1
   1a7f8:	8245c83a 	sub	r2,r16,r9
   1a7fc:	3c807426 	beq	r7,r18,1a9d0 <__subdf3+0x244>
   1a800:	0080af0e 	bge	zero,r2,1aac0 <__subdf3+0x334>
   1a804:	48002a1e 	bne	r9,zero,1a8b0 <__subdf3+0x124>
   1a808:	2988b03a 	or	r4,r5,r6
   1a80c:	20009a1e 	bne	r4,zero,1aa78 <__subdf3+0x2ec>
   1a810:	888001cc 	andi	r2,r17,7
   1a814:	10000726 	beq	r2,zero,1a834 <__subdf3+0xa8>
   1a818:	888003cc 	andi	r2,r17,15
   1a81c:	01000104 	movi	r4,4
   1a820:	11000426 	beq	r2,r4,1a834 <__subdf3+0xa8>
   1a824:	890b883a 	add	r5,r17,r4
   1a828:	2c63803a 	cmpltu	r17,r5,r17
   1a82c:	1c47883a 	add	r3,r3,r17
   1a830:	2823883a 	mov	r17,r5
   1a834:	1880202c 	andhi	r2,r3,128
   1a838:	10005926 	beq	r2,zero,1a9a0 <__subdf3+0x214>
   1a83c:	84000044 	addi	r16,r16,1
   1a840:	0081ffc4 	movi	r2,2047
   1a844:	8080be26 	beq	r16,r2,1ab40 <__subdf3+0x3b4>
   1a848:	017fe034 	movhi	r5,65408
   1a84c:	297fffc4 	addi	r5,r5,-1
   1a850:	1946703a 	and	r3,r3,r5
   1a854:	1804977a 	slli	r2,r3,29
   1a858:	1806927a 	slli	r3,r3,9
   1a85c:	8822d0fa 	srli	r17,r17,3
   1a860:	8401ffcc 	andi	r16,r16,2047
   1a864:	180ad33a 	srli	r5,r3,12
   1a868:	9100004c 	andi	r4,r18,1
   1a86c:	1444b03a 	or	r2,r2,r17
   1a870:	80c1ffcc 	andi	r3,r16,2047
   1a874:	1820953a 	slli	r16,r3,20
   1a878:	20c03fcc 	andi	r3,r4,255
   1a87c:	180897fa 	slli	r4,r3,31
   1a880:	00c00434 	movhi	r3,16
   1a884:	18ffffc4 	addi	r3,r3,-1
   1a888:	28c6703a 	and	r3,r5,r3
   1a88c:	1c06b03a 	or	r3,r3,r16
   1a890:	1906b03a 	or	r3,r3,r4
   1a894:	dfc00417 	ldw	ra,16(sp)
   1a898:	dcc00317 	ldw	r19,12(sp)
   1a89c:	dc800217 	ldw	r18,8(sp)
   1a8a0:	dc400117 	ldw	r17,4(sp)
   1a8a4:	dc000017 	ldw	r16,0(sp)
   1a8a8:	dec00504 	addi	sp,sp,20
   1a8ac:	f800283a 	ret
   1a8b0:	0101ffc4 	movi	r4,2047
   1a8b4:	813fd626 	beq	r16,r4,1a810 <__subdf3+0x84>
   1a8b8:	29402034 	orhi	r5,r5,128
   1a8bc:	01000e04 	movi	r4,56
   1a8c0:	2080a316 	blt	r4,r2,1ab50 <__subdf3+0x3c4>
   1a8c4:	010007c4 	movi	r4,31
   1a8c8:	2080c616 	blt	r4,r2,1abe4 <__subdf3+0x458>
   1a8cc:	01000804 	movi	r4,32
   1a8d0:	2089c83a 	sub	r4,r4,r2
   1a8d4:	2910983a 	sll	r8,r5,r4
   1a8d8:	308ed83a 	srl	r7,r6,r2
   1a8dc:	3108983a 	sll	r4,r6,r4
   1a8e0:	2884d83a 	srl	r2,r5,r2
   1a8e4:	41ccb03a 	or	r6,r8,r7
   1a8e8:	2008c03a 	cmpne	r4,r4,zero
   1a8ec:	310cb03a 	or	r6,r6,r4
   1a8f0:	898dc83a 	sub	r6,r17,r6
   1a8f4:	89a3803a 	cmpltu	r17,r17,r6
   1a8f8:	1887c83a 	sub	r3,r3,r2
   1a8fc:	1c47c83a 	sub	r3,r3,r17
   1a900:	3023883a 	mov	r17,r6
   1a904:	1880202c 	andhi	r2,r3,128
   1a908:	10002326 	beq	r2,zero,1a998 <__subdf3+0x20c>
   1a90c:	04c02034 	movhi	r19,128
   1a910:	9cffffc4 	addi	r19,r19,-1
   1a914:	1ce6703a 	and	r19,r3,r19
   1a918:	98007a26 	beq	r19,zero,1ab04 <__subdf3+0x378>
   1a91c:	9809883a 	mov	r4,r19
   1a920:	000b3fc0 	call	b3fc <__clzsi2>
   1a924:	113ffe04 	addi	r4,r2,-8
   1a928:	00c007c4 	movi	r3,31
   1a92c:	19007b16 	blt	r3,r4,1ab1c <__subdf3+0x390>
   1a930:	00800804 	movi	r2,32
   1a934:	1105c83a 	sub	r2,r2,r4
   1a938:	8884d83a 	srl	r2,r17,r2
   1a93c:	9906983a 	sll	r3,r19,r4
   1a940:	8922983a 	sll	r17,r17,r4
   1a944:	10c4b03a 	or	r2,r2,r3
   1a948:	24007816 	blt	r4,r16,1ab2c <__subdf3+0x3a0>
   1a94c:	2421c83a 	sub	r16,r4,r16
   1a950:	80c00044 	addi	r3,r16,1
   1a954:	010007c4 	movi	r4,31
   1a958:	20c09516 	blt	r4,r3,1abb0 <__subdf3+0x424>
   1a95c:	01400804 	movi	r5,32
   1a960:	28cbc83a 	sub	r5,r5,r3
   1a964:	88c8d83a 	srl	r4,r17,r3
   1a968:	8962983a 	sll	r17,r17,r5
   1a96c:	114a983a 	sll	r5,r2,r5
   1a970:	10c6d83a 	srl	r3,r2,r3
   1a974:	8804c03a 	cmpne	r2,r17,zero
   1a978:	290ab03a 	or	r5,r5,r4
   1a97c:	28a2b03a 	or	r17,r5,r2
   1a980:	0021883a 	mov	r16,zero
   1a984:	003fa206 	br	1a810 <__subdf3+0x84>
   1a988:	2090b03a 	or	r8,r4,r2
   1a98c:	40018e26 	beq	r8,zero,1afc8 <__subdf3+0x83c>
   1a990:	1007883a 	mov	r3,r2
   1a994:	2023883a 	mov	r17,r4
   1a998:	888001cc 	andi	r2,r17,7
   1a99c:	103f9e1e 	bne	r2,zero,1a818 <__subdf3+0x8c>
   1a9a0:	1804977a 	slli	r2,r3,29
   1a9a4:	8822d0fa 	srli	r17,r17,3
   1a9a8:	1810d0fa 	srli	r8,r3,3
   1a9ac:	9100004c 	andi	r4,r18,1
   1a9b0:	1444b03a 	or	r2,r2,r17
   1a9b4:	00c1ffc4 	movi	r3,2047
   1a9b8:	80c02826 	beq	r16,r3,1aa5c <__subdf3+0x2d0>
   1a9bc:	01400434 	movhi	r5,16
   1a9c0:	297fffc4 	addi	r5,r5,-1
   1a9c4:	80e0703a 	and	r16,r16,r3
   1a9c8:	414a703a 	and	r5,r8,r5
   1a9cc:	003fa806 	br	1a870 <__subdf3+0xe4>
   1a9d0:	0080630e 	bge	zero,r2,1ab60 <__subdf3+0x3d4>
   1a9d4:	48003026 	beq	r9,zero,1aa98 <__subdf3+0x30c>
   1a9d8:	0101ffc4 	movi	r4,2047
   1a9dc:	813f8c26 	beq	r16,r4,1a810 <__subdf3+0x84>
   1a9e0:	29402034 	orhi	r5,r5,128
   1a9e4:	01000e04 	movi	r4,56
   1a9e8:	2080a90e 	bge	r4,r2,1ac90 <__subdf3+0x504>
   1a9ec:	298cb03a 	or	r6,r5,r6
   1a9f0:	3012c03a 	cmpne	r9,r6,zero
   1a9f4:	0005883a 	mov	r2,zero
   1a9f8:	4c53883a 	add	r9,r9,r17
   1a9fc:	4c63803a 	cmpltu	r17,r9,r17
   1aa00:	10c7883a 	add	r3,r2,r3
   1aa04:	88c7883a 	add	r3,r17,r3
   1aa08:	4823883a 	mov	r17,r9
   1aa0c:	1880202c 	andhi	r2,r3,128
   1aa10:	1000d026 	beq	r2,zero,1ad54 <__subdf3+0x5c8>
   1aa14:	84000044 	addi	r16,r16,1
   1aa18:	0081ffc4 	movi	r2,2047
   1aa1c:	8080fe26 	beq	r16,r2,1ae18 <__subdf3+0x68c>
   1aa20:	00bfe034 	movhi	r2,65408
   1aa24:	10bfffc4 	addi	r2,r2,-1
   1aa28:	1886703a 	and	r3,r3,r2
   1aa2c:	880ad07a 	srli	r5,r17,1
   1aa30:	180497fa 	slli	r2,r3,31
   1aa34:	8900004c 	andi	r4,r17,1
   1aa38:	2922b03a 	or	r17,r5,r4
   1aa3c:	1806d07a 	srli	r3,r3,1
   1aa40:	1462b03a 	or	r17,r2,r17
   1aa44:	3825883a 	mov	r18,r7
   1aa48:	003f7106 	br	1a810 <__subdf3+0x84>
   1aa4c:	2984b03a 	or	r2,r5,r6
   1aa50:	103f6826 	beq	r2,zero,1a7f4 <__subdf3+0x68>
   1aa54:	39c03fcc 	andi	r7,r7,255
   1aa58:	003f6706 	br	1a7f8 <__subdf3+0x6c>
   1aa5c:	4086b03a 	or	r3,r8,r2
   1aa60:	18015226 	beq	r3,zero,1afac <__subdf3+0x820>
   1aa64:	00c00434 	movhi	r3,16
   1aa68:	41400234 	orhi	r5,r8,8
   1aa6c:	18ffffc4 	addi	r3,r3,-1
   1aa70:	28ca703a 	and	r5,r5,r3
   1aa74:	003f7e06 	br	1a870 <__subdf3+0xe4>
   1aa78:	10bfffc4 	addi	r2,r2,-1
   1aa7c:	1000491e 	bne	r2,zero,1aba4 <__subdf3+0x418>
   1aa80:	898fc83a 	sub	r7,r17,r6
   1aa84:	89e3803a 	cmpltu	r17,r17,r7
   1aa88:	1947c83a 	sub	r3,r3,r5
   1aa8c:	1c47c83a 	sub	r3,r3,r17
   1aa90:	3823883a 	mov	r17,r7
   1aa94:	003f9b06 	br	1a904 <__subdf3+0x178>
   1aa98:	2988b03a 	or	r4,r5,r6
   1aa9c:	203f5c26 	beq	r4,zero,1a810 <__subdf3+0x84>
   1aaa0:	10bfffc4 	addi	r2,r2,-1
   1aaa4:	1000931e 	bne	r2,zero,1acf4 <__subdf3+0x568>
   1aaa8:	898d883a 	add	r6,r17,r6
   1aaac:	3463803a 	cmpltu	r17,r6,r17
   1aab0:	1947883a 	add	r3,r3,r5
   1aab4:	88c7883a 	add	r3,r17,r3
   1aab8:	3023883a 	mov	r17,r6
   1aabc:	003fd306 	br	1aa0c <__subdf3+0x280>
   1aac0:	1000541e 	bne	r2,zero,1ac14 <__subdf3+0x488>
   1aac4:	80800044 	addi	r2,r16,1
   1aac8:	1081ffcc 	andi	r2,r2,2047
   1aacc:	01000044 	movi	r4,1
   1aad0:	2080a20e 	bge	r4,r2,1ad5c <__subdf3+0x5d0>
   1aad4:	8989c83a 	sub	r4,r17,r6
   1aad8:	8905803a 	cmpltu	r2,r17,r4
   1aadc:	1967c83a 	sub	r19,r3,r5
   1aae0:	98a7c83a 	sub	r19,r19,r2
   1aae4:	9880202c 	andhi	r2,r19,128
   1aae8:	10006326 	beq	r2,zero,1ac78 <__subdf3+0x4ec>
   1aaec:	3463c83a 	sub	r17,r6,r17
   1aaf0:	28c7c83a 	sub	r3,r5,r3
   1aaf4:	344d803a 	cmpltu	r6,r6,r17
   1aaf8:	19a7c83a 	sub	r19,r3,r6
   1aafc:	3825883a 	mov	r18,r7
   1ab00:	983f861e 	bne	r19,zero,1a91c <__subdf3+0x190>
   1ab04:	8809883a 	mov	r4,r17
   1ab08:	000b3fc0 	call	b3fc <__clzsi2>
   1ab0c:	10800804 	addi	r2,r2,32
   1ab10:	113ffe04 	addi	r4,r2,-8
   1ab14:	00c007c4 	movi	r3,31
   1ab18:	193f850e 	bge	r3,r4,1a930 <__subdf3+0x1a4>
   1ab1c:	10bff604 	addi	r2,r2,-40
   1ab20:	8884983a 	sll	r2,r17,r2
   1ab24:	0023883a 	mov	r17,zero
   1ab28:	243f880e 	bge	r4,r16,1a94c <__subdf3+0x1c0>
   1ab2c:	00ffe034 	movhi	r3,65408
   1ab30:	18ffffc4 	addi	r3,r3,-1
   1ab34:	8121c83a 	sub	r16,r16,r4
   1ab38:	10c6703a 	and	r3,r2,r3
   1ab3c:	003f3406 	br	1a810 <__subdf3+0x84>
   1ab40:	9100004c 	andi	r4,r18,1
   1ab44:	000b883a 	mov	r5,zero
   1ab48:	0005883a 	mov	r2,zero
   1ab4c:	003f4806 	br	1a870 <__subdf3+0xe4>
   1ab50:	298cb03a 	or	r6,r5,r6
   1ab54:	300cc03a 	cmpne	r6,r6,zero
   1ab58:	0005883a 	mov	r2,zero
   1ab5c:	003f6406 	br	1a8f0 <__subdf3+0x164>
   1ab60:	10009a1e 	bne	r2,zero,1adcc <__subdf3+0x640>
   1ab64:	82400044 	addi	r9,r16,1
   1ab68:	4881ffcc 	andi	r2,r9,2047
   1ab6c:	02800044 	movi	r10,1
   1ab70:	5080670e 	bge	r10,r2,1ad10 <__subdf3+0x584>
   1ab74:	0081ffc4 	movi	r2,2047
   1ab78:	4880af26 	beq	r9,r2,1ae38 <__subdf3+0x6ac>
   1ab7c:	898d883a 	add	r6,r17,r6
   1ab80:	1945883a 	add	r2,r3,r5
   1ab84:	3447803a 	cmpltu	r3,r6,r17
   1ab88:	1887883a 	add	r3,r3,r2
   1ab8c:	182297fa 	slli	r17,r3,31
   1ab90:	300cd07a 	srli	r6,r6,1
   1ab94:	1806d07a 	srli	r3,r3,1
   1ab98:	4821883a 	mov	r16,r9
   1ab9c:	89a2b03a 	or	r17,r17,r6
   1aba0:	003f1b06 	br	1a810 <__subdf3+0x84>
   1aba4:	0101ffc4 	movi	r4,2047
   1aba8:	813f441e 	bne	r16,r4,1a8bc <__subdf3+0x130>
   1abac:	003f1806 	br	1a810 <__subdf3+0x84>
   1abb0:	843ff844 	addi	r16,r16,-31
   1abb4:	01400804 	movi	r5,32
   1abb8:	1408d83a 	srl	r4,r2,r16
   1abbc:	19405026 	beq	r3,r5,1ad00 <__subdf3+0x574>
   1abc0:	01401004 	movi	r5,64
   1abc4:	28c7c83a 	sub	r3,r5,r3
   1abc8:	10c4983a 	sll	r2,r2,r3
   1abcc:	88a2b03a 	or	r17,r17,r2
   1abd0:	8822c03a 	cmpne	r17,r17,zero
   1abd4:	2462b03a 	or	r17,r4,r17
   1abd8:	0007883a 	mov	r3,zero
   1abdc:	0021883a 	mov	r16,zero
   1abe0:	003f6d06 	br	1a998 <__subdf3+0x20c>
   1abe4:	11fff804 	addi	r7,r2,-32
   1abe8:	01000804 	movi	r4,32
   1abec:	29ced83a 	srl	r7,r5,r7
   1abf0:	11004526 	beq	r2,r4,1ad08 <__subdf3+0x57c>
   1abf4:	01001004 	movi	r4,64
   1abf8:	2089c83a 	sub	r4,r4,r2
   1abfc:	2904983a 	sll	r2,r5,r4
   1ac00:	118cb03a 	or	r6,r2,r6
   1ac04:	300cc03a 	cmpne	r6,r6,zero
   1ac08:	398cb03a 	or	r6,r7,r6
   1ac0c:	0005883a 	mov	r2,zero
   1ac10:	003f3706 	br	1a8f0 <__subdf3+0x164>
   1ac14:	80002a26 	beq	r16,zero,1acc0 <__subdf3+0x534>
   1ac18:	0101ffc4 	movi	r4,2047
   1ac1c:	49006626 	beq	r9,r4,1adb8 <__subdf3+0x62c>
   1ac20:	0085c83a 	sub	r2,zero,r2
   1ac24:	18c02034 	orhi	r3,r3,128
   1ac28:	01000e04 	movi	r4,56
   1ac2c:	20807e16 	blt	r4,r2,1ae28 <__subdf3+0x69c>
   1ac30:	010007c4 	movi	r4,31
   1ac34:	2080e716 	blt	r4,r2,1afd4 <__subdf3+0x848>
   1ac38:	01000804 	movi	r4,32
   1ac3c:	2089c83a 	sub	r4,r4,r2
   1ac40:	1914983a 	sll	r10,r3,r4
   1ac44:	8890d83a 	srl	r8,r17,r2
   1ac48:	8908983a 	sll	r4,r17,r4
   1ac4c:	1884d83a 	srl	r2,r3,r2
   1ac50:	5222b03a 	or	r17,r10,r8
   1ac54:	2006c03a 	cmpne	r3,r4,zero
   1ac58:	88e2b03a 	or	r17,r17,r3
   1ac5c:	3463c83a 	sub	r17,r6,r17
   1ac60:	2885c83a 	sub	r2,r5,r2
   1ac64:	344d803a 	cmpltu	r6,r6,r17
   1ac68:	1187c83a 	sub	r3,r2,r6
   1ac6c:	4821883a 	mov	r16,r9
   1ac70:	3825883a 	mov	r18,r7
   1ac74:	003f2306 	br	1a904 <__subdf3+0x178>
   1ac78:	24d0b03a 	or	r8,r4,r19
   1ac7c:	40001b1e 	bne	r8,zero,1acec <__subdf3+0x560>
   1ac80:	0005883a 	mov	r2,zero
   1ac84:	0009883a 	mov	r4,zero
   1ac88:	0021883a 	mov	r16,zero
   1ac8c:	003f4906 	br	1a9b4 <__subdf3+0x228>
   1ac90:	010007c4 	movi	r4,31
   1ac94:	20803a16 	blt	r4,r2,1ad80 <__subdf3+0x5f4>
   1ac98:	01000804 	movi	r4,32
   1ac9c:	2089c83a 	sub	r4,r4,r2
   1aca0:	2912983a 	sll	r9,r5,r4
   1aca4:	3090d83a 	srl	r8,r6,r2
   1aca8:	3108983a 	sll	r4,r6,r4
   1acac:	2884d83a 	srl	r2,r5,r2
   1acb0:	4a12b03a 	or	r9,r9,r8
   1acb4:	2008c03a 	cmpne	r4,r4,zero
   1acb8:	4912b03a 	or	r9,r9,r4
   1acbc:	003f4e06 	br	1a9f8 <__subdf3+0x26c>
   1acc0:	1c48b03a 	or	r4,r3,r17
   1acc4:	20003c26 	beq	r4,zero,1adb8 <__subdf3+0x62c>
   1acc8:	0084303a 	nor	r2,zero,r2
   1accc:	1000381e 	bne	r2,zero,1adb0 <__subdf3+0x624>
   1acd0:	3463c83a 	sub	r17,r6,r17
   1acd4:	28c5c83a 	sub	r2,r5,r3
   1acd8:	344d803a 	cmpltu	r6,r6,r17
   1acdc:	1187c83a 	sub	r3,r2,r6
   1ace0:	4821883a 	mov	r16,r9
   1ace4:	3825883a 	mov	r18,r7
   1ace8:	003f0606 	br	1a904 <__subdf3+0x178>
   1acec:	2023883a 	mov	r17,r4
   1acf0:	003f0906 	br	1a918 <__subdf3+0x18c>
   1acf4:	0101ffc4 	movi	r4,2047
   1acf8:	813f3a1e 	bne	r16,r4,1a9e4 <__subdf3+0x258>
   1acfc:	003ec406 	br	1a810 <__subdf3+0x84>
   1ad00:	0005883a 	mov	r2,zero
   1ad04:	003fb106 	br	1abcc <__subdf3+0x440>
   1ad08:	0005883a 	mov	r2,zero
   1ad0c:	003fbc06 	br	1ac00 <__subdf3+0x474>
   1ad10:	1c44b03a 	or	r2,r3,r17
   1ad14:	80008e1e 	bne	r16,zero,1af50 <__subdf3+0x7c4>
   1ad18:	1000c826 	beq	r2,zero,1b03c <__subdf3+0x8b0>
   1ad1c:	2984b03a 	or	r2,r5,r6
   1ad20:	103ebb26 	beq	r2,zero,1a810 <__subdf3+0x84>
   1ad24:	8989883a 	add	r4,r17,r6
   1ad28:	1945883a 	add	r2,r3,r5
   1ad2c:	2447803a 	cmpltu	r3,r4,r17
   1ad30:	1887883a 	add	r3,r3,r2
   1ad34:	1880202c 	andhi	r2,r3,128
   1ad38:	2023883a 	mov	r17,r4
   1ad3c:	103f1626 	beq	r2,zero,1a998 <__subdf3+0x20c>
   1ad40:	00bfe034 	movhi	r2,65408
   1ad44:	10bfffc4 	addi	r2,r2,-1
   1ad48:	5021883a 	mov	r16,r10
   1ad4c:	1886703a 	and	r3,r3,r2
   1ad50:	003eaf06 	br	1a810 <__subdf3+0x84>
   1ad54:	3825883a 	mov	r18,r7
   1ad58:	003f0f06 	br	1a998 <__subdf3+0x20c>
   1ad5c:	1c44b03a 	or	r2,r3,r17
   1ad60:	8000251e 	bne	r16,zero,1adf8 <__subdf3+0x66c>
   1ad64:	1000661e 	bne	r2,zero,1af00 <__subdf3+0x774>
   1ad68:	2990b03a 	or	r8,r5,r6
   1ad6c:	40009626 	beq	r8,zero,1afc8 <__subdf3+0x83c>
   1ad70:	2807883a 	mov	r3,r5
   1ad74:	3023883a 	mov	r17,r6
   1ad78:	3825883a 	mov	r18,r7
   1ad7c:	003ea406 	br	1a810 <__subdf3+0x84>
   1ad80:	127ff804 	addi	r9,r2,-32
   1ad84:	01000804 	movi	r4,32
   1ad88:	2a52d83a 	srl	r9,r5,r9
   1ad8c:	11008c26 	beq	r2,r4,1afc0 <__subdf3+0x834>
   1ad90:	01001004 	movi	r4,64
   1ad94:	2085c83a 	sub	r2,r4,r2
   1ad98:	2884983a 	sll	r2,r5,r2
   1ad9c:	118cb03a 	or	r6,r2,r6
   1ada0:	300cc03a 	cmpne	r6,r6,zero
   1ada4:	4992b03a 	or	r9,r9,r6
   1ada8:	0005883a 	mov	r2,zero
   1adac:	003f1206 	br	1a9f8 <__subdf3+0x26c>
   1adb0:	0101ffc4 	movi	r4,2047
   1adb4:	493f9c1e 	bne	r9,r4,1ac28 <__subdf3+0x49c>
   1adb8:	2807883a 	mov	r3,r5
   1adbc:	3023883a 	mov	r17,r6
   1adc0:	4821883a 	mov	r16,r9
   1adc4:	3825883a 	mov	r18,r7
   1adc8:	003e9106 	br	1a810 <__subdf3+0x84>
   1adcc:	80001f1e 	bne	r16,zero,1ae4c <__subdf3+0x6c0>
   1add0:	1c48b03a 	or	r4,r3,r17
   1add4:	20005a26 	beq	r4,zero,1af40 <__subdf3+0x7b4>
   1add8:	0084303a 	nor	r2,zero,r2
   1addc:	1000561e 	bne	r2,zero,1af38 <__subdf3+0x7ac>
   1ade0:	89a3883a 	add	r17,r17,r6
   1ade4:	1945883a 	add	r2,r3,r5
   1ade8:	898d803a 	cmpltu	r6,r17,r6
   1adec:	3087883a 	add	r3,r6,r2
   1adf0:	4821883a 	mov	r16,r9
   1adf4:	003f0506 	br	1aa0c <__subdf3+0x280>
   1adf8:	10002b1e 	bne	r2,zero,1aea8 <__subdf3+0x71c>
   1adfc:	2984b03a 	or	r2,r5,r6
   1ae00:	10008026 	beq	r2,zero,1b004 <__subdf3+0x878>
   1ae04:	2807883a 	mov	r3,r5
   1ae08:	3023883a 	mov	r17,r6
   1ae0c:	3825883a 	mov	r18,r7
   1ae10:	0401ffc4 	movi	r16,2047
   1ae14:	003e7e06 	br	1a810 <__subdf3+0x84>
   1ae18:	3809883a 	mov	r4,r7
   1ae1c:	0011883a 	mov	r8,zero
   1ae20:	0005883a 	mov	r2,zero
   1ae24:	003ee306 	br	1a9b4 <__subdf3+0x228>
   1ae28:	1c62b03a 	or	r17,r3,r17
   1ae2c:	8822c03a 	cmpne	r17,r17,zero
   1ae30:	0005883a 	mov	r2,zero
   1ae34:	003f8906 	br	1ac5c <__subdf3+0x4d0>
   1ae38:	3809883a 	mov	r4,r7
   1ae3c:	4821883a 	mov	r16,r9
   1ae40:	0011883a 	mov	r8,zero
   1ae44:	0005883a 	mov	r2,zero
   1ae48:	003eda06 	br	1a9b4 <__subdf3+0x228>
   1ae4c:	0101ffc4 	movi	r4,2047
   1ae50:	49003b26 	beq	r9,r4,1af40 <__subdf3+0x7b4>
   1ae54:	0085c83a 	sub	r2,zero,r2
   1ae58:	18c02034 	orhi	r3,r3,128
   1ae5c:	01000e04 	movi	r4,56
   1ae60:	20806e16 	blt	r4,r2,1b01c <__subdf3+0x890>
   1ae64:	010007c4 	movi	r4,31
   1ae68:	20807716 	blt	r4,r2,1b048 <__subdf3+0x8bc>
   1ae6c:	01000804 	movi	r4,32
   1ae70:	2089c83a 	sub	r4,r4,r2
   1ae74:	1914983a 	sll	r10,r3,r4
   1ae78:	8890d83a 	srl	r8,r17,r2
   1ae7c:	8908983a 	sll	r4,r17,r4
   1ae80:	1884d83a 	srl	r2,r3,r2
   1ae84:	5222b03a 	or	r17,r10,r8
   1ae88:	2006c03a 	cmpne	r3,r4,zero
   1ae8c:	88e2b03a 	or	r17,r17,r3
   1ae90:	89a3883a 	add	r17,r17,r6
   1ae94:	1145883a 	add	r2,r2,r5
   1ae98:	898d803a 	cmpltu	r6,r17,r6
   1ae9c:	3087883a 	add	r3,r6,r2
   1aea0:	4821883a 	mov	r16,r9
   1aea4:	003ed906 	br	1aa0c <__subdf3+0x280>
   1aea8:	2984b03a 	or	r2,r5,r6
   1aeac:	10004226 	beq	r2,zero,1afb8 <__subdf3+0x82c>
   1aeb0:	1808d0fa 	srli	r4,r3,3
   1aeb4:	8822d0fa 	srli	r17,r17,3
   1aeb8:	1806977a 	slli	r3,r3,29
   1aebc:	2080022c 	andhi	r2,r4,8
   1aec0:	1c62b03a 	or	r17,r3,r17
   1aec4:	10000826 	beq	r2,zero,1aee8 <__subdf3+0x75c>
   1aec8:	2812d0fa 	srli	r9,r5,3
   1aecc:	4880022c 	andhi	r2,r9,8
   1aed0:	1000051e 	bne	r2,zero,1aee8 <__subdf3+0x75c>
   1aed4:	300cd0fa 	srli	r6,r6,3
   1aed8:	2804977a 	slli	r2,r5,29
   1aedc:	4809883a 	mov	r4,r9
   1aee0:	3825883a 	mov	r18,r7
   1aee4:	11a2b03a 	or	r17,r2,r6
   1aee8:	8806d77a 	srli	r3,r17,29
   1aeec:	200890fa 	slli	r4,r4,3
   1aef0:	882290fa 	slli	r17,r17,3
   1aef4:	0401ffc4 	movi	r16,2047
   1aef8:	1906b03a 	or	r3,r3,r4
   1aefc:	003e4406 	br	1a810 <__subdf3+0x84>
   1af00:	2984b03a 	or	r2,r5,r6
   1af04:	103e4226 	beq	r2,zero,1a810 <__subdf3+0x84>
   1af08:	8989c83a 	sub	r4,r17,r6
   1af0c:	8911803a 	cmpltu	r8,r17,r4
   1af10:	1945c83a 	sub	r2,r3,r5
   1af14:	1205c83a 	sub	r2,r2,r8
   1af18:	1200202c 	andhi	r8,r2,128
   1af1c:	403e9a26 	beq	r8,zero,1a988 <__subdf3+0x1fc>
   1af20:	3463c83a 	sub	r17,r6,r17
   1af24:	28c5c83a 	sub	r2,r5,r3
   1af28:	344d803a 	cmpltu	r6,r6,r17
   1af2c:	1187c83a 	sub	r3,r2,r6
   1af30:	3825883a 	mov	r18,r7
   1af34:	003e3606 	br	1a810 <__subdf3+0x84>
   1af38:	0101ffc4 	movi	r4,2047
   1af3c:	493fc71e 	bne	r9,r4,1ae5c <__subdf3+0x6d0>
   1af40:	2807883a 	mov	r3,r5
   1af44:	3023883a 	mov	r17,r6
   1af48:	4821883a 	mov	r16,r9
   1af4c:	003e3006 	br	1a810 <__subdf3+0x84>
   1af50:	10003626 	beq	r2,zero,1b02c <__subdf3+0x8a0>
   1af54:	2984b03a 	or	r2,r5,r6
   1af58:	10001726 	beq	r2,zero,1afb8 <__subdf3+0x82c>
   1af5c:	1808d0fa 	srli	r4,r3,3
   1af60:	8822d0fa 	srli	r17,r17,3
   1af64:	1806977a 	slli	r3,r3,29
   1af68:	2080022c 	andhi	r2,r4,8
   1af6c:	1c62b03a 	or	r17,r3,r17
   1af70:	10000726 	beq	r2,zero,1af90 <__subdf3+0x804>
   1af74:	2812d0fa 	srli	r9,r5,3
   1af78:	4880022c 	andhi	r2,r9,8
   1af7c:	1000041e 	bne	r2,zero,1af90 <__subdf3+0x804>
   1af80:	300cd0fa 	srli	r6,r6,3
   1af84:	2804977a 	slli	r2,r5,29
   1af88:	4809883a 	mov	r4,r9
   1af8c:	11a2b03a 	or	r17,r2,r6
   1af90:	8806d77a 	srli	r3,r17,29
   1af94:	200890fa 	slli	r4,r4,3
   1af98:	882290fa 	slli	r17,r17,3
   1af9c:	3825883a 	mov	r18,r7
   1afa0:	1906b03a 	or	r3,r3,r4
   1afa4:	0401ffc4 	movi	r16,2047
   1afa8:	003e1906 	br	1a810 <__subdf3+0x84>
   1afac:	000b883a 	mov	r5,zero
   1afb0:	0005883a 	mov	r2,zero
   1afb4:	003e2e06 	br	1a870 <__subdf3+0xe4>
   1afb8:	0401ffc4 	movi	r16,2047
   1afbc:	003e1406 	br	1a810 <__subdf3+0x84>
   1afc0:	0005883a 	mov	r2,zero
   1afc4:	003f7506 	br	1ad9c <__subdf3+0x610>
   1afc8:	0005883a 	mov	r2,zero
   1afcc:	0009883a 	mov	r4,zero
   1afd0:	003e7806 	br	1a9b4 <__subdf3+0x228>
   1afd4:	123ff804 	addi	r8,r2,-32
   1afd8:	01000804 	movi	r4,32
   1afdc:	1a10d83a 	srl	r8,r3,r8
   1afe0:	11002526 	beq	r2,r4,1b078 <__subdf3+0x8ec>
   1afe4:	01001004 	movi	r4,64
   1afe8:	2085c83a 	sub	r2,r4,r2
   1afec:	1884983a 	sll	r2,r3,r2
   1aff0:	1444b03a 	or	r2,r2,r17
   1aff4:	1004c03a 	cmpne	r2,r2,zero
   1aff8:	40a2b03a 	or	r17,r8,r2
   1affc:	0005883a 	mov	r2,zero
   1b000:	003f1606 	br	1ac5c <__subdf3+0x4d0>
   1b004:	02000434 	movhi	r8,16
   1b008:	0009883a 	mov	r4,zero
   1b00c:	423fffc4 	addi	r8,r8,-1
   1b010:	00bfffc4 	movi	r2,-1
   1b014:	0401ffc4 	movi	r16,2047
   1b018:	003e6606 	br	1a9b4 <__subdf3+0x228>
   1b01c:	1c62b03a 	or	r17,r3,r17
   1b020:	8822c03a 	cmpne	r17,r17,zero
   1b024:	0005883a 	mov	r2,zero
   1b028:	003f9906 	br	1ae90 <__subdf3+0x704>
   1b02c:	2807883a 	mov	r3,r5
   1b030:	3023883a 	mov	r17,r6
   1b034:	0401ffc4 	movi	r16,2047
   1b038:	003df506 	br	1a810 <__subdf3+0x84>
   1b03c:	2807883a 	mov	r3,r5
   1b040:	3023883a 	mov	r17,r6
   1b044:	003df206 	br	1a810 <__subdf3+0x84>
   1b048:	123ff804 	addi	r8,r2,-32
   1b04c:	01000804 	movi	r4,32
   1b050:	1a10d83a 	srl	r8,r3,r8
   1b054:	11000a26 	beq	r2,r4,1b080 <__subdf3+0x8f4>
   1b058:	01001004 	movi	r4,64
   1b05c:	2085c83a 	sub	r2,r4,r2
   1b060:	1884983a 	sll	r2,r3,r2
   1b064:	1444b03a 	or	r2,r2,r17
   1b068:	1004c03a 	cmpne	r2,r2,zero
   1b06c:	40a2b03a 	or	r17,r8,r2
   1b070:	0005883a 	mov	r2,zero
   1b074:	003f8606 	br	1ae90 <__subdf3+0x704>
   1b078:	0005883a 	mov	r2,zero
   1b07c:	003fdc06 	br	1aff0 <__subdf3+0x864>
   1b080:	0005883a 	mov	r2,zero
   1b084:	003ff706 	br	1b064 <__subdf3+0x8d8>

0001b088 <__fixdfsi>:
   1b088:	280cd53a 	srli	r6,r5,20
   1b08c:	00c00434 	movhi	r3,16
   1b090:	18ffffc4 	addi	r3,r3,-1
   1b094:	3181ffcc 	andi	r6,r6,2047
   1b098:	01c0ff84 	movi	r7,1022
   1b09c:	28c6703a 	and	r3,r5,r3
   1b0a0:	280ad7fa 	srli	r5,r5,31
   1b0a4:	3980120e 	bge	r7,r6,1b0f0 <__fixdfsi+0x68>
   1b0a8:	00810744 	movi	r2,1053
   1b0ac:	11800c16 	blt	r2,r6,1b0e0 <__fixdfsi+0x58>
   1b0b0:	00810cc4 	movi	r2,1075
   1b0b4:	1185c83a 	sub	r2,r2,r6
   1b0b8:	01c007c4 	movi	r7,31
   1b0bc:	18c00434 	orhi	r3,r3,16
   1b0c0:	38800d16 	blt	r7,r2,1b0f8 <__fixdfsi+0x70>
   1b0c4:	31befb44 	addi	r6,r6,-1043
   1b0c8:	2084d83a 	srl	r2,r4,r2
   1b0cc:	1986983a 	sll	r3,r3,r6
   1b0d0:	1884b03a 	or	r2,r3,r2
   1b0d4:	28000726 	beq	r5,zero,1b0f4 <__fixdfsi+0x6c>
   1b0d8:	0085c83a 	sub	r2,zero,r2
   1b0dc:	f800283a 	ret
   1b0e0:	00a00034 	movhi	r2,32768
   1b0e4:	10bfffc4 	addi	r2,r2,-1
   1b0e8:	2885883a 	add	r2,r5,r2
   1b0ec:	f800283a 	ret
   1b0f0:	0005883a 	mov	r2,zero
   1b0f4:	f800283a 	ret
   1b0f8:	008104c4 	movi	r2,1043
   1b0fc:	1185c83a 	sub	r2,r2,r6
   1b100:	1884d83a 	srl	r2,r3,r2
   1b104:	003ff306 	br	1b0d4 <__fixdfsi+0x4c>

0001b108 <__floatsidf>:
   1b108:	defffd04 	addi	sp,sp,-12
   1b10c:	dfc00215 	stw	ra,8(sp)
   1b110:	dc400115 	stw	r17,4(sp)
   1b114:	dc000015 	stw	r16,0(sp)
   1b118:	20002b26 	beq	r4,zero,1b1c8 <__floatsidf+0xc0>
   1b11c:	2023883a 	mov	r17,r4
   1b120:	2020d7fa 	srli	r16,r4,31
   1b124:	20002d16 	blt	r4,zero,1b1dc <__floatsidf+0xd4>
   1b128:	8809883a 	mov	r4,r17
   1b12c:	000b3fc0 	call	b3fc <__clzsi2>
   1b130:	01410784 	movi	r5,1054
   1b134:	288bc83a 	sub	r5,r5,r2
   1b138:	01010cc4 	movi	r4,1075
   1b13c:	2149c83a 	sub	r4,r4,r5
   1b140:	00c007c4 	movi	r3,31
   1b144:	1900160e 	bge	r3,r4,1b1a0 <__floatsidf+0x98>
   1b148:	00c104c4 	movi	r3,1043
   1b14c:	1947c83a 	sub	r3,r3,r5
   1b150:	88c6983a 	sll	r3,r17,r3
   1b154:	00800434 	movhi	r2,16
   1b158:	10bfffc4 	addi	r2,r2,-1
   1b15c:	1886703a 	and	r3,r3,r2
   1b160:	2941ffcc 	andi	r5,r5,2047
   1b164:	800d883a 	mov	r6,r16
   1b168:	0005883a 	mov	r2,zero
   1b16c:	280a953a 	slli	r5,r5,20
   1b170:	31803fcc 	andi	r6,r6,255
   1b174:	01000434 	movhi	r4,16
   1b178:	300c97fa 	slli	r6,r6,31
   1b17c:	213fffc4 	addi	r4,r4,-1
   1b180:	1906703a 	and	r3,r3,r4
   1b184:	1946b03a 	or	r3,r3,r5
   1b188:	1986b03a 	or	r3,r3,r6
   1b18c:	dfc00217 	ldw	ra,8(sp)
   1b190:	dc400117 	ldw	r17,4(sp)
   1b194:	dc000017 	ldw	r16,0(sp)
   1b198:	dec00304 	addi	sp,sp,12
   1b19c:	f800283a 	ret
   1b1a0:	00c002c4 	movi	r3,11
   1b1a4:	1887c83a 	sub	r3,r3,r2
   1b1a8:	88c6d83a 	srl	r3,r17,r3
   1b1ac:	8904983a 	sll	r2,r17,r4
   1b1b0:	01000434 	movhi	r4,16
   1b1b4:	213fffc4 	addi	r4,r4,-1
   1b1b8:	2941ffcc 	andi	r5,r5,2047
   1b1bc:	1906703a 	and	r3,r3,r4
   1b1c0:	800d883a 	mov	r6,r16
   1b1c4:	003fe906 	br	1b16c <__floatsidf+0x64>
   1b1c8:	000d883a 	mov	r6,zero
   1b1cc:	000b883a 	mov	r5,zero
   1b1d0:	0007883a 	mov	r3,zero
   1b1d4:	0005883a 	mov	r2,zero
   1b1d8:	003fe406 	br	1b16c <__floatsidf+0x64>
   1b1dc:	0123c83a 	sub	r17,zero,r4
   1b1e0:	003fd106 	br	1b128 <__floatsidf+0x20>

0001b1e4 <__floatunsidf>:
   1b1e4:	defffe04 	addi	sp,sp,-8
   1b1e8:	dc000015 	stw	r16,0(sp)
   1b1ec:	dfc00115 	stw	ra,4(sp)
   1b1f0:	2021883a 	mov	r16,r4
   1b1f4:	20002226 	beq	r4,zero,1b280 <__floatunsidf+0x9c>
   1b1f8:	000b3fc0 	call	b3fc <__clzsi2>
   1b1fc:	01010784 	movi	r4,1054
   1b200:	2089c83a 	sub	r4,r4,r2
   1b204:	01810cc4 	movi	r6,1075
   1b208:	310dc83a 	sub	r6,r6,r4
   1b20c:	00c007c4 	movi	r3,31
   1b210:	1980120e 	bge	r3,r6,1b25c <__floatunsidf+0x78>
   1b214:	00c104c4 	movi	r3,1043
   1b218:	1907c83a 	sub	r3,r3,r4
   1b21c:	80ca983a 	sll	r5,r16,r3
   1b220:	00800434 	movhi	r2,16
   1b224:	10bfffc4 	addi	r2,r2,-1
   1b228:	2101ffcc 	andi	r4,r4,2047
   1b22c:	0021883a 	mov	r16,zero
   1b230:	288a703a 	and	r5,r5,r2
   1b234:	2008953a 	slli	r4,r4,20
   1b238:	00c00434 	movhi	r3,16
   1b23c:	18ffffc4 	addi	r3,r3,-1
   1b240:	28c6703a 	and	r3,r5,r3
   1b244:	8005883a 	mov	r2,r16
   1b248:	1906b03a 	or	r3,r3,r4
   1b24c:	dfc00117 	ldw	ra,4(sp)
   1b250:	dc000017 	ldw	r16,0(sp)
   1b254:	dec00204 	addi	sp,sp,8
   1b258:	f800283a 	ret
   1b25c:	00c002c4 	movi	r3,11
   1b260:	188bc83a 	sub	r5,r3,r2
   1b264:	814ad83a 	srl	r5,r16,r5
   1b268:	00c00434 	movhi	r3,16
   1b26c:	18ffffc4 	addi	r3,r3,-1
   1b270:	81a0983a 	sll	r16,r16,r6
   1b274:	2101ffcc 	andi	r4,r4,2047
   1b278:	28ca703a 	and	r5,r5,r3
   1b27c:	003fed06 	br	1b234 <__floatunsidf+0x50>
   1b280:	0009883a 	mov	r4,zero
   1b284:	000b883a 	mov	r5,zero
   1b288:	003fea06 	br	1b234 <__floatunsidf+0x50>

0001b28c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b28c:	defffe04 	addi	sp,sp,-8
   1b290:	dfc00115 	stw	ra,4(sp)
   1b294:	df000015 	stw	fp,0(sp)
   1b298:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b29c:	d0a00c17 	ldw	r2,-32720(gp)
   1b2a0:	10000326 	beq	r2,zero,1b2b0 <alt_get_errno+0x24>
   1b2a4:	d0a00c17 	ldw	r2,-32720(gp)
   1b2a8:	103ee83a 	callr	r2
   1b2ac:	00000106 	br	1b2b4 <alt_get_errno+0x28>
   1b2b0:	d0a7cd04 	addi	r2,gp,-24780
}
   1b2b4:	e037883a 	mov	sp,fp
   1b2b8:	dfc00117 	ldw	ra,4(sp)
   1b2bc:	df000017 	ldw	fp,0(sp)
   1b2c0:	dec00204 	addi	sp,sp,8
   1b2c4:	f800283a 	ret

0001b2c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1b2c8:	defffb04 	addi	sp,sp,-20
   1b2cc:	dfc00415 	stw	ra,16(sp)
   1b2d0:	df000315 	stw	fp,12(sp)
   1b2d4:	df000304 	addi	fp,sp,12
   1b2d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1b2dc:	e0bfff17 	ldw	r2,-4(fp)
   1b2e0:	10000616 	blt	r2,zero,1b2fc <close+0x34>
   1b2e4:	e0bfff17 	ldw	r2,-4(fp)
   1b2e8:	10c00324 	muli	r3,r2,12
   1b2ec:	008000f4 	movhi	r2,3
   1b2f0:	10a14f04 	addi	r2,r2,-31428
   1b2f4:	1885883a 	add	r2,r3,r2
   1b2f8:	00000106 	br	1b300 <close+0x38>
   1b2fc:	0005883a 	mov	r2,zero
   1b300:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1b304:	e0bffd17 	ldw	r2,-12(fp)
   1b308:	10001926 	beq	r2,zero,1b370 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1b30c:	e0bffd17 	ldw	r2,-12(fp)
   1b310:	10800017 	ldw	r2,0(r2)
   1b314:	10800417 	ldw	r2,16(r2)
   1b318:	10000626 	beq	r2,zero,1b334 <close+0x6c>
   1b31c:	e0bffd17 	ldw	r2,-12(fp)
   1b320:	10800017 	ldw	r2,0(r2)
   1b324:	10800417 	ldw	r2,16(r2)
   1b328:	e13ffd17 	ldw	r4,-12(fp)
   1b32c:	103ee83a 	callr	r2
   1b330:	00000106 	br	1b338 <close+0x70>
   1b334:	0005883a 	mov	r2,zero
   1b338:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1b33c:	e13fff17 	ldw	r4,-4(fp)
   1b340:	001b9800 	call	1b980 <alt_release_fd>
    if (rval < 0)
   1b344:	e0bffe17 	ldw	r2,-8(fp)
   1b348:	1000070e 	bge	r2,zero,1b368 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   1b34c:	001b28c0 	call	1b28c <alt_get_errno>
   1b350:	1007883a 	mov	r3,r2
   1b354:	e0bffe17 	ldw	r2,-8(fp)
   1b358:	0085c83a 	sub	r2,zero,r2
   1b35c:	18800015 	stw	r2,0(r3)
      return -1;
   1b360:	00bfffc4 	movi	r2,-1
   1b364:	00000706 	br	1b384 <close+0xbc>
    }
    return 0;
   1b368:	0005883a 	mov	r2,zero
   1b36c:	00000506 	br	1b384 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1b370:	001b28c0 	call	1b28c <alt_get_errno>
   1b374:	1007883a 	mov	r3,r2
   1b378:	00801444 	movi	r2,81
   1b37c:	18800015 	stw	r2,0(r3)
    return -1;
   1b380:	00bfffc4 	movi	r2,-1
  }
}
   1b384:	e037883a 	mov	sp,fp
   1b388:	dfc00117 	ldw	ra,4(sp)
   1b38c:	df000017 	ldw	fp,0(sp)
   1b390:	dec00204 	addi	sp,sp,8
   1b394:	f800283a 	ret

0001b398 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1b398:	defffc04 	addi	sp,sp,-16
   1b39c:	df000315 	stw	fp,12(sp)
   1b3a0:	df000304 	addi	fp,sp,12
   1b3a4:	e13ffd15 	stw	r4,-12(fp)
   1b3a8:	e17ffe15 	stw	r5,-8(fp)
   1b3ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1b3b0:	e0bfff17 	ldw	r2,-4(fp)
}
   1b3b4:	e037883a 	mov	sp,fp
   1b3b8:	df000017 	ldw	fp,0(sp)
   1b3bc:	dec00104 	addi	sp,sp,4
   1b3c0:	f800283a 	ret

0001b3c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b3c4:	defffe04 	addi	sp,sp,-8
   1b3c8:	dfc00115 	stw	ra,4(sp)
   1b3cc:	df000015 	stw	fp,0(sp)
   1b3d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b3d4:	d0a00c17 	ldw	r2,-32720(gp)
   1b3d8:	10000326 	beq	r2,zero,1b3e8 <alt_get_errno+0x24>
   1b3dc:	d0a00c17 	ldw	r2,-32720(gp)
   1b3e0:	103ee83a 	callr	r2
   1b3e4:	00000106 	br	1b3ec <alt_get_errno+0x28>
   1b3e8:	d0a7cd04 	addi	r2,gp,-24780
}
   1b3ec:	e037883a 	mov	sp,fp
   1b3f0:	dfc00117 	ldw	ra,4(sp)
   1b3f4:	df000017 	ldw	fp,0(sp)
   1b3f8:	dec00204 	addi	sp,sp,8
   1b3fc:	f800283a 	ret

0001b400 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1b400:	defffb04 	addi	sp,sp,-20
   1b404:	dfc00415 	stw	ra,16(sp)
   1b408:	df000315 	stw	fp,12(sp)
   1b40c:	df000304 	addi	fp,sp,12
   1b410:	e13ffe15 	stw	r4,-8(fp)
   1b414:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1b418:	e0bffe17 	ldw	r2,-8(fp)
   1b41c:	10000616 	blt	r2,zero,1b438 <fstat+0x38>
   1b420:	e0bffe17 	ldw	r2,-8(fp)
   1b424:	10c00324 	muli	r3,r2,12
   1b428:	008000f4 	movhi	r2,3
   1b42c:	10a14f04 	addi	r2,r2,-31428
   1b430:	1885883a 	add	r2,r3,r2
   1b434:	00000106 	br	1b43c <fstat+0x3c>
   1b438:	0005883a 	mov	r2,zero
   1b43c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1b440:	e0bffd17 	ldw	r2,-12(fp)
   1b444:	10001026 	beq	r2,zero,1b488 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1b448:	e0bffd17 	ldw	r2,-12(fp)
   1b44c:	10800017 	ldw	r2,0(r2)
   1b450:	10800817 	ldw	r2,32(r2)
   1b454:	10000726 	beq	r2,zero,1b474 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   1b458:	e0bffd17 	ldw	r2,-12(fp)
   1b45c:	10800017 	ldw	r2,0(r2)
   1b460:	10800817 	ldw	r2,32(r2)
   1b464:	e17fff17 	ldw	r5,-4(fp)
   1b468:	e13ffd17 	ldw	r4,-12(fp)
   1b46c:	103ee83a 	callr	r2
   1b470:	00000a06 	br	1b49c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1b474:	e0bfff17 	ldw	r2,-4(fp)
   1b478:	00c80004 	movi	r3,8192
   1b47c:	10c00115 	stw	r3,4(r2)
      return 0;
   1b480:	0005883a 	mov	r2,zero
   1b484:	00000506 	br	1b49c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1b488:	001b3c40 	call	1b3c4 <alt_get_errno>
   1b48c:	1007883a 	mov	r3,r2
   1b490:	00801444 	movi	r2,81
   1b494:	18800015 	stw	r2,0(r3)
    return -1;
   1b498:	00bfffc4 	movi	r2,-1
  }
}
   1b49c:	e037883a 	mov	sp,fp
   1b4a0:	dfc00117 	ldw	ra,4(sp)
   1b4a4:	df000017 	ldw	fp,0(sp)
   1b4a8:	dec00204 	addi	sp,sp,8
   1b4ac:	f800283a 	ret

0001b4b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b4b0:	defffe04 	addi	sp,sp,-8
   1b4b4:	dfc00115 	stw	ra,4(sp)
   1b4b8:	df000015 	stw	fp,0(sp)
   1b4bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b4c0:	d0a00c17 	ldw	r2,-32720(gp)
   1b4c4:	10000326 	beq	r2,zero,1b4d4 <alt_get_errno+0x24>
   1b4c8:	d0a00c17 	ldw	r2,-32720(gp)
   1b4cc:	103ee83a 	callr	r2
   1b4d0:	00000106 	br	1b4d8 <alt_get_errno+0x28>
   1b4d4:	d0a7cd04 	addi	r2,gp,-24780
}
   1b4d8:	e037883a 	mov	sp,fp
   1b4dc:	dfc00117 	ldw	ra,4(sp)
   1b4e0:	df000017 	ldw	fp,0(sp)
   1b4e4:	dec00204 	addi	sp,sp,8
   1b4e8:	f800283a 	ret

0001b4ec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1b4ec:	deffed04 	addi	sp,sp,-76
   1b4f0:	dfc01215 	stw	ra,72(sp)
   1b4f4:	df001115 	stw	fp,68(sp)
   1b4f8:	df001104 	addi	fp,sp,68
   1b4fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1b500:	e0bfff17 	ldw	r2,-4(fp)
   1b504:	10000616 	blt	r2,zero,1b520 <isatty+0x34>
   1b508:	e0bfff17 	ldw	r2,-4(fp)
   1b50c:	10c00324 	muli	r3,r2,12
   1b510:	008000f4 	movhi	r2,3
   1b514:	10a14f04 	addi	r2,r2,-31428
   1b518:	1885883a 	add	r2,r3,r2
   1b51c:	00000106 	br	1b524 <isatty+0x38>
   1b520:	0005883a 	mov	r2,zero
   1b524:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1b528:	e0bfef17 	ldw	r2,-68(fp)
   1b52c:	10000e26 	beq	r2,zero,1b568 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1b530:	e0bfef17 	ldw	r2,-68(fp)
   1b534:	10800017 	ldw	r2,0(r2)
   1b538:	10800817 	ldw	r2,32(r2)
   1b53c:	1000021e 	bne	r2,zero,1b548 <isatty+0x5c>
    {
      return 1;
   1b540:	00800044 	movi	r2,1
   1b544:	00000d06 	br	1b57c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1b548:	e0bff004 	addi	r2,fp,-64
   1b54c:	100b883a 	mov	r5,r2
   1b550:	e13fff17 	ldw	r4,-4(fp)
   1b554:	001b4000 	call	1b400 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1b558:	e0bff117 	ldw	r2,-60(fp)
   1b55c:	10880020 	cmpeqi	r2,r2,8192
   1b560:	10803fcc 	andi	r2,r2,255
   1b564:	00000506 	br	1b57c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1b568:	001b4b00 	call	1b4b0 <alt_get_errno>
   1b56c:	1007883a 	mov	r3,r2
   1b570:	00801444 	movi	r2,81
   1b574:	18800015 	stw	r2,0(r3)
    return 0;
   1b578:	0005883a 	mov	r2,zero
  }
}
   1b57c:	e037883a 	mov	sp,fp
   1b580:	dfc00117 	ldw	ra,4(sp)
   1b584:	df000017 	ldw	fp,0(sp)
   1b588:	dec00204 	addi	sp,sp,8
   1b58c:	f800283a 	ret

0001b590 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1b590:	defffc04 	addi	sp,sp,-16
   1b594:	df000315 	stw	fp,12(sp)
   1b598:	df000304 	addi	fp,sp,12
   1b59c:	e13ffd15 	stw	r4,-12(fp)
   1b5a0:	e17ffe15 	stw	r5,-8(fp)
   1b5a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1b5a8:	e0fffe17 	ldw	r3,-8(fp)
   1b5ac:	e0bffd17 	ldw	r2,-12(fp)
   1b5b0:	18800c26 	beq	r3,r2,1b5e4 <alt_load_section+0x54>
  {
    while( to != end )
   1b5b4:	00000806 	br	1b5d8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   1b5b8:	e0bffe17 	ldw	r2,-8(fp)
   1b5bc:	10c00104 	addi	r3,r2,4
   1b5c0:	e0fffe15 	stw	r3,-8(fp)
   1b5c4:	e0fffd17 	ldw	r3,-12(fp)
   1b5c8:	19000104 	addi	r4,r3,4
   1b5cc:	e13ffd15 	stw	r4,-12(fp)
   1b5d0:	18c00017 	ldw	r3,0(r3)
   1b5d4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1b5d8:	e0fffe17 	ldw	r3,-8(fp)
   1b5dc:	e0bfff17 	ldw	r2,-4(fp)
   1b5e0:	18bff51e 	bne	r3,r2,1b5b8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   1b5e4:	0001883a 	nop
   1b5e8:	e037883a 	mov	sp,fp
   1b5ec:	df000017 	ldw	fp,0(sp)
   1b5f0:	dec00104 	addi	sp,sp,4
   1b5f4:	f800283a 	ret

0001b5f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1b5f8:	defffe04 	addi	sp,sp,-8
   1b5fc:	dfc00115 	stw	ra,4(sp)
   1b600:	df000015 	stw	fp,0(sp)
   1b604:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1b608:	018000f4 	movhi	r6,3
   1b60c:	31a69d04 	addi	r6,r6,-25996
   1b610:	014000b4 	movhi	r5,2
   1b614:	295f1c04 	addi	r5,r5,31856
   1b618:	010000f4 	movhi	r4,3
   1b61c:	21269d04 	addi	r4,r4,-25996
   1b620:	001b5900 	call	1b590 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1b624:	01800034 	movhi	r6,0
   1b628:	31809204 	addi	r6,r6,584
   1b62c:	01400034 	movhi	r5,0
   1b630:	29400804 	addi	r5,r5,32
   1b634:	01000034 	movhi	r4,0
   1b638:	21000804 	addi	r4,r4,32
   1b63c:	001b5900 	call	1b590 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1b640:	018000b4 	movhi	r6,2
   1b644:	319f1c04 	addi	r6,r6,31856
   1b648:	014000b4 	movhi	r5,2
   1b64c:	295d3b04 	addi	r5,r5,29932
   1b650:	010000b4 	movhi	r4,2
   1b654:	211d3b04 	addi	r4,r4,29932
   1b658:	001b5900 	call	1b590 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1b65c:	00261900 	call	26190 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1b660:	00263e00 	call	263e0 <alt_icache_flush_all>
}
   1b664:	0001883a 	nop
   1b668:	e037883a 	mov	sp,fp
   1b66c:	dfc00117 	ldw	ra,4(sp)
   1b670:	df000017 	ldw	fp,0(sp)
   1b674:	dec00204 	addi	sp,sp,8
   1b678:	f800283a 	ret

0001b67c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b67c:	defffe04 	addi	sp,sp,-8
   1b680:	dfc00115 	stw	ra,4(sp)
   1b684:	df000015 	stw	fp,0(sp)
   1b688:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b68c:	d0a00c17 	ldw	r2,-32720(gp)
   1b690:	10000326 	beq	r2,zero,1b6a0 <alt_get_errno+0x24>
   1b694:	d0a00c17 	ldw	r2,-32720(gp)
   1b698:	103ee83a 	callr	r2
   1b69c:	00000106 	br	1b6a4 <alt_get_errno+0x28>
   1b6a0:	d0a7cd04 	addi	r2,gp,-24780
}
   1b6a4:	e037883a 	mov	sp,fp
   1b6a8:	dfc00117 	ldw	ra,4(sp)
   1b6ac:	df000017 	ldw	fp,0(sp)
   1b6b0:	dec00204 	addi	sp,sp,8
   1b6b4:	f800283a 	ret

0001b6b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1b6b8:	defff904 	addi	sp,sp,-28
   1b6bc:	dfc00615 	stw	ra,24(sp)
   1b6c0:	df000515 	stw	fp,20(sp)
   1b6c4:	df000504 	addi	fp,sp,20
   1b6c8:	e13ffd15 	stw	r4,-12(fp)
   1b6cc:	e17ffe15 	stw	r5,-8(fp)
   1b6d0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1b6d4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1b6d8:	e0bffd17 	ldw	r2,-12(fp)
   1b6dc:	10000616 	blt	r2,zero,1b6f8 <lseek+0x40>
   1b6e0:	e0bffd17 	ldw	r2,-12(fp)
   1b6e4:	10c00324 	muli	r3,r2,12
   1b6e8:	008000f4 	movhi	r2,3
   1b6ec:	10a14f04 	addi	r2,r2,-31428
   1b6f0:	1885883a 	add	r2,r3,r2
   1b6f4:	00000106 	br	1b6fc <lseek+0x44>
   1b6f8:	0005883a 	mov	r2,zero
   1b6fc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1b700:	e0bffc17 	ldw	r2,-16(fp)
   1b704:	10001026 	beq	r2,zero,1b748 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1b708:	e0bffc17 	ldw	r2,-16(fp)
   1b70c:	10800017 	ldw	r2,0(r2)
   1b710:	10800717 	ldw	r2,28(r2)
   1b714:	10000926 	beq	r2,zero,1b73c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1b718:	e0bffc17 	ldw	r2,-16(fp)
   1b71c:	10800017 	ldw	r2,0(r2)
   1b720:	10800717 	ldw	r2,28(r2)
   1b724:	e1bfff17 	ldw	r6,-4(fp)
   1b728:	e17ffe17 	ldw	r5,-8(fp)
   1b72c:	e13ffc17 	ldw	r4,-16(fp)
   1b730:	103ee83a 	callr	r2
   1b734:	e0bffb15 	stw	r2,-20(fp)
   1b738:	00000506 	br	1b750 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1b73c:	00bfde84 	movi	r2,-134
   1b740:	e0bffb15 	stw	r2,-20(fp)
   1b744:	00000206 	br	1b750 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   1b748:	00bfebc4 	movi	r2,-81
   1b74c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1b750:	e0bffb17 	ldw	r2,-20(fp)
   1b754:	1000070e 	bge	r2,zero,1b774 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   1b758:	001b67c0 	call	1b67c <alt_get_errno>
   1b75c:	1007883a 	mov	r3,r2
   1b760:	e0bffb17 	ldw	r2,-20(fp)
   1b764:	0085c83a 	sub	r2,zero,r2
   1b768:	18800015 	stw	r2,0(r3)
    rc = -1;
   1b76c:	00bfffc4 	movi	r2,-1
   1b770:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1b774:	e0bffb17 	ldw	r2,-20(fp)
}
   1b778:	e037883a 	mov	sp,fp
   1b77c:	dfc00117 	ldw	ra,4(sp)
   1b780:	df000017 	ldw	fp,0(sp)
   1b784:	dec00204 	addi	sp,sp,8
   1b788:	f800283a 	ret

0001b78c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1b78c:	defff904 	addi	sp,sp,-28
   1b790:	dfc00615 	stw	ra,24(sp)
   1b794:	df000515 	stw	fp,20(sp)
   1b798:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1b79c:	0009883a 	mov	r4,zero
   1b7a0:	00241b40 	call	241b4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1b7a4:	001c7480 	call	1c748 <OSInit>
   1b7a8:	01000044 	movi	r4,1
   1b7ac:	0021b700 	call	21b70 <OSSemCreate>
   1b7b0:	d0a7d315 	stw	r2,-24756(gp)
   1b7b4:	01000044 	movi	r4,1
   1b7b8:	0021b700 	call	21b70 <OSSemCreate>
   1b7bc:	d0a7d515 	stw	r2,-24748(gp)
   1b7c0:	d0a7ce04 	addi	r2,gp,-24776
   1b7c4:	e0bffc15 	stw	r2,-16(fp)
   1b7c8:	00800044 	movi	r2,1
   1b7cc:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   1b7d0:	e0bffd0b 	ldhu	r2,-12(fp)
   1b7d4:	1009883a 	mov	r4,r2
   1b7d8:	0021b700 	call	21b70 <OSSemCreate>
   1b7dc:	1007883a 	mov	r3,r2
   1b7e0:	e0bffc17 	ldw	r2,-16(fp)
   1b7e4:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1b7e8:	00241ec0 	call	241ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1b7ec:	018000b4 	movhi	r6,2
   1b7f0:	319e8a04 	addi	r6,r6,31272
   1b7f4:	014000b4 	movhi	r5,2
   1b7f8:	295e8a04 	addi	r5,r5,31272
   1b7fc:	010000b4 	movhi	r4,2
   1b800:	211e8a04 	addi	r4,r4,31272
   1b804:	00264d80 	call	264d8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1b808:	00262900 	call	26290 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1b80c:	010000b4 	movhi	r4,2
   1b810:	2118bc04 	addi	r4,r4,25328
   1b814:	00271580 	call	27158 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1b818:	d0a7cf17 	ldw	r2,-24772(gp)
   1b81c:	d0e7d017 	ldw	r3,-24768(gp)
   1b820:	d127d117 	ldw	r4,-24764(gp)
   1b824:	200d883a 	mov	r6,r4
   1b828:	180b883a 	mov	r5,r3
   1b82c:	1009883a 	mov	r4,r2
   1b830:	000aeb40 	call	aeb4 <main>
   1b834:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   1b838:	01000044 	movi	r4,1
   1b83c:	001b2c80 	call	1b2c8 <close>
  exit (result);
   1b840:	e13ffb17 	ldw	r4,-20(fp)
   1b844:	002716c0 	call	2716c <exit>

0001b848 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b848:	defffe04 	addi	sp,sp,-8
   1b84c:	dfc00115 	stw	ra,4(sp)
   1b850:	df000015 	stw	fp,0(sp)
   1b854:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b858:	d0a00c17 	ldw	r2,-32720(gp)
   1b85c:	10000326 	beq	r2,zero,1b86c <alt_get_errno+0x24>
   1b860:	d0a00c17 	ldw	r2,-32720(gp)
   1b864:	103ee83a 	callr	r2
   1b868:	00000106 	br	1b870 <alt_get_errno+0x28>
   1b86c:	d0a7cd04 	addi	r2,gp,-24780
}
   1b870:	e037883a 	mov	sp,fp
   1b874:	dfc00117 	ldw	ra,4(sp)
   1b878:	df000017 	ldw	fp,0(sp)
   1b87c:	dec00204 	addi	sp,sp,8
   1b880:	f800283a 	ret

0001b884 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1b884:	defff904 	addi	sp,sp,-28
   1b888:	dfc00615 	stw	ra,24(sp)
   1b88c:	df000515 	stw	fp,20(sp)
   1b890:	df000504 	addi	fp,sp,20
   1b894:	e13ffd15 	stw	r4,-12(fp)
   1b898:	e17ffe15 	stw	r5,-8(fp)
   1b89c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1b8a0:	e0bffd17 	ldw	r2,-12(fp)
   1b8a4:	10000616 	blt	r2,zero,1b8c0 <read+0x3c>
   1b8a8:	e0bffd17 	ldw	r2,-12(fp)
   1b8ac:	10c00324 	muli	r3,r2,12
   1b8b0:	008000f4 	movhi	r2,3
   1b8b4:	10a14f04 	addi	r2,r2,-31428
   1b8b8:	1885883a 	add	r2,r3,r2
   1b8bc:	00000106 	br	1b8c4 <read+0x40>
   1b8c0:	0005883a 	mov	r2,zero
   1b8c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1b8c8:	e0bffb17 	ldw	r2,-20(fp)
   1b8cc:	10002226 	beq	r2,zero,1b958 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1b8d0:	e0bffb17 	ldw	r2,-20(fp)
   1b8d4:	10800217 	ldw	r2,8(r2)
   1b8d8:	108000cc 	andi	r2,r2,3
   1b8dc:	10800060 	cmpeqi	r2,r2,1
   1b8e0:	1000181e 	bne	r2,zero,1b944 <read+0xc0>
        (fd->dev->read))
   1b8e4:	e0bffb17 	ldw	r2,-20(fp)
   1b8e8:	10800017 	ldw	r2,0(r2)
   1b8ec:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1b8f0:	10001426 	beq	r2,zero,1b944 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1b8f4:	e0bffb17 	ldw	r2,-20(fp)
   1b8f8:	10800017 	ldw	r2,0(r2)
   1b8fc:	10800517 	ldw	r2,20(r2)
   1b900:	e0ffff17 	ldw	r3,-4(fp)
   1b904:	180d883a 	mov	r6,r3
   1b908:	e17ffe17 	ldw	r5,-8(fp)
   1b90c:	e13ffb17 	ldw	r4,-20(fp)
   1b910:	103ee83a 	callr	r2
   1b914:	e0bffc15 	stw	r2,-16(fp)
   1b918:	e0bffc17 	ldw	r2,-16(fp)
   1b91c:	1000070e 	bge	r2,zero,1b93c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   1b920:	001b8480 	call	1b848 <alt_get_errno>
   1b924:	1007883a 	mov	r3,r2
   1b928:	e0bffc17 	ldw	r2,-16(fp)
   1b92c:	0085c83a 	sub	r2,zero,r2
   1b930:	18800015 	stw	r2,0(r3)
          return -1;
   1b934:	00bfffc4 	movi	r2,-1
   1b938:	00000c06 	br	1b96c <read+0xe8>
        }
        return rval;
   1b93c:	e0bffc17 	ldw	r2,-16(fp)
   1b940:	00000a06 	br	1b96c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1b944:	001b8480 	call	1b848 <alt_get_errno>
   1b948:	1007883a 	mov	r3,r2
   1b94c:	00800344 	movi	r2,13
   1b950:	18800015 	stw	r2,0(r3)
   1b954:	00000406 	br	1b968 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1b958:	001b8480 	call	1b848 <alt_get_errno>
   1b95c:	1007883a 	mov	r3,r2
   1b960:	00801444 	movi	r2,81
   1b964:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1b968:	00bfffc4 	movi	r2,-1
}
   1b96c:	e037883a 	mov	sp,fp
   1b970:	dfc00117 	ldw	ra,4(sp)
   1b974:	df000017 	ldw	fp,0(sp)
   1b978:	dec00204 	addi	sp,sp,8
   1b97c:	f800283a 	ret

0001b980 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1b980:	defffe04 	addi	sp,sp,-8
   1b984:	df000115 	stw	fp,4(sp)
   1b988:	df000104 	addi	fp,sp,4
   1b98c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1b990:	e0bfff17 	ldw	r2,-4(fp)
   1b994:	108000d0 	cmplti	r2,r2,3
   1b998:	10000d1e 	bne	r2,zero,1b9d0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   1b99c:	008000f4 	movhi	r2,3
   1b9a0:	10a14f04 	addi	r2,r2,-31428
   1b9a4:	e0ffff17 	ldw	r3,-4(fp)
   1b9a8:	18c00324 	muli	r3,r3,12
   1b9ac:	10c5883a 	add	r2,r2,r3
   1b9b0:	10800204 	addi	r2,r2,8
   1b9b4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1b9b8:	008000f4 	movhi	r2,3
   1b9bc:	10a14f04 	addi	r2,r2,-31428
   1b9c0:	e0ffff17 	ldw	r3,-4(fp)
   1b9c4:	18c00324 	muli	r3,r3,12
   1b9c8:	10c5883a 	add	r2,r2,r3
   1b9cc:	10000015 	stw	zero,0(r2)
  }
}
   1b9d0:	0001883a 	nop
   1b9d4:	e037883a 	mov	sp,fp
   1b9d8:	df000017 	ldw	fp,0(sp)
   1b9dc:	dec00104 	addi	sp,sp,4
   1b9e0:	f800283a 	ret

0001b9e4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1b9e4:	defff904 	addi	sp,sp,-28
   1b9e8:	df000615 	stw	fp,24(sp)
   1b9ec:	df000604 	addi	fp,sp,24
   1b9f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b9f4:	0005303a 	rdctl	r2,status
   1b9f8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b9fc:	e0fffe17 	ldw	r3,-8(fp)
   1ba00:	00bfff84 	movi	r2,-2
   1ba04:	1884703a 	and	r2,r3,r2
   1ba08:	1001703a 	wrctl	status,r2
  
  return context;
   1ba0c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1ba10:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1ba14:	d0a00d17 	ldw	r2,-32716(gp)
   1ba18:	10c000c4 	addi	r3,r2,3
   1ba1c:	00bfff04 	movi	r2,-4
   1ba20:	1884703a 	and	r2,r3,r2
   1ba24:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1ba28:	d0e00d17 	ldw	r3,-32716(gp)
   1ba2c:	e0bfff17 	ldw	r2,-4(fp)
   1ba30:	1887883a 	add	r3,r3,r2
   1ba34:	00810034 	movhi	r2,1024
   1ba38:	10800004 	addi	r2,r2,0
   1ba3c:	10c0062e 	bgeu	r2,r3,1ba58 <sbrk+0x74>
   1ba40:	e0bffb17 	ldw	r2,-20(fp)
   1ba44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ba48:	e0bffa17 	ldw	r2,-24(fp)
   1ba4c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1ba50:	00bfffc4 	movi	r2,-1
   1ba54:	00000b06 	br	1ba84 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1ba58:	d0a00d17 	ldw	r2,-32716(gp)
   1ba5c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   1ba60:	d0e00d17 	ldw	r3,-32716(gp)
   1ba64:	e0bfff17 	ldw	r2,-4(fp)
   1ba68:	1885883a 	add	r2,r3,r2
   1ba6c:	d0a00d15 	stw	r2,-32716(gp)
   1ba70:	e0bffb17 	ldw	r2,-20(fp)
   1ba74:	e0bffc15 	stw	r2,-16(fp)
   1ba78:	e0bffc17 	ldw	r2,-16(fp)
   1ba7c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1ba80:	e0bffd17 	ldw	r2,-12(fp)
} 
   1ba84:	e037883a 	mov	sp,fp
   1ba88:	df000017 	ldw	fp,0(sp)
   1ba8c:	dec00104 	addi	sp,sp,4
   1ba90:	f800283a 	ret

0001ba94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ba94:	defffe04 	addi	sp,sp,-8
   1ba98:	dfc00115 	stw	ra,4(sp)
   1ba9c:	df000015 	stw	fp,0(sp)
   1baa0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1baa4:	d0a00c17 	ldw	r2,-32720(gp)
   1baa8:	10000326 	beq	r2,zero,1bab8 <alt_get_errno+0x24>
   1baac:	d0a00c17 	ldw	r2,-32720(gp)
   1bab0:	103ee83a 	callr	r2
   1bab4:	00000106 	br	1babc <alt_get_errno+0x28>
   1bab8:	d0a7cd04 	addi	r2,gp,-24780
}
   1babc:	e037883a 	mov	sp,fp
   1bac0:	dfc00117 	ldw	ra,4(sp)
   1bac4:	df000017 	ldw	fp,0(sp)
   1bac8:	dec00204 	addi	sp,sp,8
   1bacc:	f800283a 	ret

0001bad0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1bad0:	defff904 	addi	sp,sp,-28
   1bad4:	dfc00615 	stw	ra,24(sp)
   1bad8:	df000515 	stw	fp,20(sp)
   1badc:	df000504 	addi	fp,sp,20
   1bae0:	e13ffd15 	stw	r4,-12(fp)
   1bae4:	e17ffe15 	stw	r5,-8(fp)
   1bae8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1baec:	e0bffd17 	ldw	r2,-12(fp)
   1baf0:	10000616 	blt	r2,zero,1bb0c <write+0x3c>
   1baf4:	e0bffd17 	ldw	r2,-12(fp)
   1baf8:	10c00324 	muli	r3,r2,12
   1bafc:	008000f4 	movhi	r2,3
   1bb00:	10a14f04 	addi	r2,r2,-31428
   1bb04:	1885883a 	add	r2,r3,r2
   1bb08:	00000106 	br	1bb10 <write+0x40>
   1bb0c:	0005883a 	mov	r2,zero
   1bb10:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1bb14:	e0bffb17 	ldw	r2,-20(fp)
   1bb18:	10002126 	beq	r2,zero,1bba0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1bb1c:	e0bffb17 	ldw	r2,-20(fp)
   1bb20:	10800217 	ldw	r2,8(r2)
   1bb24:	108000cc 	andi	r2,r2,3
   1bb28:	10001826 	beq	r2,zero,1bb8c <write+0xbc>
   1bb2c:	e0bffb17 	ldw	r2,-20(fp)
   1bb30:	10800017 	ldw	r2,0(r2)
   1bb34:	10800617 	ldw	r2,24(r2)
   1bb38:	10001426 	beq	r2,zero,1bb8c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1bb3c:	e0bffb17 	ldw	r2,-20(fp)
   1bb40:	10800017 	ldw	r2,0(r2)
   1bb44:	10800617 	ldw	r2,24(r2)
   1bb48:	e0ffff17 	ldw	r3,-4(fp)
   1bb4c:	180d883a 	mov	r6,r3
   1bb50:	e17ffe17 	ldw	r5,-8(fp)
   1bb54:	e13ffb17 	ldw	r4,-20(fp)
   1bb58:	103ee83a 	callr	r2
   1bb5c:	e0bffc15 	stw	r2,-16(fp)
   1bb60:	e0bffc17 	ldw	r2,-16(fp)
   1bb64:	1000070e 	bge	r2,zero,1bb84 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   1bb68:	001ba940 	call	1ba94 <alt_get_errno>
   1bb6c:	1007883a 	mov	r3,r2
   1bb70:	e0bffc17 	ldw	r2,-16(fp)
   1bb74:	0085c83a 	sub	r2,zero,r2
   1bb78:	18800015 	stw	r2,0(r3)
        return -1;
   1bb7c:	00bfffc4 	movi	r2,-1
   1bb80:	00000c06 	br	1bbb4 <write+0xe4>
      }
      return rval;
   1bb84:	e0bffc17 	ldw	r2,-16(fp)
   1bb88:	00000a06 	br	1bbb4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1bb8c:	001ba940 	call	1ba94 <alt_get_errno>
   1bb90:	1007883a 	mov	r3,r2
   1bb94:	00800344 	movi	r2,13
   1bb98:	18800015 	stw	r2,0(r3)
   1bb9c:	00000406 	br	1bbb0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1bba0:	001ba940 	call	1ba94 <alt_get_errno>
   1bba4:	1007883a 	mov	r3,r2
   1bba8:	00801444 	movi	r2,81
   1bbac:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1bbb0:	00bfffc4 	movi	r2,-1
}
   1bbb4:	e037883a 	mov	sp,fp
   1bbb8:	dfc00117 	ldw	ra,4(sp)
   1bbbc:	df000017 	ldw	fp,0(sp)
   1bbc0:	dec00204 	addi	sp,sp,8
   1bbc4:	f800283a 	ret

0001bbc8 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   1bbc8:	deffdf04 	addi	sp,sp,-132
   1bbcc:	dfc02015 	stw	ra,128(sp)
   1bbd0:	df001f15 	stw	fp,124(sp)
   1bbd4:	df001f04 	addi	fp,sp,124
   1bbd8:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   1bbdc:	e0bfe204 	addi	r2,fp,-120
   1bbe0:	100b883a 	mov	r5,r2
   1bbe4:	01003fc4 	movi	r4,255
   1bbe8:	0023af80 	call	23af8 <OSTaskQuery>
   1bbec:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   1bbf0:	e0bffe83 	ldbu	r2,-6(fp)
   1bbf4:	10803fcc 	andi	r2,r2,255
   1bbf8:	10001e1e 	bne	r2,zero,1bc74 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
   1bbfc:	e0bfee83 	ldbu	r2,-70(fp)
   1bc00:	10803fcc 	andi	r2,r2,255
   1bc04:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   1bc08:	d0a7d317 	ldw	r2,-24756(gp)
   1bc0c:	e0fffd04 	addi	r3,fp,-12
   1bc10:	180b883a 	mov	r5,r3
   1bc14:	1009883a 	mov	r4,r2
   1bc18:	00223100 	call	22310 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   1bc1c:	e0bffe43 	ldbu	r2,-7(fp)
   1bc20:	10803fcc 	andi	r2,r2,255
   1bc24:	10000726 	beq	r2,zero,1bc44 <__env_lock+0x7c>
   1bc28:	d0a00e17 	ldw	r2,-32712(gp)
   1bc2c:	e0ffe117 	ldw	r3,-124(fp)
   1bc30:	1880041e 	bne	r3,r2,1bc44 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
   1bc34:	d0a7d217 	ldw	r2,-24760(gp)
   1bc38:	10800044 	addi	r2,r2,1
   1bc3c:	d0a7d215 	stw	r2,-24760(gp)
   1bc40:	00000a06 	br	1bc6c <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   1bc44:	d0a7d317 	ldw	r2,-24756(gp)
   1bc48:	e0fffe84 	addi	r3,fp,-6
   1bc4c:	180d883a 	mov	r6,r3
   1bc50:	000b883a 	mov	r5,zero
   1bc54:	1009883a 	mov	r4,r2
   1bc58:	0021e880 	call	21e88 <OSSemPend>
    locks  = 1;
   1bc5c:	00800044 	movi	r2,1
   1bc60:	d0a7d215 	stw	r2,-24760(gp)
    lockid = id;
   1bc64:	e0bfe117 	ldw	r2,-124(fp)
   1bc68:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   1bc6c:	0001883a 	nop
   1bc70:	00000106 	br	1bc78 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   1bc74:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   1bc78:	e037883a 	mov	sp,fp
   1bc7c:	dfc00117 	ldw	ra,4(sp)
   1bc80:	df000017 	ldw	fp,0(sp)
   1bc84:	dec00204 	addi	sp,sp,8
   1bc88:	f800283a 	ret

0001bc8c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   1bc8c:	defffd04 	addi	sp,sp,-12
   1bc90:	dfc00215 	stw	ra,8(sp)
   1bc94:	df000115 	stw	fp,4(sp)
   1bc98:	df000104 	addi	fp,sp,4
   1bc9c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   1bca0:	d0a7d217 	ldw	r2,-24760(gp)
   1bca4:	10000b26 	beq	r2,zero,1bcd4 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   1bca8:	d0a7d217 	ldw	r2,-24760(gp)
   1bcac:	10bfffc4 	addi	r2,r2,-1
   1bcb0:	d0a7d215 	stw	r2,-24760(gp)
   1bcb4:	d0a7d217 	ldw	r2,-24760(gp)
   1bcb8:	1000071e 	bne	r2,zero,1bcd8 <__env_unlock+0x4c>
  {
    lockid = -1;
   1bcbc:	00bfffc4 	movi	r2,-1
   1bcc0:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
   1bcc4:	d0a7d317 	ldw	r2,-24756(gp)
   1bcc8:	1009883a 	mov	r4,r2
   1bccc:	00222000 	call	22200 <OSSemPost>
   1bcd0:	00000106 	br	1bcd8 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
   1bcd4:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   1bcd8:	e037883a 	mov	sp,fp
   1bcdc:	dfc00117 	ldw	ra,4(sp)
   1bce0:	df000017 	ldw	fp,0(sp)
   1bce4:	dec00204 	addi	sp,sp,8
   1bce8:	f800283a 	ret

0001bcec <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   1bcec:	deffdb04 	addi	sp,sp,-148
   1bcf0:	dfc02415 	stw	ra,144(sp)
   1bcf4:	df002315 	stw	fp,140(sp)
   1bcf8:	df002304 	addi	fp,sp,140
   1bcfc:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1bd00:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   1bd04:	d0a7d643 	ldbu	r2,-24743(gp)
   1bd08:	10803fcc 	andi	r2,r2,255
   1bd0c:	10800060 	cmpeqi	r2,r2,1
   1bd10:	10003626 	beq	r2,zero,1bdec <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   1bd14:	e0bfe204 	addi	r2,fp,-120
   1bd18:	100b883a 	mov	r5,r2
   1bd1c:	01003fc4 	movi	r4,255
   1bd20:	0023af80 	call	23af8 <OSTaskQuery>
   1bd24:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   1bd28:	e0bffe83 	ldbu	r2,-6(fp)
   1bd2c:	10803fcc 	andi	r2,r2,255
   1bd30:	1000301e 	bne	r2,zero,1bdf4 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
   1bd34:	e0bfee83 	ldbu	r2,-70(fp)
   1bd38:	10803fcc 	andi	r2,r2,255
   1bd3c:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   1bd40:	d0a7d517 	ldw	r2,-24748(gp)
   1bd44:	e0fffd04 	addi	r3,fp,-12
   1bd48:	180b883a 	mov	r5,r3
   1bd4c:	1009883a 	mov	r4,r2
   1bd50:	00223100 	call	22310 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bd54:	0005303a 	rdctl	r2,status
   1bd58:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bd5c:	e0ffe117 	ldw	r3,-124(fp)
   1bd60:	00bfff84 	movi	r2,-2
   1bd64:	1884703a 	and	r2,r3,r2
   1bd68:	1001703a 	wrctl	status,r2
  
  return context;
   1bd6c:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
   1bd70:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   1bd74:	e0bffd0b 	ldhu	r2,-12(fp)
   1bd78:	10bfffcc 	andi	r2,r2,65535
   1bd7c:	10000b1e 	bne	r2,zero,1bdac <__malloc_lock+0xc0>
   1bd80:	d0a00f17 	ldw	r2,-32708(gp)
   1bd84:	e0ffde17 	ldw	r3,-136(fp)
   1bd88:	1880081e 	bne	r3,r2,1bdac <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
   1bd8c:	d0a7d417 	ldw	r2,-24752(gp)
   1bd90:	10800044 	addi	r2,r2,1
   1bd94:	d0a7d415 	stw	r2,-24752(gp)
   1bd98:	e0bfdd17 	ldw	r2,-140(fp)
   1bd9c:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bda0:	e0bfdf17 	ldw	r2,-132(fp)
   1bda4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   1bda8:	00000e06 	br	1bde4 <__malloc_lock+0xf8>
   1bdac:	e0bfdd17 	ldw	r2,-140(fp)
   1bdb0:	e0bfe015 	stw	r2,-128(fp)
   1bdb4:	e0bfe017 	ldw	r2,-128(fp)
   1bdb8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   1bdbc:	d0a7d517 	ldw	r2,-24748(gp)
   1bdc0:	e0fffe84 	addi	r3,fp,-6
   1bdc4:	180d883a 	mov	r6,r3
   1bdc8:	000b883a 	mov	r5,zero
   1bdcc:	1009883a 	mov	r4,r2
   1bdd0:	0021e880 	call	21e88 <OSSemPend>
    locks  = 1;
   1bdd4:	00800044 	movi	r2,1
   1bdd8:	d0a7d415 	stw	r2,-24752(gp)
    lockid = id;
   1bddc:	e0bfde17 	ldw	r2,-136(fp)
   1bde0:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   1bde4:	0001883a 	nop
   1bde8:	00000306 	br	1bdf8 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
   1bdec:	0001883a 	nop
   1bdf0:	00000106 	br	1bdf8 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   1bdf4:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   1bdf8:	e037883a 	mov	sp,fp
   1bdfc:	dfc00117 	ldw	ra,4(sp)
   1be00:	df000017 	ldw	fp,0(sp)
   1be04:	dec00204 	addi	sp,sp,8
   1be08:	f800283a 	ret

0001be0c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1be0c:	defff804 	addi	sp,sp,-32
   1be10:	dfc00715 	stw	ra,28(sp)
   1be14:	df000615 	stw	fp,24(sp)
   1be18:	df000604 	addi	fp,sp,24
   1be1c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1be20:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   1be24:	d0a7d643 	ldbu	r2,-24743(gp)
   1be28:	10803fcc 	andi	r2,r2,255
   1be2c:	10800060 	cmpeqi	r2,r2,1
   1be30:	10002326 	beq	r2,zero,1bec0 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1be34:	0005303a 	rdctl	r2,status
   1be38:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1be3c:	e0fffe17 	ldw	r3,-8(fp)
   1be40:	00bfff84 	movi	r2,-2
   1be44:	1884703a 	and	r2,r3,r2
   1be48:	1001703a 	wrctl	status,r2
  
  return context;
   1be4c:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   1be50:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   1be54:	d0a7d417 	ldw	r2,-24752(gp)
   1be58:	1000051e 	bne	r2,zero,1be70 <__malloc_unlock+0x64>
   1be5c:	e0bffa17 	ldw	r2,-24(fp)
   1be60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1be64:	e0bffb17 	ldw	r2,-20(fp)
   1be68:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   1be6c:	00001506 	br	1bec4 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   1be70:	d0a7d417 	ldw	r2,-24752(gp)
   1be74:	10bfffc4 	addi	r2,r2,-1
   1be78:	d0a7d415 	stw	r2,-24752(gp)
   1be7c:	d0a7d417 	ldw	r2,-24752(gp)
   1be80:	10000a1e 	bne	r2,zero,1beac <__malloc_unlock+0xa0>
  {
    lockid = -1;
   1be84:	00bfffc4 	movi	r2,-1
   1be88:	d0a00f15 	stw	r2,-32708(gp)
   1be8c:	e0bffa17 	ldw	r2,-24(fp)
   1be90:	e0bffc15 	stw	r2,-16(fp)
   1be94:	e0bffc17 	ldw	r2,-16(fp)
   1be98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   1be9c:	d0a7d517 	ldw	r2,-24748(gp)
   1bea0:	1009883a 	mov	r4,r2
   1bea4:	00222000 	call	22200 <OSSemPost>
   1bea8:	00000606 	br	1bec4 <__malloc_unlock+0xb8>
   1beac:	e0bffa17 	ldw	r2,-24(fp)
   1beb0:	e0bffd15 	stw	r2,-12(fp)
   1beb4:	e0bffd17 	ldw	r2,-12(fp)
   1beb8:	1001703a 	wrctl	status,r2
   1bebc:	00000106 	br	1bec4 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   1bec0:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   1bec4:	e037883a 	mov	sp,fp
   1bec8:	dfc00117 	ldw	ra,4(sp)
   1becc:	df000017 	ldw	fp,0(sp)
   1bed0:	dec00204 	addi	sp,sp,8
   1bed4:	f800283a 	ret

0001bed8 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   1bed8:	defff704 	addi	sp,sp,-36
   1bedc:	dfc00815 	stw	ra,32(sp)
   1bee0:	df000715 	stw	fp,28(sp)
   1bee4:	df000704 	addi	fp,sp,28
   1bee8:	e13ffd15 	stw	r4,-12(fp)
   1beec:	e17ffe15 	stw	r5,-8(fp)
   1bef0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1bef4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1bef8:	e0bfff17 	ldw	r2,-4(fp)
   1befc:	1000021e 	bne	r2,zero,1bf08 <OSEventNameGet+0x30>
        return (0);
   1bf00:	0005883a 	mov	r2,zero
   1bf04:	00003706 	br	1bfe4 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   1bf08:	e0bffd17 	ldw	r2,-12(fp)
   1bf0c:	1000051e 	bne	r2,zero,1bf24 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   1bf10:	e0bfff17 	ldw	r2,-4(fp)
   1bf14:	00c00104 	movi	r3,4
   1bf18:	10c00005 	stb	r3,0(r2)
        return (0);
   1bf1c:	0005883a 	mov	r2,zero
   1bf20:	00003006 	br	1bfe4 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1bf24:	e0bffe17 	ldw	r2,-8(fp)
   1bf28:	1000051e 	bne	r2,zero,1bf40 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1bf2c:	e0bfff17 	ldw	r2,-4(fp)
   1bf30:	00c00304 	movi	r3,12
   1bf34:	10c00005 	stb	r3,0(r2)
        return (0);
   1bf38:	0005883a 	mov	r2,zero
   1bf3c:	00002906 	br	1bfe4 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1bf40:	d0a7e403 	ldbu	r2,-24688(gp)
   1bf44:	10803fcc 	andi	r2,r2,255
   1bf48:	10000526 	beq	r2,zero,1bf60 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   1bf4c:	e0bfff17 	ldw	r2,-4(fp)
   1bf50:	00c00444 	movi	r3,17
   1bf54:	10c00005 	stb	r3,0(r2)
        return (0);
   1bf58:	0005883a 	mov	r2,zero
   1bf5c:	00002106 	br	1bfe4 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   1bf60:	e0bffd17 	ldw	r2,-12(fp)
   1bf64:	10800003 	ldbu	r2,0(r2)
   1bf68:	10803fcc 	andi	r2,r2,255
   1bf6c:	10bfffc4 	addi	r2,r2,-1
   1bf70:	10800128 	cmpgeui	r2,r2,4
   1bf74:	10000526 	beq	r2,zero,1bf8c <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   1bf78:	e0bfff17 	ldw	r2,-4(fp)
   1bf7c:	00c00044 	movi	r3,1
   1bf80:	10c00005 	stb	r3,0(r2)
             return (0);
   1bf84:	0005883a 	mov	r2,zero
   1bf88:	00001606 	br	1bfe4 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   1bf8c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bf90:	0005303a 	rdctl	r2,status
   1bf94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bf98:	e0fffb17 	ldw	r3,-20(fp)
   1bf9c:	00bfff84 	movi	r2,-2
   1bfa0:	1884703a 	and	r2,r3,r2
   1bfa4:	1001703a 	wrctl	status,r2
  
  return context;
   1bfa8:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   1bfac:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   1bfb0:	e0bffd17 	ldw	r2,-12(fp)
   1bfb4:	10800384 	addi	r2,r2,14
   1bfb8:	100b883a 	mov	r5,r2
   1bfbc:	e13ffe17 	ldw	r4,-8(fp)
   1bfc0:	001d95c0 	call	1d95c <OS_StrCopy>
   1bfc4:	e0bffa05 	stb	r2,-24(fp)
   1bfc8:	e0bff917 	ldw	r2,-28(fp)
   1bfcc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bfd0:	e0bffc17 	ldw	r2,-16(fp)
   1bfd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1bfd8:	e0bfff17 	ldw	r2,-4(fp)
   1bfdc:	10000005 	stb	zero,0(r2)
    return (len);
   1bfe0:	e0bffa03 	ldbu	r2,-24(fp)
}
   1bfe4:	e037883a 	mov	sp,fp
   1bfe8:	dfc00117 	ldw	ra,4(sp)
   1bfec:	df000017 	ldw	fp,0(sp)
   1bff0:	dec00204 	addi	sp,sp,8
   1bff4:	f800283a 	ret

0001bff8 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   1bff8:	defff604 	addi	sp,sp,-40
   1bffc:	dfc00915 	stw	ra,36(sp)
   1c000:	df000815 	stw	fp,32(sp)
   1c004:	df000804 	addi	fp,sp,32
   1c008:	e13ffd15 	stw	r4,-12(fp)
   1c00c:	e17ffe15 	stw	r5,-8(fp)
   1c010:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c014:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1c018:	e0bfff17 	ldw	r2,-4(fp)
   1c01c:	10004026 	beq	r2,zero,1c120 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   1c020:	e0bffd17 	ldw	r2,-12(fp)
   1c024:	1000041e 	bne	r2,zero,1c038 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   1c028:	e0bfff17 	ldw	r2,-4(fp)
   1c02c:	00c00104 	movi	r3,4
   1c030:	10c00005 	stb	r3,0(r2)
        return;
   1c034:	00003b06 	br	1c124 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1c038:	e0bffe17 	ldw	r2,-8(fp)
   1c03c:	1000041e 	bne	r2,zero,1c050 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   1c040:	e0bfff17 	ldw	r2,-4(fp)
   1c044:	00c00304 	movi	r3,12
   1c048:	10c00005 	stb	r3,0(r2)
        return;
   1c04c:	00003506 	br	1c124 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1c050:	d0a7e403 	ldbu	r2,-24688(gp)
   1c054:	10803fcc 	andi	r2,r2,255
   1c058:	10000426 	beq	r2,zero,1c06c <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   1c05c:	e0bfff17 	ldw	r2,-4(fp)
   1c060:	00c00484 	movi	r3,18
   1c064:	10c00005 	stb	r3,0(r2)
        return;
   1c068:	00002e06 	br	1c124 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   1c06c:	e0bffd17 	ldw	r2,-12(fp)
   1c070:	10800003 	ldbu	r2,0(r2)
   1c074:	10803fcc 	andi	r2,r2,255
   1c078:	10bfffc4 	addi	r2,r2,-1
   1c07c:	10800128 	cmpgeui	r2,r2,4
   1c080:	10000426 	beq	r2,zero,1c094 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   1c084:	e0bfff17 	ldw	r2,-4(fp)
   1c088:	00c00044 	movi	r3,1
   1c08c:	10c00005 	stb	r3,0(r2)
             return;
   1c090:	00002406 	br	1c124 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   1c094:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c098:	0005303a 	rdctl	r2,status
   1c09c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c0a0:	e0fffc17 	ldw	r3,-16(fp)
   1c0a4:	00bfff84 	movi	r2,-2
   1c0a8:	1884703a 	and	r2,r3,r2
   1c0ac:	1001703a 	wrctl	status,r2
  
  return context;
   1c0b0:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   1c0b4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   1c0b8:	e13ffe17 	ldw	r4,-8(fp)
   1c0bc:	001d9d00 	call	1d9d0 <OS_StrLen>
   1c0c0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   1c0c4:	e0bffa03 	ldbu	r2,-24(fp)
   1c0c8:	10800830 	cmpltui	r2,r2,32
   1c0cc:	1000081e 	bne	r2,zero,1c0f0 <OSEventNameSet+0xf8>
   1c0d0:	e0bff817 	ldw	r2,-32(fp)
   1c0d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c0d8:	e0bff917 	ldw	r2,-28(fp)
   1c0dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   1c0e0:	e0bfff17 	ldw	r2,-4(fp)
   1c0e4:	00c002c4 	movi	r3,11
   1c0e8:	10c00005 	stb	r3,0(r2)
        return;
   1c0ec:	00000d06 	br	1c124 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   1c0f0:	e0bffd17 	ldw	r2,-12(fp)
   1c0f4:	10800384 	addi	r2,r2,14
   1c0f8:	e17ffe17 	ldw	r5,-8(fp)
   1c0fc:	1009883a 	mov	r4,r2
   1c100:	001d95c0 	call	1d95c <OS_StrCopy>
   1c104:	e0bff817 	ldw	r2,-32(fp)
   1c108:	e0bffb15 	stw	r2,-20(fp)
   1c10c:	e0bffb17 	ldw	r2,-20(fp)
   1c110:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1c114:	e0bfff17 	ldw	r2,-4(fp)
   1c118:	10000005 	stb	zero,0(r2)
   1c11c:	00000106 	br	1c124 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   1c120:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   1c124:	e037883a 	mov	sp,fp
   1c128:	dfc00117 	ldw	ra,4(sp)
   1c12c:	df000017 	ldw	fp,0(sp)
   1c130:	dec00204 	addi	sp,sp,8
   1c134:	f800283a 	ret

0001c138 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   1c138:	deffed04 	addi	sp,sp,-76
   1c13c:	dfc01215 	stw	ra,72(sp)
   1c140:	df001115 	stw	fp,68(sp)
   1c144:	df001104 	addi	fp,sp,68
   1c148:	e13ffc15 	stw	r4,-16(fp)
   1c14c:	e17ffd15 	stw	r5,-12(fp)
   1c150:	e1bffe15 	stw	r6,-8(fp)
   1c154:	3805883a 	mov	r2,r7
   1c158:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   1c15c:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   1c160:	e0800217 	ldw	r2,8(fp)
   1c164:	1000021e 	bne	r2,zero,1c170 <OSEventPendMulti+0x38>
        return (0);
   1c168:	0005883a 	mov	r2,zero
   1c16c:	00017106 	br	1c734 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   1c170:	e0bffc17 	ldw	r2,-16(fp)
   1c174:	1000051e 	bne	r2,zero,1c18c <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   1c178:	e0800217 	ldw	r2,8(fp)
   1c17c:	00c00104 	movi	r3,4
   1c180:	10c00005 	stb	r3,0(r2)
        return (0);
   1c184:	0005883a 	mov	r2,zero
   1c188:	00016a06 	br	1c734 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   1c18c:	e0bffd17 	ldw	r2,-12(fp)
   1c190:	1000051e 	bne	r2,zero,1c1a8 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   1c194:	e0800217 	ldw	r2,8(fp)
   1c198:	00c00104 	movi	r3,4
   1c19c:	10c00005 	stb	r3,0(r2)
        return (0);
   1c1a0:	0005883a 	mov	r2,zero
   1c1a4:	00016306 	br	1c734 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   1c1a8:	e0bffe17 	ldw	r2,-8(fp)
   1c1ac:	1000051e 	bne	r2,zero,1c1c4 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   1c1b0:	e0800217 	ldw	r2,8(fp)
   1c1b4:	00c00104 	movi	r3,4
   1c1b8:	10c00005 	stb	r3,0(r2)
        return (0);
   1c1bc:	0005883a 	mov	r2,zero
   1c1c0:	00015c06 	br	1c734 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   1c1c4:	e0bffd17 	ldw	r2,-12(fp)
   1c1c8:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   1c1cc:	e0bffc17 	ldw	r2,-16(fp)
   1c1d0:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   1c1d4:	e0bfef17 	ldw	r2,-68(fp)
   1c1d8:	10800017 	ldw	r2,0(r2)
   1c1dc:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   1c1e0:	00001906 	br	1c248 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   1c1e4:	e0bff017 	ldw	r2,-64(fp)
   1c1e8:	10800003 	ldbu	r2,0(r2)
   1c1ec:	10803fcc 	andi	r2,r2,255
   1c1f0:	10c000a0 	cmpeqi	r3,r2,2
   1c1f4:	1800091e 	bne	r3,zero,1c21c <OSEventPendMulti+0xe4>
   1c1f8:	10c000e0 	cmpeqi	r3,r2,3
   1c1fc:	1800091e 	bne	r3,zero,1c224 <OSEventPendMulti+0xec>
   1c200:	10800060 	cmpeqi	r2,r2,1
   1c204:	1000091e 	bne	r2,zero,1c22c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   1c208:	e0800217 	ldw	r2,8(fp)
   1c20c:	00c00044 	movi	r3,1
   1c210:	10c00005 	stb	r3,0(r2)
                 return (0);
   1c214:	0005883a 	mov	r2,zero
   1c218:	00014606 	br	1c734 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   1c21c:	0001883a 	nop
   1c220:	00000306 	br	1c230 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   1c224:	0001883a 	nop
   1c228:	00000106 	br	1c230 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   1c22c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   1c230:	e0bfef17 	ldw	r2,-68(fp)
   1c234:	10800104 	addi	r2,r2,4
   1c238:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   1c23c:	e0bfef17 	ldw	r2,-68(fp)
   1c240:	10800017 	ldw	r2,0(r2)
   1c244:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   1c248:	e0bff017 	ldw	r2,-64(fp)
   1c24c:	103fe51e 	bne	r2,zero,1c1e4 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   1c250:	d0a7e403 	ldbu	r2,-24688(gp)
   1c254:	10803fcc 	andi	r2,r2,255
   1c258:	10000526 	beq	r2,zero,1c270 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   1c25c:	e0800217 	ldw	r2,8(fp)
   1c260:	00c00084 	movi	r3,2
   1c264:	10c00005 	stb	r3,0(r2)
        return (0);
   1c268:	0005883a 	mov	r2,zero
   1c26c:	00013106 	br	1c734 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   1c270:	d0a7d603 	ldbu	r2,-24744(gp)
   1c274:	10803fcc 	andi	r2,r2,255
   1c278:	10000526 	beq	r2,zero,1c290 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   1c27c:	e0800217 	ldw	r2,8(fp)
   1c280:	00c00344 	movi	r3,13
   1c284:	10c00005 	stb	r3,0(r2)
        return (0);
   1c288:	0005883a 	mov	r2,zero
   1c28c:	00012906 	br	1c734 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c290:	0005303a 	rdctl	r2,status
   1c294:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c298:	e0fffb17 	ldw	r3,-20(fp)
   1c29c:	00bfff84 	movi	r2,-2
   1c2a0:	1884703a 	and	r2,r3,r2
   1c2a4:	1001703a 	wrctl	status,r2
  
  return context;
   1c2a8:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1c2ac:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   1c2b0:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   1c2b4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   1c2b8:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   1c2bc:	e0bffc17 	ldw	r2,-16(fp)
   1c2c0:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   1c2c4:	e0bfef17 	ldw	r2,-68(fp)
   1c2c8:	10800017 	ldw	r2,0(r2)
   1c2cc:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   1c2d0:	00008106 	br	1c4d8 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   1c2d4:	e0bff017 	ldw	r2,-64(fp)
   1c2d8:	10800003 	ldbu	r2,0(r2)
   1c2dc:	10803fcc 	andi	r2,r2,255
   1c2e0:	10c000a0 	cmpeqi	r3,r2,2
   1c2e4:	18003c1e 	bne	r3,zero,1c3d8 <OSEventPendMulti+0x2a0>
   1c2e8:	10c000e0 	cmpeqi	r3,r2,3
   1c2ec:	1800031e 	bne	r3,zero,1c2fc <OSEventPendMulti+0x1c4>
   1c2f0:	10800060 	cmpeqi	r2,r2,1
   1c2f4:	10001e1e 	bne	r2,zero,1c370 <OSEventPendMulti+0x238>
   1c2f8:	00006606 	br	1c494 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   1c2fc:	e0bff017 	ldw	r2,-64(fp)
   1c300:	1080020b 	ldhu	r2,8(r2)
   1c304:	10bfffcc 	andi	r2,r2,65535
   1c308:	10001526 	beq	r2,zero,1c360 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   1c30c:	e0bff017 	ldw	r2,-64(fp)
   1c310:	1080020b 	ldhu	r2,8(r2)
   1c314:	10bfffc4 	addi	r2,r2,-1
   1c318:	1007883a 	mov	r3,r2
   1c31c:	e0bff017 	ldw	r2,-64(fp)
   1c320:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   1c324:	e0bffd17 	ldw	r2,-12(fp)
   1c328:	10c00104 	addi	r3,r2,4
   1c32c:	e0fffd15 	stw	r3,-12(fp)
   1c330:	e0fff017 	ldw	r3,-64(fp)
   1c334:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   1c338:	00800044 	movi	r2,1
   1c33c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   1c340:	e0bffe17 	ldw	r2,-8(fp)
   1c344:	10c00104 	addi	r3,r2,4
   1c348:	e0fffe15 	stw	r3,-8(fp)
   1c34c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   1c350:	e0bff18b 	ldhu	r2,-58(fp)
   1c354:	10800044 	addi	r2,r2,1
   1c358:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   1c35c:	00005806 	br	1c4c0 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   1c360:	e0bff203 	ldbu	r2,-56(fp)
   1c364:	10800054 	ori	r2,r2,1
   1c368:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   1c36c:	00005406 	br	1c4c0 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   1c370:	e0bff017 	ldw	r2,-64(fp)
   1c374:	10800117 	ldw	r2,4(r2)
   1c378:	10001326 	beq	r2,zero,1c3c8 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   1c37c:	e0bffe17 	ldw	r2,-8(fp)
   1c380:	10c00104 	addi	r3,r2,4
   1c384:	e0fffe15 	stw	r3,-8(fp)
   1c388:	e0fff017 	ldw	r3,-64(fp)
   1c38c:	18c00117 	ldw	r3,4(r3)
   1c390:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   1c394:	e0bff017 	ldw	r2,-64(fp)
   1c398:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   1c39c:	e0bffd17 	ldw	r2,-12(fp)
   1c3a0:	10c00104 	addi	r3,r2,4
   1c3a4:	e0fffd15 	stw	r3,-12(fp)
   1c3a8:	e0fff017 	ldw	r3,-64(fp)
   1c3ac:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   1c3b0:	00800044 	movi	r2,1
   1c3b4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   1c3b8:	e0bff18b 	ldhu	r2,-58(fp)
   1c3bc:	10800044 	addi	r2,r2,1
   1c3c0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   1c3c4:	00003e06 	br	1c4c0 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   1c3c8:	e0bff203 	ldbu	r2,-56(fp)
   1c3cc:	10800094 	ori	r2,r2,2
   1c3d0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   1c3d4:	00003a06 	br	1c4c0 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   1c3d8:	e0bff017 	ldw	r2,-64(fp)
   1c3dc:	10800117 	ldw	r2,4(r2)
   1c3e0:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   1c3e4:	e0bff517 	ldw	r2,-44(fp)
   1c3e8:	1080058b 	ldhu	r2,22(r2)
   1c3ec:	10bfffcc 	andi	r2,r2,65535
   1c3f0:	10002426 	beq	r2,zero,1c484 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   1c3f4:	e0bffe17 	ldw	r2,-8(fp)
   1c3f8:	10c00104 	addi	r3,r2,4
   1c3fc:	e0fffe15 	stw	r3,-8(fp)
   1c400:	e0fff517 	ldw	r3,-44(fp)
   1c404:	18c00417 	ldw	r3,16(r3)
   1c408:	19400104 	addi	r5,r3,4
   1c40c:	e13ff517 	ldw	r4,-44(fp)
   1c410:	21400415 	stw	r5,16(r4)
   1c414:	18c00017 	ldw	r3,0(r3)
   1c418:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   1c41c:	e0bff517 	ldw	r2,-44(fp)
   1c420:	10c00417 	ldw	r3,16(r2)
   1c424:	e0bff517 	ldw	r2,-44(fp)
   1c428:	10800217 	ldw	r2,8(r2)
   1c42c:	1880041e 	bne	r3,r2,1c440 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   1c430:	e0bff517 	ldw	r2,-44(fp)
   1c434:	10c00117 	ldw	r3,4(r2)
   1c438:	e0bff517 	ldw	r2,-44(fp)
   1c43c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   1c440:	e0bff517 	ldw	r2,-44(fp)
   1c444:	1080058b 	ldhu	r2,22(r2)
   1c448:	10bfffc4 	addi	r2,r2,-1
   1c44c:	1007883a 	mov	r3,r2
   1c450:	e0bff517 	ldw	r2,-44(fp)
   1c454:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   1c458:	e0bffd17 	ldw	r2,-12(fp)
   1c45c:	10c00104 	addi	r3,r2,4
   1c460:	e0fffd15 	stw	r3,-12(fp)
   1c464:	e0fff017 	ldw	r3,-64(fp)
   1c468:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   1c46c:	00800044 	movi	r2,1
   1c470:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   1c474:	e0bff18b 	ldhu	r2,-58(fp)
   1c478:	10800044 	addi	r2,r2,1
   1c47c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   1c480:	00000f06 	br	1c4c0 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   1c484:	e0bff203 	ldbu	r2,-56(fp)
   1c488:	10800114 	ori	r2,r2,4
   1c48c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   1c490:	00000b06 	br	1c4c0 <OSEventPendMulti+0x388>
   1c494:	e0bff317 	ldw	r2,-52(fp)
   1c498:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c49c:	e0bff417 	ldw	r2,-48(fp)
   1c4a0:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   1c4a4:	e0bffd17 	ldw	r2,-12(fp)
   1c4a8:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   1c4ac:	e0800217 	ldw	r2,8(fp)
   1c4b0:	00c00044 	movi	r3,1
   1c4b4:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   1c4b8:	e0bff18b 	ldhu	r2,-58(fp)
   1c4bc:	00009d06 	br	1c734 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   1c4c0:	e0bfef17 	ldw	r2,-68(fp)
   1c4c4:	10800104 	addi	r2,r2,4
   1c4c8:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   1c4cc:	e0bfef17 	ldw	r2,-68(fp)
   1c4d0:	10800017 	ldw	r2,0(r2)
   1c4d4:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   1c4d8:	e0bff017 	ldw	r2,-64(fp)
   1c4dc:	103f7d1e 	bne	r2,zero,1c2d4 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   1c4e0:	e0bff103 	ldbu	r2,-60(fp)
   1c4e4:	10800058 	cmpnei	r2,r2,1
   1c4e8:	10000a1e 	bne	r2,zero,1c514 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   1c4ec:	e0bffd17 	ldw	r2,-12(fp)
   1c4f0:	10000015 	stw	zero,0(r2)
   1c4f4:	e0bff317 	ldw	r2,-52(fp)
   1c4f8:	e0bff615 	stw	r2,-40(fp)
   1c4fc:	e0bff617 	ldw	r2,-40(fp)
   1c500:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   1c504:	e0800217 	ldw	r2,8(fp)
   1c508:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   1c50c:	e0bff18b 	ldhu	r2,-58(fp)
   1c510:	00008806 	br	1c734 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   1c514:	d0a7e517 	ldw	r2,-24684(gp)
   1c518:	d0e7e517 	ldw	r3,-24684(gp)
   1c51c:	19000c03 	ldbu	r4,48(r3)
   1c520:	e0fff203 	ldbu	r3,-56(fp)
   1c524:	20c6b03a 	or	r3,r4,r3
   1c528:	1809883a 	mov	r4,r3
   1c52c:	00ffe004 	movi	r3,-128
   1c530:	20c6b03a 	or	r3,r4,r3
   1c534:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1c538:	d0a7e517 	ldw	r2,-24684(gp)
   1c53c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   1c540:	d0a7e517 	ldw	r2,-24684(gp)
   1c544:	e0ffff0b 	ldhu	r3,-4(fp)
   1c548:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   1c54c:	e13ffc17 	ldw	r4,-16(fp)
   1c550:	001d0740 	call	1d074 <OS_EventTaskWaitMulti>
   1c554:	e0bff317 	ldw	r2,-52(fp)
   1c558:	e0bff915 	stw	r2,-28(fp)
   1c55c:	e0bff917 	ldw	r2,-28(fp)
   1c560:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   1c564:	001d8180 	call	1d818 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c568:	0005303a 	rdctl	r2,status
   1c56c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c570:	e0fff717 	ldw	r3,-36(fp)
   1c574:	00bfff84 	movi	r2,-2
   1c578:	1884703a 	and	r2,r3,r2
   1c57c:	1001703a 	wrctl	status,r2
  
  return context;
   1c580:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   1c584:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   1c588:	d0a7e517 	ldw	r2,-24684(gp)
   1c58c:	10800c43 	ldbu	r2,49(r2)
   1c590:	10803fcc 	andi	r2,r2,255
   1c594:	10000226 	beq	r2,zero,1c5a0 <OSEventPendMulti+0x468>
   1c598:	108000a0 	cmpeqi	r2,r2,2
   1c59c:	10001826 	beq	r2,zero,1c600 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   1c5a0:	d0a7e517 	ldw	r2,-24684(gp)
   1c5a4:	10800717 	ldw	r2,28(r2)
   1c5a8:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   1c5ac:	e0bff017 	ldw	r2,-64(fp)
   1c5b0:	10000b26 	beq	r2,zero,1c5e0 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   1c5b4:	e0bffd17 	ldw	r2,-12(fp)
   1c5b8:	10c00104 	addi	r3,r2,4
   1c5bc:	e0fffd15 	stw	r3,-12(fp)
   1c5c0:	e0fff017 	ldw	r3,-64(fp)
   1c5c4:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   1c5c8:	e0bffd17 	ldw	r2,-12(fp)
   1c5cc:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   1c5d0:	e0bff18b 	ldhu	r2,-58(fp)
   1c5d4:	10800044 	addi	r2,r2,1
   1c5d8:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   1c5dc:	00000d06 	br	1c614 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   1c5e0:	d0a7e517 	ldw	r2,-24684(gp)
   1c5e4:	00c00044 	movi	r3,1
   1c5e8:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   1c5ec:	d0a7e517 	ldw	r2,-24684(gp)
   1c5f0:	e17ffc17 	ldw	r5,-16(fp)
   1c5f4:	1009883a 	mov	r4,r2
   1c5f8:	001d27c0 	call	1d27c <OS_EventTaskRemoveMulti>
             }
			 break;
   1c5fc:	00000506 	br	1c614 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   1c600:	d0a7e517 	ldw	r2,-24684(gp)
   1c604:	e17ffc17 	ldw	r5,-16(fp)
   1c608:	1009883a 	mov	r4,r2
   1c60c:	001d27c0 	call	1d27c <OS_EventTaskRemoveMulti>
             break;
   1c610:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   1c614:	d0a7e517 	ldw	r2,-24684(gp)
   1c618:	10800c43 	ldbu	r2,49(r2)
   1c61c:	10803fcc 	andi	r2,r2,255
   1c620:	10000326 	beq	r2,zero,1c630 <OSEventPendMulti+0x4f8>
   1c624:	108000a0 	cmpeqi	r2,r2,2
   1c628:	1000231e 	bne	r2,zero,1c6b8 <OSEventPendMulti+0x580>
   1c62c:	00002a06 	br	1c6d8 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   1c630:	e0bff017 	ldw	r2,-64(fp)
   1c634:	10800003 	ldbu	r2,0(r2)
   1c638:	10803fcc 	andi	r2,r2,255
   1c63c:	0080100e 	bge	zero,r2,1c680 <OSEventPendMulti+0x548>
   1c640:	10c000d0 	cmplti	r3,r2,3
   1c644:	1800071e 	bne	r3,zero,1c664 <OSEventPendMulti+0x52c>
   1c648:	108000e0 	cmpeqi	r2,r2,3
   1c64c:	10000c26 	beq	r2,zero,1c680 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   1c650:	e0bffe17 	ldw	r2,-8(fp)
   1c654:	10c00104 	addi	r3,r2,4
   1c658:	e0fffe15 	stw	r3,-8(fp)
   1c65c:	10000015 	stw	zero,0(r2)
                      break;
   1c660:	00001206 	br	1c6ac <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   1c664:	e0bffe17 	ldw	r2,-8(fp)
   1c668:	10c00104 	addi	r3,r2,4
   1c66c:	e0fffe15 	stw	r3,-8(fp)
   1c670:	d0e7e517 	ldw	r3,-24684(gp)
   1c674:	18c00917 	ldw	r3,36(r3)
   1c678:	10c00015 	stw	r3,0(r2)
                      break;
   1c67c:	00000b06 	br	1c6ac <OSEventPendMulti+0x574>
   1c680:	e0bff317 	ldw	r2,-52(fp)
   1c684:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c688:	e0bff817 	ldw	r2,-32(fp)
   1c68c:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   1c690:	e0bffd17 	ldw	r2,-12(fp)
   1c694:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   1c698:	e0800217 	ldw	r2,8(fp)
   1c69c:	00c00044 	movi	r3,1
   1c6a0:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   1c6a4:	e0bff18b 	ldhu	r2,-58(fp)
   1c6a8:	00002206 	br	1c734 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   1c6ac:	e0800217 	ldw	r2,8(fp)
   1c6b0:	10000005 	stb	zero,0(r2)
             break;
   1c6b4:	00001006 	br	1c6f8 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   1c6b8:	e0bffe17 	ldw	r2,-8(fp)
   1c6bc:	10c00104 	addi	r3,r2,4
   1c6c0:	e0fffe15 	stw	r3,-8(fp)
   1c6c4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   1c6c8:	e0800217 	ldw	r2,8(fp)
   1c6cc:	00c00384 	movi	r3,14
   1c6d0:	10c00005 	stb	r3,0(r2)
             break;
   1c6d4:	00000806 	br	1c6f8 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   1c6d8:	e0bffe17 	ldw	r2,-8(fp)
   1c6dc:	10c00104 	addi	r3,r2,4
   1c6e0:	e0fffe15 	stw	r3,-8(fp)
   1c6e4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   1c6e8:	e0800217 	ldw	r2,8(fp)
   1c6ec:	00c00284 	movi	r3,10
   1c6f0:	10c00005 	stb	r3,0(r2)
             break;
   1c6f4:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   1c6f8:	d0a7e517 	ldw	r2,-24684(gp)
   1c6fc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   1c700:	d0a7e517 	ldw	r2,-24684(gp)
   1c704:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   1c708:	d0a7e517 	ldw	r2,-24684(gp)
   1c70c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1c710:	d0a7e517 	ldw	r2,-24684(gp)
   1c714:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   1c718:	d0a7e517 	ldw	r2,-24684(gp)
   1c71c:	10000915 	stw	zero,36(r2)
   1c720:	e0bff317 	ldw	r2,-52(fp)
   1c724:	e0bffa15 	stw	r2,-24(fp)
   1c728:	e0bffa17 	ldw	r2,-24(fp)
   1c72c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   1c730:	e0bff18b 	ldhu	r2,-58(fp)
}
   1c734:	e037883a 	mov	sp,fp
   1c738:	dfc00117 	ldw	ra,4(sp)
   1c73c:	df000017 	ldw	fp,0(sp)
   1c740:	dec00204 	addi	sp,sp,8
   1c744:	f800283a 	ret

0001c748 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   1c748:	defffe04 	addi	sp,sp,-8
   1c74c:	dfc00115 	stw	ra,4(sp)
   1c750:	df000015 	stw	fp,0(sp)
   1c754:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   1c758:	0026dc40 	call	26dc4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   1c75c:	001d4c40 	call	1d4c4 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   1c760:	001d50c0 	call	1d50c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   1c764:	001d6780 	call	1d678 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   1c768:	001d3e40 	call	1d3e4 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   1c76c:	001f5280 	call	1f528 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   1c770:	00208f00 	call	208f0 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   1c774:	0021a180 	call	21a18 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   1c778:	001d5780 	call	1d578 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   1c77c:	001d5f80 	call	1d5f8 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   1c780:	0026de40 	call	26de4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   1c784:	001defc0 	call	1defc <OSDebugInit>
#endif
}
   1c788:	0001883a 	nop
   1c78c:	e037883a 	mov	sp,fp
   1c790:	dfc00117 	ldw	ra,4(sp)
   1c794:	df000017 	ldw	fp,0(sp)
   1c798:	dec00204 	addi	sp,sp,8
   1c79c:	f800283a 	ret

0001c7a0 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   1c7a0:	deffff04 	addi	sp,sp,-4
   1c7a4:	df000015 	stw	fp,0(sp)
   1c7a8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   1c7ac:	d0a7d643 	ldbu	r2,-24743(gp)
   1c7b0:	10803fcc 	andi	r2,r2,255
   1c7b4:	10800058 	cmpnei	r2,r2,1
   1c7b8:	1000071e 	bne	r2,zero,1c7d8 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   1c7bc:	d0a7e403 	ldbu	r2,-24688(gp)
   1c7c0:	10803fcc 	andi	r2,r2,255
   1c7c4:	10803fe0 	cmpeqi	r2,r2,255
   1c7c8:	1000031e 	bne	r2,zero,1c7d8 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   1c7cc:	d0a7e403 	ldbu	r2,-24688(gp)
   1c7d0:	10800044 	addi	r2,r2,1
   1c7d4:	d0a7e405 	stb	r2,-24688(gp)
        }
    }
}
   1c7d8:	0001883a 	nop
   1c7dc:	e037883a 	mov	sp,fp
   1c7e0:	df000017 	ldw	fp,0(sp)
   1c7e4:	dec00104 	addi	sp,sp,4
   1c7e8:	f800283a 	ret

0001c7ec <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   1c7ec:	defffb04 	addi	sp,sp,-20
   1c7f0:	dfc00415 	stw	ra,16(sp)
   1c7f4:	df000315 	stw	fp,12(sp)
   1c7f8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1c7fc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   1c800:	d0a7d643 	ldbu	r2,-24743(gp)
   1c804:	10803fcc 	andi	r2,r2,255
   1c808:	10800058 	cmpnei	r2,r2,1
   1c80c:	10002f1e 	bne	r2,zero,1c8cc <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c810:	0005303a 	rdctl	r2,status
   1c814:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c818:	e0ffff17 	ldw	r3,-4(fp)
   1c81c:	00bfff84 	movi	r2,-2
   1c820:	1884703a 	and	r2,r3,r2
   1c824:	1001703a 	wrctl	status,r2
  
  return context;
   1c828:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   1c82c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   1c830:	d0a7e403 	ldbu	r2,-24688(gp)
   1c834:	10803fcc 	andi	r2,r2,255
   1c838:	10000326 	beq	r2,zero,1c848 <OSIntExit+0x5c>
            OSIntNesting--;
   1c83c:	d0a7e403 	ldbu	r2,-24688(gp)
   1c840:	10bfffc4 	addi	r2,r2,-1
   1c844:	d0a7e405 	stb	r2,-24688(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   1c848:	d0a7e403 	ldbu	r2,-24688(gp)
   1c84c:	10803fcc 	andi	r2,r2,255
   1c850:	10001a1e 	bne	r2,zero,1c8bc <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   1c854:	d0a7d603 	ldbu	r2,-24744(gp)
   1c858:	10803fcc 	andi	r2,r2,255
   1c85c:	1000171e 	bne	r2,zero,1c8bc <OSIntExit+0xd0>
                OS_SchedNew();
   1c860:	001d8e80 	call	1d8e8 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   1c864:	d0e7d803 	ldbu	r3,-24736(gp)
   1c868:	d0a7d843 	ldbu	r2,-24735(gp)
   1c86c:	18c03fcc 	andi	r3,r3,255
   1c870:	10803fcc 	andi	r2,r2,255
   1c874:	18801126 	beq	r3,r2,1c8bc <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   1c878:	d0a7d803 	ldbu	r2,-24736(gp)
   1c87c:	10c03fcc 	andi	r3,r2,255
   1c880:	00800174 	movhi	r2,5
   1c884:	1093db04 	addi	r2,r2,20332
   1c888:	18c7883a 	add	r3,r3,r3
   1c88c:	18c7883a 	add	r3,r3,r3
   1c890:	10c5883a 	add	r2,r2,r3
   1c894:	10800017 	ldw	r2,0(r2)
   1c898:	d0a7e015 	stw	r2,-24704(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   1c89c:	d0a7e017 	ldw	r2,-24704(gp)
   1c8a0:	10c00e17 	ldw	r3,56(r2)
   1c8a4:	18c00044 	addi	r3,r3,1
   1c8a8:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   1c8ac:	d0a7db17 	ldw	r2,-24724(gp)
   1c8b0:	10800044 	addi	r2,r2,1
   1c8b4:	d0a7db15 	stw	r2,-24724(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   1c8b8:	0026af00 	call	26af0 <OSCtxSw>
   1c8bc:	e0bffd17 	ldw	r2,-12(fp)
   1c8c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c8c4:	e0bffe17 	ldw	r2,-8(fp)
   1c8c8:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   1c8cc:	0001883a 	nop
   1c8d0:	e037883a 	mov	sp,fp
   1c8d4:	dfc00117 	ldw	ra,4(sp)
   1c8d8:	df000017 	ldw	fp,0(sp)
   1c8dc:	dec00204 	addi	sp,sp,8
   1c8e0:	f800283a 	ret

0001c8e4 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   1c8e4:	defffc04 	addi	sp,sp,-16
   1c8e8:	df000315 	stw	fp,12(sp)
   1c8ec:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c8f0:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   1c8f4:	d0a7d643 	ldbu	r2,-24743(gp)
   1c8f8:	10803fcc 	andi	r2,r2,255
   1c8fc:	10800058 	cmpnei	r2,r2,1
   1c900:	1000161e 	bne	r2,zero,1c95c <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c904:	0005303a 	rdctl	r2,status
   1c908:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c90c:	e0ffff17 	ldw	r3,-4(fp)
   1c910:	00bfff84 	movi	r2,-2
   1c914:	1884703a 	and	r2,r3,r2
   1c918:	1001703a 	wrctl	status,r2
  
  return context;
   1c91c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   1c920:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   1c924:	d0a7e403 	ldbu	r2,-24688(gp)
   1c928:	10803fcc 	andi	r2,r2,255
   1c92c:	1000071e 	bne	r2,zero,1c94c <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   1c930:	d0a7d603 	ldbu	r2,-24744(gp)
   1c934:	10803fcc 	andi	r2,r2,255
   1c938:	10803fe0 	cmpeqi	r2,r2,255
   1c93c:	1000031e 	bne	r2,zero,1c94c <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   1c940:	d0a7d603 	ldbu	r2,-24744(gp)
   1c944:	10800044 	addi	r2,r2,1
   1c948:	d0a7d605 	stb	r2,-24744(gp)
   1c94c:	e0bffd17 	ldw	r2,-12(fp)
   1c950:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c954:	e0bffe17 	ldw	r2,-8(fp)
   1c958:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   1c95c:	0001883a 	nop
   1c960:	e037883a 	mov	sp,fp
   1c964:	df000017 	ldw	fp,0(sp)
   1c968:	dec00104 	addi	sp,sp,4
   1c96c:	f800283a 	ret

0001c970 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   1c970:	defff804 	addi	sp,sp,-32
   1c974:	dfc00715 	stw	ra,28(sp)
   1c978:	df000615 	stw	fp,24(sp)
   1c97c:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1c980:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   1c984:	d0a7d643 	ldbu	r2,-24743(gp)
   1c988:	10803fcc 	andi	r2,r2,255
   1c98c:	10800058 	cmpnei	r2,r2,1
   1c990:	1000281e 	bne	r2,zero,1ca34 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c994:	0005303a 	rdctl	r2,status
   1c998:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c99c:	e0ffff17 	ldw	r3,-4(fp)
   1c9a0:	00bfff84 	movi	r2,-2
   1c9a4:	1884703a 	and	r2,r3,r2
   1c9a8:	1001703a 	wrctl	status,r2
  
  return context;
   1c9ac:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   1c9b0:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   1c9b4:	d0a7d603 	ldbu	r2,-24744(gp)
   1c9b8:	10803fcc 	andi	r2,r2,255
   1c9bc:	10001926 	beq	r2,zero,1ca24 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   1c9c0:	d0a7d603 	ldbu	r2,-24744(gp)
   1c9c4:	10bfffc4 	addi	r2,r2,-1
   1c9c8:	d0a7d605 	stb	r2,-24744(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   1c9cc:	d0a7d603 	ldbu	r2,-24744(gp)
   1c9d0:	10803fcc 	andi	r2,r2,255
   1c9d4:	10000e1e 	bne	r2,zero,1ca10 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   1c9d8:	d0a7e403 	ldbu	r2,-24688(gp)
   1c9dc:	10803fcc 	andi	r2,r2,255
   1c9e0:	1000061e 	bne	r2,zero,1c9fc <OSSchedUnlock+0x8c>
   1c9e4:	e0bffa17 	ldw	r2,-24(fp)
   1c9e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c9ec:	e0bffb17 	ldw	r2,-20(fp)
   1c9f0:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   1c9f4:	001d8180 	call	1d818 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   1c9f8:	00000e06 	br	1ca34 <OSSchedUnlock+0xc4>
   1c9fc:	e0bffa17 	ldw	r2,-24(fp)
   1ca00:	e0bffc15 	stw	r2,-16(fp)
   1ca04:	e0bffc17 	ldw	r2,-16(fp)
   1ca08:	1001703a 	wrctl	status,r2
   1ca0c:	00000906 	br	1ca34 <OSSchedUnlock+0xc4>
   1ca10:	e0bffa17 	ldw	r2,-24(fp)
   1ca14:	e0bffd15 	stw	r2,-12(fp)
   1ca18:	e0bffd17 	ldw	r2,-12(fp)
   1ca1c:	1001703a 	wrctl	status,r2
   1ca20:	00000406 	br	1ca34 <OSSchedUnlock+0xc4>
   1ca24:	e0bffa17 	ldw	r2,-24(fp)
   1ca28:	e0bffe15 	stw	r2,-8(fp)
   1ca2c:	e0bffe17 	ldw	r2,-8(fp)
   1ca30:	1001703a 	wrctl	status,r2
   1ca34:	0001883a 	nop
   1ca38:	e037883a 	mov	sp,fp
   1ca3c:	dfc00117 	ldw	ra,4(sp)
   1ca40:	df000017 	ldw	fp,0(sp)
   1ca44:	dec00204 	addi	sp,sp,8
   1ca48:	f800283a 	ret

0001ca4c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   1ca4c:	defffe04 	addi	sp,sp,-8
   1ca50:	dfc00115 	stw	ra,4(sp)
   1ca54:	df000015 	stw	fp,0(sp)
   1ca58:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   1ca5c:	d0a7d643 	ldbu	r2,-24743(gp)
   1ca60:	10803fcc 	andi	r2,r2,255
   1ca64:	10000f1e 	bne	r2,zero,1caa4 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   1ca68:	001d8e80 	call	1d8e8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   1ca6c:	d0a7d803 	ldbu	r2,-24736(gp)
   1ca70:	d0a7d845 	stb	r2,-24735(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   1ca74:	d0a7d803 	ldbu	r2,-24736(gp)
   1ca78:	10c03fcc 	andi	r3,r2,255
   1ca7c:	00800174 	movhi	r2,5
   1ca80:	1093db04 	addi	r2,r2,20332
   1ca84:	18c7883a 	add	r3,r3,r3
   1ca88:	18c7883a 	add	r3,r3,r3
   1ca8c:	10c5883a 	add	r2,r2,r3
   1ca90:	10800017 	ldw	r2,0(r2)
   1ca94:	d0a7e015 	stw	r2,-24704(gp)
        OSTCBCur      = OSTCBHighRdy;
   1ca98:	d0a7e017 	ldw	r2,-24704(gp)
   1ca9c:	d0a7e515 	stw	r2,-24684(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   1caa0:	0026b7c0 	call	26b7c <OSStartHighRdy>
    }
}
   1caa4:	0001883a 	nop
   1caa8:	e037883a 	mov	sp,fp
   1caac:	dfc00117 	ldw	ra,4(sp)
   1cab0:	df000017 	ldw	fp,0(sp)
   1cab4:	dec00204 	addi	sp,sp,8
   1cab8:	f800283a 	ret

0001cabc <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   1cabc:	defff904 	addi	sp,sp,-28
   1cac0:	dfc00615 	stw	ra,24(sp)
   1cac4:	df000515 	stw	fp,20(sp)
   1cac8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1cacc:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   1cad0:	01000084 	movi	r4,2
   1cad4:	0023c8c0 	call	23c8c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cad8:	0005303a 	rdctl	r2,status
   1cadc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cae0:	e0fffc17 	ldw	r3,-16(fp)
   1cae4:	00bfff84 	movi	r2,-2
   1cae8:	1884703a 	and	r2,r3,r2
   1caec:	1001703a 	wrctl	status,r2
  
  return context;
   1caf0:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   1caf4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   1caf8:	d027d715 	stw	zero,-24740(gp)
   1cafc:	e0bffb17 	ldw	r2,-20(fp)
   1cb00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cb04:	e0bffd17 	ldw	r2,-12(fp)
   1cb08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   1cb0c:	0009883a 	mov	r4,zero
   1cb10:	0023c8c0 	call	23c8c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cb14:	0005303a 	rdctl	r2,status
   1cb18:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cb1c:	e0fffe17 	ldw	r3,-8(fp)
   1cb20:	00bfff84 	movi	r2,-2
   1cb24:	1884703a 	and	r2,r3,r2
   1cb28:	1001703a 	wrctl	status,r2
  
  return context;
   1cb2c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   1cb30:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   1cb34:	d0a7d717 	ldw	r2,-24740(gp)
   1cb38:	d0a7dc15 	stw	r2,-24720(gp)
    OSStatRdy    = OS_TRUE;
   1cb3c:	00800044 	movi	r2,1
   1cb40:	d0a7e805 	stb	r2,-24672(gp)
   1cb44:	e0bffb17 	ldw	r2,-20(fp)
   1cb48:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cb4c:	e0bfff17 	ldw	r2,-4(fp)
   1cb50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1cb54:	0001883a 	nop
   1cb58:	e037883a 	mov	sp,fp
   1cb5c:	dfc00117 	ldw	ra,4(sp)
   1cb60:	df000017 	ldw	fp,0(sp)
   1cb64:	dec00204 	addi	sp,sp,8
   1cb68:	f800283a 	ret

0001cb6c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   1cb6c:	defff704 	addi	sp,sp,-36
   1cb70:	dfc00815 	stw	ra,32(sp)
   1cb74:	df000715 	stw	fp,28(sp)
   1cb78:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1cb7c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   1cb80:	0026da40 	call	26da4 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cb84:	0005303a 	rdctl	r2,status
   1cb88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cb8c:	e0fffd17 	ldw	r3,-12(fp)
   1cb90:	00bfff84 	movi	r2,-2
   1cb94:	1884703a 	and	r2,r3,r2
   1cb98:	1001703a 	wrctl	status,r2
  
  return context;
   1cb9c:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   1cba0:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   1cba4:	d0a7e617 	ldw	r2,-24680(gp)
   1cba8:	10800044 	addi	r2,r2,1
   1cbac:	d0a7e615 	stw	r2,-24680(gp)
   1cbb0:	e0bffb17 	ldw	r2,-20(fp)
   1cbb4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cbb8:	e0bfff17 	ldw	r2,-4(fp)
   1cbbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   1cbc0:	d0a7d643 	ldbu	r2,-24743(gp)
   1cbc4:	10803fcc 	andi	r2,r2,255
   1cbc8:	10800058 	cmpnei	r2,r2,1
   1cbcc:	10006a1e 	bne	r2,zero,1cd78 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   1cbd0:	d0a7da03 	ldbu	r2,-24728(gp)
   1cbd4:	10803fcc 	andi	r2,r2,255
   1cbd8:	10c00060 	cmpeqi	r3,r2,1
   1cbdc:	1800061e 	bne	r3,zero,1cbf8 <OSTimeTick+0x8c>
   1cbe0:	10c000a0 	cmpeqi	r3,r2,2
   1cbe4:	1800061e 	bne	r3,zero,1cc00 <OSTimeTick+0x94>
   1cbe8:	10000a1e 	bne	r2,zero,1cc14 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   1cbec:	00800044 	movi	r2,1
   1cbf0:	e0bffa05 	stb	r2,-24(fp)
                 break;
   1cbf4:	00000b06 	br	1cc24 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   1cbf8:	e03ffa05 	stb	zero,-24(fp)
                 break;
   1cbfc:	00000906 	br	1cc24 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   1cc00:	00800044 	movi	r2,1
   1cc04:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   1cc08:	00800044 	movi	r2,1
   1cc0c:	d0a7da05 	stb	r2,-24728(gp)
                 break;
   1cc10:	00000406 	br	1cc24 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   1cc14:	00800044 	movi	r2,1
   1cc18:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   1cc1c:	d027da05 	stb	zero,-24728(gp)
                 break;
   1cc20:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   1cc24:	e0bffa03 	ldbu	r2,-24(fp)
   1cc28:	10005226 	beq	r2,zero,1cd74 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   1cc2c:	d0a7d917 	ldw	r2,-24732(gp)
   1cc30:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   1cc34:	00004906 	br	1cd5c <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cc38:	0005303a 	rdctl	r2,status
   1cc3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cc40:	e0fffc17 	ldw	r3,-16(fp)
   1cc44:	00bfff84 	movi	r2,-2
   1cc48:	1884703a 	and	r2,r3,r2
   1cc4c:	1001703a 	wrctl	status,r2
  
  return context;
   1cc50:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   1cc54:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   1cc58:	e0bff917 	ldw	r2,-28(fp)
   1cc5c:	10800b8b 	ldhu	r2,46(r2)
   1cc60:	10bfffcc 	andi	r2,r2,65535
   1cc64:	10003626 	beq	r2,zero,1cd40 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   1cc68:	e0bff917 	ldw	r2,-28(fp)
   1cc6c:	10800b8b 	ldhu	r2,46(r2)
   1cc70:	10bfffc4 	addi	r2,r2,-1
   1cc74:	1007883a 	mov	r3,r2
   1cc78:	e0bff917 	ldw	r2,-28(fp)
   1cc7c:	10c00b8d 	sth	r3,46(r2)
   1cc80:	e0bff917 	ldw	r2,-28(fp)
   1cc84:	10800b8b 	ldhu	r2,46(r2)
   1cc88:	10bfffcc 	andi	r2,r2,65535
   1cc8c:	10002c1e 	bne	r2,zero,1cd40 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1cc90:	e0bff917 	ldw	r2,-28(fp)
   1cc94:	10800c03 	ldbu	r2,48(r2)
   1cc98:	10803fcc 	andi	r2,r2,255
   1cc9c:	10800dcc 	andi	r2,r2,55
   1cca0:	10000b26 	beq	r2,zero,1ccd0 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   1cca4:	e0bff917 	ldw	r2,-28(fp)
   1cca8:	10c00c03 	ldbu	r3,48(r2)
   1ccac:	00bff204 	movi	r2,-56
   1ccb0:	1884703a 	and	r2,r3,r2
   1ccb4:	1007883a 	mov	r3,r2
   1ccb8:	e0bff917 	ldw	r2,-28(fp)
   1ccbc:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   1ccc0:	e0bff917 	ldw	r2,-28(fp)
   1ccc4:	00c00044 	movi	r3,1
   1ccc8:	10c00c45 	stb	r3,49(r2)
   1cccc:	00000206 	br	1ccd8 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1ccd0:	e0bff917 	ldw	r2,-28(fp)
   1ccd4:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   1ccd8:	e0bff917 	ldw	r2,-28(fp)
   1ccdc:	10800c03 	ldbu	r2,48(r2)
   1cce0:	10803fcc 	andi	r2,r2,255
   1cce4:	1080020c 	andi	r2,r2,8
   1cce8:	1000151e 	bne	r2,zero,1cd40 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   1ccec:	e0bff917 	ldw	r2,-28(fp)
   1ccf0:	10c00d83 	ldbu	r3,54(r2)
   1ccf4:	d0a7e203 	ldbu	r2,-24696(gp)
   1ccf8:	1884b03a 	or	r2,r3,r2
   1ccfc:	d0a7e205 	stb	r2,-24696(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1cd00:	e0bff917 	ldw	r2,-28(fp)
   1cd04:	10800d03 	ldbu	r2,52(r2)
   1cd08:	10c03fcc 	andi	r3,r2,255
   1cd0c:	e0bff917 	ldw	r2,-28(fp)
   1cd10:	10800d03 	ldbu	r2,52(r2)
   1cd14:	11003fcc 	andi	r4,r2,255
   1cd18:	d0a7e244 	addi	r2,gp,-24695
   1cd1c:	2085883a 	add	r2,r4,r2
   1cd20:	11000003 	ldbu	r4,0(r2)
   1cd24:	e0bff917 	ldw	r2,-28(fp)
   1cd28:	10800d43 	ldbu	r2,53(r2)
   1cd2c:	2084b03a 	or	r2,r4,r2
   1cd30:	1009883a 	mov	r4,r2
   1cd34:	d0a7e244 	addi	r2,gp,-24695
   1cd38:	1885883a 	add	r2,r3,r2
   1cd3c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   1cd40:	e0bff917 	ldw	r2,-28(fp)
   1cd44:	10800517 	ldw	r2,20(r2)
   1cd48:	e0bff915 	stw	r2,-28(fp)
   1cd4c:	e0bffb17 	ldw	r2,-20(fp)
   1cd50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cd54:	e0bffe17 	ldw	r2,-8(fp)
   1cd58:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   1cd5c:	e0bff917 	ldw	r2,-28(fp)
   1cd60:	10800c83 	ldbu	r2,50(r2)
   1cd64:	10803fcc 	andi	r2,r2,255
   1cd68:	10800518 	cmpnei	r2,r2,20
   1cd6c:	103fb21e 	bne	r2,zero,1cc38 <OSTimeTick+0xcc>
   1cd70:	00000106 	br	1cd78 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   1cd74:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   1cd78:	e037883a 	mov	sp,fp
   1cd7c:	dfc00117 	ldw	ra,4(sp)
   1cd80:	df000017 	ldw	fp,0(sp)
   1cd84:	dec00204 	addi	sp,sp,8
   1cd88:	f800283a 	ret

0001cd8c <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   1cd8c:	deffff04 	addi	sp,sp,-4
   1cd90:	df000015 	stw	fp,0(sp)
   1cd94:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   1cd98:	00804784 	movi	r2,286
}
   1cd9c:	e037883a 	mov	sp,fp
   1cda0:	df000017 	ldw	fp,0(sp)
   1cda4:	dec00104 	addi	sp,sp,4
   1cda8:	f800283a 	ret

0001cdac <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   1cdac:	deffff04 	addi	sp,sp,-4
   1cdb0:	df000015 	stw	fp,0(sp)
   1cdb4:	d839883a 	mov	fp,sp
}
   1cdb8:	0001883a 	nop
   1cdbc:	e037883a 	mov	sp,fp
   1cdc0:	df000017 	ldw	fp,0(sp)
   1cdc4:	dec00104 	addi	sp,sp,4
   1cdc8:	f800283a 	ret

0001cdcc <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   1cdcc:	defff804 	addi	sp,sp,-32
   1cdd0:	dfc00715 	stw	ra,28(sp)
   1cdd4:	df000615 	stw	fp,24(sp)
   1cdd8:	df000604 	addi	fp,sp,24
   1cddc:	e13ffc15 	stw	r4,-16(fp)
   1cde0:	e17ffd15 	stw	r5,-12(fp)
   1cde4:	3007883a 	mov	r3,r6
   1cde8:	3805883a 	mov	r2,r7
   1cdec:	e0fffe05 	stb	r3,-8(fp)
   1cdf0:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   1cdf4:	e0bffc17 	ldw	r2,-16(fp)
   1cdf8:	10800283 	ldbu	r2,10(r2)
   1cdfc:	10c03fcc 	andi	r3,r2,255
   1ce00:	008000b4 	movhi	r2,2
   1ce04:	109e8e04 	addi	r2,r2,31288
   1ce08:	10c5883a 	add	r2,r2,r3
   1ce0c:	10800003 	ldbu	r2,0(r2)
   1ce10:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   1ce14:	e0bffa03 	ldbu	r2,-24(fp)
   1ce18:	e0fffc17 	ldw	r3,-16(fp)
   1ce1c:	1885883a 	add	r2,r3,r2
   1ce20:	108002c4 	addi	r2,r2,11
   1ce24:	10800003 	ldbu	r2,0(r2)
   1ce28:	10c03fcc 	andi	r3,r2,255
   1ce2c:	008000b4 	movhi	r2,2
   1ce30:	109e8e04 	addi	r2,r2,31288
   1ce34:	10c5883a 	add	r2,r2,r3
   1ce38:	10800003 	ldbu	r2,0(r2)
   1ce3c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   1ce40:	e0bffa03 	ldbu	r2,-24(fp)
   1ce44:	100490fa 	slli	r2,r2,3
   1ce48:	1007883a 	mov	r3,r2
   1ce4c:	e0bffa43 	ldbu	r2,-23(fp)
   1ce50:	1885883a 	add	r2,r3,r2
   1ce54:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   1ce58:	e0fffa83 	ldbu	r3,-22(fp)
   1ce5c:	00800174 	movhi	r2,5
   1ce60:	1093db04 	addi	r2,r2,20332
   1ce64:	18c7883a 	add	r3,r3,r3
   1ce68:	18c7883a 	add	r3,r3,r3
   1ce6c:	10c5883a 	add	r2,r2,r3
   1ce70:	10800017 	ldw	r2,0(r2)
   1ce74:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   1ce78:	e0bffb17 	ldw	r2,-20(fp)
   1ce7c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   1ce80:	e0bffb17 	ldw	r2,-20(fp)
   1ce84:	e0fffd17 	ldw	r3,-12(fp)
   1ce88:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   1ce8c:	e0bffb17 	ldw	r2,-20(fp)
   1ce90:	10800c03 	ldbu	r2,48(r2)
   1ce94:	1007883a 	mov	r3,r2
   1ce98:	e0bffe03 	ldbu	r2,-8(fp)
   1ce9c:	0084303a 	nor	r2,zero,r2
   1cea0:	1884703a 	and	r2,r3,r2
   1cea4:	1007883a 	mov	r3,r2
   1cea8:	e0bffb17 	ldw	r2,-20(fp)
   1ceac:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   1ceb0:	e0bffb17 	ldw	r2,-20(fp)
   1ceb4:	e0ffff03 	ldbu	r3,-4(fp)
   1ceb8:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   1cebc:	e0bffb17 	ldw	r2,-20(fp)
   1cec0:	10800c03 	ldbu	r2,48(r2)
   1cec4:	10803fcc 	andi	r2,r2,255
   1cec8:	1080020c 	andi	r2,r2,8
   1cecc:	1000111e 	bne	r2,zero,1cf14 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   1ced0:	e0bffb17 	ldw	r2,-20(fp)
   1ced4:	10c00d83 	ldbu	r3,54(r2)
   1ced8:	d0a7e203 	ldbu	r2,-24696(gp)
   1cedc:	1884b03a 	or	r2,r3,r2
   1cee0:	d0a7e205 	stb	r2,-24696(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   1cee4:	e0fffa03 	ldbu	r3,-24(fp)
   1cee8:	e13ffa03 	ldbu	r4,-24(fp)
   1ceec:	d0a7e244 	addi	r2,gp,-24695
   1cef0:	2085883a 	add	r2,r4,r2
   1cef4:	11000003 	ldbu	r4,0(r2)
   1cef8:	e0bffb17 	ldw	r2,-20(fp)
   1cefc:	10800d43 	ldbu	r2,53(r2)
   1cf00:	2084b03a 	or	r2,r4,r2
   1cf04:	1009883a 	mov	r4,r2
   1cf08:	d0a7e244 	addi	r2,gp,-24695
   1cf0c:	1885883a 	add	r2,r3,r2
   1cf10:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   1cf14:	e17ffc17 	ldw	r5,-16(fp)
   1cf18:	e13ffb17 	ldw	r4,-20(fp)
   1cf1c:	001d1c40 	call	1d1c4 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   1cf20:	e0bffb17 	ldw	r2,-20(fp)
   1cf24:	10800817 	ldw	r2,32(r2)
   1cf28:	10000826 	beq	r2,zero,1cf4c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1cf2c:	e0bffb17 	ldw	r2,-20(fp)
   1cf30:	10800817 	ldw	r2,32(r2)
   1cf34:	100b883a 	mov	r5,r2
   1cf38:	e13ffb17 	ldw	r4,-20(fp)
   1cf3c:	001d27c0 	call	1d27c <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   1cf40:	e0bffb17 	ldw	r2,-20(fp)
   1cf44:	e0fffc17 	ldw	r3,-16(fp)
   1cf48:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   1cf4c:	e0bffa83 	ldbu	r2,-22(fp)
}
   1cf50:	e037883a 	mov	sp,fp
   1cf54:	dfc00117 	ldw	ra,4(sp)
   1cf58:	df000017 	ldw	fp,0(sp)
   1cf5c:	dec00204 	addi	sp,sp,8
   1cf60:	f800283a 	ret

0001cf64 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   1cf64:	defffd04 	addi	sp,sp,-12
   1cf68:	df000215 	stw	fp,8(sp)
   1cf6c:	df000204 	addi	fp,sp,8
   1cf70:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   1cf74:	d0a7e517 	ldw	r2,-24684(gp)
   1cf78:	e0ffff17 	ldw	r3,-4(fp)
   1cf7c:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   1cf80:	d0a7e517 	ldw	r2,-24684(gp)
   1cf84:	10800d03 	ldbu	r2,52(r2)
   1cf88:	10803fcc 	andi	r2,r2,255
   1cf8c:	d0e7e517 	ldw	r3,-24684(gp)
   1cf90:	18c00d03 	ldbu	r3,52(r3)
   1cf94:	18c03fcc 	andi	r3,r3,255
   1cf98:	e13fff17 	ldw	r4,-4(fp)
   1cf9c:	20c7883a 	add	r3,r4,r3
   1cfa0:	18c002c4 	addi	r3,r3,11
   1cfa4:	19000003 	ldbu	r4,0(r3)
   1cfa8:	d0e7e517 	ldw	r3,-24684(gp)
   1cfac:	18c00d43 	ldbu	r3,53(r3)
   1cfb0:	20c6b03a 	or	r3,r4,r3
   1cfb4:	1809883a 	mov	r4,r3
   1cfb8:	e0ffff17 	ldw	r3,-4(fp)
   1cfbc:	1885883a 	add	r2,r3,r2
   1cfc0:	108002c4 	addi	r2,r2,11
   1cfc4:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   1cfc8:	e0bfff17 	ldw	r2,-4(fp)
   1cfcc:	10c00283 	ldbu	r3,10(r2)
   1cfd0:	d0a7e517 	ldw	r2,-24684(gp)
   1cfd4:	10800d83 	ldbu	r2,54(r2)
   1cfd8:	1884b03a 	or	r2,r3,r2
   1cfdc:	1007883a 	mov	r3,r2
   1cfe0:	e0bfff17 	ldw	r2,-4(fp)
   1cfe4:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   1cfe8:	d0a7e517 	ldw	r2,-24684(gp)
   1cfec:	10800d03 	ldbu	r2,52(r2)
   1cff0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   1cff4:	e0fffe03 	ldbu	r3,-8(fp)
   1cff8:	e13ffe03 	ldbu	r4,-8(fp)
   1cffc:	d0a7e244 	addi	r2,gp,-24695
   1d000:	2085883a 	add	r2,r4,r2
   1d004:	10800003 	ldbu	r2,0(r2)
   1d008:	1009883a 	mov	r4,r2
   1d00c:	d0a7e517 	ldw	r2,-24684(gp)
   1d010:	10800d43 	ldbu	r2,53(r2)
   1d014:	0084303a 	nor	r2,zero,r2
   1d018:	2084703a 	and	r2,r4,r2
   1d01c:	1009883a 	mov	r4,r2
   1d020:	d0a7e244 	addi	r2,gp,-24695
   1d024:	1885883a 	add	r2,r3,r2
   1d028:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1d02c:	e0fffe03 	ldbu	r3,-8(fp)
   1d030:	d0a7e244 	addi	r2,gp,-24695
   1d034:	1885883a 	add	r2,r3,r2
   1d038:	10800003 	ldbu	r2,0(r2)
   1d03c:	10803fcc 	andi	r2,r2,255
   1d040:	1000071e 	bne	r2,zero,1d060 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   1d044:	d0a7e517 	ldw	r2,-24684(gp)
   1d048:	10800d83 	ldbu	r2,54(r2)
   1d04c:	0084303a 	nor	r2,zero,r2
   1d050:	1007883a 	mov	r3,r2
   1d054:	d0a7e203 	ldbu	r2,-24696(gp)
   1d058:	1884703a 	and	r2,r3,r2
   1d05c:	d0a7e205 	stb	r2,-24696(gp)
    }
}
   1d060:	0001883a 	nop
   1d064:	e037883a 	mov	sp,fp
   1d068:	df000017 	ldw	fp,0(sp)
   1d06c:	dec00104 	addi	sp,sp,4
   1d070:	f800283a 	ret

0001d074 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   1d074:	defffb04 	addi	sp,sp,-20
   1d078:	df000415 	stw	fp,16(sp)
   1d07c:	df000404 	addi	fp,sp,16
   1d080:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   1d084:	d0a7e517 	ldw	r2,-24684(gp)
   1d088:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   1d08c:	d0a7e517 	ldw	r2,-24684(gp)
   1d090:	e0ffff17 	ldw	r3,-4(fp)
   1d094:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   1d098:	e0bfff17 	ldw	r2,-4(fp)
   1d09c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   1d0a0:	e0bffc17 	ldw	r2,-16(fp)
   1d0a4:	10800017 	ldw	r2,0(r2)
   1d0a8:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   1d0ac:	00002006 	br	1d130 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   1d0b0:	d0a7e517 	ldw	r2,-24684(gp)
   1d0b4:	10800d03 	ldbu	r2,52(r2)
   1d0b8:	10803fcc 	andi	r2,r2,255
   1d0bc:	d0e7e517 	ldw	r3,-24684(gp)
   1d0c0:	18c00d03 	ldbu	r3,52(r3)
   1d0c4:	18c03fcc 	andi	r3,r3,255
   1d0c8:	e13ffd17 	ldw	r4,-12(fp)
   1d0cc:	20c7883a 	add	r3,r4,r3
   1d0d0:	18c002c4 	addi	r3,r3,11
   1d0d4:	19000003 	ldbu	r4,0(r3)
   1d0d8:	d0e7e517 	ldw	r3,-24684(gp)
   1d0dc:	18c00d43 	ldbu	r3,53(r3)
   1d0e0:	20c6b03a 	or	r3,r4,r3
   1d0e4:	1809883a 	mov	r4,r3
   1d0e8:	e0fffd17 	ldw	r3,-12(fp)
   1d0ec:	1885883a 	add	r2,r3,r2
   1d0f0:	108002c4 	addi	r2,r2,11
   1d0f4:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   1d0f8:	e0bffd17 	ldw	r2,-12(fp)
   1d0fc:	10c00283 	ldbu	r3,10(r2)
   1d100:	d0a7e517 	ldw	r2,-24684(gp)
   1d104:	10800d83 	ldbu	r2,54(r2)
   1d108:	1884b03a 	or	r2,r3,r2
   1d10c:	1007883a 	mov	r3,r2
   1d110:	e0bffd17 	ldw	r2,-12(fp)
   1d114:	10c00285 	stb	r3,10(r2)
        pevents++;
   1d118:	e0bffc17 	ldw	r2,-16(fp)
   1d11c:	10800104 	addi	r2,r2,4
   1d120:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   1d124:	e0bffc17 	ldw	r2,-16(fp)
   1d128:	10800017 	ldw	r2,0(r2)
   1d12c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   1d130:	e0bffd17 	ldw	r2,-12(fp)
   1d134:	103fde1e 	bne	r2,zero,1d0b0 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   1d138:	d0a7e517 	ldw	r2,-24684(gp)
   1d13c:	10800d03 	ldbu	r2,52(r2)
   1d140:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   1d144:	e0fffe03 	ldbu	r3,-8(fp)
   1d148:	e13ffe03 	ldbu	r4,-8(fp)
   1d14c:	d0a7e244 	addi	r2,gp,-24695
   1d150:	2085883a 	add	r2,r4,r2
   1d154:	10800003 	ldbu	r2,0(r2)
   1d158:	1009883a 	mov	r4,r2
   1d15c:	d0a7e517 	ldw	r2,-24684(gp)
   1d160:	10800d43 	ldbu	r2,53(r2)
   1d164:	0084303a 	nor	r2,zero,r2
   1d168:	2084703a 	and	r2,r4,r2
   1d16c:	1009883a 	mov	r4,r2
   1d170:	d0a7e244 	addi	r2,gp,-24695
   1d174:	1885883a 	add	r2,r3,r2
   1d178:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1d17c:	e0fffe03 	ldbu	r3,-8(fp)
   1d180:	d0a7e244 	addi	r2,gp,-24695
   1d184:	1885883a 	add	r2,r3,r2
   1d188:	10800003 	ldbu	r2,0(r2)
   1d18c:	10803fcc 	andi	r2,r2,255
   1d190:	1000071e 	bne	r2,zero,1d1b0 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   1d194:	d0a7e517 	ldw	r2,-24684(gp)
   1d198:	10800d83 	ldbu	r2,54(r2)
   1d19c:	0084303a 	nor	r2,zero,r2
   1d1a0:	1007883a 	mov	r3,r2
   1d1a4:	d0a7e203 	ldbu	r2,-24696(gp)
   1d1a8:	1884703a 	and	r2,r3,r2
   1d1ac:	d0a7e205 	stb	r2,-24696(gp)
    }
}
   1d1b0:	0001883a 	nop
   1d1b4:	e037883a 	mov	sp,fp
   1d1b8:	df000017 	ldw	fp,0(sp)
   1d1bc:	dec00104 	addi	sp,sp,4
   1d1c0:	f800283a 	ret

0001d1c4 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   1d1c4:	defffc04 	addi	sp,sp,-16
   1d1c8:	df000315 	stw	fp,12(sp)
   1d1cc:	df000304 	addi	fp,sp,12
   1d1d0:	e13ffe15 	stw	r4,-8(fp)
   1d1d4:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   1d1d8:	e0bffe17 	ldw	r2,-8(fp)
   1d1dc:	10800d03 	ldbu	r2,52(r2)
   1d1e0:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   1d1e4:	e0bffd03 	ldbu	r2,-12(fp)
   1d1e8:	e0fffd03 	ldbu	r3,-12(fp)
   1d1ec:	e13fff17 	ldw	r4,-4(fp)
   1d1f0:	20c7883a 	add	r3,r4,r3
   1d1f4:	18c002c4 	addi	r3,r3,11
   1d1f8:	18c00003 	ldbu	r3,0(r3)
   1d1fc:	1809883a 	mov	r4,r3
   1d200:	e0fffe17 	ldw	r3,-8(fp)
   1d204:	18c00d43 	ldbu	r3,53(r3)
   1d208:	00c6303a 	nor	r3,zero,r3
   1d20c:	20c6703a 	and	r3,r4,r3
   1d210:	1809883a 	mov	r4,r3
   1d214:	e0ffff17 	ldw	r3,-4(fp)
   1d218:	1885883a 	add	r2,r3,r2
   1d21c:	108002c4 	addi	r2,r2,11
   1d220:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   1d224:	e0bffd03 	ldbu	r2,-12(fp)
   1d228:	e0ffff17 	ldw	r3,-4(fp)
   1d22c:	1885883a 	add	r2,r3,r2
   1d230:	108002c4 	addi	r2,r2,11
   1d234:	10800003 	ldbu	r2,0(r2)
   1d238:	10803fcc 	andi	r2,r2,255
   1d23c:	10000a1e 	bne	r2,zero,1d268 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   1d240:	e0bfff17 	ldw	r2,-4(fp)
   1d244:	10800283 	ldbu	r2,10(r2)
   1d248:	1007883a 	mov	r3,r2
   1d24c:	e0bffe17 	ldw	r2,-8(fp)
   1d250:	10800d83 	ldbu	r2,54(r2)
   1d254:	0084303a 	nor	r2,zero,r2
   1d258:	1884703a 	and	r2,r3,r2
   1d25c:	1007883a 	mov	r3,r2
   1d260:	e0bfff17 	ldw	r2,-4(fp)
   1d264:	10c00285 	stb	r3,10(r2)
    }
}
   1d268:	0001883a 	nop
   1d26c:	e037883a 	mov	sp,fp
   1d270:	df000017 	ldw	fp,0(sp)
   1d274:	dec00104 	addi	sp,sp,4
   1d278:	f800283a 	ret

0001d27c <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   1d27c:	defffa04 	addi	sp,sp,-24
   1d280:	df000515 	stw	fp,20(sp)
   1d284:	df000504 	addi	fp,sp,20
   1d288:	e13ffe15 	stw	r4,-8(fp)
   1d28c:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   1d290:	e0bffe17 	ldw	r2,-8(fp)
   1d294:	10800d03 	ldbu	r2,52(r2)
   1d298:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   1d29c:	e0bffe17 	ldw	r2,-8(fp)
   1d2a0:	10800d83 	ldbu	r2,54(r2)
   1d2a4:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   1d2a8:	e0bffe17 	ldw	r2,-8(fp)
   1d2ac:	10800d43 	ldbu	r2,53(r2)
   1d2b0:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   1d2b4:	e0bfff17 	ldw	r2,-4(fp)
   1d2b8:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   1d2bc:	e0bffb17 	ldw	r2,-20(fp)
   1d2c0:	10800017 	ldw	r2,0(r2)
   1d2c4:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   1d2c8:	00002506 	br	1d360 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   1d2cc:	e0bffd03 	ldbu	r2,-12(fp)
   1d2d0:	e0fffd03 	ldbu	r3,-12(fp)
   1d2d4:	e13ffc17 	ldw	r4,-16(fp)
   1d2d8:	20c7883a 	add	r3,r4,r3
   1d2dc:	18c002c4 	addi	r3,r3,11
   1d2e0:	18c00003 	ldbu	r3,0(r3)
   1d2e4:	1809883a 	mov	r4,r3
   1d2e8:	e0fffd83 	ldbu	r3,-10(fp)
   1d2ec:	00c6303a 	nor	r3,zero,r3
   1d2f0:	20c6703a 	and	r3,r4,r3
   1d2f4:	1809883a 	mov	r4,r3
   1d2f8:	e0fffc17 	ldw	r3,-16(fp)
   1d2fc:	1885883a 	add	r2,r3,r2
   1d300:	108002c4 	addi	r2,r2,11
   1d304:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   1d308:	e0bffd03 	ldbu	r2,-12(fp)
   1d30c:	e0fffc17 	ldw	r3,-16(fp)
   1d310:	1885883a 	add	r2,r3,r2
   1d314:	108002c4 	addi	r2,r2,11
   1d318:	10800003 	ldbu	r2,0(r2)
   1d31c:	10803fcc 	andi	r2,r2,255
   1d320:	1000091e 	bne	r2,zero,1d348 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   1d324:	e0bffc17 	ldw	r2,-16(fp)
   1d328:	10800283 	ldbu	r2,10(r2)
   1d32c:	1007883a 	mov	r3,r2
   1d330:	e0bffd43 	ldbu	r2,-11(fp)
   1d334:	0084303a 	nor	r2,zero,r2
   1d338:	1884703a 	and	r2,r3,r2
   1d33c:	1007883a 	mov	r3,r2
   1d340:	e0bffc17 	ldw	r2,-16(fp)
   1d344:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   1d348:	e0bffb17 	ldw	r2,-20(fp)
   1d34c:	10800104 	addi	r2,r2,4
   1d350:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   1d354:	e0bffb17 	ldw	r2,-20(fp)
   1d358:	10800017 	ldw	r2,0(r2)
   1d35c:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   1d360:	e0bffc17 	ldw	r2,-16(fp)
   1d364:	103fd91e 	bne	r2,zero,1d2cc <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   1d368:	0001883a 	nop
   1d36c:	e037883a 	mov	sp,fp
   1d370:	df000017 	ldw	fp,0(sp)
   1d374:	dec00104 	addi	sp,sp,4
   1d378:	f800283a 	ret

0001d37c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   1d37c:	defffc04 	addi	sp,sp,-16
   1d380:	df000315 	stw	fp,12(sp)
   1d384:	df000304 	addi	fp,sp,12
   1d388:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   1d38c:	e0bfff17 	ldw	r2,-4(fp)
   1d390:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   1d394:	e0bfff17 	ldw	r2,-4(fp)
   1d398:	108002c4 	addi	r2,r2,11
   1d39c:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1d3a0:	e03ffe05 	stb	zero,-8(fp)
   1d3a4:	00000706 	br	1d3c4 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   1d3a8:	e0bffd17 	ldw	r2,-12(fp)
   1d3ac:	10c00044 	addi	r3,r2,1
   1d3b0:	e0fffd15 	stw	r3,-12(fp)
   1d3b4:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1d3b8:	e0bffe03 	ldbu	r2,-8(fp)
   1d3bc:	10800044 	addi	r2,r2,1
   1d3c0:	e0bffe05 	stb	r2,-8(fp)
   1d3c4:	e0bffe03 	ldbu	r2,-8(fp)
   1d3c8:	108000f0 	cmpltui	r2,r2,3
   1d3cc:	103ff61e 	bne	r2,zero,1d3a8 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
   1d3d0:	0001883a 	nop
   1d3d4:	e037883a 	mov	sp,fp
   1d3d8:	df000017 	ldw	fp,0(sp)
   1d3dc:	dec00104 	addi	sp,sp,4
   1d3e0:	f800283a 	ret

0001d3e4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   1d3e4:	defffb04 	addi	sp,sp,-20
   1d3e8:	dfc00415 	stw	ra,16(sp)
   1d3ec:	df000315 	stw	fp,12(sp)
   1d3f0:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   1d3f4:	0142d004 	movi	r5,2880
   1d3f8:	01000174 	movhi	r4,5
   1d3fc:	210eef04 	addi	r4,r4,15292
   1d400:	001d75c0 	call	1d75c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   1d404:	00800174 	movhi	r2,5
   1d408:	108eef04 	addi	r2,r2,15292
   1d40c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   1d410:	00800174 	movhi	r2,5
   1d414:	108efb04 	addi	r2,r2,15340
   1d418:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   1d41c:	e03ffd0d 	sth	zero,-12(fp)
   1d420:	00001306 	br	1d470 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1d424:	e0bffe17 	ldw	r2,-8(fp)
   1d428:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   1d42c:	e0bffe17 	ldw	r2,-8(fp)
   1d430:	e0ffff17 	ldw	r3,-4(fp)
   1d434:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   1d438:	e0bffe17 	ldw	r2,-8(fp)
   1d43c:	00c00fc4 	movi	r3,63
   1d440:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   1d444:	e0bffe17 	ldw	r2,-8(fp)
   1d448:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   1d44c:	e0bffe17 	ldw	r2,-8(fp)
   1d450:	10800c04 	addi	r2,r2,48
   1d454:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   1d458:	e0bfff17 	ldw	r2,-4(fp)
   1d45c:	10800c04 	addi	r2,r2,48
   1d460:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   1d464:	e0bffd0b 	ldhu	r2,-12(fp)
   1d468:	10800044 	addi	r2,r2,1
   1d46c:	e0bffd0d 	sth	r2,-12(fp)
   1d470:	e0bffd0b 	ldhu	r2,-12(fp)
   1d474:	10800ef0 	cmpltui	r2,r2,59
   1d478:	103fea1e 	bne	r2,zero,1d424 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   1d47c:	e0bffe17 	ldw	r2,-8(fp)
   1d480:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   1d484:	e0bffe17 	ldw	r2,-8(fp)
   1d488:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   1d48c:	e0bffe17 	ldw	r2,-8(fp)
   1d490:	00c00fc4 	movi	r3,63
   1d494:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   1d498:	e0bffe17 	ldw	r2,-8(fp)
   1d49c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   1d4a0:	00800174 	movhi	r2,5
   1d4a4:	108eef04 	addi	r2,r2,15292
   1d4a8:	d0a7e315 	stw	r2,-24692(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   1d4ac:	0001883a 	nop
   1d4b0:	e037883a 	mov	sp,fp
   1d4b4:	dfc00117 	ldw	ra,4(sp)
   1d4b8:	df000017 	ldw	fp,0(sp)
   1d4bc:	dec00204 	addi	sp,sp,8
   1d4c0:	f800283a 	ret

0001d4c4 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   1d4c4:	deffff04 	addi	sp,sp,-4
   1d4c8:	df000015 	stw	fp,0(sp)
   1d4cc:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   1d4d0:	d027e615 	stw	zero,-24680(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   1d4d4:	d027e405 	stb	zero,-24688(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   1d4d8:	d027d605 	stb	zero,-24744(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   1d4dc:	d027de45 	stb	zero,-24711(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   1d4e0:	d027d645 	stb	zero,-24743(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   1d4e4:	d027db15 	stw	zero,-24724(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   1d4e8:	d027d715 	stw	zero,-24740(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   1d4ec:	d027e915 	stw	zero,-24668(gp)
    OSIdleCtrMax  = 0L;
   1d4f0:	d027dc15 	stw	zero,-24720(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   1d4f4:	d027e805 	stb	zero,-24672(gp)
#endif
}
   1d4f8:	0001883a 	nop
   1d4fc:	e037883a 	mov	sp,fp
   1d500:	df000017 	ldw	fp,0(sp)
   1d504:	dec00104 	addi	sp,sp,4
   1d508:	f800283a 	ret

0001d50c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   1d50c:	defffd04 	addi	sp,sp,-12
   1d510:	df000215 	stw	fp,8(sp)
   1d514:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   1d518:	d027e205 	stb	zero,-24696(gp)
    prdytbl       = &OSRdyTbl[0];
   1d51c:	d0a7e244 	addi	r2,gp,-24695
   1d520:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   1d524:	e03ffe05 	stb	zero,-8(fp)
   1d528:	00000706 	br	1d548 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   1d52c:	e0bfff17 	ldw	r2,-4(fp)
   1d530:	10c00044 	addi	r3,r2,1
   1d534:	e0ffff15 	stw	r3,-4(fp)
   1d538:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   1d53c:	e0bffe03 	ldbu	r2,-8(fp)
   1d540:	10800044 	addi	r2,r2,1
   1d544:	e0bffe05 	stb	r2,-8(fp)
   1d548:	e0bffe03 	ldbu	r2,-8(fp)
   1d54c:	108000f0 	cmpltui	r2,r2,3
   1d550:	103ff61e 	bne	r2,zero,1d52c <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   1d554:	d027d845 	stb	zero,-24735(gp)
    OSPrioHighRdy = 0;
   1d558:	d027d805 	stb	zero,-24736(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   1d55c:	d027e015 	stw	zero,-24704(gp)
    OSTCBCur      = (OS_TCB *)0;
   1d560:	d027e515 	stw	zero,-24684(gp)
}
   1d564:	0001883a 	nop
   1d568:	e037883a 	mov	sp,fp
   1d56c:	df000017 	ldw	fp,0(sp)
   1d570:	dec00104 	addi	sp,sp,4
   1d574:	f800283a 	ret

0001d578 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   1d578:	defff804 	addi	sp,sp,-32
   1d57c:	dfc00715 	stw	ra,28(sp)
   1d580:	df000615 	stw	fp,24(sp)
   1d584:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   1d588:	008000c4 	movi	r2,3
   1d58c:	d8800415 	stw	r2,16(sp)
   1d590:	d8000315 	stw	zero,12(sp)
   1d594:	00808004 	movi	r2,512
   1d598:	d8800215 	stw	r2,8(sp)
   1d59c:	00800174 	movhi	r2,5
   1d5a0:	108cef04 	addi	r2,r2,13244
   1d5a4:	d8800115 	stw	r2,4(sp)
   1d5a8:	00bfffd4 	movui	r2,65535
   1d5ac:	d8800015 	stw	r2,0(sp)
   1d5b0:	01c00504 	movi	r7,20
   1d5b4:	01800174 	movhi	r6,5
   1d5b8:	318eee04 	addi	r6,r6,15288
   1d5bc:	000b883a 	mov	r5,zero
   1d5c0:	010000b4 	movhi	r4,2
   1d5c4:	21368904 	addi	r4,r4,-9692
   1d5c8:	0022bbc0 	call	22bbc <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   1d5cc:	e1bfff04 	addi	r6,fp,-4
   1d5d0:	014000b4 	movhi	r5,2
   1d5d4:	295ece04 	addi	r5,r5,31544
   1d5d8:	01000504 	movi	r4,20
   1d5dc:	00233cc0 	call	233cc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   1d5e0:	0001883a 	nop
   1d5e4:	e037883a 	mov	sp,fp
   1d5e8:	dfc00117 	ldw	ra,4(sp)
   1d5ec:	df000017 	ldw	fp,0(sp)
   1d5f0:	dec00204 	addi	sp,sp,8
   1d5f4:	f800283a 	ret

0001d5f8 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   1d5f8:	defff804 	addi	sp,sp,-32
   1d5fc:	dfc00715 	stw	ra,28(sp)
   1d600:	df000615 	stw	fp,24(sp)
   1d604:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   1d608:	008000c4 	movi	r2,3
   1d60c:	d8800415 	stw	r2,16(sp)
   1d610:	d8000315 	stw	zero,12(sp)
   1d614:	00808004 	movi	r2,512
   1d618:	d8800215 	stw	r2,8(sp)
   1d61c:	00800174 	movhi	r2,5
   1d620:	108a7704 	addi	r2,r2,10716
   1d624:	d8800115 	stw	r2,4(sp)
   1d628:	00bfff94 	movui	r2,65534
   1d62c:	d8800015 	stw	r2,0(sp)
   1d630:	01c004c4 	movi	r7,19
   1d634:	01800174 	movhi	r6,5
   1d638:	318c7604 	addi	r6,r6,12760
   1d63c:	000b883a 	mov	r5,zero
   1d640:	010000b4 	movhi	r4,2
   1d644:	2136a004 	addi	r4,r4,-9600
   1d648:	0022bbc0 	call	22bbc <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   1d64c:	e1bfff04 	addi	r6,fp,-4
   1d650:	014000b4 	movhi	r5,2
   1d654:	295ed204 	addi	r5,r5,31560
   1d658:	010004c4 	movi	r4,19
   1d65c:	00233cc0 	call	233cc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   1d660:	0001883a 	nop
   1d664:	e037883a 	mov	sp,fp
   1d668:	dfc00117 	ldw	ra,4(sp)
   1d66c:	df000017 	ldw	fp,0(sp)
   1d670:	dec00204 	addi	sp,sp,8
   1d674:	f800283a 	ret

0001d678 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   1d678:	defffb04 	addi	sp,sp,-20
   1d67c:	dfc00415 	stw	ra,16(sp)
   1d680:	df000315 	stw	fp,12(sp)
   1d684:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   1d688:	01421c04 	movi	r5,2160
   1d68c:	01000174 	movhi	r4,5
   1d690:	2111bf04 	addi	r4,r4,18172
   1d694:	001d75c0 	call	1d75c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   1d698:	01401504 	movi	r5,84
   1d69c:	01000174 	movhi	r4,5
   1d6a0:	2113db04 	addi	r4,r4,20332
   1d6a4:	001d75c0 	call	1d75c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   1d6a8:	00800174 	movhi	r2,5
   1d6ac:	1091bf04 	addi	r2,r2,18172
   1d6b0:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   1d6b4:	00800174 	movhi	r2,5
   1d6b8:	1091da04 	addi	r2,r2,18280
   1d6bc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   1d6c0:	e03ffd05 	stb	zero,-12(fp)
   1d6c4:	00001106 	br	1d70c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   1d6c8:	e0bffe17 	ldw	r2,-8(fp)
   1d6cc:	e0ffff17 	ldw	r3,-4(fp)
   1d6d0:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   1d6d4:	e0bffe17 	ldw	r2,-8(fp)
   1d6d8:	00c00fc4 	movi	r3,63
   1d6dc:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   1d6e0:	e0bffe17 	ldw	r2,-8(fp)
   1d6e4:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   1d6e8:	e0bffe17 	ldw	r2,-8(fp)
   1d6ec:	10801b04 	addi	r2,r2,108
   1d6f0:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   1d6f4:	e0bfff17 	ldw	r2,-4(fp)
   1d6f8:	10801b04 	addi	r2,r2,108
   1d6fc:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   1d700:	e0bffd03 	ldbu	r2,-12(fp)
   1d704:	10800044 	addi	r2,r2,1
   1d708:	e0bffd05 	stb	r2,-12(fp)
   1d70c:	e0bffd03 	ldbu	r2,-12(fp)
   1d710:	108004f0 	cmpltui	r2,r2,19
   1d714:	103fec1e 	bne	r2,zero,1d6c8 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   1d718:	e0bffe17 	ldw	r2,-8(fp)
   1d71c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   1d720:	e0bffe17 	ldw	r2,-8(fp)
   1d724:	00c00fc4 	movi	r3,63
   1d728:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   1d72c:	e0bffe17 	ldw	r2,-8(fp)
   1d730:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   1d734:	d027d915 	stw	zero,-24732(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   1d738:	00800174 	movhi	r2,5
   1d73c:	1091bf04 	addi	r2,r2,18172
   1d740:	d0a7dd15 	stw	r2,-24716(gp)
}
   1d744:	0001883a 	nop
   1d748:	e037883a 	mov	sp,fp
   1d74c:	dfc00117 	ldw	ra,4(sp)
   1d750:	df000017 	ldw	fp,0(sp)
   1d754:	dec00204 	addi	sp,sp,8
   1d758:	f800283a 	ret

0001d75c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   1d75c:	defffd04 	addi	sp,sp,-12
   1d760:	df000215 	stw	fp,8(sp)
   1d764:	df000204 	addi	fp,sp,8
   1d768:	e13ffe15 	stw	r4,-8(fp)
   1d76c:	2805883a 	mov	r2,r5
   1d770:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   1d774:	00000706 	br	1d794 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   1d778:	e0bffe17 	ldw	r2,-8(fp)
   1d77c:	10c00044 	addi	r3,r2,1
   1d780:	e0fffe15 	stw	r3,-8(fp)
   1d784:	10000005 	stb	zero,0(r2)
        size--;
   1d788:	e0bfff0b 	ldhu	r2,-4(fp)
   1d78c:	10bfffc4 	addi	r2,r2,-1
   1d790:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   1d794:	e0bfff0b 	ldhu	r2,-4(fp)
   1d798:	103ff71e 	bne	r2,zero,1d778 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   1d79c:	0001883a 	nop
   1d7a0:	e037883a 	mov	sp,fp
   1d7a4:	df000017 	ldw	fp,0(sp)
   1d7a8:	dec00104 	addi	sp,sp,4
   1d7ac:	f800283a 	ret

0001d7b0 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   1d7b0:	defffc04 	addi	sp,sp,-16
   1d7b4:	df000315 	stw	fp,12(sp)
   1d7b8:	df000304 	addi	fp,sp,12
   1d7bc:	e13ffd15 	stw	r4,-12(fp)
   1d7c0:	e17ffe15 	stw	r5,-8(fp)
   1d7c4:	3005883a 	mov	r2,r6
   1d7c8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   1d7cc:	00000b06 	br	1d7fc <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   1d7d0:	e0bffd17 	ldw	r2,-12(fp)
   1d7d4:	10c00044 	addi	r3,r2,1
   1d7d8:	e0fffd15 	stw	r3,-12(fp)
   1d7dc:	e0fffe17 	ldw	r3,-8(fp)
   1d7e0:	19000044 	addi	r4,r3,1
   1d7e4:	e13ffe15 	stw	r4,-8(fp)
   1d7e8:	18c00003 	ldbu	r3,0(r3)
   1d7ec:	10c00005 	stb	r3,0(r2)
        size--;
   1d7f0:	e0bfff0b 	ldhu	r2,-4(fp)
   1d7f4:	10bfffc4 	addi	r2,r2,-1
   1d7f8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   1d7fc:	e0bfff0b 	ldhu	r2,-4(fp)
   1d800:	103ff31e 	bne	r2,zero,1d7d0 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
   1d804:	0001883a 	nop
   1d808:	e037883a 	mov	sp,fp
   1d80c:	df000017 	ldw	fp,0(sp)
   1d810:	dec00104 	addi	sp,sp,4
   1d814:	f800283a 	ret

0001d818 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   1d818:	defffb04 	addi	sp,sp,-20
   1d81c:	dfc00415 	stw	ra,16(sp)
   1d820:	df000315 	stw	fp,12(sp)
   1d824:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1d828:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d82c:	0005303a 	rdctl	r2,status
   1d830:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d834:	e0ffff17 	ldw	r3,-4(fp)
   1d838:	00bfff84 	movi	r2,-2
   1d83c:	1884703a 	and	r2,r3,r2
   1d840:	1001703a 	wrctl	status,r2
  
  return context;
   1d844:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   1d848:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   1d84c:	d0a7e403 	ldbu	r2,-24688(gp)
   1d850:	10803fcc 	andi	r2,r2,255
   1d854:	10001a1e 	bne	r2,zero,1d8c0 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   1d858:	d0a7d603 	ldbu	r2,-24744(gp)
   1d85c:	10803fcc 	andi	r2,r2,255
   1d860:	1000171e 	bne	r2,zero,1d8c0 <OS_Sched+0xa8>
            OS_SchedNew();
   1d864:	001d8e80 	call	1d8e8 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   1d868:	d0e7d803 	ldbu	r3,-24736(gp)
   1d86c:	d0a7d843 	ldbu	r2,-24735(gp)
   1d870:	18c03fcc 	andi	r3,r3,255
   1d874:	10803fcc 	andi	r2,r2,255
   1d878:	18801126 	beq	r3,r2,1d8c0 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   1d87c:	d0a7d803 	ldbu	r2,-24736(gp)
   1d880:	10c03fcc 	andi	r3,r2,255
   1d884:	00800174 	movhi	r2,5
   1d888:	1093db04 	addi	r2,r2,20332
   1d88c:	18c7883a 	add	r3,r3,r3
   1d890:	18c7883a 	add	r3,r3,r3
   1d894:	10c5883a 	add	r2,r2,r3
   1d898:	10800017 	ldw	r2,0(r2)
   1d89c:	d0a7e015 	stw	r2,-24704(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   1d8a0:	d0a7e017 	ldw	r2,-24704(gp)
   1d8a4:	10c00e17 	ldw	r3,56(r2)
   1d8a8:	18c00044 	addi	r3,r3,1
   1d8ac:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   1d8b0:	d0a7db17 	ldw	r2,-24724(gp)
   1d8b4:	10800044 	addi	r2,r2,1
   1d8b8:	d0a7db15 	stw	r2,-24724(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   1d8bc:	0026af00 	call	26af0 <OSCtxSw>
   1d8c0:	e0bffd17 	ldw	r2,-12(fp)
   1d8c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d8c8:	e0bffe17 	ldw	r2,-8(fp)
   1d8cc:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   1d8d0:	0001883a 	nop
   1d8d4:	e037883a 	mov	sp,fp
   1d8d8:	dfc00117 	ldw	ra,4(sp)
   1d8dc:	df000017 	ldw	fp,0(sp)
   1d8e0:	dec00204 	addi	sp,sp,8
   1d8e4:	f800283a 	ret

0001d8e8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   1d8e8:	defffe04 	addi	sp,sp,-8
   1d8ec:	df000115 	stw	fp,4(sp)
   1d8f0:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   1d8f4:	d0a7e203 	ldbu	r2,-24696(gp)
   1d8f8:	10c03fcc 	andi	r3,r2,255
   1d8fc:	008000b4 	movhi	r2,2
   1d900:	109e8e04 	addi	r2,r2,31288
   1d904:	10c5883a 	add	r2,r2,r3
   1d908:	10800003 	ldbu	r2,0(r2)
   1d90c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   1d910:	e0bfff03 	ldbu	r2,-4(fp)
   1d914:	100490fa 	slli	r2,r2,3
   1d918:	1009883a 	mov	r4,r2
   1d91c:	e0ffff03 	ldbu	r3,-4(fp)
   1d920:	d0a7e244 	addi	r2,gp,-24695
   1d924:	1885883a 	add	r2,r3,r2
   1d928:	10800003 	ldbu	r2,0(r2)
   1d92c:	10c03fcc 	andi	r3,r2,255
   1d930:	008000b4 	movhi	r2,2
   1d934:	109e8e04 	addi	r2,r2,31288
   1d938:	10c5883a 	add	r2,r2,r3
   1d93c:	10800003 	ldbu	r2,0(r2)
   1d940:	2085883a 	add	r2,r4,r2
   1d944:	d0a7d805 	stb	r2,-24736(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   1d948:	0001883a 	nop
   1d94c:	e037883a 	mov	sp,fp
   1d950:	df000017 	ldw	fp,0(sp)
   1d954:	dec00104 	addi	sp,sp,4
   1d958:	f800283a 	ret

0001d95c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   1d95c:	defffc04 	addi	sp,sp,-16
   1d960:	df000315 	stw	fp,12(sp)
   1d964:	df000304 	addi	fp,sp,12
   1d968:	e13ffe15 	stw	r4,-8(fp)
   1d96c:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   1d970:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   1d974:	00000b06 	br	1d9a4 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   1d978:	e0bffe17 	ldw	r2,-8(fp)
   1d97c:	10c00044 	addi	r3,r2,1
   1d980:	e0fffe15 	stw	r3,-8(fp)
   1d984:	e0ffff17 	ldw	r3,-4(fp)
   1d988:	19000044 	addi	r4,r3,1
   1d98c:	e13fff15 	stw	r4,-4(fp)
   1d990:	18c00003 	ldbu	r3,0(r3)
   1d994:	10c00005 	stb	r3,0(r2)
        len++;
   1d998:	e0bffd03 	ldbu	r2,-12(fp)
   1d99c:	10800044 	addi	r2,r2,1
   1d9a0:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   1d9a4:	e0bfff17 	ldw	r2,-4(fp)
   1d9a8:	10800003 	ldbu	r2,0(r2)
   1d9ac:	10803fcc 	andi	r2,r2,255
   1d9b0:	103ff11e 	bne	r2,zero,1d978 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   1d9b4:	e0bffe17 	ldw	r2,-8(fp)
   1d9b8:	10000005 	stb	zero,0(r2)
    return (len);
   1d9bc:	e0bffd03 	ldbu	r2,-12(fp)
}
   1d9c0:	e037883a 	mov	sp,fp
   1d9c4:	df000017 	ldw	fp,0(sp)
   1d9c8:	dec00104 	addi	sp,sp,4
   1d9cc:	f800283a 	ret

0001d9d0 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   1d9d0:	defffd04 	addi	sp,sp,-12
   1d9d4:	df000215 	stw	fp,8(sp)
   1d9d8:	df000204 	addi	fp,sp,8
   1d9dc:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   1d9e0:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   1d9e4:	00000606 	br	1da00 <OS_StrLen+0x30>
        psrc++;
   1d9e8:	e0bfff17 	ldw	r2,-4(fp)
   1d9ec:	10800044 	addi	r2,r2,1
   1d9f0:	e0bfff15 	stw	r2,-4(fp)
        len++;
   1d9f4:	e0bffe03 	ldbu	r2,-8(fp)
   1d9f8:	10800044 	addi	r2,r2,1
   1d9fc:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   1da00:	e0bfff17 	ldw	r2,-4(fp)
   1da04:	10800003 	ldbu	r2,0(r2)
   1da08:	10803fcc 	andi	r2,r2,255
   1da0c:	103ff61e 	bne	r2,zero,1d9e8 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
   1da10:	e0bffe03 	ldbu	r2,-8(fp)
}
   1da14:	e037883a 	mov	sp,fp
   1da18:	df000017 	ldw	fp,0(sp)
   1da1c:	dec00104 	addi	sp,sp,4
   1da20:	f800283a 	ret

0001da24 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   1da24:	defffa04 	addi	sp,sp,-24
   1da28:	dfc00515 	stw	ra,20(sp)
   1da2c:	df000415 	stw	fp,16(sp)
   1da30:	df000404 	addi	fp,sp,16
   1da34:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1da38:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1da3c:	0005303a 	rdctl	r2,status
   1da40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1da44:	e0fffd17 	ldw	r3,-12(fp)
   1da48:	00bfff84 	movi	r2,-2
   1da4c:	1884703a 	and	r2,r3,r2
   1da50:	1001703a 	wrctl	status,r2
  
  return context;
   1da54:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   1da58:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   1da5c:	d0a7d717 	ldw	r2,-24740(gp)
   1da60:	10800044 	addi	r2,r2,1
   1da64:	d0a7d715 	stw	r2,-24740(gp)
   1da68:	e0bffc17 	ldw	r2,-16(fp)
   1da6c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1da70:	e0bffe17 	ldw	r2,-8(fp)
   1da74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   1da78:	0026e040 	call	26e04 <OSTaskIdleHook>
    }
   1da7c:	003fef06 	br	1da3c <OS_TaskIdle+0x18>

0001da80 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   1da80:	defff804 	addi	sp,sp,-32
   1da84:	dfc00715 	stw	ra,28(sp)
   1da88:	df000615 	stw	fp,24(sp)
   1da8c:	dc400515 	stw	r17,20(sp)
   1da90:	dc000415 	stw	r16,16(sp)
   1da94:	df000604 	addi	fp,sp,24
   1da98:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1da9c:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   1daa0:	00000206 	br	1daac <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   1daa4:	01000044 	movi	r4,1
   1daa8:	0023c8c0 	call	23c8c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   1daac:	d0a7e803 	ldbu	r2,-24672(gp)
   1dab0:	10803fcc 	andi	r2,r2,255
   1dab4:	103ffb26 	beq	r2,zero,1daa4 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   1dab8:	d0e7dc17 	ldw	r3,-24720(gp)
   1dabc:	00947b34 	movhi	r2,20972
   1dac0:	10a147c4 	addi	r2,r2,-31457
   1dac4:	1888383a 	mulxuu	r4,r3,r2
   1dac8:	1885383a 	mul	r2,r3,r2
   1dacc:	1021883a 	mov	r16,r2
   1dad0:	2023883a 	mov	r17,r4
   1dad4:	8804d17a 	srli	r2,r17,5
   1dad8:	d0a7dc15 	stw	r2,-24720(gp)
    if (OSIdleCtrMax == 0L) {
   1dadc:	d0a7dc17 	ldw	r2,-24720(gp)
   1dae0:	1000031e 	bne	r2,zero,1daf0 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   1dae4:	d027de05 	stb	zero,-24712(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   1dae8:	01003fc4 	movi	r4,255
   1daec:	00239140 	call	23914 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1daf0:	0005303a 	rdctl	r2,status
   1daf4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1daf8:	e0fffb17 	ldw	r3,-20(fp)
   1dafc:	00bfff84 	movi	r2,-2
   1db00:	1884703a 	and	r2,r3,r2
   1db04:	1001703a 	wrctl	status,r2
  
  return context;
   1db08:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   1db0c:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   1db10:	d0a7d717 	ldw	r2,-24740(gp)
   1db14:	d0a7e915 	stw	r2,-24668(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   1db18:	d027d715 	stw	zero,-24740(gp)
   1db1c:	e0bffa17 	ldw	r2,-24(fp)
   1db20:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1db24:	e0bffc17 	ldw	r2,-16(fp)
   1db28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   1db2c:	d0e7e917 	ldw	r3,-24668(gp)
   1db30:	d0a7dc17 	ldw	r2,-24720(gp)
   1db34:	1885203a 	divu	r2,r3,r2
   1db38:	1007883a 	mov	r3,r2
   1db3c:	00801904 	movi	r2,100
   1db40:	10c5c83a 	sub	r2,r2,r3
   1db44:	d0a7de05 	stb	r2,-24712(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   1db48:	0026d840 	call	26d84 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   1db4c:	001db5c0 	call	1db5c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   1db50:	0009883a 	mov	r4,zero
   1db54:	0023c8c0 	call	23c8c <OSTimeDly>
    }
   1db58:	003fe506 	br	1daf0 <OS_TaskStat+0x70>

0001db5c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   1db5c:	defffa04 	addi	sp,sp,-24
   1db60:	dfc00515 	stw	ra,20(sp)
   1db64:	df000415 	stw	fp,16(sp)
   1db68:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   1db6c:	e03ffc05 	stb	zero,-16(fp)
   1db70:	00002406 	br	1dc04 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   1db74:	e0bffc03 	ldbu	r2,-16(fp)
   1db78:	e0fffe04 	addi	r3,fp,-8
   1db7c:	180b883a 	mov	r5,r3
   1db80:	1009883a 	mov	r4,r2
   1db84:	00237540 	call	23754 <OSTaskStkChk>
   1db88:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   1db8c:	e0bffc43 	ldbu	r2,-15(fp)
   1db90:	1000191e 	bne	r2,zero,1dbf8 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   1db94:	e0fffc03 	ldbu	r3,-16(fp)
   1db98:	00800174 	movhi	r2,5
   1db9c:	1093db04 	addi	r2,r2,20332
   1dba0:	18c7883a 	add	r3,r3,r3
   1dba4:	18c7883a 	add	r3,r3,r3
   1dba8:	10c5883a 	add	r2,r2,r3
   1dbac:	10800017 	ldw	r2,0(r2)
   1dbb0:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   1dbb4:	e0bffd17 	ldw	r2,-12(fp)
   1dbb8:	10000f26 	beq	r2,zero,1dbf8 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   1dbbc:	e0bffd17 	ldw	r2,-12(fp)
   1dbc0:	10800060 	cmpeqi	r2,r2,1
   1dbc4:	10000c1e 	bne	r2,zero,1dbf8 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   1dbc8:	e0bffd17 	ldw	r2,-12(fp)
   1dbcc:	10c00217 	ldw	r3,8(r2)
   1dbd0:	e0bffd17 	ldw	r2,-12(fp)
   1dbd4:	10800317 	ldw	r2,12(r2)
   1dbd8:	1085883a 	add	r2,r2,r2
   1dbdc:	1085883a 	add	r2,r2,r2
   1dbe0:	1887883a 	add	r3,r3,r2
   1dbe4:	e0bffd17 	ldw	r2,-12(fp)
   1dbe8:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   1dbec:	e0ffff17 	ldw	r3,-4(fp)
   1dbf0:	e0bffd17 	ldw	r2,-12(fp)
   1dbf4:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   1dbf8:	e0bffc03 	ldbu	r2,-16(fp)
   1dbfc:	10800044 	addi	r2,r2,1
   1dc00:	e0bffc05 	stb	r2,-16(fp)
   1dc04:	e0bffc03 	ldbu	r2,-16(fp)
   1dc08:	10800570 	cmpltui	r2,r2,21
   1dc0c:	103fd91e 	bne	r2,zero,1db74 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
   1dc10:	0001883a 	nop
   1dc14:	e037883a 	mov	sp,fp
   1dc18:	dfc00117 	ldw	ra,4(sp)
   1dc1c:	df000017 	ldw	fp,0(sp)
   1dc20:	dec00204 	addi	sp,sp,8
   1dc24:	f800283a 	ret

0001dc28 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   1dc28:	defff204 	addi	sp,sp,-56
   1dc2c:	dfc00d15 	stw	ra,52(sp)
   1dc30:	df000c15 	stw	fp,48(sp)
   1dc34:	df000c04 	addi	fp,sp,48
   1dc38:	e17ffc15 	stw	r5,-16(fp)
   1dc3c:	e1bffd15 	stw	r6,-12(fp)
   1dc40:	3807883a 	mov	r3,r7
   1dc44:	e0800417 	ldw	r2,16(fp)
   1dc48:	e13ffb05 	stb	r4,-20(fp)
   1dc4c:	e0fffe0d 	sth	r3,-8(fp)
   1dc50:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1dc54:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dc58:	0005303a 	rdctl	r2,status
   1dc5c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dc60:	e0fffa17 	ldw	r3,-24(fp)
   1dc64:	00bfff84 	movi	r2,-2
   1dc68:	1884703a 	and	r2,r3,r2
   1dc6c:	1001703a 	wrctl	status,r2
  
  return context;
   1dc70:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   1dc74:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   1dc78:	d0a7dd17 	ldw	r2,-24716(gp)
   1dc7c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   1dc80:	e0bff617 	ldw	r2,-40(fp)
   1dc84:	10009326 	beq	r2,zero,1ded4 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   1dc88:	e0bff617 	ldw	r2,-40(fp)
   1dc8c:	10800517 	ldw	r2,20(r2)
   1dc90:	d0a7dd15 	stw	r2,-24716(gp)
   1dc94:	e0bff417 	ldw	r2,-48(fp)
   1dc98:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dc9c:	e0bff817 	ldw	r2,-32(fp)
   1dca0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   1dca4:	e0bff617 	ldw	r2,-40(fp)
   1dca8:	e0fffc17 	ldw	r3,-16(fp)
   1dcac:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   1dcb0:	e0bff617 	ldw	r2,-40(fp)
   1dcb4:	e0fffb03 	ldbu	r3,-20(fp)
   1dcb8:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   1dcbc:	e0bff617 	ldw	r2,-40(fp)
   1dcc0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   1dcc4:	e0bff617 	ldw	r2,-40(fp)
   1dcc8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   1dccc:	e0bff617 	ldw	r2,-40(fp)
   1dcd0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   1dcd4:	e0bff617 	ldw	r2,-40(fp)
   1dcd8:	e0c00317 	ldw	r3,12(fp)
   1dcdc:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   1dce0:	e0bff617 	ldw	r2,-40(fp)
   1dce4:	e0c00217 	ldw	r3,8(fp)
   1dce8:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   1dcec:	e0bff617 	ldw	r2,-40(fp)
   1dcf0:	e0fffd17 	ldw	r3,-12(fp)
   1dcf4:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   1dcf8:	e0bff617 	ldw	r2,-40(fp)
   1dcfc:	e0ffff0b 	ldhu	r3,-4(fp)
   1dd00:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   1dd04:	e0bff617 	ldw	r2,-40(fp)
   1dd08:	e0fffe0b 	ldhu	r3,-8(fp)
   1dd0c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   1dd10:	e0bff617 	ldw	r2,-40(fp)
   1dd14:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   1dd18:	e0bffb03 	ldbu	r2,-20(fp)
   1dd1c:	1004d0fa 	srli	r2,r2,3
   1dd20:	1007883a 	mov	r3,r2
   1dd24:	e0bff617 	ldw	r2,-40(fp)
   1dd28:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   1dd2c:	e0bffb03 	ldbu	r2,-20(fp)
   1dd30:	108001cc 	andi	r2,r2,7
   1dd34:	1007883a 	mov	r3,r2
   1dd38:	e0bff617 	ldw	r2,-40(fp)
   1dd3c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   1dd40:	e0bff617 	ldw	r2,-40(fp)
   1dd44:	10800d03 	ldbu	r2,52(r2)
   1dd48:	10803fcc 	andi	r2,r2,255
   1dd4c:	00c00044 	movi	r3,1
   1dd50:	1884983a 	sll	r2,r3,r2
   1dd54:	1007883a 	mov	r3,r2
   1dd58:	e0bff617 	ldw	r2,-40(fp)
   1dd5c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   1dd60:	e0bff617 	ldw	r2,-40(fp)
   1dd64:	10800cc3 	ldbu	r2,51(r2)
   1dd68:	10803fcc 	andi	r2,r2,255
   1dd6c:	00c00044 	movi	r3,1
   1dd70:	1884983a 	sll	r2,r3,r2
   1dd74:	1007883a 	mov	r3,r2
   1dd78:	e0bff617 	ldw	r2,-40(fp)
   1dd7c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   1dd80:	e0bff617 	ldw	r2,-40(fp)
   1dd84:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   1dd88:	e0bff617 	ldw	r2,-40(fp)
   1dd8c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   1dd90:	e0bff617 	ldw	r2,-40(fp)
   1dd94:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   1dd98:	e0bff617 	ldw	r2,-40(fp)
   1dd9c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   1dda0:	e0bff617 	ldw	r2,-40(fp)
   1dda4:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   1dda8:	e0bff617 	ldw	r2,-40(fp)
   1ddac:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   1ddb0:	e0bff617 	ldw	r2,-40(fp)
   1ddb4:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   1ddb8:	e0bff617 	ldw	r2,-40(fp)
   1ddbc:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   1ddc0:	e0bff617 	ldw	r2,-40(fp)
   1ddc4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   1ddc8:	e0bff617 	ldw	r2,-40(fp)
   1ddcc:	00c00fc4 	movi	r3,63
   1ddd0:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1ddd4:	e0bff617 	ldw	r2,-40(fp)
   1ddd8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   1dddc:	e13ff617 	ldw	r4,-40(fp)
   1dde0:	0026e240 	call	26e24 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   1dde4:	e13ff617 	ldw	r4,-40(fp)
   1dde8:	0026d1c0 	call	26d1c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ddec:	0005303a 	rdctl	r2,status
   1ddf0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ddf4:	e0fff517 	ldw	r3,-44(fp)
   1ddf8:	00bfff84 	movi	r2,-2
   1ddfc:	1884703a 	and	r2,r3,r2
   1de00:	1001703a 	wrctl	status,r2
  
  return context;
   1de04:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   1de08:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   1de0c:	e0fffb03 	ldbu	r3,-20(fp)
   1de10:	00800174 	movhi	r2,5
   1de14:	1093db04 	addi	r2,r2,20332
   1de18:	18c7883a 	add	r3,r3,r3
   1de1c:	18c7883a 	add	r3,r3,r3
   1de20:	10c5883a 	add	r2,r2,r3
   1de24:	e0fff617 	ldw	r3,-40(fp)
   1de28:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   1de2c:	d0e7d917 	ldw	r3,-24732(gp)
   1de30:	e0bff617 	ldw	r2,-40(fp)
   1de34:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   1de38:	e0bff617 	ldw	r2,-40(fp)
   1de3c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   1de40:	d0a7d917 	ldw	r2,-24732(gp)
   1de44:	10000326 	beq	r2,zero,1de54 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   1de48:	d0a7d917 	ldw	r2,-24732(gp)
   1de4c:	e0fff617 	ldw	r3,-40(fp)
   1de50:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   1de54:	e0bff617 	ldw	r2,-40(fp)
   1de58:	d0a7d915 	stw	r2,-24732(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   1de5c:	e0bff617 	ldw	r2,-40(fp)
   1de60:	10c00d83 	ldbu	r3,54(r2)
   1de64:	d0a7e203 	ldbu	r2,-24696(gp)
   1de68:	1884b03a 	or	r2,r3,r2
   1de6c:	d0a7e205 	stb	r2,-24696(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1de70:	e0bff617 	ldw	r2,-40(fp)
   1de74:	10800d03 	ldbu	r2,52(r2)
   1de78:	10c03fcc 	andi	r3,r2,255
   1de7c:	e0bff617 	ldw	r2,-40(fp)
   1de80:	10800d03 	ldbu	r2,52(r2)
   1de84:	11003fcc 	andi	r4,r2,255
   1de88:	d0a7e244 	addi	r2,gp,-24695
   1de8c:	2085883a 	add	r2,r4,r2
   1de90:	11000003 	ldbu	r4,0(r2)
   1de94:	e0bff617 	ldw	r2,-40(fp)
   1de98:	10800d43 	ldbu	r2,53(r2)
   1de9c:	2084b03a 	or	r2,r4,r2
   1dea0:	1009883a 	mov	r4,r2
   1dea4:	d0a7e244 	addi	r2,gp,-24695
   1dea8:	1885883a 	add	r2,r3,r2
   1deac:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   1deb0:	d0a7de43 	ldbu	r2,-24711(gp)
   1deb4:	10800044 	addi	r2,r2,1
   1deb8:	d0a7de45 	stb	r2,-24711(gp)
   1debc:	e0bff417 	ldw	r2,-48(fp)
   1dec0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dec4:	e0bff717 	ldw	r2,-36(fp)
   1dec8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1decc:	0005883a 	mov	r2,zero
   1ded0:	00000506 	br	1dee8 <OS_TCBInit+0x2c0>
   1ded4:	e0bff417 	ldw	r2,-48(fp)
   1ded8:	e0bff915 	stw	r2,-28(fp)
   1dedc:	e0bff917 	ldw	r2,-28(fp)
   1dee0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   1dee4:	00801084 	movi	r2,66
}
   1dee8:	e037883a 	mov	sp,fp
   1deec:	dfc00117 	ldw	ra,4(sp)
   1def0:	df000017 	ldw	fp,0(sp)
   1def4:	dec00204 	addi	sp,sp,8
   1def8:	f800283a 	ret

0001defc <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   1defc:	defffe04 	addi	sp,sp,-8
   1df00:	df000115 	stw	fp,4(sp)
   1df04:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   1df08:	d0a01004 	addi	r2,gp,-32704
   1df0c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   1df10:	d0a01104 	addi	r2,gp,-32700
   1df14:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   1df18:	d0a01284 	addi	r2,gp,-32694
   1df1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   1df20:	d0a01304 	addi	r2,gp,-32692
   1df24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   1df28:	d0a01204 	addi	r2,gp,-32696
   1df2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   1df30:	d0a01384 	addi	r2,gp,-32690
   1df34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   1df38:	d0a01404 	addi	r2,gp,-32688
   1df3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   1df40:	d0a01484 	addi	r2,gp,-32686
   1df44:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   1df48:	d0a01504 	addi	r2,gp,-32684
   1df4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   1df50:	d0a01584 	addi	r2,gp,-32682
   1df54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   1df58:	d0a01604 	addi	r2,gp,-32680
   1df5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   1df60:	d0a01684 	addi	r2,gp,-32678
   1df64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   1df68:	d0a01704 	addi	r2,gp,-32676
   1df6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   1df70:	d0a01784 	addi	r2,gp,-32674
   1df74:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   1df78:	d0a01804 	addi	r2,gp,-32672
   1df7c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   1df80:	d0a01884 	addi	r2,gp,-32670
   1df84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   1df88:	d0a01904 	addi	r2,gp,-32668
   1df8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   1df90:	d0a01984 	addi	r2,gp,-32666
   1df94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   1df98:	d0a01a04 	addi	r2,gp,-32664
   1df9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   1dfa0:	d0a01a84 	addi	r2,gp,-32662
   1dfa4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   1dfa8:	d0a01b04 	addi	r2,gp,-32660
   1dfac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   1dfb0:	d0a01b84 	addi	r2,gp,-32658
   1dfb4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   1dfb8:	d0a01c04 	addi	r2,gp,-32656
   1dfbc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   1dfc0:	d0a01c84 	addi	r2,gp,-32654
   1dfc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   1dfc8:	d0a01d04 	addi	r2,gp,-32652
   1dfcc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   1dfd0:	d0a01d84 	addi	r2,gp,-32650
   1dfd4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   1dfd8:	d0a01e04 	addi	r2,gp,-32648
   1dfdc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   1dfe0:	d0a01e84 	addi	r2,gp,-32646
   1dfe4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   1dfe8:	d0a01f04 	addi	r2,gp,-32644
   1dfec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   1dff0:	d0a01f84 	addi	r2,gp,-32642
   1dff4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   1dff8:	d0a02004 	addi	r2,gp,-32640
   1dffc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   1e000:	d0a02084 	addi	r2,gp,-32638
   1e004:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   1e008:	d0a02104 	addi	r2,gp,-32636
   1e00c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   1e010:	d0a02184 	addi	r2,gp,-32634
   1e014:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   1e018:	d0a02204 	addi	r2,gp,-32632
   1e01c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   1e020:	d0a02284 	addi	r2,gp,-32630
   1e024:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   1e028:	d0a02304 	addi	r2,gp,-32628
   1e02c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   1e030:	d0a02384 	addi	r2,gp,-32626
   1e034:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   1e038:	d0a02404 	addi	r2,gp,-32624
   1e03c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   1e040:	d0a02484 	addi	r2,gp,-32622
   1e044:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   1e048:	d0a02504 	addi	r2,gp,-32620
   1e04c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   1e050:	d0a02584 	addi	r2,gp,-32618
   1e054:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   1e058:	d0a02604 	addi	r2,gp,-32616
   1e05c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   1e060:	d0a02684 	addi	r2,gp,-32614
   1e064:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   1e068:	d0a02704 	addi	r2,gp,-32612
   1e06c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   1e070:	d0a02c04 	addi	r2,gp,-32592
   1e074:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   1e078:	0001883a 	nop
   1e07c:	e037883a 	mov	sp,fp
   1e080:	df000017 	ldw	fp,0(sp)
   1e084:	dec00104 	addi	sp,sp,4
   1e088:	f800283a 	ret

0001e08c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   1e08c:	defff204 	addi	sp,sp,-56
   1e090:	df000d15 	stw	fp,52(sp)
   1e094:	df000d04 	addi	fp,sp,52
   1e098:	e13ffc15 	stw	r4,-16(fp)
   1e09c:	2807883a 	mov	r3,r5
   1e0a0:	3005883a 	mov	r2,r6
   1e0a4:	e1ffff15 	stw	r7,-4(fp)
   1e0a8:	e0fffd0d 	sth	r3,-12(fp)
   1e0ac:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1e0b0:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1e0b4:	e0bfff17 	ldw	r2,-4(fp)
   1e0b8:	1000021e 	bne	r2,zero,1e0c4 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   1e0bc:	0005883a 	mov	r2,zero
   1e0c0:	0000b006 	br	1e384 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1e0c4:	e0bffc17 	ldw	r2,-16(fp)
   1e0c8:	1000051e 	bne	r2,zero,1e0e0 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1e0cc:	e0bfff17 	ldw	r2,-4(fp)
   1e0d0:	00c01b84 	movi	r3,110
   1e0d4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1e0d8:	0005883a 	mov	r2,zero
   1e0dc:	0000a906 	br	1e384 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   1e0e0:	e0bffc17 	ldw	r2,-16(fp)
   1e0e4:	10800003 	ldbu	r2,0(r2)
   1e0e8:	10803fcc 	andi	r2,r2,255
   1e0ec:	10800160 	cmpeqi	r2,r2,5
   1e0f0:	1000051e 	bne	r2,zero,1e108 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   1e0f4:	e0bfff17 	ldw	r2,-4(fp)
   1e0f8:	00c00044 	movi	r3,1
   1e0fc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1e100:	0005883a 	mov	r2,zero
   1e104:	00009f06 	br	1e384 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1e108:	e0fffe03 	ldbu	r3,-8(fp)
   1e10c:	00bfe004 	movi	r2,-128
   1e110:	1884703a 	and	r2,r3,r2
   1e114:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   1e118:	e0bff503 	ldbu	r2,-44(fp)
   1e11c:	10000626 	beq	r2,zero,1e138 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   1e120:	e0bffe03 	ldbu	r2,-8(fp)
   1e124:	10801fcc 	andi	r2,r2,127
   1e128:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   1e12c:	00800044 	movi	r2,1
   1e130:	e0bff385 	stb	r2,-50(fp)
   1e134:	00000106 	br	1e13c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   1e138:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   1e13c:	e0bfff17 	ldw	r2,-4(fp)
   1e140:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e144:	0005303a 	rdctl	r2,status
   1e148:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e14c:	e0fffb17 	ldw	r3,-20(fp)
   1e150:	00bfff84 	movi	r2,-2
   1e154:	1884703a 	and	r2,r3,r2
   1e158:	1001703a 	wrctl	status,r2
  
  return context;
   1e15c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1e160:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   1e164:	e0bffe03 	ldbu	r2,-8(fp)
   1e168:	10c00060 	cmpeqi	r3,r2,1
   1e16c:	18005f1e 	bne	r3,zero,1e2ec <OSFlagAccept+0x260>
   1e170:	10c00088 	cmpgei	r3,r2,2
   1e174:	1800021e 	bne	r3,zero,1e180 <OSFlagAccept+0xf4>
   1e178:	10003f26 	beq	r2,zero,1e278 <OSFlagAccept+0x1ec>
   1e17c:	00007706 	br	1e35c <OSFlagAccept+0x2d0>
   1e180:	10c000a0 	cmpeqi	r3,r2,2
   1e184:	1800031e 	bne	r3,zero,1e194 <OSFlagAccept+0x108>
   1e188:	108000e0 	cmpeqi	r2,r2,3
   1e18c:	10001e1e 	bne	r2,zero,1e208 <OSFlagAccept+0x17c>
   1e190:	00007206 	br	1e35c <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1e194:	e0bffc17 	ldw	r2,-16(fp)
   1e198:	10c0020b 	ldhu	r3,8(r2)
   1e19c:	e0bffd0b 	ldhu	r2,-12(fp)
   1e1a0:	1884703a 	and	r2,r3,r2
   1e1a4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1e1a8:	e0fff30b 	ldhu	r3,-52(fp)
   1e1ac:	e0bffd0b 	ldhu	r2,-12(fp)
   1e1b0:	18800d1e 	bne	r3,r2,1e1e8 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1e1b4:	e0bff383 	ldbu	r2,-50(fp)
   1e1b8:	10800058 	cmpnei	r2,r2,1
   1e1bc:	10000d1e 	bne	r2,zero,1e1f4 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   1e1c0:	e0bffc17 	ldw	r2,-16(fp)
   1e1c4:	1080020b 	ldhu	r2,8(r2)
   1e1c8:	1007883a 	mov	r3,r2
   1e1cc:	e0bff30b 	ldhu	r2,-52(fp)
   1e1d0:	0084303a 	nor	r2,zero,r2
   1e1d4:	1884703a 	and	r2,r3,r2
   1e1d8:	1007883a 	mov	r3,r2
   1e1dc:	e0bffc17 	ldw	r2,-16(fp)
   1e1e0:	10c0020d 	sth	r3,8(r2)
   1e1e4:	00000306 	br	1e1f4 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1e1e8:	e0bfff17 	ldw	r2,-4(fp)
   1e1ec:	00c01c04 	movi	r3,112
   1e1f0:	10c00005 	stb	r3,0(r2)
   1e1f4:	e0bff417 	ldw	r2,-48(fp)
   1e1f8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e1fc:	e0bff617 	ldw	r2,-40(fp)
   1e200:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1e204:	00005e06 	br	1e380 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1e208:	e0bffc17 	ldw	r2,-16(fp)
   1e20c:	10c0020b 	ldhu	r3,8(r2)
   1e210:	e0bffd0b 	ldhu	r2,-12(fp)
   1e214:	1884703a 	and	r2,r3,r2
   1e218:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   1e21c:	e0bff30b 	ldhu	r2,-52(fp)
   1e220:	10000d26 	beq	r2,zero,1e258 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1e224:	e0bff383 	ldbu	r2,-50(fp)
   1e228:	10800058 	cmpnei	r2,r2,1
   1e22c:	10000d1e 	bne	r2,zero,1e264 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   1e230:	e0bffc17 	ldw	r2,-16(fp)
   1e234:	1080020b 	ldhu	r2,8(r2)
   1e238:	1007883a 	mov	r3,r2
   1e23c:	e0bff30b 	ldhu	r2,-52(fp)
   1e240:	0084303a 	nor	r2,zero,r2
   1e244:	1884703a 	and	r2,r3,r2
   1e248:	1007883a 	mov	r3,r2
   1e24c:	e0bffc17 	ldw	r2,-16(fp)
   1e250:	10c0020d 	sth	r3,8(r2)
   1e254:	00000306 	br	1e264 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1e258:	e0bfff17 	ldw	r2,-4(fp)
   1e25c:	00c01c04 	movi	r3,112
   1e260:	10c00005 	stb	r3,0(r2)
   1e264:	e0bff417 	ldw	r2,-48(fp)
   1e268:	e0bff715 	stw	r2,-36(fp)
   1e26c:	e0bff717 	ldw	r2,-36(fp)
   1e270:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1e274:	00004206 	br	1e380 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1e278:	e0bffc17 	ldw	r2,-16(fp)
   1e27c:	1080020b 	ldhu	r2,8(r2)
   1e280:	0084303a 	nor	r2,zero,r2
   1e284:	1007883a 	mov	r3,r2
   1e288:	e0bffd0b 	ldhu	r2,-12(fp)
   1e28c:	1884703a 	and	r2,r3,r2
   1e290:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1e294:	e0fff30b 	ldhu	r3,-52(fp)
   1e298:	e0bffd0b 	ldhu	r2,-12(fp)
   1e29c:	18800b1e 	bne	r3,r2,1e2cc <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1e2a0:	e0bff383 	ldbu	r2,-50(fp)
   1e2a4:	10800058 	cmpnei	r2,r2,1
   1e2a8:	10000b1e 	bne	r2,zero,1e2d8 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   1e2ac:	e0bffc17 	ldw	r2,-16(fp)
   1e2b0:	10c0020b 	ldhu	r3,8(r2)
   1e2b4:	e0bff30b 	ldhu	r2,-52(fp)
   1e2b8:	1884b03a 	or	r2,r3,r2
   1e2bc:	1007883a 	mov	r3,r2
   1e2c0:	e0bffc17 	ldw	r2,-16(fp)
   1e2c4:	10c0020d 	sth	r3,8(r2)
   1e2c8:	00000306 	br	1e2d8 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1e2cc:	e0bfff17 	ldw	r2,-4(fp)
   1e2d0:	00c01c04 	movi	r3,112
   1e2d4:	10c00005 	stb	r3,0(r2)
   1e2d8:	e0bff417 	ldw	r2,-48(fp)
   1e2dc:	e0bff815 	stw	r2,-32(fp)
   1e2e0:	e0bff817 	ldw	r2,-32(fp)
   1e2e4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1e2e8:	00002506 	br	1e380 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1e2ec:	e0bffc17 	ldw	r2,-16(fp)
   1e2f0:	1080020b 	ldhu	r2,8(r2)
   1e2f4:	0084303a 	nor	r2,zero,r2
   1e2f8:	1007883a 	mov	r3,r2
   1e2fc:	e0bffd0b 	ldhu	r2,-12(fp)
   1e300:	1884703a 	and	r2,r3,r2
   1e304:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   1e308:	e0bff30b 	ldhu	r2,-52(fp)
   1e30c:	10000b26 	beq	r2,zero,1e33c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1e310:	e0bff383 	ldbu	r2,-50(fp)
   1e314:	10800058 	cmpnei	r2,r2,1
   1e318:	10000b1e 	bne	r2,zero,1e348 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   1e31c:	e0bffc17 	ldw	r2,-16(fp)
   1e320:	10c0020b 	ldhu	r3,8(r2)
   1e324:	e0bff30b 	ldhu	r2,-52(fp)
   1e328:	1884b03a 	or	r2,r3,r2
   1e32c:	1007883a 	mov	r3,r2
   1e330:	e0bffc17 	ldw	r2,-16(fp)
   1e334:	10c0020d 	sth	r3,8(r2)
   1e338:	00000306 	br	1e348 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1e33c:	e0bfff17 	ldw	r2,-4(fp)
   1e340:	00c01c04 	movi	r3,112
   1e344:	10c00005 	stb	r3,0(r2)
   1e348:	e0bff417 	ldw	r2,-48(fp)
   1e34c:	e0bff915 	stw	r2,-28(fp)
   1e350:	e0bff917 	ldw	r2,-28(fp)
   1e354:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1e358:	00000906 	br	1e380 <OSFlagAccept+0x2f4>
   1e35c:	e0bff417 	ldw	r2,-48(fp)
   1e360:	e0bffa15 	stw	r2,-24(fp)
   1e364:	e0bffa17 	ldw	r2,-24(fp)
   1e368:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1e36c:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   1e370:	e0bfff17 	ldw	r2,-4(fp)
   1e374:	00c01bc4 	movi	r3,111
   1e378:	10c00005 	stb	r3,0(r2)
             break;
   1e37c:	0001883a 	nop
    }
    return (flags_rdy);
   1e380:	e0bff30b 	ldhu	r2,-52(fp)
}
   1e384:	e037883a 	mov	sp,fp
   1e388:	df000017 	ldw	fp,0(sp)
   1e38c:	dec00104 	addi	sp,sp,4
   1e390:	f800283a 	ret

0001e394 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   1e394:	defff804 	addi	sp,sp,-32
   1e398:	df000715 	stw	fp,28(sp)
   1e39c:	df000704 	addi	fp,sp,28
   1e3a0:	2005883a 	mov	r2,r4
   1e3a4:	e17fff15 	stw	r5,-4(fp)
   1e3a8:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   1e3ac:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   1e3b0:	e0bfff17 	ldw	r2,-4(fp)
   1e3b4:	1000021e 	bne	r2,zero,1e3c0 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   1e3b8:	0005883a 	mov	r2,zero
   1e3bc:	00003306 	br	1e48c <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   1e3c0:	d0a7e403 	ldbu	r2,-24688(gp)
   1e3c4:	10803fcc 	andi	r2,r2,255
   1e3c8:	10000526 	beq	r2,zero,1e3e0 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   1e3cc:	e0bfff17 	ldw	r2,-4(fp)
   1e3d0:	00c00404 	movi	r3,16
   1e3d4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   1e3d8:	0005883a 	mov	r2,zero
   1e3dc:	00002b06 	br	1e48c <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e3e0:	0005303a 	rdctl	r2,status
   1e3e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e3e8:	e0fffd17 	ldw	r3,-12(fp)
   1e3ec:	00bfff84 	movi	r2,-2
   1e3f0:	1884703a 	and	r2,r3,r2
   1e3f4:	1001703a 	wrctl	status,r2
  
  return context;
   1e3f8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1e3fc:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   1e400:	d0a7e717 	ldw	r2,-24676(gp)
   1e404:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   1e408:	e0bffb17 	ldw	r2,-20(fp)
   1e40c:	10001726 	beq	r2,zero,1e46c <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   1e410:	d0a7e717 	ldw	r2,-24676(gp)
   1e414:	10800117 	ldw	r2,4(r2)
   1e418:	d0a7e715 	stw	r2,-24676(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   1e41c:	e0bffb17 	ldw	r2,-20(fp)
   1e420:	00c00144 	movi	r3,5
   1e424:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   1e428:	e0bffb17 	ldw	r2,-20(fp)
   1e42c:	e0fffe0b 	ldhu	r3,-8(fp)
   1e430:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   1e434:	e0bffb17 	ldw	r2,-20(fp)
   1e438:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   1e43c:	e0bffb17 	ldw	r2,-20(fp)
   1e440:	00c00fc4 	movi	r3,63
   1e444:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1e448:	e0bffb17 	ldw	r2,-20(fp)
   1e44c:	100002c5 	stb	zero,11(r2)
   1e450:	e0bff917 	ldw	r2,-28(fp)
   1e454:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e458:	e0bffa17 	ldw	r2,-24(fp)
   1e45c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   1e460:	e0bfff17 	ldw	r2,-4(fp)
   1e464:	10000005 	stb	zero,0(r2)
   1e468:	00000706 	br	1e488 <OSFlagCreate+0xf4>
   1e46c:	e0bff917 	ldw	r2,-28(fp)
   1e470:	e0bffc15 	stw	r2,-16(fp)
   1e474:	e0bffc17 	ldw	r2,-16(fp)
   1e478:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   1e47c:	e0bfff17 	ldw	r2,-4(fp)
   1e480:	00c01c84 	movi	r3,114
   1e484:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   1e488:	e0bffb17 	ldw	r2,-20(fp)
}
   1e48c:	e037883a 	mov	sp,fp
   1e490:	df000017 	ldw	fp,0(sp)
   1e494:	dec00104 	addi	sp,sp,4
   1e498:	f800283a 	ret

0001e49c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   1e49c:	defff204 	addi	sp,sp,-56
   1e4a0:	dfc00d15 	stw	ra,52(sp)
   1e4a4:	df000c15 	stw	fp,48(sp)
   1e4a8:	df000c04 	addi	fp,sp,48
   1e4ac:	e13ffd15 	stw	r4,-12(fp)
   1e4b0:	2805883a 	mov	r2,r5
   1e4b4:	e1bfff15 	stw	r6,-4(fp)
   1e4b8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1e4bc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1e4c0:	e0bfff17 	ldw	r2,-4(fp)
   1e4c4:	1000021e 	bne	r2,zero,1e4d0 <OSFlagDel+0x34>
        return (pgrp);
   1e4c8:	e0bffd17 	ldw	r2,-12(fp)
   1e4cc:	00008006 	br	1e6d0 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1e4d0:	e0bffd17 	ldw	r2,-12(fp)
   1e4d4:	1000051e 	bne	r2,zero,1e4ec <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1e4d8:	e0bfff17 	ldw	r2,-4(fp)
   1e4dc:	00c01b84 	movi	r3,110
   1e4e0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1e4e4:	e0bffd17 	ldw	r2,-12(fp)
   1e4e8:	00007906 	br	1e6d0 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1e4ec:	d0a7e403 	ldbu	r2,-24688(gp)
   1e4f0:	10803fcc 	andi	r2,r2,255
   1e4f4:	10000526 	beq	r2,zero,1e50c <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1e4f8:	e0bfff17 	ldw	r2,-4(fp)
   1e4fc:	00c003c4 	movi	r3,15
   1e500:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1e504:	e0bffd17 	ldw	r2,-12(fp)
   1e508:	00007106 	br	1e6d0 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   1e50c:	e0bffd17 	ldw	r2,-12(fp)
   1e510:	10800003 	ldbu	r2,0(r2)
   1e514:	10803fcc 	andi	r2,r2,255
   1e518:	10800160 	cmpeqi	r2,r2,5
   1e51c:	1000051e 	bne	r2,zero,1e534 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   1e520:	e0bfff17 	ldw	r2,-4(fp)
   1e524:	00c00044 	movi	r3,1
   1e528:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1e52c:	e0bffd17 	ldw	r2,-12(fp)
   1e530:	00006706 	br	1e6d0 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e534:	0005303a 	rdctl	r2,status
   1e538:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e53c:	e0fffc17 	ldw	r3,-16(fp)
   1e540:	00bfff84 	movi	r2,-2
   1e544:	1884703a 	and	r2,r3,r2
   1e548:	1001703a 	wrctl	status,r2
  
  return context;
   1e54c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1e550:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   1e554:	e0bffd17 	ldw	r2,-12(fp)
   1e558:	10800117 	ldw	r2,4(r2)
   1e55c:	10000326 	beq	r2,zero,1e56c <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1e560:	00800044 	movi	r2,1
   1e564:	e0bff405 	stb	r2,-48(fp)
   1e568:	00000106 	br	1e570 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1e56c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1e570:	e0bffe03 	ldbu	r2,-8(fp)
   1e574:	10000326 	beq	r2,zero,1e584 <OSFlagDel+0xe8>
   1e578:	10800060 	cmpeqi	r2,r2,1
   1e57c:	1000231e 	bne	r2,zero,1e60c <OSFlagDel+0x170>
   1e580:	00004806 	br	1e6a4 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   1e584:	e0bff403 	ldbu	r2,-48(fp)
   1e588:	1000161e 	bne	r2,zero,1e5e4 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   1e58c:	e0bffd17 	ldw	r2,-12(fp)
   1e590:	00c00fc4 	movi	r3,63
   1e594:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1e598:	e0bffd17 	ldw	r2,-12(fp)
   1e59c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1e5a0:	e0bffd17 	ldw	r2,-12(fp)
   1e5a4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   1e5a8:	d0e7e717 	ldw	r3,-24676(gp)
   1e5ac:	e0bffd17 	ldw	r2,-12(fp)
   1e5b0:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1e5b4:	e0bffd17 	ldw	r2,-12(fp)
   1e5b8:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   1e5bc:	e0bffd17 	ldw	r2,-12(fp)
   1e5c0:	d0a7e715 	stw	r2,-24676(gp)
   1e5c4:	e0bff717 	ldw	r2,-36(fp)
   1e5c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e5cc:	e0bff817 	ldw	r2,-32(fp)
   1e5d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   1e5d4:	e0bfff17 	ldw	r2,-4(fp)
   1e5d8:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   1e5dc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   1e5e0:	00003a06 	br	1e6cc <OSFlagDel+0x230>
   1e5e4:	e0bff717 	ldw	r2,-36(fp)
   1e5e8:	e0bff915 	stw	r2,-28(fp)
   1e5ec:	e0bff917 	ldw	r2,-28(fp)
   1e5f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   1e5f4:	e0bfff17 	ldw	r2,-4(fp)
   1e5f8:	00c01244 	movi	r3,73
   1e5fc:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   1e600:	e0bffd17 	ldw	r2,-12(fp)
   1e604:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1e608:	00003006 	br	1e6cc <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1e60c:	e0bffd17 	ldw	r2,-12(fp)
   1e610:	10800117 	ldw	r2,4(r2)
   1e614:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1e618:	00000606 	br	1e634 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   1e61c:	000b883a 	mov	r5,zero
   1e620:	e13ff517 	ldw	r4,-44(fp)
   1e624:	001f6080 	call	1f608 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1e628:	e0bff517 	ldw	r2,-44(fp)
   1e62c:	10800017 	ldw	r2,0(r2)
   1e630:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1e634:	e0bff517 	ldw	r2,-44(fp)
   1e638:	103ff81e 	bne	r2,zero,1e61c <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   1e63c:	e0bffd17 	ldw	r2,-12(fp)
   1e640:	00c00fc4 	movi	r3,63
   1e644:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1e648:	e0bffd17 	ldw	r2,-12(fp)
   1e64c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1e650:	e0bffd17 	ldw	r2,-12(fp)
   1e654:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   1e658:	d0e7e717 	ldw	r3,-24676(gp)
   1e65c:	e0bffd17 	ldw	r2,-12(fp)
   1e660:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1e664:	e0bffd17 	ldw	r2,-12(fp)
   1e668:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   1e66c:	e0bffd17 	ldw	r2,-12(fp)
   1e670:	d0a7e715 	stw	r2,-24676(gp)
   1e674:	e0bff717 	ldw	r2,-36(fp)
   1e678:	e0bffa15 	stw	r2,-24(fp)
   1e67c:	e0bffa17 	ldw	r2,-24(fp)
   1e680:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1e684:	e0bff403 	ldbu	r2,-48(fp)
   1e688:	10800058 	cmpnei	r2,r2,1
   1e68c:	1000011e 	bne	r2,zero,1e694 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1e690:	001d8180 	call	1d818 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   1e694:	e0bfff17 	ldw	r2,-4(fp)
   1e698:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   1e69c:	e03ff615 	stw	zero,-40(fp)
             break;
   1e6a0:	00000a06 	br	1e6cc <OSFlagDel+0x230>
   1e6a4:	e0bff717 	ldw	r2,-36(fp)
   1e6a8:	e0bffb15 	stw	r2,-20(fp)
   1e6ac:	e0bffb17 	ldw	r2,-20(fp)
   1e6b0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   1e6b4:	e0bfff17 	ldw	r2,-4(fp)
   1e6b8:	00c001c4 	movi	r3,7
   1e6bc:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   1e6c0:	e0bffd17 	ldw	r2,-12(fp)
   1e6c4:	e0bff615 	stw	r2,-40(fp)
             break;
   1e6c8:	0001883a 	nop
    }
    return (pgrp_return);
   1e6cc:	e0bff617 	ldw	r2,-40(fp)
}
   1e6d0:	e037883a 	mov	sp,fp
   1e6d4:	dfc00117 	ldw	ra,4(sp)
   1e6d8:	df000017 	ldw	fp,0(sp)
   1e6dc:	dec00204 	addi	sp,sp,8
   1e6e0:	f800283a 	ret

0001e6e4 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1e6e4:	defff604 	addi	sp,sp,-40
   1e6e8:	dfc00915 	stw	ra,36(sp)
   1e6ec:	df000815 	stw	fp,32(sp)
   1e6f0:	df000804 	addi	fp,sp,32
   1e6f4:	e13ffd15 	stw	r4,-12(fp)
   1e6f8:	e17ffe15 	stw	r5,-8(fp)
   1e6fc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1e700:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1e704:	e0bfff17 	ldw	r2,-4(fp)
   1e708:	1000021e 	bne	r2,zero,1e714 <OSFlagNameGet+0x30>
        return (0);
   1e70c:	0005883a 	mov	r2,zero
   1e710:	00003906 	br	1e7f8 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1e714:	e0bffd17 	ldw	r2,-12(fp)
   1e718:	1000051e 	bne	r2,zero,1e730 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1e71c:	e0bfff17 	ldw	r2,-4(fp)
   1e720:	00c01b84 	movi	r3,110
   1e724:	10c00005 	stb	r3,0(r2)
        return (0);
   1e728:	0005883a 	mov	r2,zero
   1e72c:	00003206 	br	1e7f8 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1e730:	e0bffe17 	ldw	r2,-8(fp)
   1e734:	1000051e 	bne	r2,zero,1e74c <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1e738:	e0bfff17 	ldw	r2,-4(fp)
   1e73c:	00c00304 	movi	r3,12
   1e740:	10c00005 	stb	r3,0(r2)
        return (0);
   1e744:	0005883a 	mov	r2,zero
   1e748:	00002b06 	br	1e7f8 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1e74c:	d0a7e403 	ldbu	r2,-24688(gp)
   1e750:	10803fcc 	andi	r2,r2,255
   1e754:	10000526 	beq	r2,zero,1e76c <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   1e758:	e0bfff17 	ldw	r2,-4(fp)
   1e75c:	00c00444 	movi	r3,17
   1e760:	10c00005 	stb	r3,0(r2)
        return (0);
   1e764:	0005883a 	mov	r2,zero
   1e768:	00002306 	br	1e7f8 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e76c:	0005303a 	rdctl	r2,status
   1e770:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e774:	e0fffc17 	ldw	r3,-16(fp)
   1e778:	00bfff84 	movi	r2,-2
   1e77c:	1884703a 	and	r2,r3,r2
   1e780:	1001703a 	wrctl	status,r2
  
  return context;
   1e784:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1e788:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1e78c:	e0bffd17 	ldw	r2,-12(fp)
   1e790:	10800003 	ldbu	r2,0(r2)
   1e794:	10803fcc 	andi	r2,r2,255
   1e798:	10800160 	cmpeqi	r2,r2,5
   1e79c:	1000091e 	bne	r2,zero,1e7c4 <OSFlagNameGet+0xe0>
   1e7a0:	e0bff817 	ldw	r2,-32(fp)
   1e7a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e7a8:	e0bff917 	ldw	r2,-28(fp)
   1e7ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   1e7b0:	e0bfff17 	ldw	r2,-4(fp)
   1e7b4:	00c00044 	movi	r3,1
   1e7b8:	10c00005 	stb	r3,0(r2)
        return (0);
   1e7bc:	0005883a 	mov	r2,zero
   1e7c0:	00000d06 	br	1e7f8 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   1e7c4:	e0bffd17 	ldw	r2,-12(fp)
   1e7c8:	10800284 	addi	r2,r2,10
   1e7cc:	100b883a 	mov	r5,r2
   1e7d0:	e13ffe17 	ldw	r4,-8(fp)
   1e7d4:	001d95c0 	call	1d95c <OS_StrCopy>
   1e7d8:	e0bffb05 	stb	r2,-20(fp)
   1e7dc:	e0bff817 	ldw	r2,-32(fp)
   1e7e0:	e0bffa15 	stw	r2,-24(fp)
   1e7e4:	e0bffa17 	ldw	r2,-24(fp)
   1e7e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1e7ec:	e0bfff17 	ldw	r2,-4(fp)
   1e7f0:	10000005 	stb	zero,0(r2)
    return (len);
   1e7f4:	e0bffb03 	ldbu	r2,-20(fp)
}
   1e7f8:	e037883a 	mov	sp,fp
   1e7fc:	dfc00117 	ldw	ra,4(sp)
   1e800:	df000017 	ldw	fp,0(sp)
   1e804:	dec00204 	addi	sp,sp,8
   1e808:	f800283a 	ret

0001e80c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1e80c:	defff504 	addi	sp,sp,-44
   1e810:	dfc00a15 	stw	ra,40(sp)
   1e814:	df000915 	stw	fp,36(sp)
   1e818:	df000904 	addi	fp,sp,36
   1e81c:	e13ffd15 	stw	r4,-12(fp)
   1e820:	e17ffe15 	stw	r5,-8(fp)
   1e824:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1e828:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1e82c:	e0bfff17 	ldw	r2,-4(fp)
   1e830:	10004326 	beq	r2,zero,1e940 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1e834:	e0bffd17 	ldw	r2,-12(fp)
   1e838:	1000041e 	bne	r2,zero,1e84c <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1e83c:	e0bfff17 	ldw	r2,-4(fp)
   1e840:	00c01b84 	movi	r3,110
   1e844:	10c00005 	stb	r3,0(r2)
        return;
   1e848:	00003e06 	br	1e944 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1e84c:	e0bffe17 	ldw	r2,-8(fp)
   1e850:	1000041e 	bne	r2,zero,1e864 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   1e854:	e0bfff17 	ldw	r2,-4(fp)
   1e858:	00c00304 	movi	r3,12
   1e85c:	10c00005 	stb	r3,0(r2)
        return;
   1e860:	00003806 	br	1e944 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1e864:	d0a7e403 	ldbu	r2,-24688(gp)
   1e868:	10803fcc 	andi	r2,r2,255
   1e86c:	10000426 	beq	r2,zero,1e880 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   1e870:	e0bfff17 	ldw	r2,-4(fp)
   1e874:	00c00484 	movi	r3,18
   1e878:	10c00005 	stb	r3,0(r2)
        return;
   1e87c:	00003106 	br	1e944 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e880:	0005303a 	rdctl	r2,status
   1e884:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e888:	e0fffc17 	ldw	r3,-16(fp)
   1e88c:	00bfff84 	movi	r2,-2
   1e890:	1884703a 	and	r2,r3,r2
   1e894:	1001703a 	wrctl	status,r2
  
  return context;
   1e898:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1e89c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1e8a0:	e0bffd17 	ldw	r2,-12(fp)
   1e8a4:	10800003 	ldbu	r2,0(r2)
   1e8a8:	10803fcc 	andi	r2,r2,255
   1e8ac:	10800160 	cmpeqi	r2,r2,5
   1e8b0:	1000081e 	bne	r2,zero,1e8d4 <OSFlagNameSet+0xc8>
   1e8b4:	e0bff717 	ldw	r2,-36(fp)
   1e8b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e8bc:	e0bff817 	ldw	r2,-32(fp)
   1e8c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   1e8c4:	e0bfff17 	ldw	r2,-4(fp)
   1e8c8:	00c00044 	movi	r3,1
   1e8cc:	10c00005 	stb	r3,0(r2)
        return;
   1e8d0:	00001c06 	br	1e944 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   1e8d4:	e13ffe17 	ldw	r4,-8(fp)
   1e8d8:	001d9d00 	call	1d9d0 <OS_StrLen>
   1e8dc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   1e8e0:	e0bffa03 	ldbu	r2,-24(fp)
   1e8e4:	10800830 	cmpltui	r2,r2,32
   1e8e8:	1000081e 	bne	r2,zero,1e90c <OSFlagNameSet+0x100>
   1e8ec:	e0bff717 	ldw	r2,-36(fp)
   1e8f0:	e0bff915 	stw	r2,-28(fp)
   1e8f4:	e0bff917 	ldw	r2,-28(fp)
   1e8f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   1e8fc:	e0bfff17 	ldw	r2,-4(fp)
   1e900:	00c01cc4 	movi	r3,115
   1e904:	10c00005 	stb	r3,0(r2)
        return;
   1e908:	00000e06 	br	1e944 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   1e90c:	e0bffd17 	ldw	r2,-12(fp)
   1e910:	10800284 	addi	r2,r2,10
   1e914:	e17ffe17 	ldw	r5,-8(fp)
   1e918:	1009883a 	mov	r4,r2
   1e91c:	001d95c0 	call	1d95c <OS_StrCopy>
   1e920:	e0bff717 	ldw	r2,-36(fp)
   1e924:	e0bffb15 	stw	r2,-20(fp)
   1e928:	e0bffb17 	ldw	r2,-20(fp)
   1e92c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1e930:	e0bfff17 	ldw	r2,-4(fp)
   1e934:	10000005 	stb	zero,0(r2)
    return;
   1e938:	0001883a 	nop
   1e93c:	00000106 	br	1e944 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   1e940:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   1e944:	e037883a 	mov	sp,fp
   1e948:	dfc00117 	ldw	ra,4(sp)
   1e94c:	df000017 	ldw	fp,0(sp)
   1e950:	dec00204 	addi	sp,sp,8
   1e954:	f800283a 	ret

0001e958 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   1e958:	deffe104 	addi	sp,sp,-124
   1e95c:	dfc01e15 	stw	ra,120(sp)
   1e960:	df001d15 	stw	fp,116(sp)
   1e964:	df001d04 	addi	fp,sp,116
   1e968:	e13ffc15 	stw	r4,-16(fp)
   1e96c:	2809883a 	mov	r4,r5
   1e970:	3007883a 	mov	r3,r6
   1e974:	3805883a 	mov	r2,r7
   1e978:	e13ffd0d 	sth	r4,-12(fp)
   1e97c:	e0fffe05 	stb	r3,-8(fp)
   1e980:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1e984:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1e988:	e0800217 	ldw	r2,8(fp)
   1e98c:	1000021e 	bne	r2,zero,1e998 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   1e990:	0005883a 	mov	r2,zero
   1e994:	00015906 	br	1eefc <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1e998:	e0bffc17 	ldw	r2,-16(fp)
   1e99c:	1000051e 	bne	r2,zero,1e9b4 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1e9a0:	e0800217 	ldw	r2,8(fp)
   1e9a4:	00c01b84 	movi	r3,110
   1e9a8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1e9ac:	0005883a 	mov	r2,zero
   1e9b0:	00015206 	br	1eefc <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1e9b4:	d0a7e403 	ldbu	r2,-24688(gp)
   1e9b8:	10803fcc 	andi	r2,r2,255
   1e9bc:	10000526 	beq	r2,zero,1e9d4 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   1e9c0:	e0800217 	ldw	r2,8(fp)
   1e9c4:	00c00084 	movi	r3,2
   1e9c8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1e9cc:	0005883a 	mov	r2,zero
   1e9d0:	00014a06 	br	1eefc <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   1e9d4:	d0a7d603 	ldbu	r2,-24744(gp)
   1e9d8:	10803fcc 	andi	r2,r2,255
   1e9dc:	10000526 	beq	r2,zero,1e9f4 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   1e9e0:	e0800217 	ldw	r2,8(fp)
   1e9e4:	00c00344 	movi	r3,13
   1e9e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1e9ec:	0005883a 	mov	r2,zero
   1e9f0:	00014206 	br	1eefc <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   1e9f4:	e0bffc17 	ldw	r2,-16(fp)
   1e9f8:	10800003 	ldbu	r2,0(r2)
   1e9fc:	10803fcc 	andi	r2,r2,255
   1ea00:	10800160 	cmpeqi	r2,r2,5
   1ea04:	1000051e 	bne	r2,zero,1ea1c <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   1ea08:	e0800217 	ldw	r2,8(fp)
   1ea0c:	00c00044 	movi	r3,1
   1ea10:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1ea14:	0005883a 	mov	r2,zero
   1ea18:	00013806 	br	1eefc <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1ea1c:	e0fffe03 	ldbu	r3,-8(fp)
   1ea20:	00bfe004 	movi	r2,-128
   1ea24:	1884703a 	and	r2,r3,r2
   1ea28:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   1ea2c:	e0bfe603 	ldbu	r2,-104(fp)
   1ea30:	10000626 	beq	r2,zero,1ea4c <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   1ea34:	e0bffe03 	ldbu	r2,-8(fp)
   1ea38:	10801fcc 	andi	r2,r2,127
   1ea3c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   1ea40:	00800044 	movi	r2,1
   1ea44:	e0bfe405 	stb	r2,-112(fp)
   1ea48:	00000106 	br	1ea50 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   1ea4c:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ea50:	0005303a 	rdctl	r2,status
   1ea54:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ea58:	e0fff617 	ldw	r3,-40(fp)
   1ea5c:	00bfff84 	movi	r2,-2
   1ea60:	1884703a 	and	r2,r3,r2
   1ea64:	1001703a 	wrctl	status,r2
  
  return context;
   1ea68:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1ea6c:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   1ea70:	e0bffe03 	ldbu	r2,-8(fp)
   1ea74:	10c00060 	cmpeqi	r3,r2,1
   1ea78:	1800921e 	bne	r3,zero,1ecc4 <OSFlagPend+0x36c>
   1ea7c:	10c00088 	cmpgei	r3,r2,2
   1ea80:	1800021e 	bne	r3,zero,1ea8c <OSFlagPend+0x134>
   1ea84:	10006126 	beq	r2,zero,1ec0c <OSFlagPend+0x2b4>
   1ea88:	0000bb06 	br	1ed78 <OSFlagPend+0x420>
   1ea8c:	10c000a0 	cmpeqi	r3,r2,2
   1ea90:	1800031e 	bne	r3,zero,1eaa0 <OSFlagPend+0x148>
   1ea94:	108000e0 	cmpeqi	r2,r2,3
   1ea98:	10002f1e 	bne	r2,zero,1eb58 <OSFlagPend+0x200>
   1ea9c:	0000b606 	br	1ed78 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   1eaa0:	e0bffc17 	ldw	r2,-16(fp)
   1eaa4:	10c0020b 	ldhu	r3,8(r2)
   1eaa8:	e0bffd0b 	ldhu	r2,-12(fp)
   1eaac:	1884703a 	and	r2,r3,r2
   1eab0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1eab4:	e0ffe80b 	ldhu	r3,-96(fp)
   1eab8:	e0bffd0b 	ldhu	r2,-12(fp)
   1eabc:	1880171e 	bne	r3,r2,1eb1c <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1eac0:	e0bfe403 	ldbu	r2,-112(fp)
   1eac4:	10800058 	cmpnei	r2,r2,1
   1eac8:	1000091e 	bne	r2,zero,1eaf0 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   1eacc:	e0bffc17 	ldw	r2,-16(fp)
   1ead0:	1080020b 	ldhu	r2,8(r2)
   1ead4:	1007883a 	mov	r3,r2
   1ead8:	e0bfe80b 	ldhu	r2,-96(fp)
   1eadc:	0084303a 	nor	r2,zero,r2
   1eae0:	1884703a 	and	r2,r3,r2
   1eae4:	1007883a 	mov	r3,r2
   1eae8:	e0bffc17 	ldw	r2,-16(fp)
   1eaec:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1eaf0:	d0a7e517 	ldw	r2,-24684(gp)
   1eaf4:	e0ffe80b 	ldhu	r3,-96(fp)
   1eaf8:	10c00b0d 	sth	r3,44(r2)
   1eafc:	e0bfe517 	ldw	r2,-108(fp)
   1eb00:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1eb04:	e0bfe717 	ldw	r2,-100(fp)
   1eb08:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1eb0c:	e0800217 	ldw	r2,8(fp)
   1eb10:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1eb14:	e0bfe80b 	ldhu	r2,-96(fp)
   1eb18:	0000f806 	br	1eefc <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1eb1c:	e13ffd0b 	ldhu	r4,-12(fp)
   1eb20:	e17ffe03 	ldbu	r5,-8(fp)
   1eb24:	e0bfff0b 	ldhu	r2,-4(fp)
   1eb28:	e0fff704 	addi	r3,fp,-36
   1eb2c:	d8800015 	stw	r2,0(sp)
   1eb30:	280f883a 	mov	r7,r5
   1eb34:	200d883a 	mov	r6,r4
   1eb38:	180b883a 	mov	r5,r3
   1eb3c:	e13ffc17 	ldw	r4,-16(fp)
   1eb40:	001f3c80 	call	1f3c8 <OS_FlagBlock>
   1eb44:	e0bfe517 	ldw	r2,-108(fp)
   1eb48:	e0bfe915 	stw	r2,-92(fp)
   1eb4c:	e0bfe917 	ldw	r2,-92(fp)
   1eb50:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1eb54:	00009206 	br	1eda0 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   1eb58:	e0bffc17 	ldw	r2,-16(fp)
   1eb5c:	10c0020b 	ldhu	r3,8(r2)
   1eb60:	e0bffd0b 	ldhu	r2,-12(fp)
   1eb64:	1884703a 	and	r2,r3,r2
   1eb68:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   1eb6c:	e0bfe80b 	ldhu	r2,-96(fp)
   1eb70:	10001726 	beq	r2,zero,1ebd0 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1eb74:	e0bfe403 	ldbu	r2,-112(fp)
   1eb78:	10800058 	cmpnei	r2,r2,1
   1eb7c:	1000091e 	bne	r2,zero,1eba4 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   1eb80:	e0bffc17 	ldw	r2,-16(fp)
   1eb84:	1080020b 	ldhu	r2,8(r2)
   1eb88:	1007883a 	mov	r3,r2
   1eb8c:	e0bfe80b 	ldhu	r2,-96(fp)
   1eb90:	0084303a 	nor	r2,zero,r2
   1eb94:	1884703a 	and	r2,r3,r2
   1eb98:	1007883a 	mov	r3,r2
   1eb9c:	e0bffc17 	ldw	r2,-16(fp)
   1eba0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1eba4:	d0a7e517 	ldw	r2,-24684(gp)
   1eba8:	e0ffe80b 	ldhu	r3,-96(fp)
   1ebac:	10c00b0d 	sth	r3,44(r2)
   1ebb0:	e0bfe517 	ldw	r2,-108(fp)
   1ebb4:	e0bfea15 	stw	r2,-88(fp)
   1ebb8:	e0bfea17 	ldw	r2,-88(fp)
   1ebbc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1ebc0:	e0800217 	ldw	r2,8(fp)
   1ebc4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1ebc8:	e0bfe80b 	ldhu	r2,-96(fp)
   1ebcc:	0000cb06 	br	1eefc <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1ebd0:	e13ffd0b 	ldhu	r4,-12(fp)
   1ebd4:	e17ffe03 	ldbu	r5,-8(fp)
   1ebd8:	e0bfff0b 	ldhu	r2,-4(fp)
   1ebdc:	e0fff704 	addi	r3,fp,-36
   1ebe0:	d8800015 	stw	r2,0(sp)
   1ebe4:	280f883a 	mov	r7,r5
   1ebe8:	200d883a 	mov	r6,r4
   1ebec:	180b883a 	mov	r5,r3
   1ebf0:	e13ffc17 	ldw	r4,-16(fp)
   1ebf4:	001f3c80 	call	1f3c8 <OS_FlagBlock>
   1ebf8:	e0bfe517 	ldw	r2,-108(fp)
   1ebfc:	e0bfeb15 	stw	r2,-84(fp)
   1ec00:	e0bfeb17 	ldw	r2,-84(fp)
   1ec04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1ec08:	00006506 	br	1eda0 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1ec0c:	e0bffc17 	ldw	r2,-16(fp)
   1ec10:	1080020b 	ldhu	r2,8(r2)
   1ec14:	0084303a 	nor	r2,zero,r2
   1ec18:	1007883a 	mov	r3,r2
   1ec1c:	e0bffd0b 	ldhu	r2,-12(fp)
   1ec20:	1884703a 	and	r2,r3,r2
   1ec24:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1ec28:	e0ffe80b 	ldhu	r3,-96(fp)
   1ec2c:	e0bffd0b 	ldhu	r2,-12(fp)
   1ec30:	1880151e 	bne	r3,r2,1ec88 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1ec34:	e0bfe403 	ldbu	r2,-112(fp)
   1ec38:	10800058 	cmpnei	r2,r2,1
   1ec3c:	1000071e 	bne	r2,zero,1ec5c <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   1ec40:	e0bffc17 	ldw	r2,-16(fp)
   1ec44:	10c0020b 	ldhu	r3,8(r2)
   1ec48:	e0bfe80b 	ldhu	r2,-96(fp)
   1ec4c:	1884b03a 	or	r2,r3,r2
   1ec50:	1007883a 	mov	r3,r2
   1ec54:	e0bffc17 	ldw	r2,-16(fp)
   1ec58:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1ec5c:	d0a7e517 	ldw	r2,-24684(gp)
   1ec60:	e0ffe80b 	ldhu	r3,-96(fp)
   1ec64:	10c00b0d 	sth	r3,44(r2)
   1ec68:	e0bfe517 	ldw	r2,-108(fp)
   1ec6c:	e0bfec15 	stw	r2,-80(fp)
   1ec70:	e0bfec17 	ldw	r2,-80(fp)
   1ec74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1ec78:	e0800217 	ldw	r2,8(fp)
   1ec7c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1ec80:	e0bfe80b 	ldhu	r2,-96(fp)
   1ec84:	00009d06 	br	1eefc <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1ec88:	e13ffd0b 	ldhu	r4,-12(fp)
   1ec8c:	e17ffe03 	ldbu	r5,-8(fp)
   1ec90:	e0bfff0b 	ldhu	r2,-4(fp)
   1ec94:	e0fff704 	addi	r3,fp,-36
   1ec98:	d8800015 	stw	r2,0(sp)
   1ec9c:	280f883a 	mov	r7,r5
   1eca0:	200d883a 	mov	r6,r4
   1eca4:	180b883a 	mov	r5,r3
   1eca8:	e13ffc17 	ldw	r4,-16(fp)
   1ecac:	001f3c80 	call	1f3c8 <OS_FlagBlock>
   1ecb0:	e0bfe517 	ldw	r2,-108(fp)
   1ecb4:	e0bfed15 	stw	r2,-76(fp)
   1ecb8:	e0bfed17 	ldw	r2,-76(fp)
   1ecbc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1ecc0:	00003706 	br	1eda0 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1ecc4:	e0bffc17 	ldw	r2,-16(fp)
   1ecc8:	1080020b 	ldhu	r2,8(r2)
   1eccc:	0084303a 	nor	r2,zero,r2
   1ecd0:	1007883a 	mov	r3,r2
   1ecd4:	e0bffd0b 	ldhu	r2,-12(fp)
   1ecd8:	1884703a 	and	r2,r3,r2
   1ecdc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   1ece0:	e0bfe80b 	ldhu	r2,-96(fp)
   1ece4:	10001526 	beq	r2,zero,1ed3c <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1ece8:	e0bfe403 	ldbu	r2,-112(fp)
   1ecec:	10800058 	cmpnei	r2,r2,1
   1ecf0:	1000071e 	bne	r2,zero,1ed10 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   1ecf4:	e0bffc17 	ldw	r2,-16(fp)
   1ecf8:	10c0020b 	ldhu	r3,8(r2)
   1ecfc:	e0bfe80b 	ldhu	r2,-96(fp)
   1ed00:	1884b03a 	or	r2,r3,r2
   1ed04:	1007883a 	mov	r3,r2
   1ed08:	e0bffc17 	ldw	r2,-16(fp)
   1ed0c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1ed10:	d0a7e517 	ldw	r2,-24684(gp)
   1ed14:	e0ffe80b 	ldhu	r3,-96(fp)
   1ed18:	10c00b0d 	sth	r3,44(r2)
   1ed1c:	e0bfe517 	ldw	r2,-108(fp)
   1ed20:	e0bfee15 	stw	r2,-72(fp)
   1ed24:	e0bfee17 	ldw	r2,-72(fp)
   1ed28:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1ed2c:	e0800217 	ldw	r2,8(fp)
   1ed30:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1ed34:	e0bfe80b 	ldhu	r2,-96(fp)
   1ed38:	00007006 	br	1eefc <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1ed3c:	e13ffd0b 	ldhu	r4,-12(fp)
   1ed40:	e17ffe03 	ldbu	r5,-8(fp)
   1ed44:	e0bfff0b 	ldhu	r2,-4(fp)
   1ed48:	e0fff704 	addi	r3,fp,-36
   1ed4c:	d8800015 	stw	r2,0(sp)
   1ed50:	280f883a 	mov	r7,r5
   1ed54:	200d883a 	mov	r6,r4
   1ed58:	180b883a 	mov	r5,r3
   1ed5c:	e13ffc17 	ldw	r4,-16(fp)
   1ed60:	001f3c80 	call	1f3c8 <OS_FlagBlock>
   1ed64:	e0bfe517 	ldw	r2,-108(fp)
   1ed68:	e0bfef15 	stw	r2,-68(fp)
   1ed6c:	e0bfef17 	ldw	r2,-68(fp)
   1ed70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1ed74:	00000a06 	br	1eda0 <OSFlagPend+0x448>
   1ed78:	e0bfe517 	ldw	r2,-108(fp)
   1ed7c:	e0bff015 	stw	r2,-64(fp)
   1ed80:	e0bff017 	ldw	r2,-64(fp)
   1ed84:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1ed88:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   1ed8c:	e0800217 	ldw	r2,8(fp)
   1ed90:	00c01bc4 	movi	r3,111
   1ed94:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   1ed98:	e0bfe80b 	ldhu	r2,-96(fp)
   1ed9c:	00005706 	br	1eefc <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   1eda0:	001d8180 	call	1d818 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1eda4:	0005303a 	rdctl	r2,status
   1eda8:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1edac:	e0fff117 	ldw	r3,-60(fp)
   1edb0:	00bfff84 	movi	r2,-2
   1edb4:	1884703a 	and	r2,r3,r2
   1edb8:	1001703a 	wrctl	status,r2
  
  return context;
   1edbc:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   1edc0:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   1edc4:	d0a7e517 	ldw	r2,-24684(gp)
   1edc8:	10800c43 	ldbu	r2,49(r2)
   1edcc:	10803fcc 	andi	r2,r2,255
   1edd0:	10001c26 	beq	r2,zero,1ee44 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   1edd4:	d0a7e517 	ldw	r2,-24684(gp)
   1edd8:	10800c43 	ldbu	r2,49(r2)
   1eddc:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1ede0:	d0a7e517 	ldw	r2,-24684(gp)
   1ede4:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   1ede8:	e0bff704 	addi	r2,fp,-36
   1edec:	1009883a 	mov	r4,r2
   1edf0:	001f6fc0 	call	1f6fc <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   1edf4:	d0a7e517 	ldw	r2,-24684(gp)
   1edf8:	10000c05 	stb	zero,48(r2)
   1edfc:	e0bfe517 	ldw	r2,-108(fp)
   1ee00:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ee04:	e0bff217 	ldw	r2,-56(fp)
   1ee08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   1ee0c:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   1ee10:	e0bff303 	ldbu	r2,-52(fp)
   1ee14:	108000a0 	cmpeqi	r2,r2,2
   1ee18:	10000426 	beq	r2,zero,1ee2c <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   1ee1c:	e0800217 	ldw	r2,8(fp)
   1ee20:	00c00384 	movi	r3,14
   1ee24:	10c00005 	stb	r3,0(r2)
                 break;
   1ee28:	00000406 	br	1ee3c <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   1ee2c:	e0800217 	ldw	r2,8(fp)
   1ee30:	00c00284 	movi	r3,10
   1ee34:	10c00005 	stb	r3,0(r2)
                 break;
   1ee38:	0001883a 	nop
        }
        return (flags_rdy);
   1ee3c:	e0bfe80b 	ldhu	r2,-96(fp)
   1ee40:	00002e06 	br	1eefc <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   1ee44:	d0a7e517 	ldw	r2,-24684(gp)
   1ee48:	10800b0b 	ldhu	r2,44(r2)
   1ee4c:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   1ee50:	e0bfe403 	ldbu	r2,-112(fp)
   1ee54:	10800058 	cmpnei	r2,r2,1
   1ee58:	1000211e 	bne	r2,zero,1eee0 <OSFlagPend+0x588>
        switch (wait_type) {
   1ee5c:	e0bffe03 	ldbu	r2,-8(fp)
   1ee60:	10001616 	blt	r2,zero,1eebc <OSFlagPend+0x564>
   1ee64:	10c00090 	cmplti	r3,r2,2
   1ee68:	18000c1e 	bne	r3,zero,1ee9c <OSFlagPend+0x544>
   1ee6c:	10800108 	cmpgei	r2,r2,4
   1ee70:	1000121e 	bne	r2,zero,1eebc <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   1ee74:	e0bffc17 	ldw	r2,-16(fp)
   1ee78:	1080020b 	ldhu	r2,8(r2)
   1ee7c:	1007883a 	mov	r3,r2
   1ee80:	e0bfe80b 	ldhu	r2,-96(fp)
   1ee84:	0084303a 	nor	r2,zero,r2
   1ee88:	1884703a 	and	r2,r3,r2
   1ee8c:	1007883a 	mov	r3,r2
   1ee90:	e0bffc17 	ldw	r2,-16(fp)
   1ee94:	10c0020d 	sth	r3,8(r2)
                 break;
   1ee98:	00001106 	br	1eee0 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   1ee9c:	e0bffc17 	ldw	r2,-16(fp)
   1eea0:	10c0020b 	ldhu	r3,8(r2)
   1eea4:	e0bfe80b 	ldhu	r2,-96(fp)
   1eea8:	1884b03a 	or	r2,r3,r2
   1eeac:	1007883a 	mov	r3,r2
   1eeb0:	e0bffc17 	ldw	r2,-16(fp)
   1eeb4:	10c0020d 	sth	r3,8(r2)
                 break;
   1eeb8:	00000906 	br	1eee0 <OSFlagPend+0x588>
   1eebc:	e0bfe517 	ldw	r2,-108(fp)
   1eec0:	e0bff415 	stw	r2,-48(fp)
   1eec4:	e0bff417 	ldw	r2,-48(fp)
   1eec8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   1eecc:	e0800217 	ldw	r2,8(fp)
   1eed0:	00c01bc4 	movi	r3,111
   1eed4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1eed8:	0005883a 	mov	r2,zero
   1eedc:	00000706 	br	1eefc <OSFlagPend+0x5a4>
   1eee0:	e0bfe517 	ldw	r2,-108(fp)
   1eee4:	e0bff515 	stw	r2,-44(fp)
   1eee8:	e0bff517 	ldw	r2,-44(fp)
   1eeec:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   1eef0:	e0800217 	ldw	r2,8(fp)
   1eef4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   1eef8:	e0bfe80b 	ldhu	r2,-96(fp)
}
   1eefc:	e037883a 	mov	sp,fp
   1ef00:	dfc00117 	ldw	ra,4(sp)
   1ef04:	df000017 	ldw	fp,0(sp)
   1ef08:	dec00204 	addi	sp,sp,8
   1ef0c:	f800283a 	ret

0001ef10 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   1ef10:	defffb04 	addi	sp,sp,-20
   1ef14:	df000415 	stw	fp,16(sp)
   1ef18:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1ef1c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ef20:	0005303a 	rdctl	r2,status
   1ef24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ef28:	e0fffe17 	ldw	r3,-8(fp)
   1ef2c:	00bfff84 	movi	r2,-2
   1ef30:	1884703a 	and	r2,r3,r2
   1ef34:	1001703a 	wrctl	status,r2
  
  return context;
   1ef38:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1ef3c:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   1ef40:	d0a7e517 	ldw	r2,-24684(gp)
   1ef44:	10800b0b 	ldhu	r2,44(r2)
   1ef48:	e0bffd0d 	sth	r2,-12(fp)
   1ef4c:	e0bffc17 	ldw	r2,-16(fp)
   1ef50:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ef54:	e0bfff17 	ldw	r2,-4(fp)
   1ef58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   1ef5c:	e0bffd0b 	ldhu	r2,-12(fp)
}
   1ef60:	e037883a 	mov	sp,fp
   1ef64:	df000017 	ldw	fp,0(sp)
   1ef68:	dec00104 	addi	sp,sp,4
   1ef6c:	f800283a 	ret

0001ef70 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   1ef70:	deffef04 	addi	sp,sp,-68
   1ef74:	dfc01015 	stw	ra,64(sp)
   1ef78:	df000f15 	stw	fp,60(sp)
   1ef7c:	df000f04 	addi	fp,sp,60
   1ef80:	e13ffc15 	stw	r4,-16(fp)
   1ef84:	2807883a 	mov	r3,r5
   1ef88:	3005883a 	mov	r2,r6
   1ef8c:	e1ffff15 	stw	r7,-4(fp)
   1ef90:	e0fffd0d 	sth	r3,-12(fp)
   1ef94:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   1ef98:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1ef9c:	e0bfff17 	ldw	r2,-4(fp)
   1efa0:	1000021e 	bne	r2,zero,1efac <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   1efa4:	0005883a 	mov	r2,zero
   1efa8:	0000d106 	br	1f2f0 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   1efac:	e0bffc17 	ldw	r2,-16(fp)
   1efb0:	1000051e 	bne	r2,zero,1efc8 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1efb4:	e0bfff17 	ldw	r2,-4(fp)
   1efb8:	00c01b84 	movi	r3,110
   1efbc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1efc0:	0005883a 	mov	r2,zero
   1efc4:	0000ca06 	br	1f2f0 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   1efc8:	e0bffc17 	ldw	r2,-16(fp)
   1efcc:	10800003 	ldbu	r2,0(r2)
   1efd0:	10803fcc 	andi	r2,r2,255
   1efd4:	10800160 	cmpeqi	r2,r2,5
   1efd8:	1000051e 	bne	r2,zero,1eff0 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   1efdc:	e0bfff17 	ldw	r2,-4(fp)
   1efe0:	00c00044 	movi	r3,1
   1efe4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1efe8:	0005883a 	mov	r2,zero
   1efec:	0000c006 	br	1f2f0 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1eff0:	0005303a 	rdctl	r2,status
   1eff4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1eff8:	e0fffb17 	ldw	r3,-20(fp)
   1effc:	00bfff84 	movi	r2,-2
   1f000:	1884703a 	and	r2,r3,r2
   1f004:	1001703a 	wrctl	status,r2
  
  return context;
   1f008:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1f00c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   1f010:	e0bffe03 	ldbu	r2,-8(fp)
   1f014:	10000326 	beq	r2,zero,1f024 <OSFlagPost+0xb4>
   1f018:	10800060 	cmpeqi	r2,r2,1
   1f01c:	10000b1e 	bne	r2,zero,1f04c <OSFlagPost+0xdc>
   1f020:	00001206 	br	1f06c <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   1f024:	e0bffc17 	ldw	r2,-16(fp)
   1f028:	1080020b 	ldhu	r2,8(r2)
   1f02c:	1007883a 	mov	r3,r2
   1f030:	e0bffd0b 	ldhu	r2,-12(fp)
   1f034:	0084303a 	nor	r2,zero,r2
   1f038:	1884703a 	and	r2,r3,r2
   1f03c:	1007883a 	mov	r3,r2
   1f040:	e0bffc17 	ldw	r2,-16(fp)
   1f044:	10c0020d 	sth	r3,8(r2)
             break;
   1f048:	00001106 	br	1f090 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   1f04c:	e0bffc17 	ldw	r2,-16(fp)
   1f050:	10c0020b 	ldhu	r3,8(r2)
   1f054:	e0bffd0b 	ldhu	r2,-12(fp)
   1f058:	1884b03a 	or	r2,r3,r2
   1f05c:	1007883a 	mov	r3,r2
   1f060:	e0bffc17 	ldw	r2,-16(fp)
   1f064:	10c0020d 	sth	r3,8(r2)
             break;
   1f068:	00000906 	br	1f090 <OSFlagPost+0x120>
   1f06c:	e0bff317 	ldw	r2,-52(fp)
   1f070:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f074:	e0bff417 	ldw	r2,-48(fp)
   1f078:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   1f07c:	e0bfff17 	ldw	r2,-4(fp)
   1f080:	00c01c44 	movi	r3,113
   1f084:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   1f088:	0005883a 	mov	r2,zero
   1f08c:	00009806 	br	1f2f0 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   1f090:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1f094:	e0bffc17 	ldw	r2,-16(fp)
   1f098:	10800117 	ldw	r2,4(r2)
   1f09c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   1f0a0:	00007706 	br	1f280 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   1f0a4:	e0bff117 	ldw	r2,-60(fp)
   1f0a8:	10800483 	ldbu	r2,18(r2)
   1f0ac:	10803fcc 	andi	r2,r2,255
   1f0b0:	10c00060 	cmpeqi	r3,r2,1
   1f0b4:	18004a1e 	bne	r3,zero,1f1e0 <OSFlagPost+0x270>
   1f0b8:	10c00088 	cmpgei	r3,r2,2
   1f0bc:	1800021e 	bne	r3,zero,1f0c8 <OSFlagPost+0x158>
   1f0c0:	10002f26 	beq	r2,zero,1f180 <OSFlagPost+0x210>
   1f0c4:	00005b06 	br	1f234 <OSFlagPost+0x2c4>
   1f0c8:	10c000a0 	cmpeqi	r3,r2,2
   1f0cc:	1800031e 	bne	r3,zero,1f0dc <OSFlagPost+0x16c>
   1f0d0:	108000e0 	cmpeqi	r2,r2,3
   1f0d4:	1000171e 	bne	r2,zero,1f134 <OSFlagPost+0x1c4>
   1f0d8:	00005606 	br	1f234 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1f0dc:	e0bffc17 	ldw	r2,-16(fp)
   1f0e0:	10c0020b 	ldhu	r3,8(r2)
   1f0e4:	e0bff117 	ldw	r2,-60(fp)
   1f0e8:	1080040b 	ldhu	r2,16(r2)
   1f0ec:	1884703a 	and	r2,r3,r2
   1f0f0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   1f0f4:	e0bff117 	ldw	r2,-60(fp)
   1f0f8:	1080040b 	ldhu	r2,16(r2)
   1f0fc:	10ffffcc 	andi	r3,r2,65535
   1f100:	e0bff60b 	ldhu	r2,-40(fp)
   1f104:	1880541e 	bne	r3,r2,1f258 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1f108:	e0bff60b 	ldhu	r2,-40(fp)
   1f10c:	100b883a 	mov	r5,r2
   1f110:	e13ff117 	ldw	r4,-60(fp)
   1f114:	001f6080 	call	1f608 <OS_FlagTaskRdy>
   1f118:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1f11c:	e0bff683 	ldbu	r2,-38(fp)
   1f120:	10800058 	cmpnei	r2,r2,1
   1f124:	10004c1e 	bne	r2,zero,1f258 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1f128:	00800044 	movi	r2,1
   1f12c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1f130:	00004906 	br	1f258 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1f134:	e0bffc17 	ldw	r2,-16(fp)
   1f138:	10c0020b 	ldhu	r3,8(r2)
   1f13c:	e0bff117 	ldw	r2,-60(fp)
   1f140:	1080040b 	ldhu	r2,16(r2)
   1f144:	1884703a 	and	r2,r3,r2
   1f148:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1f14c:	e0bff60b 	ldhu	r2,-40(fp)
   1f150:	10004326 	beq	r2,zero,1f260 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1f154:	e0bff60b 	ldhu	r2,-40(fp)
   1f158:	100b883a 	mov	r5,r2
   1f15c:	e13ff117 	ldw	r4,-60(fp)
   1f160:	001f6080 	call	1f608 <OS_FlagTaskRdy>
   1f164:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1f168:	e0bff683 	ldbu	r2,-38(fp)
   1f16c:	10800058 	cmpnei	r2,r2,1
   1f170:	10003b1e 	bne	r2,zero,1f260 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1f174:	00800044 	movi	r2,1
   1f178:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1f17c:	00003806 	br	1f260 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1f180:	e0bffc17 	ldw	r2,-16(fp)
   1f184:	1080020b 	ldhu	r2,8(r2)
   1f188:	0084303a 	nor	r2,zero,r2
   1f18c:	1007883a 	mov	r3,r2
   1f190:	e0bff117 	ldw	r2,-60(fp)
   1f194:	1080040b 	ldhu	r2,16(r2)
   1f198:	1884703a 	and	r2,r3,r2
   1f19c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   1f1a0:	e0bff117 	ldw	r2,-60(fp)
   1f1a4:	1080040b 	ldhu	r2,16(r2)
   1f1a8:	10ffffcc 	andi	r3,r2,65535
   1f1ac:	e0bff60b 	ldhu	r2,-40(fp)
   1f1b0:	18802d1e 	bne	r3,r2,1f268 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1f1b4:	e0bff60b 	ldhu	r2,-40(fp)
   1f1b8:	100b883a 	mov	r5,r2
   1f1bc:	e13ff117 	ldw	r4,-60(fp)
   1f1c0:	001f6080 	call	1f608 <OS_FlagTaskRdy>
   1f1c4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1f1c8:	e0bff683 	ldbu	r2,-38(fp)
   1f1cc:	10800058 	cmpnei	r2,r2,1
   1f1d0:	1000251e 	bne	r2,zero,1f268 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1f1d4:	00800044 	movi	r2,1
   1f1d8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1f1dc:	00002206 	br	1f268 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1f1e0:	e0bffc17 	ldw	r2,-16(fp)
   1f1e4:	1080020b 	ldhu	r2,8(r2)
   1f1e8:	0084303a 	nor	r2,zero,r2
   1f1ec:	1007883a 	mov	r3,r2
   1f1f0:	e0bff117 	ldw	r2,-60(fp)
   1f1f4:	1080040b 	ldhu	r2,16(r2)
   1f1f8:	1884703a 	and	r2,r3,r2
   1f1fc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1f200:	e0bff60b 	ldhu	r2,-40(fp)
   1f204:	10001a26 	beq	r2,zero,1f270 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1f208:	e0bff60b 	ldhu	r2,-40(fp)
   1f20c:	100b883a 	mov	r5,r2
   1f210:	e13ff117 	ldw	r4,-60(fp)
   1f214:	001f6080 	call	1f608 <OS_FlagTaskRdy>
   1f218:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1f21c:	e0bff683 	ldbu	r2,-38(fp)
   1f220:	10800058 	cmpnei	r2,r2,1
   1f224:	1000121e 	bne	r2,zero,1f270 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1f228:	00800044 	movi	r2,1
   1f22c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1f230:	00000f06 	br	1f270 <OSFlagPost+0x300>
   1f234:	e0bff317 	ldw	r2,-52(fp)
   1f238:	e0bff515 	stw	r2,-44(fp)
   1f23c:	e0bff517 	ldw	r2,-44(fp)
   1f240:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   1f244:	e0bfff17 	ldw	r2,-4(fp)
   1f248:	00c01bc4 	movi	r3,111
   1f24c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1f250:	0005883a 	mov	r2,zero
   1f254:	00002606 	br	1f2f0 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1f258:	0001883a 	nop
   1f25c:	00000506 	br	1f274 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1f260:	0001883a 	nop
   1f264:	00000306 	br	1f274 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1f268:	0001883a 	nop
   1f26c:	00000106 	br	1f274 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1f270:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   1f274:	e0bff117 	ldw	r2,-60(fp)
   1f278:	10800017 	ldw	r2,0(r2)
   1f27c:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   1f280:	e0bff117 	ldw	r2,-60(fp)
   1f284:	103f871e 	bne	r2,zero,1f0a4 <OSFlagPost+0x134>
   1f288:	e0bff317 	ldw	r2,-52(fp)
   1f28c:	e0bff715 	stw	r2,-36(fp)
   1f290:	e0bff717 	ldw	r2,-36(fp)
   1f294:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   1f298:	e0bff203 	ldbu	r2,-56(fp)
   1f29c:	10800058 	cmpnei	r2,r2,1
   1f2a0:	1000011e 	bne	r2,zero,1f2a8 <OSFlagPost+0x338>
        OS_Sched();
   1f2a4:	001d8180 	call	1d818 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f2a8:	0005303a 	rdctl	r2,status
   1f2ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f2b0:	e0fffa17 	ldw	r3,-24(fp)
   1f2b4:	00bfff84 	movi	r2,-2
   1f2b8:	1884703a 	and	r2,r3,r2
   1f2bc:	1001703a 	wrctl	status,r2
  
  return context;
   1f2c0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1f2c4:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   1f2c8:	e0bffc17 	ldw	r2,-16(fp)
   1f2cc:	1080020b 	ldhu	r2,8(r2)
   1f2d0:	e0bff90d 	sth	r2,-28(fp)
   1f2d4:	e0bff317 	ldw	r2,-52(fp)
   1f2d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f2dc:	e0bff817 	ldw	r2,-32(fp)
   1f2e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   1f2e4:	e0bfff17 	ldw	r2,-4(fp)
   1f2e8:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   1f2ec:	e0bff90b 	ldhu	r2,-28(fp)
}
   1f2f0:	e037883a 	mov	sp,fp
   1f2f4:	dfc00117 	ldw	ra,4(sp)
   1f2f8:	df000017 	ldw	fp,0(sp)
   1f2fc:	dec00204 	addi	sp,sp,8
   1f300:	f800283a 	ret

0001f304 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   1f304:	defff904 	addi	sp,sp,-28
   1f308:	df000615 	stw	fp,24(sp)
   1f30c:	df000604 	addi	fp,sp,24
   1f310:	e13ffe15 	stw	r4,-8(fp)
   1f314:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   1f318:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   1f31c:	e0bfff17 	ldw	r2,-4(fp)
   1f320:	1000021e 	bne	r2,zero,1f32c <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   1f324:	0005883a 	mov	r2,zero
   1f328:	00002306 	br	1f3b8 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   1f32c:	e0bffe17 	ldw	r2,-8(fp)
   1f330:	1000051e 	bne	r2,zero,1f348 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1f334:	e0bfff17 	ldw	r2,-4(fp)
   1f338:	00c01b84 	movi	r3,110
   1f33c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1f340:	0005883a 	mov	r2,zero
   1f344:	00001c06 	br	1f3b8 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   1f348:	e0bffe17 	ldw	r2,-8(fp)
   1f34c:	10800003 	ldbu	r2,0(r2)
   1f350:	10803fcc 	andi	r2,r2,255
   1f354:	10800160 	cmpeqi	r2,r2,5
   1f358:	1000051e 	bne	r2,zero,1f370 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1f35c:	e0bfff17 	ldw	r2,-4(fp)
   1f360:	00c00044 	movi	r3,1
   1f364:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1f368:	0005883a 	mov	r2,zero
   1f36c:	00001206 	br	1f3b8 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f370:	0005303a 	rdctl	r2,status
   1f374:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f378:	e0fffc17 	ldw	r3,-16(fp)
   1f37c:	00bfff84 	movi	r2,-2
   1f380:	1884703a 	and	r2,r3,r2
   1f384:	1001703a 	wrctl	status,r2
  
  return context;
   1f388:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1f38c:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   1f390:	e0bffe17 	ldw	r2,-8(fp)
   1f394:	1080020b 	ldhu	r2,8(r2)
   1f398:	e0bffb0d 	sth	r2,-20(fp)
   1f39c:	e0bffa17 	ldw	r2,-24(fp)
   1f3a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f3a4:	e0bffd17 	ldw	r2,-12(fp)
   1f3a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1f3ac:	e0bfff17 	ldw	r2,-4(fp)
   1f3b0:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   1f3b4:	e0bffb0b 	ldhu	r2,-20(fp)
}
   1f3b8:	e037883a 	mov	sp,fp
   1f3bc:	df000017 	ldw	fp,0(sp)
   1f3c0:	dec00104 	addi	sp,sp,4
   1f3c4:	f800283a 	ret

0001f3c8 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   1f3c8:	defff804 	addi	sp,sp,-32
   1f3cc:	df000715 	stw	fp,28(sp)
   1f3d0:	df000704 	addi	fp,sp,28
   1f3d4:	e13ffb15 	stw	r4,-20(fp)
   1f3d8:	e17ffc15 	stw	r5,-16(fp)
   1f3dc:	3009883a 	mov	r4,r6
   1f3e0:	3807883a 	mov	r3,r7
   1f3e4:	e0800117 	ldw	r2,4(fp)
   1f3e8:	e13ffd0d 	sth	r4,-12(fp)
   1f3ec:	e0fffe05 	stb	r3,-8(fp)
   1f3f0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   1f3f4:	d0a7e517 	ldw	r2,-24684(gp)
   1f3f8:	d0e7e517 	ldw	r3,-24684(gp)
   1f3fc:	18c00c03 	ldbu	r3,48(r3)
   1f400:	18c00814 	ori	r3,r3,32
   1f404:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   1f408:	d0a7e517 	ldw	r2,-24684(gp)
   1f40c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   1f410:	d0a7e517 	ldw	r2,-24684(gp)
   1f414:	e0ffff0b 	ldhu	r3,-4(fp)
   1f418:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   1f41c:	d0a7e517 	ldw	r2,-24684(gp)
   1f420:	e0fffc17 	ldw	r3,-16(fp)
   1f424:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   1f428:	e0bffc17 	ldw	r2,-16(fp)
   1f42c:	e0fffd0b 	ldhu	r3,-12(fp)
   1f430:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   1f434:	e0bffc17 	ldw	r2,-16(fp)
   1f438:	e0fffe03 	ldbu	r3,-8(fp)
   1f43c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   1f440:	d0e7e517 	ldw	r3,-24684(gp)
   1f444:	e0bffc17 	ldw	r2,-16(fp)
   1f448:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   1f44c:	e0bffb17 	ldw	r2,-20(fp)
   1f450:	10c00117 	ldw	r3,4(r2)
   1f454:	e0bffc17 	ldw	r2,-16(fp)
   1f458:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   1f45c:	e0bffc17 	ldw	r2,-16(fp)
   1f460:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   1f464:	e0bffc17 	ldw	r2,-16(fp)
   1f468:	e0fffb17 	ldw	r3,-20(fp)
   1f46c:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1f470:	e0bffb17 	ldw	r2,-20(fp)
   1f474:	10800117 	ldw	r2,4(r2)
   1f478:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   1f47c:	e0bff917 	ldw	r2,-28(fp)
   1f480:	10000326 	beq	r2,zero,1f490 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   1f484:	e0bff917 	ldw	r2,-28(fp)
   1f488:	e0fffc17 	ldw	r3,-16(fp)
   1f48c:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   1f490:	e0bffb17 	ldw	r2,-20(fp)
   1f494:	e0fffc17 	ldw	r3,-16(fp)
   1f498:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   1f49c:	d0a7e517 	ldw	r2,-24684(gp)
   1f4a0:	10800d03 	ldbu	r2,52(r2)
   1f4a4:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1f4a8:	e0fffa03 	ldbu	r3,-24(fp)
   1f4ac:	e13ffa03 	ldbu	r4,-24(fp)
   1f4b0:	d0a7e244 	addi	r2,gp,-24695
   1f4b4:	2085883a 	add	r2,r4,r2
   1f4b8:	10800003 	ldbu	r2,0(r2)
   1f4bc:	1009883a 	mov	r4,r2
   1f4c0:	d0a7e517 	ldw	r2,-24684(gp)
   1f4c4:	10800d43 	ldbu	r2,53(r2)
   1f4c8:	0084303a 	nor	r2,zero,r2
   1f4cc:	2084703a 	and	r2,r4,r2
   1f4d0:	1009883a 	mov	r4,r2
   1f4d4:	d0a7e244 	addi	r2,gp,-24695
   1f4d8:	1885883a 	add	r2,r3,r2
   1f4dc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   1f4e0:	e0fffa03 	ldbu	r3,-24(fp)
   1f4e4:	d0a7e244 	addi	r2,gp,-24695
   1f4e8:	1885883a 	add	r2,r3,r2
   1f4ec:	10800003 	ldbu	r2,0(r2)
   1f4f0:	10803fcc 	andi	r2,r2,255
   1f4f4:	1000071e 	bne	r2,zero,1f514 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1f4f8:	d0a7e517 	ldw	r2,-24684(gp)
   1f4fc:	10800d83 	ldbu	r2,54(r2)
   1f500:	0084303a 	nor	r2,zero,r2
   1f504:	1007883a 	mov	r3,r2
   1f508:	d0a7e203 	ldbu	r2,-24696(gp)
   1f50c:	1884703a 	and	r2,r3,r2
   1f510:	d0a7e205 	stb	r2,-24696(gp)
    }
}
   1f514:	0001883a 	nop
   1f518:	e037883a 	mov	sp,fp
   1f51c:	df000017 	ldw	fp,0(sp)
   1f520:	dec00104 	addi	sp,sp,4
   1f524:	f800283a 	ret

0001f528 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   1f528:	defffb04 	addi	sp,sp,-20
   1f52c:	dfc00415 	stw	ra,16(sp)
   1f530:	df000315 	stw	fp,12(sp)
   1f534:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   1f538:	0140dc04 	movi	r5,880
   1f53c:	01000174 	movhi	r4,5
   1f540:	21068f04 	addi	r4,r4,6716
   1f544:	001d75c0 	call	1d75c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   1f548:	00800174 	movhi	r2,5
   1f54c:	10868f04 	addi	r2,r2,6716
   1f550:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   1f554:	00800174 	movhi	r2,5
   1f558:	10869a04 	addi	r2,r2,6760
   1f55c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   1f560:	e03ffd0d 	sth	zero,-12(fp)
   1f564:	00001306 	br	1f5b4 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1f568:	e0bffe17 	ldw	r2,-8(fp)
   1f56c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   1f570:	e0bffe17 	ldw	r2,-8(fp)
   1f574:	e0ffff17 	ldw	r3,-4(fp)
   1f578:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   1f57c:	e0bffe17 	ldw	r2,-8(fp)
   1f580:	00c00fc4 	movi	r3,63
   1f584:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   1f588:	e0bffe17 	ldw	r2,-8(fp)
   1f58c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   1f590:	e0bffe17 	ldw	r2,-8(fp)
   1f594:	10800b04 	addi	r2,r2,44
   1f598:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   1f59c:	e0bfff17 	ldw	r2,-4(fp)
   1f5a0:	10800b04 	addi	r2,r2,44
   1f5a4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   1f5a8:	e0bffd0b 	ldhu	r2,-12(fp)
   1f5ac:	10800044 	addi	r2,r2,1
   1f5b0:	e0bffd0d 	sth	r2,-12(fp)
   1f5b4:	e0bffd0b 	ldhu	r2,-12(fp)
   1f5b8:	108004f0 	cmpltui	r2,r2,19
   1f5bc:	103fea1e 	bne	r2,zero,1f568 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1f5c0:	e0bffe17 	ldw	r2,-8(fp)
   1f5c4:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   1f5c8:	e0bffe17 	ldw	r2,-8(fp)
   1f5cc:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   1f5d0:	e0bffe17 	ldw	r2,-8(fp)
   1f5d4:	00c00fc4 	movi	r3,63
   1f5d8:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   1f5dc:	e0bffe17 	ldw	r2,-8(fp)
   1f5e0:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   1f5e4:	00800174 	movhi	r2,5
   1f5e8:	10868f04 	addi	r2,r2,6716
   1f5ec:	d0a7e715 	stw	r2,-24676(gp)
#endif
}
   1f5f0:	0001883a 	nop
   1f5f4:	e037883a 	mov	sp,fp
   1f5f8:	dfc00117 	ldw	ra,4(sp)
   1f5fc:	df000017 	ldw	fp,0(sp)
   1f600:	dec00204 	addi	sp,sp,8
   1f604:	f800283a 	ret

0001f608 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   1f608:	defffa04 	addi	sp,sp,-24
   1f60c:	dfc00515 	stw	ra,20(sp)
   1f610:	df000415 	stw	fp,16(sp)
   1f614:	df000404 	addi	fp,sp,16
   1f618:	e13ffe15 	stw	r4,-8(fp)
   1f61c:	2805883a 	mov	r2,r5
   1f620:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   1f624:	e0bffe17 	ldw	r2,-8(fp)
   1f628:	10800217 	ldw	r2,8(r2)
   1f62c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   1f630:	e0bffd17 	ldw	r2,-12(fp)
   1f634:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   1f638:	e0bffd17 	ldw	r2,-12(fp)
   1f63c:	e0ffff0b 	ldhu	r3,-4(fp)
   1f640:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   1f644:	e0bffd17 	ldw	r2,-12(fp)
   1f648:	10c00c03 	ldbu	r3,48(r2)
   1f64c:	00bff7c4 	movi	r2,-33
   1f650:	1884703a 	and	r2,r3,r2
   1f654:	1007883a 	mov	r3,r2
   1f658:	e0bffd17 	ldw	r2,-12(fp)
   1f65c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   1f660:	e0bffd17 	ldw	r2,-12(fp)
   1f664:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   1f668:	e0bffd17 	ldw	r2,-12(fp)
   1f66c:	10800c03 	ldbu	r2,48(r2)
   1f670:	10803fcc 	andi	r2,r2,255
   1f674:	1000181e 	bne	r2,zero,1f6d8 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   1f678:	e0bffd17 	ldw	r2,-12(fp)
   1f67c:	10c00d83 	ldbu	r3,54(r2)
   1f680:	d0a7e203 	ldbu	r2,-24696(gp)
   1f684:	1884b03a 	or	r2,r3,r2
   1f688:	d0a7e205 	stb	r2,-24696(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1f68c:	e0bffd17 	ldw	r2,-12(fp)
   1f690:	10800d03 	ldbu	r2,52(r2)
   1f694:	10c03fcc 	andi	r3,r2,255
   1f698:	e0bffd17 	ldw	r2,-12(fp)
   1f69c:	10800d03 	ldbu	r2,52(r2)
   1f6a0:	11003fcc 	andi	r4,r2,255
   1f6a4:	d0a7e244 	addi	r2,gp,-24695
   1f6a8:	2085883a 	add	r2,r4,r2
   1f6ac:	11000003 	ldbu	r4,0(r2)
   1f6b0:	e0bffd17 	ldw	r2,-12(fp)
   1f6b4:	10800d43 	ldbu	r2,53(r2)
   1f6b8:	2084b03a 	or	r2,r4,r2
   1f6bc:	1009883a 	mov	r4,r2
   1f6c0:	d0a7e244 	addi	r2,gp,-24695
   1f6c4:	1885883a 	add	r2,r3,r2
   1f6c8:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   1f6cc:	00800044 	movi	r2,1
   1f6d0:	e0bffc05 	stb	r2,-16(fp)
   1f6d4:	00000106 	br	1f6dc <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   1f6d8:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   1f6dc:	e13ffe17 	ldw	r4,-8(fp)
   1f6e0:	001f6fc0 	call	1f6fc <OS_FlagUnlink>
    return (sched);
   1f6e4:	e0bffc03 	ldbu	r2,-16(fp)
}
   1f6e8:	e037883a 	mov	sp,fp
   1f6ec:	dfc00117 	ldw	ra,4(sp)
   1f6f0:	df000017 	ldw	fp,0(sp)
   1f6f4:	dec00204 	addi	sp,sp,8
   1f6f8:	f800283a 	ret

0001f6fc <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   1f6fc:	defffa04 	addi	sp,sp,-24
   1f700:	df000515 	stw	fp,20(sp)
   1f704:	df000504 	addi	fp,sp,20
   1f708:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   1f70c:	e0bfff17 	ldw	r2,-4(fp)
   1f710:	10800117 	ldw	r2,4(r2)
   1f714:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1f718:	e0bfff17 	ldw	r2,-4(fp)
   1f71c:	10800017 	ldw	r2,0(r2)
   1f720:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   1f724:	e0bffb17 	ldw	r2,-20(fp)
   1f728:	10000b1e 	bne	r2,zero,1f758 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   1f72c:	e0bfff17 	ldw	r2,-4(fp)
   1f730:	10800317 	ldw	r2,12(r2)
   1f734:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   1f738:	e0bffd17 	ldw	r2,-12(fp)
   1f73c:	e0fffc17 	ldw	r3,-16(fp)
   1f740:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   1f744:	e0bffc17 	ldw	r2,-16(fp)
   1f748:	10000b26 	beq	r2,zero,1f778 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   1f74c:	e0bffc17 	ldw	r2,-16(fp)
   1f750:	10000115 	stw	zero,4(r2)
   1f754:	00000806 	br	1f778 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   1f758:	e0bffb17 	ldw	r2,-20(fp)
   1f75c:	e0fffc17 	ldw	r3,-16(fp)
   1f760:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   1f764:	e0bffc17 	ldw	r2,-16(fp)
   1f768:	10000326 	beq	r2,zero,1f778 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   1f76c:	e0bffc17 	ldw	r2,-16(fp)
   1f770:	e0fffb17 	ldw	r3,-20(fp)
   1f774:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   1f778:	e0bfff17 	ldw	r2,-4(fp)
   1f77c:	10800217 	ldw	r2,8(r2)
   1f780:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   1f784:	e0bffe17 	ldw	r2,-8(fp)
   1f788:	10000a15 	stw	zero,40(r2)
#endif
}
   1f78c:	0001883a 	nop
   1f790:	e037883a 	mov	sp,fp
   1f794:	df000017 	ldw	fp,0(sp)
   1f798:	dec00104 	addi	sp,sp,4
   1f79c:	f800283a 	ret

0001f7a0 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
   1f7a0:	defffa04 	addi	sp,sp,-24
   1f7a4:	df000515 	stw	fp,20(sp)
   1f7a8:	df000504 	addi	fp,sp,20
   1f7ac:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
   1f7b0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
   1f7b4:	e0bfff17 	ldw	r2,-4(fp)
   1f7b8:	1000021e 	bne	r2,zero,1f7c4 <OSMboxAccept+0x24>
        return ((void *)0);
   1f7bc:	0005883a 	mov	r2,zero
   1f7c0:	00001906 	br	1f828 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   1f7c4:	e0bfff17 	ldw	r2,-4(fp)
   1f7c8:	10800003 	ldbu	r2,0(r2)
   1f7cc:	10803fcc 	andi	r2,r2,255
   1f7d0:	10800060 	cmpeqi	r2,r2,1
   1f7d4:	1000021e 	bne	r2,zero,1f7e0 <OSMboxAccept+0x40>
        return ((void *)0);
   1f7d8:	0005883a 	mov	r2,zero
   1f7dc:	00001206 	br	1f828 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f7e0:	0005303a 	rdctl	r2,status
   1f7e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f7e8:	e0fffd17 	ldw	r3,-12(fp)
   1f7ec:	00bfff84 	movi	r2,-2
   1f7f0:	1884703a 	and	r2,r3,r2
   1f7f4:	1001703a 	wrctl	status,r2
  
  return context;
   1f7f8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1f7fc:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
   1f800:	e0bfff17 	ldw	r2,-4(fp)
   1f804:	10800117 	ldw	r2,4(r2)
   1f808:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   1f80c:	e0bfff17 	ldw	r2,-4(fp)
   1f810:	10000115 	stw	zero,4(r2)
   1f814:	e0bffb17 	ldw	r2,-20(fp)
   1f818:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f81c:	e0bffe17 	ldw	r2,-8(fp)
   1f820:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
   1f824:	e0bffc17 	ldw	r2,-16(fp)
}
   1f828:	e037883a 	mov	sp,fp
   1f82c:	df000017 	ldw	fp,0(sp)
   1f830:	dec00104 	addi	sp,sp,4
   1f834:	f800283a 	ret

0001f838 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
   1f838:	defff904 	addi	sp,sp,-28
   1f83c:	dfc00615 	stw	ra,24(sp)
   1f840:	df000515 	stw	fp,20(sp)
   1f844:	df000504 	addi	fp,sp,20
   1f848:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1f84c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   1f850:	d0a7e403 	ldbu	r2,-24688(gp)
   1f854:	10803fcc 	andi	r2,r2,255
   1f858:	10000226 	beq	r2,zero,1f864 <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   1f85c:	0005883a 	mov	r2,zero
   1f860:	00002506 	br	1f8f8 <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f864:	0005303a 	rdctl	r2,status
   1f868:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f86c:	e0fffe17 	ldw	r3,-8(fp)
   1f870:	00bfff84 	movi	r2,-2
   1f874:	1884703a 	and	r2,r3,r2
   1f878:	1001703a 	wrctl	status,r2
  
  return context;
   1f87c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1f880:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   1f884:	d0a7e317 	ldw	r2,-24692(gp)
   1f888:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   1f88c:	d0a7e317 	ldw	r2,-24692(gp)
   1f890:	10000326 	beq	r2,zero,1f8a0 <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1f894:	d0a7e317 	ldw	r2,-24692(gp)
   1f898:	10800117 	ldw	r2,4(r2)
   1f89c:	d0a7e315 	stw	r2,-24692(gp)
   1f8a0:	e0bffb17 	ldw	r2,-20(fp)
   1f8a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f8a8:	e0bffc17 	ldw	r2,-16(fp)
   1f8ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
   1f8b0:	e0bffd17 	ldw	r2,-12(fp)
   1f8b4:	10000f26 	beq	r2,zero,1f8f4 <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   1f8b8:	e0bffd17 	ldw	r2,-12(fp)
   1f8bc:	00c00044 	movi	r3,1
   1f8c0:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
   1f8c4:	e0bffd17 	ldw	r2,-12(fp)
   1f8c8:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   1f8cc:	e0bffd17 	ldw	r2,-12(fp)
   1f8d0:	e0ffff17 	ldw	r3,-4(fp)
   1f8d4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
   1f8d8:	e0bffd17 	ldw	r2,-12(fp)
   1f8dc:	00c00fc4 	movi	r3,63
   1f8e0:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   1f8e4:	e0bffd17 	ldw	r2,-12(fp)
   1f8e8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
   1f8ec:	e13ffd17 	ldw	r4,-12(fp)
   1f8f0:	001d37c0 	call	1d37c <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
   1f8f4:	e0bffd17 	ldw	r2,-12(fp)
}
   1f8f8:	e037883a 	mov	sp,fp
   1f8fc:	dfc00117 	ldw	ra,4(sp)
   1f900:	df000017 	ldw	fp,0(sp)
   1f904:	dec00204 	addi	sp,sp,8
   1f908:	f800283a 	ret

0001f90c <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1f90c:	defff304 	addi	sp,sp,-52
   1f910:	dfc00c15 	stw	ra,48(sp)
   1f914:	df000b15 	stw	fp,44(sp)
   1f918:	df000b04 	addi	fp,sp,44
   1f91c:	e13ffd15 	stw	r4,-12(fp)
   1f920:	2805883a 	mov	r2,r5
   1f924:	e1bfff15 	stw	r6,-4(fp)
   1f928:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1f92c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1f930:	e0bfff17 	ldw	r2,-4(fp)
   1f934:	1000021e 	bne	r2,zero,1f940 <OSMboxDel+0x34>
        return (pevent);
   1f938:	e0bffd17 	ldw	r2,-12(fp)
   1f93c:	00007e06 	br	1fb38 <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1f940:	e0bffd17 	ldw	r2,-12(fp)
   1f944:	1000051e 	bne	r2,zero,1f95c <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1f948:	e0bfff17 	ldw	r2,-4(fp)
   1f94c:	00c00104 	movi	r3,4
   1f950:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1f954:	e0bffd17 	ldw	r2,-12(fp)
   1f958:	00007706 	br	1fb38 <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   1f95c:	e0bffd17 	ldw	r2,-12(fp)
   1f960:	10800003 	ldbu	r2,0(r2)
   1f964:	10803fcc 	andi	r2,r2,255
   1f968:	10800060 	cmpeqi	r2,r2,1
   1f96c:	1000051e 	bne	r2,zero,1f984 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1f970:	e0bfff17 	ldw	r2,-4(fp)
   1f974:	00c00044 	movi	r3,1
   1f978:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1f97c:	e0bffd17 	ldw	r2,-12(fp)
   1f980:	00006d06 	br	1fb38 <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1f984:	d0a7e403 	ldbu	r2,-24688(gp)
   1f988:	10803fcc 	andi	r2,r2,255
   1f98c:	10000526 	beq	r2,zero,1f9a4 <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1f990:	e0bfff17 	ldw	r2,-4(fp)
   1f994:	00c003c4 	movi	r3,15
   1f998:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1f99c:	e0bffd17 	ldw	r2,-12(fp)
   1f9a0:	00006506 	br	1fb38 <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f9a4:	0005303a 	rdctl	r2,status
   1f9a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f9ac:	e0fffc17 	ldw	r3,-16(fp)
   1f9b0:	00bfff84 	movi	r2,-2
   1f9b4:	1884703a 	and	r2,r3,r2
   1f9b8:	1001703a 	wrctl	status,r2
  
  return context;
   1f9bc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1f9c0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   1f9c4:	e0bffd17 	ldw	r2,-12(fp)
   1f9c8:	10800283 	ldbu	r2,10(r2)
   1f9cc:	10803fcc 	andi	r2,r2,255
   1f9d0:	10000326 	beq	r2,zero,1f9e0 <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1f9d4:	00800044 	movi	r2,1
   1f9d8:	e0bff505 	stb	r2,-44(fp)
   1f9dc:	00000106 	br	1f9e4 <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1f9e0:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   1f9e4:	e0bffe03 	ldbu	r2,-8(fp)
   1f9e8:	10000326 	beq	r2,zero,1f9f8 <OSMboxDel+0xec>
   1f9ec:	10800060 	cmpeqi	r2,r2,1
   1f9f0:	1000281e 	bne	r2,zero,1fa94 <OSMboxDel+0x188>
   1f9f4:	00004506 	br	1fb0c <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
   1f9f8:	e0bff503 	ldbu	r2,-44(fp)
   1f9fc:	1000161e 	bne	r2,zero,1fa58 <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1fa00:	e0bffd17 	ldw	r2,-12(fp)
   1fa04:	00c00fc4 	movi	r3,63
   1fa08:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   1fa0c:	e0bffd17 	ldw	r2,-12(fp)
   1fa10:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   1fa14:	e0bffd17 	ldw	r2,-12(fp)
   1fa18:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   1fa1c:	d0e7e317 	ldw	r3,-24692(gp)
   1fa20:	e0bffd17 	ldw	r2,-12(fp)
   1fa24:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   1fa28:	e0bffd17 	ldw	r2,-12(fp)
   1fa2c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
   1fa30:	e0bffd17 	ldw	r2,-12(fp)
   1fa34:	d0a7e315 	stw	r2,-24692(gp)
   1fa38:	e0bff717 	ldw	r2,-36(fp)
   1fa3c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fa40:	e0bff817 	ldw	r2,-32(fp)
   1fa44:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   1fa48:	e0bfff17 	ldw	r2,-4(fp)
   1fa4c:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   1fa50:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
   1fa54:	00003706 	br	1fb34 <OSMboxDel+0x228>
   1fa58:	e0bff717 	ldw	r2,-36(fp)
   1fa5c:	e0bff915 	stw	r2,-28(fp)
   1fa60:	e0bff917 	ldw	r2,-28(fp)
   1fa64:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   1fa68:	e0bfff17 	ldw	r2,-4(fp)
   1fa6c:	00c01244 	movi	r3,73
   1fa70:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
   1fa74:	e0bffd17 	ldw	r2,-12(fp)
   1fa78:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1fa7c:	00002d06 	br	1fb34 <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   1fa80:	000f883a 	mov	r7,zero
   1fa84:	01800084 	movi	r6,2
   1fa88:	000b883a 	mov	r5,zero
   1fa8c:	e13ffd17 	ldw	r4,-12(fp)
   1fa90:	001cdcc0 	call	1cdcc <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
   1fa94:	e0bffd17 	ldw	r2,-12(fp)
   1fa98:	10800283 	ldbu	r2,10(r2)
   1fa9c:	10803fcc 	andi	r2,r2,255
   1faa0:	103ff71e 	bne	r2,zero,1fa80 <OSMboxDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1faa4:	e0bffd17 	ldw	r2,-12(fp)
   1faa8:	00c00fc4 	movi	r3,63
   1faac:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   1fab0:	e0bffd17 	ldw	r2,-12(fp)
   1fab4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1fab8:	e0bffd17 	ldw	r2,-12(fp)
   1fabc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1fac0:	d0e7e317 	ldw	r3,-24692(gp)
   1fac4:	e0bffd17 	ldw	r2,-12(fp)
   1fac8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1facc:	e0bffd17 	ldw	r2,-12(fp)
   1fad0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1fad4:	e0bffd17 	ldw	r2,-12(fp)
   1fad8:	d0a7e315 	stw	r2,-24692(gp)
   1fadc:	e0bff717 	ldw	r2,-36(fp)
   1fae0:	e0bffa15 	stw	r2,-24(fp)
   1fae4:	e0bffa17 	ldw	r2,-24(fp)
   1fae8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1faec:	e0bff503 	ldbu	r2,-44(fp)
   1faf0:	10800058 	cmpnei	r2,r2,1
   1faf4:	1000011e 	bne	r2,zero,1fafc <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1faf8:	001d8180 	call	1d818 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   1fafc:	e0bfff17 	ldw	r2,-4(fp)
   1fb00:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   1fb04:	e03ff615 	stw	zero,-40(fp)
             break;
   1fb08:	00000a06 	br	1fb34 <OSMboxDel+0x228>
   1fb0c:	e0bff717 	ldw	r2,-36(fp)
   1fb10:	e0bffb15 	stw	r2,-20(fp)
   1fb14:	e0bffb17 	ldw	r2,-20(fp)
   1fb18:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   1fb1c:	e0bfff17 	ldw	r2,-4(fp)
   1fb20:	00c001c4 	movi	r3,7
   1fb24:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
   1fb28:	e0bffd17 	ldw	r2,-12(fp)
   1fb2c:	e0bff615 	stw	r2,-40(fp)
             break;
   1fb30:	0001883a 	nop
    }
    return (pevent_return);
   1fb34:	e0bff617 	ldw	r2,-40(fp)
}
   1fb38:	e037883a 	mov	sp,fp
   1fb3c:	dfc00117 	ldw	ra,4(sp)
   1fb40:	df000017 	ldw	fp,0(sp)
   1fb44:	dec00204 	addi	sp,sp,8
   1fb48:	f800283a 	ret

0001fb4c <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1fb4c:	defff404 	addi	sp,sp,-48
   1fb50:	dfc00b15 	stw	ra,44(sp)
   1fb54:	df000a15 	stw	fp,40(sp)
   1fb58:	df000a04 	addi	fp,sp,40
   1fb5c:	e13ffd15 	stw	r4,-12(fp)
   1fb60:	2805883a 	mov	r2,r5
   1fb64:	e1bfff15 	stw	r6,-4(fp)
   1fb68:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1fb6c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1fb70:	e0bfff17 	ldw	r2,-4(fp)
   1fb74:	1000021e 	bne	r2,zero,1fb80 <OSMboxPend+0x34>
        return ((void *)0);
   1fb78:	0005883a 	mov	r2,zero
   1fb7c:	00007b06 	br	1fd6c <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1fb80:	e0bffd17 	ldw	r2,-12(fp)
   1fb84:	1000051e 	bne	r2,zero,1fb9c <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1fb88:	e0bfff17 	ldw	r2,-4(fp)
   1fb8c:	00c00104 	movi	r3,4
   1fb90:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1fb94:	0005883a 	mov	r2,zero
   1fb98:	00007406 	br	1fd6c <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   1fb9c:	e0bffd17 	ldw	r2,-12(fp)
   1fba0:	10800003 	ldbu	r2,0(r2)
   1fba4:	10803fcc 	andi	r2,r2,255
   1fba8:	10800060 	cmpeqi	r2,r2,1
   1fbac:	1000051e 	bne	r2,zero,1fbc4 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1fbb0:	e0bfff17 	ldw	r2,-4(fp)
   1fbb4:	00c00044 	movi	r3,1
   1fbb8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1fbbc:	0005883a 	mov	r2,zero
   1fbc0:	00006a06 	br	1fd6c <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   1fbc4:	d0a7e403 	ldbu	r2,-24688(gp)
   1fbc8:	10803fcc 	andi	r2,r2,255
   1fbcc:	10000526 	beq	r2,zero,1fbe4 <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   1fbd0:	e0bfff17 	ldw	r2,-4(fp)
   1fbd4:	00c00084 	movi	r3,2
   1fbd8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1fbdc:	0005883a 	mov	r2,zero
   1fbe0:	00006206 	br	1fd6c <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   1fbe4:	d0a7d603 	ldbu	r2,-24744(gp)
   1fbe8:	10803fcc 	andi	r2,r2,255
   1fbec:	10000526 	beq	r2,zero,1fc04 <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   1fbf0:	e0bfff17 	ldw	r2,-4(fp)
   1fbf4:	00c00344 	movi	r3,13
   1fbf8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1fbfc:	0005883a 	mov	r2,zero
   1fc00:	00005a06 	br	1fd6c <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fc04:	0005303a 	rdctl	r2,status
   1fc08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fc0c:	e0fffc17 	ldw	r3,-16(fp)
   1fc10:	00bfff84 	movi	r2,-2
   1fc14:	1884703a 	and	r2,r3,r2
   1fc18:	1001703a 	wrctl	status,r2
  
  return context;
   1fc1c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1fc20:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
   1fc24:	e0bffd17 	ldw	r2,-12(fp)
   1fc28:	10800117 	ldw	r2,4(r2)
   1fc2c:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
   1fc30:	e0bff617 	ldw	r2,-40(fp)
   1fc34:	10000a26 	beq	r2,zero,1fc60 <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   1fc38:	e0bffd17 	ldw	r2,-12(fp)
   1fc3c:	10000115 	stw	zero,4(r2)
   1fc40:	e0bff717 	ldw	r2,-36(fp)
   1fc44:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fc48:	e0bff817 	ldw	r2,-32(fp)
   1fc4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1fc50:	e0bfff17 	ldw	r2,-4(fp)
   1fc54:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
   1fc58:	e0bff617 	ldw	r2,-40(fp)
   1fc5c:	00004306 	br	1fd6c <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   1fc60:	d0a7e517 	ldw	r2,-24684(gp)
   1fc64:	d0e7e517 	ldw	r3,-24684(gp)
   1fc68:	18c00c03 	ldbu	r3,48(r3)
   1fc6c:	18c00094 	ori	r3,r3,2
   1fc70:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1fc74:	d0a7e517 	ldw	r2,-24684(gp)
   1fc78:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   1fc7c:	d0a7e517 	ldw	r2,-24684(gp)
   1fc80:	e0fffe0b 	ldhu	r3,-8(fp)
   1fc84:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   1fc88:	e13ffd17 	ldw	r4,-12(fp)
   1fc8c:	001cf640 	call	1cf64 <OS_EventTaskWait>
   1fc90:	e0bff717 	ldw	r2,-36(fp)
   1fc94:	e0bffb15 	stw	r2,-20(fp)
   1fc98:	e0bffb17 	ldw	r2,-20(fp)
   1fc9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
   1fca0:	001d8180 	call	1d818 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fca4:	0005303a 	rdctl	r2,status
   1fca8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fcac:	e0fff917 	ldw	r3,-28(fp)
   1fcb0:	00bfff84 	movi	r2,-2
   1fcb4:	1884703a 	and	r2,r3,r2
   1fcb8:	1001703a 	wrctl	status,r2
  
  return context;
   1fcbc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1fcc0:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1fcc4:	d0a7e517 	ldw	r2,-24684(gp)
   1fcc8:	10800c43 	ldbu	r2,49(r2)
   1fccc:	10803fcc 	andi	r2,r2,255
   1fcd0:	10000326 	beq	r2,zero,1fce0 <OSMboxPend+0x194>
   1fcd4:	108000a0 	cmpeqi	r2,r2,2
   1fcd8:	1000071e 	bne	r2,zero,1fcf8 <OSMboxPend+0x1ac>
   1fcdc:	00000b06 	br	1fd0c <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
   1fce0:	d0a7e517 	ldw	r2,-24684(gp)
   1fce4:	10800917 	ldw	r2,36(r2)
   1fce8:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
   1fcec:	e0bfff17 	ldw	r2,-4(fp)
   1fcf0:	10000005 	stb	zero,0(r2)
             break;
   1fcf4:	00000e06 	br	1fd30 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   1fcf8:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1fcfc:	e0bfff17 	ldw	r2,-4(fp)
   1fd00:	00c00384 	movi	r3,14
   1fd04:	10c00005 	stb	r3,0(r2)
             break;
   1fd08:	00000906 	br	1fd30 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   1fd0c:	d0a7e517 	ldw	r2,-24684(gp)
   1fd10:	e17ffd17 	ldw	r5,-12(fp)
   1fd14:	1009883a 	mov	r4,r2
   1fd18:	001d1c40 	call	1d1c4 <OS_EventTaskRemove>
             pmsg = (void *)0;
   1fd1c:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1fd20:	e0bfff17 	ldw	r2,-4(fp)
   1fd24:	00c00284 	movi	r3,10
   1fd28:	10c00005 	stb	r3,0(r2)
             break;
   1fd2c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1fd30:	d0a7e517 	ldw	r2,-24684(gp)
   1fd34:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1fd38:	d0a7e517 	ldw	r2,-24684(gp)
   1fd3c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1fd40:	d0a7e517 	ldw	r2,-24684(gp)
   1fd44:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1fd48:	d0a7e517 	ldw	r2,-24684(gp)
   1fd4c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   1fd50:	d0a7e517 	ldw	r2,-24684(gp)
   1fd54:	10000915 	stw	zero,36(r2)
   1fd58:	e0bff717 	ldw	r2,-36(fp)
   1fd5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fd60:	e0bffa17 	ldw	r2,-24(fp)
   1fd64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   1fd68:	e0bff617 	ldw	r2,-40(fp)
}
   1fd6c:	e037883a 	mov	sp,fp
   1fd70:	dfc00117 	ldw	ra,4(sp)
   1fd74:	df000017 	ldw	fp,0(sp)
   1fd78:	dec00204 	addi	sp,sp,8
   1fd7c:	f800283a 	ret

0001fd80 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1fd80:	defff604 	addi	sp,sp,-40
   1fd84:	dfc00915 	stw	ra,36(sp)
   1fd88:	df000815 	stw	fp,32(sp)
   1fd8c:	df000804 	addi	fp,sp,32
   1fd90:	e13ffd15 	stw	r4,-12(fp)
   1fd94:	2805883a 	mov	r2,r5
   1fd98:	e1bfff15 	stw	r6,-4(fp)
   1fd9c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1fda0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1fda4:	e0bfff17 	ldw	r2,-4(fp)
   1fda8:	1000021e 	bne	r2,zero,1fdb4 <OSMboxPendAbort+0x34>
        return (0);
   1fdac:	0005883a 	mov	r2,zero
   1fdb0:	00004906 	br	1fed8 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1fdb4:	e0bffd17 	ldw	r2,-12(fp)
   1fdb8:	1000051e 	bne	r2,zero,1fdd0 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1fdbc:	e0bfff17 	ldw	r2,-4(fp)
   1fdc0:	00c00104 	movi	r3,4
   1fdc4:	10c00005 	stb	r3,0(r2)
        return (0);
   1fdc8:	0005883a 	mov	r2,zero
   1fdcc:	00004206 	br	1fed8 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   1fdd0:	e0bffd17 	ldw	r2,-12(fp)
   1fdd4:	10800003 	ldbu	r2,0(r2)
   1fdd8:	10803fcc 	andi	r2,r2,255
   1fddc:	10800060 	cmpeqi	r2,r2,1
   1fde0:	1000051e 	bne	r2,zero,1fdf8 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1fde4:	e0bfff17 	ldw	r2,-4(fp)
   1fde8:	00c00044 	movi	r3,1
   1fdec:	10c00005 	stb	r3,0(r2)
        return (0);
   1fdf0:	0005883a 	mov	r2,zero
   1fdf4:	00003806 	br	1fed8 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fdf8:	0005303a 	rdctl	r2,status
   1fdfc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fe00:	e0fffc17 	ldw	r3,-16(fp)
   1fe04:	00bfff84 	movi	r2,-2
   1fe08:	1884703a 	and	r2,r3,r2
   1fe0c:	1001703a 	wrctl	status,r2
  
  return context;
   1fe10:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1fe14:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   1fe18:	e0bffd17 	ldw	r2,-12(fp)
   1fe1c:	10800283 	ldbu	r2,10(r2)
   1fe20:	10803fcc 	andi	r2,r2,255
   1fe24:	10002526 	beq	r2,zero,1febc <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
   1fe28:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1fe2c:	e0bffe03 	ldbu	r2,-8(fp)
   1fe30:	10800060 	cmpeqi	r2,r2,1
   1fe34:	10000e26 	beq	r2,zero,1fe70 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   1fe38:	00000806 	br	1fe5c <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   1fe3c:	01c00084 	movi	r7,2
   1fe40:	01800084 	movi	r6,2
   1fe44:	000b883a 	mov	r5,zero
   1fe48:	e13ffd17 	ldw	r4,-12(fp)
   1fe4c:	001cdcc0 	call	1cdcc <OS_EventTaskRdy>
                     nbr_tasks++;
   1fe50:	e0bff803 	ldbu	r2,-32(fp)
   1fe54:	10800044 	addi	r2,r2,1
   1fe58:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   1fe5c:	e0bffd17 	ldw	r2,-12(fp)
   1fe60:	10800283 	ldbu	r2,10(r2)
   1fe64:	10803fcc 	andi	r2,r2,255
   1fe68:	103ff41e 	bne	r2,zero,1fe3c <OSMboxPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1fe6c:	00000906 	br	1fe94 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   1fe70:	01c00084 	movi	r7,2
   1fe74:	01800084 	movi	r6,2
   1fe78:	000b883a 	mov	r5,zero
   1fe7c:	e13ffd17 	ldw	r4,-12(fp)
   1fe80:	001cdcc0 	call	1cdcc <OS_EventTaskRdy>
                 nbr_tasks++;
   1fe84:	e0bff803 	ldbu	r2,-32(fp)
   1fe88:	10800044 	addi	r2,r2,1
   1fe8c:	e0bff805 	stb	r2,-32(fp)
                 break;
   1fe90:	0001883a 	nop
   1fe94:	e0bff917 	ldw	r2,-28(fp)
   1fe98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fe9c:	e0bffa17 	ldw	r2,-24(fp)
   1fea0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   1fea4:	001d8180 	call	1d818 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1fea8:	e0bfff17 	ldw	r2,-4(fp)
   1feac:	00c00384 	movi	r3,14
   1feb0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1feb4:	e0bff803 	ldbu	r2,-32(fp)
   1feb8:	00000706 	br	1fed8 <OSMboxPendAbort+0x158>
   1febc:	e0bff917 	ldw	r2,-28(fp)
   1fec0:	e0bffb15 	stw	r2,-20(fp)
   1fec4:	e0bffb17 	ldw	r2,-20(fp)
   1fec8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1fecc:	e0bfff17 	ldw	r2,-4(fp)
   1fed0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
   1fed4:	0005883a 	mov	r2,zero
}
   1fed8:	e037883a 	mov	sp,fp
   1fedc:	dfc00117 	ldw	ra,4(sp)
   1fee0:	df000017 	ldw	fp,0(sp)
   1fee4:	dec00204 	addi	sp,sp,8
   1fee8:	f800283a 	ret

0001feec <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
   1feec:	defff704 	addi	sp,sp,-36
   1fef0:	dfc00815 	stw	ra,32(sp)
   1fef4:	df000715 	stw	fp,28(sp)
   1fef8:	df000704 	addi	fp,sp,28
   1fefc:	e13ffe15 	stw	r4,-8(fp)
   1ff00:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1ff04:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1ff08:	e0bffe17 	ldw	r2,-8(fp)
   1ff0c:	1000021e 	bne	r2,zero,1ff18 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   1ff10:	00800104 	movi	r2,4
   1ff14:	00003406 	br	1ffe8 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   1ff18:	e0bfff17 	ldw	r2,-4(fp)
   1ff1c:	1000021e 	bne	r2,zero,1ff28 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
   1ff20:	008000c4 	movi	r2,3
   1ff24:	00003006 	br	1ffe8 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   1ff28:	e0bffe17 	ldw	r2,-8(fp)
   1ff2c:	10800003 	ldbu	r2,0(r2)
   1ff30:	10803fcc 	andi	r2,r2,255
   1ff34:	10800060 	cmpeqi	r2,r2,1
   1ff38:	1000021e 	bne	r2,zero,1ff44 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
   1ff3c:	00800044 	movi	r2,1
   1ff40:	00002906 	br	1ffe8 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ff44:	0005303a 	rdctl	r2,status
   1ff48:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ff4c:	e0fffd17 	ldw	r3,-12(fp)
   1ff50:	00bfff84 	movi	r2,-2
   1ff54:	1884703a 	and	r2,r3,r2
   1ff58:	1001703a 	wrctl	status,r2
  
  return context;
   1ff5c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1ff60:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   1ff64:	e0bffe17 	ldw	r2,-8(fp)
   1ff68:	10800283 	ldbu	r2,10(r2)
   1ff6c:	10803fcc 	andi	r2,r2,255
   1ff70:	10000c26 	beq	r2,zero,1ffa4 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   1ff74:	000f883a 	mov	r7,zero
   1ff78:	01800084 	movi	r6,2
   1ff7c:	e17fff17 	ldw	r5,-4(fp)
   1ff80:	e13ffe17 	ldw	r4,-8(fp)
   1ff84:	001cdcc0 	call	1cdcc <OS_EventTaskRdy>
   1ff88:	e0bff917 	ldw	r2,-28(fp)
   1ff8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ff90:	e0bffa17 	ldw	r2,-24(fp)
   1ff94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   1ff98:	001d8180 	call	1d818 <OS_Sched>
        return (OS_ERR_NONE);
   1ff9c:	0005883a 	mov	r2,zero
   1ffa0:	00001106 	br	1ffe8 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   1ffa4:	e0bffe17 	ldw	r2,-8(fp)
   1ffa8:	10800117 	ldw	r2,4(r2)
   1ffac:	10000626 	beq	r2,zero,1ffc8 <OSMboxPost+0xdc>
   1ffb0:	e0bff917 	ldw	r2,-28(fp)
   1ffb4:	e0bffb15 	stw	r2,-20(fp)
   1ffb8:	e0bffb17 	ldw	r2,-20(fp)
   1ffbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   1ffc0:	00800504 	movi	r2,20
   1ffc4:	00000806 	br	1ffe8 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   1ffc8:	e0bffe17 	ldw	r2,-8(fp)
   1ffcc:	e0ffff17 	ldw	r3,-4(fp)
   1ffd0:	10c00115 	stw	r3,4(r2)
   1ffd4:	e0bff917 	ldw	r2,-28(fp)
   1ffd8:	e0bffc15 	stw	r2,-16(fp)
   1ffdc:	e0bffc17 	ldw	r2,-16(fp)
   1ffe0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1ffe4:	0005883a 	mov	r2,zero
}
   1ffe8:	e037883a 	mov	sp,fp
   1ffec:	dfc00117 	ldw	ra,4(sp)
   1fff0:	df000017 	ldw	fp,0(sp)
   1fff4:	dec00204 	addi	sp,sp,8
   1fff8:	f800283a 	ret

0001fffc <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   1fffc:	defff604 	addi	sp,sp,-40
   20000:	dfc00915 	stw	ra,36(sp)
   20004:	df000815 	stw	fp,32(sp)
   20008:	df000804 	addi	fp,sp,32
   2000c:	e13ffd15 	stw	r4,-12(fp)
   20010:	e17ffe15 	stw	r5,-8(fp)
   20014:	3005883a 	mov	r2,r6
   20018:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   2001c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   20020:	e0bffd17 	ldw	r2,-12(fp)
   20024:	1000021e 	bne	r2,zero,20030 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   20028:	00800104 	movi	r2,4
   2002c:	00004506 	br	20144 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   20030:	e0bffe17 	ldw	r2,-8(fp)
   20034:	1000021e 	bne	r2,zero,20040 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
   20038:	008000c4 	movi	r2,3
   2003c:	00004106 	br	20144 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   20040:	e0bffd17 	ldw	r2,-12(fp)
   20044:	10800003 	ldbu	r2,0(r2)
   20048:	10803fcc 	andi	r2,r2,255
   2004c:	10800060 	cmpeqi	r2,r2,1
   20050:	1000021e 	bne	r2,zero,2005c <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
   20054:	00800044 	movi	r2,1
   20058:	00003a06 	br	20144 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2005c:	0005303a 	rdctl	r2,status
   20060:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20064:	e0fffc17 	ldw	r3,-16(fp)
   20068:	00bfff84 	movi	r2,-2
   2006c:	1884703a 	and	r2,r3,r2
   20070:	1001703a 	wrctl	status,r2
  
  return context;
   20074:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   20078:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   2007c:	e0bffd17 	ldw	r2,-12(fp)
   20080:	10800283 	ldbu	r2,10(r2)
   20084:	10803fcc 	andi	r2,r2,255
   20088:	10001d26 	beq	r2,zero,20100 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   2008c:	e0bfff03 	ldbu	r2,-4(fp)
   20090:	1080004c 	andi	r2,r2,1
   20094:	10000b26 	beq	r2,zero,200c4 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   20098:	00000506 	br	200b0 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   2009c:	000f883a 	mov	r7,zero
   200a0:	01800084 	movi	r6,2
   200a4:	e17ffe17 	ldw	r5,-8(fp)
   200a8:	e13ffd17 	ldw	r4,-12(fp)
   200ac:	001cdcc0 	call	1cdcc <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   200b0:	e0bffd17 	ldw	r2,-12(fp)
   200b4:	10800283 	ldbu	r2,10(r2)
   200b8:	10803fcc 	andi	r2,r2,255
   200bc:	103ff71e 	bne	r2,zero,2009c <OSMboxPostOpt+0xa0>
   200c0:	00000506 	br	200d8 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   200c4:	000f883a 	mov	r7,zero
   200c8:	01800084 	movi	r6,2
   200cc:	e17ffe17 	ldw	r5,-8(fp)
   200d0:	e13ffd17 	ldw	r4,-12(fp)
   200d4:	001cdcc0 	call	1cdcc <OS_EventTaskRdy>
   200d8:	e0bff817 	ldw	r2,-32(fp)
   200dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   200e0:	e0bff917 	ldw	r2,-28(fp)
   200e4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   200e8:	e0bfff03 	ldbu	r2,-4(fp)
   200ec:	1080010c 	andi	r2,r2,4
   200f0:	1000011e 	bne	r2,zero,200f8 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
   200f4:	001d8180 	call	1d818 <OS_Sched>
        }
        return (OS_ERR_NONE);
   200f8:	0005883a 	mov	r2,zero
   200fc:	00001106 	br	20144 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   20100:	e0bffd17 	ldw	r2,-12(fp)
   20104:	10800117 	ldw	r2,4(r2)
   20108:	10000626 	beq	r2,zero,20124 <OSMboxPostOpt+0x128>
   2010c:	e0bff817 	ldw	r2,-32(fp)
   20110:	e0bffa15 	stw	r2,-24(fp)
   20114:	e0bffa17 	ldw	r2,-24(fp)
   20118:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   2011c:	00800504 	movi	r2,20
   20120:	00000806 	br	20144 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   20124:	e0bffd17 	ldw	r2,-12(fp)
   20128:	e0fffe17 	ldw	r3,-8(fp)
   2012c:	10c00115 	stw	r3,4(r2)
   20130:	e0bff817 	ldw	r2,-32(fp)
   20134:	e0bffb15 	stw	r2,-20(fp)
   20138:	e0bffb17 	ldw	r2,-20(fp)
   2013c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   20140:	0005883a 	mov	r2,zero
}
   20144:	e037883a 	mov	sp,fp
   20148:	dfc00117 	ldw	ra,4(sp)
   2014c:	df000017 	ldw	fp,0(sp)
   20150:	dec00204 	addi	sp,sp,8
   20154:	f800283a 	ret

00020158 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
   20158:	defff704 	addi	sp,sp,-36
   2015c:	df000815 	stw	fp,32(sp)
   20160:	df000804 	addi	fp,sp,32
   20164:	e13ffe15 	stw	r4,-8(fp)
   20168:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   2016c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   20170:	e0bffe17 	ldw	r2,-8(fp)
   20174:	1000021e 	bne	r2,zero,20180 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   20178:	00800104 	movi	r2,4
   2017c:	00003606 	br	20258 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
   20180:	e0bfff17 	ldw	r2,-4(fp)
   20184:	1000021e 	bne	r2,zero,20190 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   20188:	00800244 	movi	r2,9
   2018c:	00003206 	br	20258 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   20190:	e0bffe17 	ldw	r2,-8(fp)
   20194:	10800003 	ldbu	r2,0(r2)
   20198:	10803fcc 	andi	r2,r2,255
   2019c:	10800060 	cmpeqi	r2,r2,1
   201a0:	1000021e 	bne	r2,zero,201ac <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   201a4:	00800044 	movi	r2,1
   201a8:	00002b06 	br	20258 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   201ac:	0005303a 	rdctl	r2,status
   201b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   201b4:	e0fffd17 	ldw	r3,-12(fp)
   201b8:	00bfff84 	movi	r2,-2
   201bc:	1884703a 	and	r2,r3,r2
   201c0:	1001703a 	wrctl	status,r2
  
  return context;
   201c4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   201c8:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   201cc:	e0bffe17 	ldw	r2,-8(fp)
   201d0:	10c00283 	ldbu	r3,10(r2)
   201d4:	e0bfff17 	ldw	r2,-4(fp)
   201d8:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
   201dc:	e0bffe17 	ldw	r2,-8(fp)
   201e0:	108002c4 	addi	r2,r2,11
   201e4:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
   201e8:	e0bfff17 	ldw	r2,-4(fp)
   201ec:	10800104 	addi	r2,r2,4
   201f0:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   201f4:	e03ff805 	stb	zero,-32(fp)
   201f8:	00000b06 	br	20228 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
   201fc:	e0bffa17 	ldw	r2,-24(fp)
   20200:	10c00044 	addi	r3,r2,1
   20204:	e0fffa15 	stw	r3,-24(fp)
   20208:	e0fff917 	ldw	r3,-28(fp)
   2020c:	19000044 	addi	r4,r3,1
   20210:	e13ff915 	stw	r4,-28(fp)
   20214:	18c00003 	ldbu	r3,0(r3)
   20218:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   2021c:	e0bff803 	ldbu	r2,-32(fp)
   20220:	10800044 	addi	r2,r2,1
   20224:	e0bff805 	stb	r2,-32(fp)
   20228:	e0bff803 	ldbu	r2,-32(fp)
   2022c:	108000f0 	cmpltui	r2,r2,3
   20230:	103ff21e 	bne	r2,zero,201fc <OSMboxQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   20234:	e0bffe17 	ldw	r2,-8(fp)
   20238:	10c00117 	ldw	r3,4(r2)
   2023c:	e0bfff17 	ldw	r2,-4(fp)
   20240:	10c00015 	stw	r3,0(r2)
   20244:	e0bffb17 	ldw	r2,-20(fp)
   20248:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2024c:	e0bffc17 	ldw	r2,-16(fp)
   20250:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   20254:	0005883a 	mov	r2,zero
}
   20258:	e037883a 	mov	sp,fp
   2025c:	df000017 	ldw	fp,0(sp)
   20260:	dec00104 	addi	sp,sp,4
   20264:	f800283a 	ret

00020268 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   20268:	defff404 	addi	sp,sp,-48
   2026c:	df000b15 	stw	fp,44(sp)
   20270:	df000b04 	addi	fp,sp,44
   20274:	e13ffc15 	stw	r4,-16(fp)
   20278:	e17ffd15 	stw	r5,-12(fp)
   2027c:	e1bffe15 	stw	r6,-8(fp)
   20280:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   20284:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   20288:	e0bfff17 	ldw	r2,-4(fp)
   2028c:	1000021e 	bne	r2,zero,20298 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   20290:	0005883a 	mov	r2,zero
   20294:	00006506 	br	2042c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   20298:	e0bffc17 	ldw	r2,-16(fp)
   2029c:	1000051e 	bne	r2,zero,202b4 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   202a0:	e0bfff17 	ldw	r2,-4(fp)
   202a4:	00c01884 	movi	r3,98
   202a8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   202ac:	0005883a 	mov	r2,zero
   202b0:	00005e06 	br	2042c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   202b4:	e0bffc17 	ldw	r2,-16(fp)
   202b8:	108000cc 	andi	r2,r2,3
   202bc:	10000526 	beq	r2,zero,202d4 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   202c0:	e0bfff17 	ldw	r2,-4(fp)
   202c4:	00c01884 	movi	r3,98
   202c8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   202cc:	0005883a 	mov	r2,zero
   202d0:	00005606 	br	2042c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   202d4:	e0bffd17 	ldw	r2,-12(fp)
   202d8:	108000a8 	cmpgeui	r2,r2,2
   202dc:	1000051e 	bne	r2,zero,202f4 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   202e0:	e0bfff17 	ldw	r2,-4(fp)
   202e4:	00c016c4 	movi	r3,91
   202e8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   202ec:	0005883a 	mov	r2,zero
   202f0:	00004e06 	br	2042c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   202f4:	e0bffe17 	ldw	r2,-8(fp)
   202f8:	10800128 	cmpgeui	r2,r2,4
   202fc:	1000051e 	bne	r2,zero,20314 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   20300:	e0bfff17 	ldw	r2,-4(fp)
   20304:	00c01704 	movi	r3,92
   20308:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   2030c:	0005883a 	mov	r2,zero
   20310:	00004606 	br	2042c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20314:	0005303a 	rdctl	r2,status
   20318:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2031c:	e0fffb17 	ldw	r3,-20(fp)
   20320:	00bfff84 	movi	r2,-2
   20324:	1884703a 	and	r2,r3,r2
   20328:	1001703a 	wrctl	status,r2
  
  return context;
   2032c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   20330:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   20334:	d0a7df17 	ldw	r2,-24708(gp)
   20338:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   2033c:	d0a7df17 	ldw	r2,-24708(gp)
   20340:	10000326 	beq	r2,zero,20350 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   20344:	d0a7df17 	ldw	r2,-24708(gp)
   20348:	10800117 	ldw	r2,4(r2)
   2034c:	d0a7df15 	stw	r2,-24708(gp)
   20350:	e0bff817 	ldw	r2,-32(fp)
   20354:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20358:	e0bff917 	ldw	r2,-28(fp)
   2035c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   20360:	e0bffa17 	ldw	r2,-24(fp)
   20364:	1000051e 	bne	r2,zero,2037c <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   20368:	e0bfff17 	ldw	r2,-4(fp)
   2036c:	00c01684 	movi	r3,90
   20370:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   20374:	0005883a 	mov	r2,zero
   20378:	00002c06 	br	2042c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   2037c:	e0bffc17 	ldw	r2,-16(fp)
   20380:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   20384:	e0fffc17 	ldw	r3,-16(fp)
   20388:	e0bffe17 	ldw	r2,-8(fp)
   2038c:	1885883a 	add	r2,r3,r2
   20390:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   20394:	e03ff715 	stw	zero,-36(fp)
   20398:	00000c06 	br	203cc <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   2039c:	e0bff617 	ldw	r2,-40(fp)
   203a0:	e0fff517 	ldw	r3,-44(fp)
   203a4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   203a8:	e0bff517 	ldw	r2,-44(fp)
   203ac:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   203b0:	e0fff517 	ldw	r3,-44(fp)
   203b4:	e0bffe17 	ldw	r2,-8(fp)
   203b8:	1885883a 	add	r2,r3,r2
   203bc:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   203c0:	e0bff717 	ldw	r2,-36(fp)
   203c4:	10800044 	addi	r2,r2,1
   203c8:	e0bff715 	stw	r2,-36(fp)
   203cc:	e0bffd17 	ldw	r2,-12(fp)
   203d0:	10bfffc4 	addi	r2,r2,-1
   203d4:	e0fff717 	ldw	r3,-36(fp)
   203d8:	18bff036 	bltu	r3,r2,2039c <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   203dc:	e0bff617 	ldw	r2,-40(fp)
   203e0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   203e4:	e0bffa17 	ldw	r2,-24(fp)
   203e8:	e0fffc17 	ldw	r3,-16(fp)
   203ec:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   203f0:	e0bffa17 	ldw	r2,-24(fp)
   203f4:	e0fffc17 	ldw	r3,-16(fp)
   203f8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   203fc:	e0bffa17 	ldw	r2,-24(fp)
   20400:	e0fffd17 	ldw	r3,-12(fp)
   20404:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   20408:	e0bffa17 	ldw	r2,-24(fp)
   2040c:	e0fffd17 	ldw	r3,-12(fp)
   20410:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   20414:	e0bffa17 	ldw	r2,-24(fp)
   20418:	e0fffe17 	ldw	r3,-8(fp)
   2041c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   20420:	e0bfff17 	ldw	r2,-4(fp)
   20424:	10000005 	stb	zero,0(r2)
    return (pmem);
   20428:	e0bffa17 	ldw	r2,-24(fp)
}
   2042c:	e037883a 	mov	sp,fp
   20430:	df000017 	ldw	fp,0(sp)
   20434:	dec00104 	addi	sp,sp,4
   20438:	f800283a 	ret

0002043c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   2043c:	defff804 	addi	sp,sp,-32
   20440:	df000715 	stw	fp,28(sp)
   20444:	df000704 	addi	fp,sp,28
   20448:	e13ffe15 	stw	r4,-8(fp)
   2044c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   20450:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   20454:	e0bfff17 	ldw	r2,-4(fp)
   20458:	1000021e 	bne	r2,zero,20464 <OSMemGet+0x28>
        return ((void *)0);
   2045c:	0005883a 	mov	r2,zero
   20460:	00002e06 	br	2051c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   20464:	e0bffe17 	ldw	r2,-8(fp)
   20468:	1000051e 	bne	r2,zero,20480 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   2046c:	e0bfff17 	ldw	r2,-4(fp)
   20470:	00c01804 	movi	r3,96
   20474:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   20478:	0005883a 	mov	r2,zero
   2047c:	00002706 	br	2051c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20480:	0005303a 	rdctl	r2,status
   20484:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20488:	e0fffd17 	ldw	r3,-12(fp)
   2048c:	00bfff84 	movi	r2,-2
   20490:	1884703a 	and	r2,r3,r2
   20494:	1001703a 	wrctl	status,r2
  
  return context;
   20498:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   2049c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   204a0:	e0bffe17 	ldw	r2,-8(fp)
   204a4:	10800417 	ldw	r2,16(r2)
   204a8:	10001426 	beq	r2,zero,204fc <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   204ac:	e0bffe17 	ldw	r2,-8(fp)
   204b0:	10800117 	ldw	r2,4(r2)
   204b4:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   204b8:	e0bffb17 	ldw	r2,-20(fp)
   204bc:	10c00017 	ldw	r3,0(r2)
   204c0:	e0bffe17 	ldw	r2,-8(fp)
   204c4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   204c8:	e0bffe17 	ldw	r2,-8(fp)
   204cc:	10800417 	ldw	r2,16(r2)
   204d0:	10ffffc4 	addi	r3,r2,-1
   204d4:	e0bffe17 	ldw	r2,-8(fp)
   204d8:	10c00415 	stw	r3,16(r2)
   204dc:	e0bff917 	ldw	r2,-28(fp)
   204e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   204e4:	e0bffa17 	ldw	r2,-24(fp)
   204e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   204ec:	e0bfff17 	ldw	r2,-4(fp)
   204f0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   204f4:	e0bffb17 	ldw	r2,-20(fp)
   204f8:	00000806 	br	2051c <OSMemGet+0xe0>
   204fc:	e0bff917 	ldw	r2,-28(fp)
   20500:	e0bffc15 	stw	r2,-16(fp)
   20504:	e0bffc17 	ldw	r2,-16(fp)
   20508:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   2050c:	e0bfff17 	ldw	r2,-4(fp)
   20510:	00c01744 	movi	r3,93
   20514:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   20518:	0005883a 	mov	r2,zero
}
   2051c:	e037883a 	mov	sp,fp
   20520:	df000017 	ldw	fp,0(sp)
   20524:	dec00104 	addi	sp,sp,4
   20528:	f800283a 	ret

0002052c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   2052c:	defff704 	addi	sp,sp,-36
   20530:	dfc00815 	stw	ra,32(sp)
   20534:	df000715 	stw	fp,28(sp)
   20538:	df000704 	addi	fp,sp,28
   2053c:	e13ffd15 	stw	r4,-12(fp)
   20540:	e17ffe15 	stw	r5,-8(fp)
   20544:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   20548:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   2054c:	e0bfff17 	ldw	r2,-4(fp)
   20550:	1000021e 	bne	r2,zero,2055c <OSMemNameGet+0x30>
        return (0);
   20554:	0005883a 	mov	r2,zero
   20558:	00002b06 	br	20608 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   2055c:	e0bffd17 	ldw	r2,-12(fp)
   20560:	1000051e 	bne	r2,zero,20578 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   20564:	e0bfff17 	ldw	r2,-4(fp)
   20568:	00c01804 	movi	r3,96
   2056c:	10c00005 	stb	r3,0(r2)
        return (0);
   20570:	0005883a 	mov	r2,zero
   20574:	00002406 	br	20608 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   20578:	e0bffe17 	ldw	r2,-8(fp)
   2057c:	1000051e 	bne	r2,zero,20594 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   20580:	e0bfff17 	ldw	r2,-4(fp)
   20584:	00c00304 	movi	r3,12
   20588:	10c00005 	stb	r3,0(r2)
        return (0);
   2058c:	0005883a 	mov	r2,zero
   20590:	00001d06 	br	20608 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   20594:	d0a7e403 	ldbu	r2,-24688(gp)
   20598:	10803fcc 	andi	r2,r2,255
   2059c:	10000526 	beq	r2,zero,205b4 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   205a0:	e0bfff17 	ldw	r2,-4(fp)
   205a4:	00c00444 	movi	r3,17
   205a8:	10c00005 	stb	r3,0(r2)
        return (0);
   205ac:	0005883a 	mov	r2,zero
   205b0:	00001506 	br	20608 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   205b4:	0005303a 	rdctl	r2,status
   205b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   205bc:	e0fffb17 	ldw	r3,-20(fp)
   205c0:	00bfff84 	movi	r2,-2
   205c4:	1884703a 	and	r2,r3,r2
   205c8:	1001703a 	wrctl	status,r2
  
  return context;
   205cc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   205d0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   205d4:	e0bffd17 	ldw	r2,-12(fp)
   205d8:	10800504 	addi	r2,r2,20
   205dc:	100b883a 	mov	r5,r2
   205e0:	e13ffe17 	ldw	r4,-8(fp)
   205e4:	001d95c0 	call	1d95c <OS_StrCopy>
   205e8:	e0bffa05 	stb	r2,-24(fp)
   205ec:	e0bff917 	ldw	r2,-28(fp)
   205f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   205f4:	e0bffc17 	ldw	r2,-16(fp)
   205f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   205fc:	e0bfff17 	ldw	r2,-4(fp)
   20600:	10000005 	stb	zero,0(r2)
    return (len);
   20604:	e0bffa03 	ldbu	r2,-24(fp)
}
   20608:	e037883a 	mov	sp,fp
   2060c:	dfc00117 	ldw	ra,4(sp)
   20610:	df000017 	ldw	fp,0(sp)
   20614:	dec00204 	addi	sp,sp,8
   20618:	f800283a 	ret

0002061c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   2061c:	defff604 	addi	sp,sp,-40
   20620:	dfc00915 	stw	ra,36(sp)
   20624:	df000815 	stw	fp,32(sp)
   20628:	df000804 	addi	fp,sp,32
   2062c:	e13ffd15 	stw	r4,-12(fp)
   20630:	e17ffe15 	stw	r5,-8(fp)
   20634:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   20638:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   2063c:	e0bfff17 	ldw	r2,-4(fp)
   20640:	10003526 	beq	r2,zero,20718 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   20644:	e0bffd17 	ldw	r2,-12(fp)
   20648:	1000041e 	bne	r2,zero,2065c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   2064c:	e0bfff17 	ldw	r2,-4(fp)
   20650:	00c01804 	movi	r3,96
   20654:	10c00005 	stb	r3,0(r2)
        return;
   20658:	00003006 	br	2071c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   2065c:	e0bffe17 	ldw	r2,-8(fp)
   20660:	1000041e 	bne	r2,zero,20674 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   20664:	e0bfff17 	ldw	r2,-4(fp)
   20668:	00c00304 	movi	r3,12
   2066c:	10c00005 	stb	r3,0(r2)
        return;
   20670:	00002a06 	br	2071c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   20674:	d0a7e403 	ldbu	r2,-24688(gp)
   20678:	10803fcc 	andi	r2,r2,255
   2067c:	10000426 	beq	r2,zero,20690 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   20680:	e0bfff17 	ldw	r2,-4(fp)
   20684:	00c00484 	movi	r3,18
   20688:	10c00005 	stb	r3,0(r2)
        return;
   2068c:	00002306 	br	2071c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20690:	0005303a 	rdctl	r2,status
   20694:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20698:	e0fffc17 	ldw	r3,-16(fp)
   2069c:	00bfff84 	movi	r2,-2
   206a0:	1884703a 	and	r2,r3,r2
   206a4:	1001703a 	wrctl	status,r2
  
  return context;
   206a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   206ac:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   206b0:	e13ffe17 	ldw	r4,-8(fp)
   206b4:	001d9d00 	call	1d9d0 <OS_StrLen>
   206b8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   206bc:	e0bffa03 	ldbu	r2,-24(fp)
   206c0:	10800830 	cmpltui	r2,r2,32
   206c4:	1000081e 	bne	r2,zero,206e8 <OSMemNameSet+0xcc>
   206c8:	e0bff817 	ldw	r2,-32(fp)
   206cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   206d0:	e0bff917 	ldw	r2,-28(fp)
   206d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   206d8:	e0bfff17 	ldw	r2,-4(fp)
   206dc:	00c018c4 	movi	r3,99
   206e0:	10c00005 	stb	r3,0(r2)
        return;
   206e4:	00000d06 	br	2071c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   206e8:	e0bffd17 	ldw	r2,-12(fp)
   206ec:	10800504 	addi	r2,r2,20
   206f0:	e17ffe17 	ldw	r5,-8(fp)
   206f4:	1009883a 	mov	r4,r2
   206f8:	001d95c0 	call	1d95c <OS_StrCopy>
   206fc:	e0bff817 	ldw	r2,-32(fp)
   20700:	e0bffb15 	stw	r2,-20(fp)
   20704:	e0bffb17 	ldw	r2,-20(fp)
   20708:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   2070c:	e0bfff17 	ldw	r2,-4(fp)
   20710:	10000005 	stb	zero,0(r2)
   20714:	00000106 	br	2071c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   20718:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   2071c:	e037883a 	mov	sp,fp
   20720:	dfc00117 	ldw	ra,4(sp)
   20724:	df000017 	ldw	fp,0(sp)
   20728:	dec00204 	addi	sp,sp,8
   2072c:	f800283a 	ret

00020730 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   20730:	defff904 	addi	sp,sp,-28
   20734:	df000615 	stw	fp,24(sp)
   20738:	df000604 	addi	fp,sp,24
   2073c:	e13ffe15 	stw	r4,-8(fp)
   20740:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   20744:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   20748:	e0bffe17 	ldw	r2,-8(fp)
   2074c:	1000021e 	bne	r2,zero,20758 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   20750:	00801804 	movi	r2,96
   20754:	00002806 	br	207f8 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   20758:	e0bfff17 	ldw	r2,-4(fp)
   2075c:	1000021e 	bne	r2,zero,20768 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   20760:	008017c4 	movi	r2,95
   20764:	00002406 	br	207f8 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20768:	0005303a 	rdctl	r2,status
   2076c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20770:	e0fffd17 	ldw	r3,-12(fp)
   20774:	00bfff84 	movi	r2,-2
   20778:	1884703a 	and	r2,r3,r2
   2077c:	1001703a 	wrctl	status,r2
  
  return context;
   20780:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   20784:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   20788:	e0bffe17 	ldw	r2,-8(fp)
   2078c:	10c00417 	ldw	r3,16(r2)
   20790:	e0bffe17 	ldw	r2,-8(fp)
   20794:	10800317 	ldw	r2,12(r2)
   20798:	18800636 	bltu	r3,r2,207b4 <OSMemPut+0x84>
   2079c:	e0bffa17 	ldw	r2,-24(fp)
   207a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   207a4:	e0bffb17 	ldw	r2,-20(fp)
   207a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   207ac:	00801784 	movi	r2,94
   207b0:	00001106 	br	207f8 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   207b4:	e0bffe17 	ldw	r2,-8(fp)
   207b8:	10c00117 	ldw	r3,4(r2)
   207bc:	e0bfff17 	ldw	r2,-4(fp)
   207c0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   207c4:	e0bffe17 	ldw	r2,-8(fp)
   207c8:	e0ffff17 	ldw	r3,-4(fp)
   207cc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   207d0:	e0bffe17 	ldw	r2,-8(fp)
   207d4:	10800417 	ldw	r2,16(r2)
   207d8:	10c00044 	addi	r3,r2,1
   207dc:	e0bffe17 	ldw	r2,-8(fp)
   207e0:	10c00415 	stw	r3,16(r2)
   207e4:	e0bffa17 	ldw	r2,-24(fp)
   207e8:	e0bffc15 	stw	r2,-16(fp)
   207ec:	e0bffc17 	ldw	r2,-16(fp)
   207f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   207f4:	0005883a 	mov	r2,zero
}
   207f8:	e037883a 	mov	sp,fp
   207fc:	df000017 	ldw	fp,0(sp)
   20800:	dec00104 	addi	sp,sp,4
   20804:	f800283a 	ret

00020808 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   20808:	defffa04 	addi	sp,sp,-24
   2080c:	df000515 	stw	fp,20(sp)
   20810:	df000504 	addi	fp,sp,20
   20814:	e13ffe15 	stw	r4,-8(fp)
   20818:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   2081c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   20820:	e0bffe17 	ldw	r2,-8(fp)
   20824:	1000021e 	bne	r2,zero,20830 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   20828:	00801804 	movi	r2,96
   2082c:	00002c06 	br	208e0 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   20830:	e0bfff17 	ldw	r2,-4(fp)
   20834:	1000021e 	bne	r2,zero,20840 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   20838:	00801844 	movi	r2,97
   2083c:	00002806 	br	208e0 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20840:	0005303a 	rdctl	r2,status
   20844:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20848:	e0fffc17 	ldw	r3,-16(fp)
   2084c:	00bfff84 	movi	r2,-2
   20850:	1884703a 	and	r2,r3,r2
   20854:	1001703a 	wrctl	status,r2
  
  return context;
   20858:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   2085c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   20860:	e0bffe17 	ldw	r2,-8(fp)
   20864:	10c00017 	ldw	r3,0(r2)
   20868:	e0bfff17 	ldw	r2,-4(fp)
   2086c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   20870:	e0bffe17 	ldw	r2,-8(fp)
   20874:	10c00117 	ldw	r3,4(r2)
   20878:	e0bfff17 	ldw	r2,-4(fp)
   2087c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   20880:	e0bffe17 	ldw	r2,-8(fp)
   20884:	10c00217 	ldw	r3,8(r2)
   20888:	e0bfff17 	ldw	r2,-4(fp)
   2088c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   20890:	e0bffe17 	ldw	r2,-8(fp)
   20894:	10c00317 	ldw	r3,12(r2)
   20898:	e0bfff17 	ldw	r2,-4(fp)
   2089c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   208a0:	e0bffe17 	ldw	r2,-8(fp)
   208a4:	10c00417 	ldw	r3,16(r2)
   208a8:	e0bfff17 	ldw	r2,-4(fp)
   208ac:	10c00415 	stw	r3,16(r2)
   208b0:	e0bffb17 	ldw	r2,-20(fp)
   208b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   208b8:	e0bffd17 	ldw	r2,-12(fp)
   208bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   208c0:	e0bfff17 	ldw	r2,-4(fp)
   208c4:	10c00317 	ldw	r3,12(r2)
   208c8:	e0bfff17 	ldw	r2,-4(fp)
   208cc:	10800417 	ldw	r2,16(r2)
   208d0:	1887c83a 	sub	r3,r3,r2
   208d4:	e0bfff17 	ldw	r2,-4(fp)
   208d8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   208dc:	0005883a 	mov	r2,zero
}
   208e0:	e037883a 	mov	sp,fp
   208e4:	df000017 	ldw	fp,0(sp)
   208e8:	dec00104 	addi	sp,sp,4
   208ec:	f800283a 	ret

000208f0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   208f0:	defffc04 	addi	sp,sp,-16
   208f4:	dfc00315 	stw	ra,12(sp)
   208f8:	df000215 	stw	fp,8(sp)
   208fc:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   20900:	01430c04 	movi	r5,3120
   20904:	01000174 	movhi	r4,5
   20908:	21076b04 	addi	r4,r4,7596
   2090c:	001d75c0 	call	1d75c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   20910:	00800174 	movhi	r2,5
   20914:	10876b04 	addi	r2,r2,7596
   20918:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   2091c:	e03fff0d 	sth	zero,-4(fp)
   20920:	00001306 	br	20970 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   20924:	e0bfff0b 	ldhu	r2,-4(fp)
   20928:	10800044 	addi	r2,r2,1
   2092c:	10c00d24 	muli	r3,r2,52
   20930:	00800174 	movhi	r2,5
   20934:	10876b04 	addi	r2,r2,7596
   20938:	1887883a 	add	r3,r3,r2
   2093c:	e0bffe17 	ldw	r2,-8(fp)
   20940:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   20944:	e0bffe17 	ldw	r2,-8(fp)
   20948:	00c00fc4 	movi	r3,63
   2094c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   20950:	e0bffe17 	ldw	r2,-8(fp)
   20954:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   20958:	e0bffe17 	ldw	r2,-8(fp)
   2095c:	10800d04 	addi	r2,r2,52
   20960:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   20964:	e0bfff0b 	ldhu	r2,-4(fp)
   20968:	10800044 	addi	r2,r2,1
   2096c:	e0bfff0d 	sth	r2,-4(fp)
   20970:	e0bfff0b 	ldhu	r2,-4(fp)
   20974:	10800ef0 	cmpltui	r2,r2,59
   20978:	103fea1e 	bne	r2,zero,20924 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   2097c:	e0bffe17 	ldw	r2,-8(fp)
   20980:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   20984:	e0bffe17 	ldw	r2,-8(fp)
   20988:	00c00fc4 	movi	r3,63
   2098c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   20990:	e0bffe17 	ldw	r2,-8(fp)
   20994:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   20998:	00800174 	movhi	r2,5
   2099c:	10876b04 	addi	r2,r2,7596
   209a0:	d0a7df15 	stw	r2,-24708(gp)
#endif
}
   209a4:	0001883a 	nop
   209a8:	e037883a 	mov	sp,fp
   209ac:	dfc00117 	ldw	ra,4(sp)
   209b0:	df000017 	ldw	fp,0(sp)
   209b4:	dec00204 	addi	sp,sp,8
   209b8:	f800283a 	ret

000209bc <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   209bc:	defff804 	addi	sp,sp,-32
   209c0:	df000715 	stw	fp,28(sp)
   209c4:	df000704 	addi	fp,sp,28
   209c8:	e13ffe15 	stw	r4,-8(fp)
   209cc:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   209d0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   209d4:	e0bfff17 	ldw	r2,-4(fp)
   209d8:	1000021e 	bne	r2,zero,209e4 <OSQAccept+0x28>
        return ((void *)0);
   209dc:	0005883a 	mov	r2,zero
   209e0:	00004206 	br	20aec <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   209e4:	e0bffe17 	ldw	r2,-8(fp)
   209e8:	1000051e 	bne	r2,zero,20a00 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   209ec:	e0bfff17 	ldw	r2,-4(fp)
   209f0:	00c00104 	movi	r3,4
   209f4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   209f8:	0005883a 	mov	r2,zero
   209fc:	00003b06 	br	20aec <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   20a00:	e0bffe17 	ldw	r2,-8(fp)
   20a04:	10800003 	ldbu	r2,0(r2)
   20a08:	10803fcc 	andi	r2,r2,255
   20a0c:	108000a0 	cmpeqi	r2,r2,2
   20a10:	1000051e 	bne	r2,zero,20a28 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   20a14:	e0bfff17 	ldw	r2,-4(fp)
   20a18:	00c00044 	movi	r3,1
   20a1c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   20a20:	0005883a 	mov	r2,zero
   20a24:	00003106 	br	20aec <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20a28:	0005303a 	rdctl	r2,status
   20a2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20a30:	e0fffd17 	ldw	r3,-12(fp)
   20a34:	00bfff84 	movi	r2,-2
   20a38:	1884703a 	and	r2,r3,r2
   20a3c:	1001703a 	wrctl	status,r2
  
  return context;
   20a40:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   20a44:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   20a48:	e0bffe17 	ldw	r2,-8(fp)
   20a4c:	10800117 	ldw	r2,4(r2)
   20a50:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   20a54:	e0bffc17 	ldw	r2,-16(fp)
   20a58:	1080058b 	ldhu	r2,22(r2)
   20a5c:	10bfffcc 	andi	r2,r2,65535
   20a60:	10001926 	beq	r2,zero,20ac8 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   20a64:	e0bffc17 	ldw	r2,-16(fp)
   20a68:	10800417 	ldw	r2,16(r2)
   20a6c:	11000104 	addi	r4,r2,4
   20a70:	e0fffc17 	ldw	r3,-16(fp)
   20a74:	19000415 	stw	r4,16(r3)
   20a78:	10800017 	ldw	r2,0(r2)
   20a7c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   20a80:	e0bffc17 	ldw	r2,-16(fp)
   20a84:	1080058b 	ldhu	r2,22(r2)
   20a88:	10bfffc4 	addi	r2,r2,-1
   20a8c:	1007883a 	mov	r3,r2
   20a90:	e0bffc17 	ldw	r2,-16(fp)
   20a94:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   20a98:	e0bffc17 	ldw	r2,-16(fp)
   20a9c:	10c00417 	ldw	r3,16(r2)
   20aa0:	e0bffc17 	ldw	r2,-16(fp)
   20aa4:	10800217 	ldw	r2,8(r2)
   20aa8:	1880041e 	bne	r3,r2,20abc <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   20aac:	e0bffc17 	ldw	r2,-16(fp)
   20ab0:	10c00117 	ldw	r3,4(r2)
   20ab4:	e0bffc17 	ldw	r2,-16(fp)
   20ab8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   20abc:	e0bfff17 	ldw	r2,-4(fp)
   20ac0:	10000005 	stb	zero,0(r2)
   20ac4:	00000406 	br	20ad8 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   20ac8:	e0bfff17 	ldw	r2,-4(fp)
   20acc:	00c007c4 	movi	r3,31
   20ad0:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   20ad4:	e03ff915 	stw	zero,-28(fp)
   20ad8:	e0bffa17 	ldw	r2,-24(fp)
   20adc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20ae0:	e0bffb17 	ldw	r2,-20(fp)
   20ae4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   20ae8:	e0bff917 	ldw	r2,-28(fp)
}
   20aec:	e037883a 	mov	sp,fp
   20af0:	df000017 	ldw	fp,0(sp)
   20af4:	dec00104 	addi	sp,sp,4
   20af8:	f800283a 	ret

00020afc <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   20afc:	defff404 	addi	sp,sp,-48
   20b00:	dfc00b15 	stw	ra,44(sp)
   20b04:	df000a15 	stw	fp,40(sp)
   20b08:	df000a04 	addi	fp,sp,40
   20b0c:	e13ffe15 	stw	r4,-8(fp)
   20b10:	2805883a 	mov	r2,r5
   20b14:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   20b18:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   20b1c:	d0a7e403 	ldbu	r2,-24688(gp)
   20b20:	10803fcc 	andi	r2,r2,255
   20b24:	10000226 	beq	r2,zero,20b30 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   20b28:	0005883a 	mov	r2,zero
   20b2c:	00005906 	br	20c94 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20b30:	0005303a 	rdctl	r2,status
   20b34:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20b38:	e0fffd17 	ldw	r3,-12(fp)
   20b3c:	00bfff84 	movi	r2,-2
   20b40:	1884703a 	and	r2,r3,r2
   20b44:	1001703a 	wrctl	status,r2
  
  return context;
   20b48:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   20b4c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   20b50:	d0a7e317 	ldw	r2,-24692(gp)
   20b54:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   20b58:	d0a7e317 	ldw	r2,-24692(gp)
   20b5c:	10000326 	beq	r2,zero,20b6c <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   20b60:	d0a7e317 	ldw	r2,-24692(gp)
   20b64:	10800117 	ldw	r2,4(r2)
   20b68:	d0a7e315 	stw	r2,-24692(gp)
   20b6c:	e0bff717 	ldw	r2,-36(fp)
   20b70:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20b74:	e0bff817 	ldw	r2,-32(fp)
   20b78:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   20b7c:	e0bff617 	ldw	r2,-40(fp)
   20b80:	10004326 	beq	r2,zero,20c90 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20b84:	0005303a 	rdctl	r2,status
   20b88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20b8c:	e0fff917 	ldw	r3,-28(fp)
   20b90:	00bfff84 	movi	r2,-2
   20b94:	1884703a 	and	r2,r3,r2
   20b98:	1001703a 	wrctl	status,r2
  
  return context;
   20b9c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   20ba0:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   20ba4:	d0a7e117 	ldw	r2,-24700(gp)
   20ba8:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   20bac:	e0bffb17 	ldw	r2,-20(fp)
   20bb0:	10002d26 	beq	r2,zero,20c68 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   20bb4:	d0a7e117 	ldw	r2,-24700(gp)
   20bb8:	10800017 	ldw	r2,0(r2)
   20bbc:	d0a7e115 	stw	r2,-24700(gp)
   20bc0:	e0bff717 	ldw	r2,-36(fp)
   20bc4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20bc8:	e0bffa17 	ldw	r2,-24(fp)
   20bcc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   20bd0:	e0bffb17 	ldw	r2,-20(fp)
   20bd4:	e0fffe17 	ldw	r3,-8(fp)
   20bd8:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   20bdc:	e0bfff0b 	ldhu	r2,-4(fp)
   20be0:	1085883a 	add	r2,r2,r2
   20be4:	1085883a 	add	r2,r2,r2
   20be8:	1007883a 	mov	r3,r2
   20bec:	e0bffe17 	ldw	r2,-8(fp)
   20bf0:	10c7883a 	add	r3,r2,r3
   20bf4:	e0bffb17 	ldw	r2,-20(fp)
   20bf8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   20bfc:	e0bffb17 	ldw	r2,-20(fp)
   20c00:	e0fffe17 	ldw	r3,-8(fp)
   20c04:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   20c08:	e0bffb17 	ldw	r2,-20(fp)
   20c0c:	e0fffe17 	ldw	r3,-8(fp)
   20c10:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   20c14:	e0bffb17 	ldw	r2,-20(fp)
   20c18:	e0ffff0b 	ldhu	r3,-4(fp)
   20c1c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   20c20:	e0bffb17 	ldw	r2,-20(fp)
   20c24:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   20c28:	e0bff617 	ldw	r2,-40(fp)
   20c2c:	00c00084 	movi	r3,2
   20c30:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   20c34:	e0bff617 	ldw	r2,-40(fp)
   20c38:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   20c3c:	e0bff617 	ldw	r2,-40(fp)
   20c40:	e0fffb17 	ldw	r3,-20(fp)
   20c44:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   20c48:	e0bff617 	ldw	r2,-40(fp)
   20c4c:	00c00fc4 	movi	r3,63
   20c50:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   20c54:	e0bff617 	ldw	r2,-40(fp)
   20c58:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   20c5c:	e13ff617 	ldw	r4,-40(fp)
   20c60:	001d37c0 	call	1d37c <OS_EventWaitListInit>
   20c64:	00000a06 	br	20c90 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   20c68:	d0e7e317 	ldw	r3,-24692(gp)
   20c6c:	e0bff617 	ldw	r2,-40(fp)
   20c70:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   20c74:	e0bff617 	ldw	r2,-40(fp)
   20c78:	d0a7e315 	stw	r2,-24692(gp)
   20c7c:	e0bff717 	ldw	r2,-36(fp)
   20c80:	e0bffc15 	stw	r2,-16(fp)
   20c84:	e0bffc17 	ldw	r2,-16(fp)
   20c88:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   20c8c:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   20c90:	e0bff617 	ldw	r2,-40(fp)
}
   20c94:	e037883a 	mov	sp,fp
   20c98:	dfc00117 	ldw	ra,4(sp)
   20c9c:	df000017 	ldw	fp,0(sp)
   20ca0:	dec00204 	addi	sp,sp,8
   20ca4:	f800283a 	ret

00020ca8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   20ca8:	defff204 	addi	sp,sp,-56
   20cac:	dfc00d15 	stw	ra,52(sp)
   20cb0:	df000c15 	stw	fp,48(sp)
   20cb4:	df000c04 	addi	fp,sp,48
   20cb8:	e13ffd15 	stw	r4,-12(fp)
   20cbc:	2805883a 	mov	r2,r5
   20cc0:	e1bfff15 	stw	r6,-4(fp)
   20cc4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   20cc8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   20ccc:	e0bfff17 	ldw	r2,-4(fp)
   20cd0:	1000021e 	bne	r2,zero,20cdc <OSQDel+0x34>
        return (pevent);
   20cd4:	e0bffd17 	ldw	r2,-12(fp)
   20cd8:	00008e06 	br	20f14 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   20cdc:	e0bffd17 	ldw	r2,-12(fp)
   20ce0:	1000051e 	bne	r2,zero,20cf8 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   20ce4:	e0bfff17 	ldw	r2,-4(fp)
   20ce8:	00c00104 	movi	r3,4
   20cec:	10c00005 	stb	r3,0(r2)
        return (pevent);
   20cf0:	e0bffd17 	ldw	r2,-12(fp)
   20cf4:	00008706 	br	20f14 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   20cf8:	e0bffd17 	ldw	r2,-12(fp)
   20cfc:	10800003 	ldbu	r2,0(r2)
   20d00:	10803fcc 	andi	r2,r2,255
   20d04:	108000a0 	cmpeqi	r2,r2,2
   20d08:	1000051e 	bne	r2,zero,20d20 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   20d0c:	e0bfff17 	ldw	r2,-4(fp)
   20d10:	00c00044 	movi	r3,1
   20d14:	10c00005 	stb	r3,0(r2)
        return (pevent);
   20d18:	e0bffd17 	ldw	r2,-12(fp)
   20d1c:	00007d06 	br	20f14 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   20d20:	d0a7e403 	ldbu	r2,-24688(gp)
   20d24:	10803fcc 	andi	r2,r2,255
   20d28:	10000526 	beq	r2,zero,20d40 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   20d2c:	e0bfff17 	ldw	r2,-4(fp)
   20d30:	00c003c4 	movi	r3,15
   20d34:	10c00005 	stb	r3,0(r2)
        return (pevent);
   20d38:	e0bffd17 	ldw	r2,-12(fp)
   20d3c:	00007506 	br	20f14 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20d40:	0005303a 	rdctl	r2,status
   20d44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20d48:	e0fffc17 	ldw	r3,-16(fp)
   20d4c:	00bfff84 	movi	r2,-2
   20d50:	1884703a 	and	r2,r3,r2
   20d54:	1001703a 	wrctl	status,r2
  
  return context;
   20d58:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   20d5c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   20d60:	e0bffd17 	ldw	r2,-12(fp)
   20d64:	10800283 	ldbu	r2,10(r2)
   20d68:	10803fcc 	andi	r2,r2,255
   20d6c:	10000326 	beq	r2,zero,20d7c <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   20d70:	00800044 	movi	r2,1
   20d74:	e0bff405 	stb	r2,-48(fp)
   20d78:	00000106 	br	20d80 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   20d7c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   20d80:	e0bffe03 	ldbu	r2,-8(fp)
   20d84:	10000326 	beq	r2,zero,20d94 <OSQDel+0xec>
   20d88:	10800060 	cmpeqi	r2,r2,1
   20d8c:	1000301e 	bne	r2,zero,20e50 <OSQDel+0x1a8>
   20d90:	00005506 	br	20ee8 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   20d94:	e0bff403 	ldbu	r2,-48(fp)
   20d98:	10001e1e 	bne	r2,zero,20e14 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   20d9c:	e0bffd17 	ldw	r2,-12(fp)
   20da0:	00c00fc4 	movi	r3,63
   20da4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   20da8:	e0bffd17 	ldw	r2,-12(fp)
   20dac:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   20db0:	e0bffd17 	ldw	r2,-12(fp)
   20db4:	10800117 	ldw	r2,4(r2)
   20db8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   20dbc:	d0e7e117 	ldw	r3,-24700(gp)
   20dc0:	e0bff817 	ldw	r2,-32(fp)
   20dc4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   20dc8:	e0bff817 	ldw	r2,-32(fp)
   20dcc:	d0a7e115 	stw	r2,-24700(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   20dd0:	e0bffd17 	ldw	r2,-12(fp)
   20dd4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   20dd8:	d0e7e317 	ldw	r3,-24692(gp)
   20ddc:	e0bffd17 	ldw	r2,-12(fp)
   20de0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   20de4:	e0bffd17 	ldw	r2,-12(fp)
   20de8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   20dec:	e0bffd17 	ldw	r2,-12(fp)
   20df0:	d0a7e315 	stw	r2,-24692(gp)
   20df4:	e0bff617 	ldw	r2,-40(fp)
   20df8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20dfc:	e0bff717 	ldw	r2,-36(fp)
   20e00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   20e04:	e0bfff17 	ldw	r2,-4(fp)
   20e08:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   20e0c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   20e10:	00003f06 	br	20f10 <OSQDel+0x268>
   20e14:	e0bff617 	ldw	r2,-40(fp)
   20e18:	e0bff915 	stw	r2,-28(fp)
   20e1c:	e0bff917 	ldw	r2,-28(fp)
   20e20:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   20e24:	e0bfff17 	ldw	r2,-4(fp)
   20e28:	00c01244 	movi	r3,73
   20e2c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   20e30:	e0bffd17 	ldw	r2,-12(fp)
   20e34:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   20e38:	00003506 	br	20f10 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   20e3c:	000f883a 	mov	r7,zero
   20e40:	01800104 	movi	r6,4
   20e44:	000b883a 	mov	r5,zero
   20e48:	e13ffd17 	ldw	r4,-12(fp)
   20e4c:	001cdcc0 	call	1cdcc <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   20e50:	e0bffd17 	ldw	r2,-12(fp)
   20e54:	10800283 	ldbu	r2,10(r2)
   20e58:	10803fcc 	andi	r2,r2,255
   20e5c:	103ff71e 	bne	r2,zero,20e3c <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   20e60:	e0bffd17 	ldw	r2,-12(fp)
   20e64:	00c00fc4 	movi	r3,63
   20e68:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   20e6c:	e0bffd17 	ldw	r2,-12(fp)
   20e70:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   20e74:	e0bffd17 	ldw	r2,-12(fp)
   20e78:	10800117 	ldw	r2,4(r2)
   20e7c:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   20e80:	d0e7e117 	ldw	r3,-24700(gp)
   20e84:	e0bff817 	ldw	r2,-32(fp)
   20e88:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   20e8c:	e0bff817 	ldw	r2,-32(fp)
   20e90:	d0a7e115 	stw	r2,-24700(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   20e94:	e0bffd17 	ldw	r2,-12(fp)
   20e98:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   20e9c:	d0e7e317 	ldw	r3,-24692(gp)
   20ea0:	e0bffd17 	ldw	r2,-12(fp)
   20ea4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   20ea8:	e0bffd17 	ldw	r2,-12(fp)
   20eac:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   20eb0:	e0bffd17 	ldw	r2,-12(fp)
   20eb4:	d0a7e315 	stw	r2,-24692(gp)
   20eb8:	e0bff617 	ldw	r2,-40(fp)
   20ebc:	e0bffa15 	stw	r2,-24(fp)
   20ec0:	e0bffa17 	ldw	r2,-24(fp)
   20ec4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   20ec8:	e0bff403 	ldbu	r2,-48(fp)
   20ecc:	10800058 	cmpnei	r2,r2,1
   20ed0:	1000011e 	bne	r2,zero,20ed8 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   20ed4:	001d8180 	call	1d818 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   20ed8:	e0bfff17 	ldw	r2,-4(fp)
   20edc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   20ee0:	e03ff515 	stw	zero,-44(fp)
             break;
   20ee4:	00000a06 	br	20f10 <OSQDel+0x268>
   20ee8:	e0bff617 	ldw	r2,-40(fp)
   20eec:	e0bffb15 	stw	r2,-20(fp)
   20ef0:	e0bffb17 	ldw	r2,-20(fp)
   20ef4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   20ef8:	e0bfff17 	ldw	r2,-4(fp)
   20efc:	00c001c4 	movi	r3,7
   20f00:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   20f04:	e0bffd17 	ldw	r2,-12(fp)
   20f08:	e0bff515 	stw	r2,-44(fp)
             break;
   20f0c:	0001883a 	nop
    }
    return (pevent_return);
   20f10:	e0bff517 	ldw	r2,-44(fp)
}
   20f14:	e037883a 	mov	sp,fp
   20f18:	dfc00117 	ldw	ra,4(sp)
   20f1c:	df000017 	ldw	fp,0(sp)
   20f20:	dec00204 	addi	sp,sp,8
   20f24:	f800283a 	ret

00020f28 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   20f28:	defffa04 	addi	sp,sp,-24
   20f2c:	df000515 	stw	fp,20(sp)
   20f30:	df000504 	addi	fp,sp,20
   20f34:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   20f38:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   20f3c:	e0bfff17 	ldw	r2,-4(fp)
   20f40:	1000021e 	bne	r2,zero,20f4c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   20f44:	00800104 	movi	r2,4
   20f48:	00002106 	br	20fd0 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   20f4c:	e0bfff17 	ldw	r2,-4(fp)
   20f50:	10800003 	ldbu	r2,0(r2)
   20f54:	10803fcc 	andi	r2,r2,255
   20f58:	108000a0 	cmpeqi	r2,r2,2
   20f5c:	1000021e 	bne	r2,zero,20f68 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   20f60:	00800044 	movi	r2,1
   20f64:	00001a06 	br	20fd0 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20f68:	0005303a 	rdctl	r2,status
   20f6c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20f70:	e0fffd17 	ldw	r3,-12(fp)
   20f74:	00bfff84 	movi	r2,-2
   20f78:	1884703a 	and	r2,r3,r2
   20f7c:	1001703a 	wrctl	status,r2
  
  return context;
   20f80:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   20f84:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   20f88:	e0bfff17 	ldw	r2,-4(fp)
   20f8c:	10800117 	ldw	r2,4(r2)
   20f90:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   20f94:	e0bffc17 	ldw	r2,-16(fp)
   20f98:	10c00117 	ldw	r3,4(r2)
   20f9c:	e0bffc17 	ldw	r2,-16(fp)
   20fa0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   20fa4:	e0bffc17 	ldw	r2,-16(fp)
   20fa8:	10c00117 	ldw	r3,4(r2)
   20fac:	e0bffc17 	ldw	r2,-16(fp)
   20fb0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   20fb4:	e0bffc17 	ldw	r2,-16(fp)
   20fb8:	1000058d 	sth	zero,22(r2)
   20fbc:	e0bffb17 	ldw	r2,-20(fp)
   20fc0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20fc4:	e0bffe17 	ldw	r2,-8(fp)
   20fc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   20fcc:	0005883a 	mov	r2,zero
}
   20fd0:	e037883a 	mov	sp,fp
   20fd4:	df000017 	ldw	fp,0(sp)
   20fd8:	dec00104 	addi	sp,sp,4
   20fdc:	f800283a 	ret

00020fe0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   20fe0:	defff304 	addi	sp,sp,-52
   20fe4:	dfc00c15 	stw	ra,48(sp)
   20fe8:	df000b15 	stw	fp,44(sp)
   20fec:	df000b04 	addi	fp,sp,44
   20ff0:	e13ffd15 	stw	r4,-12(fp)
   20ff4:	2805883a 	mov	r2,r5
   20ff8:	e1bfff15 	stw	r6,-4(fp)
   20ffc:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   21000:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   21004:	e0bfff17 	ldw	r2,-4(fp)
   21008:	1000021e 	bne	r2,zero,21014 <OSQPend+0x34>
        return ((void *)0);
   2100c:	0005883a 	mov	r2,zero
   21010:	00009106 	br	21258 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   21014:	e0bffd17 	ldw	r2,-12(fp)
   21018:	1000051e 	bne	r2,zero,21030 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   2101c:	e0bfff17 	ldw	r2,-4(fp)
   21020:	00c00104 	movi	r3,4
   21024:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   21028:	0005883a 	mov	r2,zero
   2102c:	00008a06 	br	21258 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   21030:	e0bffd17 	ldw	r2,-12(fp)
   21034:	10800003 	ldbu	r2,0(r2)
   21038:	10803fcc 	andi	r2,r2,255
   2103c:	108000a0 	cmpeqi	r2,r2,2
   21040:	1000051e 	bne	r2,zero,21058 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   21044:	e0bfff17 	ldw	r2,-4(fp)
   21048:	00c00044 	movi	r3,1
   2104c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   21050:	0005883a 	mov	r2,zero
   21054:	00008006 	br	21258 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   21058:	d0a7e403 	ldbu	r2,-24688(gp)
   2105c:	10803fcc 	andi	r2,r2,255
   21060:	10000526 	beq	r2,zero,21078 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   21064:	e0bfff17 	ldw	r2,-4(fp)
   21068:	00c00084 	movi	r3,2
   2106c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   21070:	0005883a 	mov	r2,zero
   21074:	00007806 	br	21258 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   21078:	d0a7d603 	ldbu	r2,-24744(gp)
   2107c:	10803fcc 	andi	r2,r2,255
   21080:	10000526 	beq	r2,zero,21098 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   21084:	e0bfff17 	ldw	r2,-4(fp)
   21088:	00c00344 	movi	r3,13
   2108c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   21090:	0005883a 	mov	r2,zero
   21094:	00007006 	br	21258 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21098:	0005303a 	rdctl	r2,status
   2109c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   210a0:	e0fffc17 	ldw	r3,-16(fp)
   210a4:	00bfff84 	movi	r2,-2
   210a8:	1884703a 	and	r2,r3,r2
   210ac:	1001703a 	wrctl	status,r2
  
  return context;
   210b0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   210b4:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   210b8:	e0bffd17 	ldw	r2,-12(fp)
   210bc:	10800117 	ldw	r2,4(r2)
   210c0:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   210c4:	e0bff817 	ldw	r2,-32(fp)
   210c8:	1080058b 	ldhu	r2,22(r2)
   210cc:	10bfffcc 	andi	r2,r2,65535
   210d0:	10001e26 	beq	r2,zero,2114c <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   210d4:	e0bff817 	ldw	r2,-32(fp)
   210d8:	10800417 	ldw	r2,16(r2)
   210dc:	11000104 	addi	r4,r2,4
   210e0:	e0fff817 	ldw	r3,-32(fp)
   210e4:	19000415 	stw	r4,16(r3)
   210e8:	10800017 	ldw	r2,0(r2)
   210ec:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   210f0:	e0bff817 	ldw	r2,-32(fp)
   210f4:	1080058b 	ldhu	r2,22(r2)
   210f8:	10bfffc4 	addi	r2,r2,-1
   210fc:	1007883a 	mov	r3,r2
   21100:	e0bff817 	ldw	r2,-32(fp)
   21104:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   21108:	e0bff817 	ldw	r2,-32(fp)
   2110c:	10c00417 	ldw	r3,16(r2)
   21110:	e0bff817 	ldw	r2,-32(fp)
   21114:	10800217 	ldw	r2,8(r2)
   21118:	1880041e 	bne	r3,r2,2112c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   2111c:	e0bff817 	ldw	r2,-32(fp)
   21120:	10c00117 	ldw	r3,4(r2)
   21124:	e0bff817 	ldw	r2,-32(fp)
   21128:	10c00415 	stw	r3,16(r2)
   2112c:	e0bff617 	ldw	r2,-40(fp)
   21130:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21134:	e0bff717 	ldw	r2,-36(fp)
   21138:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   2113c:	e0bfff17 	ldw	r2,-4(fp)
   21140:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   21144:	e0bff517 	ldw	r2,-44(fp)
   21148:	00004306 	br	21258 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   2114c:	d0a7e517 	ldw	r2,-24684(gp)
   21150:	d0e7e517 	ldw	r3,-24684(gp)
   21154:	18c00c03 	ldbu	r3,48(r3)
   21158:	18c00114 	ori	r3,r3,4
   2115c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   21160:	d0a7e517 	ldw	r2,-24684(gp)
   21164:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   21168:	d0a7e517 	ldw	r2,-24684(gp)
   2116c:	e0fffe0b 	ldhu	r3,-8(fp)
   21170:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   21174:	e13ffd17 	ldw	r4,-12(fp)
   21178:	001cf640 	call	1cf64 <OS_EventTaskWait>
   2117c:	e0bff617 	ldw	r2,-40(fp)
   21180:	e0bffb15 	stw	r2,-20(fp)
   21184:	e0bffb17 	ldw	r2,-20(fp)
   21188:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   2118c:	001d8180 	call	1d818 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21190:	0005303a 	rdctl	r2,status
   21194:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21198:	e0fff917 	ldw	r3,-28(fp)
   2119c:	00bfff84 	movi	r2,-2
   211a0:	1884703a 	and	r2,r3,r2
   211a4:	1001703a 	wrctl	status,r2
  
  return context;
   211a8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   211ac:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   211b0:	d0a7e517 	ldw	r2,-24684(gp)
   211b4:	10800c43 	ldbu	r2,49(r2)
   211b8:	10803fcc 	andi	r2,r2,255
   211bc:	10000326 	beq	r2,zero,211cc <OSQPend+0x1ec>
   211c0:	108000a0 	cmpeqi	r2,r2,2
   211c4:	1000071e 	bne	r2,zero,211e4 <OSQPend+0x204>
   211c8:	00000b06 	br	211f8 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   211cc:	d0a7e517 	ldw	r2,-24684(gp)
   211d0:	10800917 	ldw	r2,36(r2)
   211d4:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   211d8:	e0bfff17 	ldw	r2,-4(fp)
   211dc:	10000005 	stb	zero,0(r2)
             break;
   211e0:	00000e06 	br	2121c <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   211e4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   211e8:	e0bfff17 	ldw	r2,-4(fp)
   211ec:	00c00384 	movi	r3,14
   211f0:	10c00005 	stb	r3,0(r2)
             break;
   211f4:	00000906 	br	2121c <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   211f8:	d0a7e517 	ldw	r2,-24684(gp)
   211fc:	e17ffd17 	ldw	r5,-12(fp)
   21200:	1009883a 	mov	r4,r2
   21204:	001d1c40 	call	1d1c4 <OS_EventTaskRemove>
             pmsg = (void *)0;
   21208:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   2120c:	e0bfff17 	ldw	r2,-4(fp)
   21210:	00c00284 	movi	r3,10
   21214:	10c00005 	stb	r3,0(r2)
             break;
   21218:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   2121c:	d0a7e517 	ldw	r2,-24684(gp)
   21220:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   21224:	d0a7e517 	ldw	r2,-24684(gp)
   21228:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   2122c:	d0a7e517 	ldw	r2,-24684(gp)
   21230:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   21234:	d0a7e517 	ldw	r2,-24684(gp)
   21238:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   2123c:	d0a7e517 	ldw	r2,-24684(gp)
   21240:	10000915 	stw	zero,36(r2)
   21244:	e0bff617 	ldw	r2,-40(fp)
   21248:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2124c:	e0bffa17 	ldw	r2,-24(fp)
   21250:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   21254:	e0bff517 	ldw	r2,-44(fp)
}
   21258:	e037883a 	mov	sp,fp
   2125c:	dfc00117 	ldw	ra,4(sp)
   21260:	df000017 	ldw	fp,0(sp)
   21264:	dec00204 	addi	sp,sp,8
   21268:	f800283a 	ret

0002126c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   2126c:	defff604 	addi	sp,sp,-40
   21270:	dfc00915 	stw	ra,36(sp)
   21274:	df000815 	stw	fp,32(sp)
   21278:	df000804 	addi	fp,sp,32
   2127c:	e13ffd15 	stw	r4,-12(fp)
   21280:	2805883a 	mov	r2,r5
   21284:	e1bfff15 	stw	r6,-4(fp)
   21288:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   2128c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   21290:	e0bfff17 	ldw	r2,-4(fp)
   21294:	1000021e 	bne	r2,zero,212a0 <OSQPendAbort+0x34>
        return (0);
   21298:	0005883a 	mov	r2,zero
   2129c:	00004906 	br	213c4 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   212a0:	e0bffd17 	ldw	r2,-12(fp)
   212a4:	1000051e 	bne	r2,zero,212bc <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   212a8:	e0bfff17 	ldw	r2,-4(fp)
   212ac:	00c00104 	movi	r3,4
   212b0:	10c00005 	stb	r3,0(r2)
        return (0);
   212b4:	0005883a 	mov	r2,zero
   212b8:	00004206 	br	213c4 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   212bc:	e0bffd17 	ldw	r2,-12(fp)
   212c0:	10800003 	ldbu	r2,0(r2)
   212c4:	10803fcc 	andi	r2,r2,255
   212c8:	108000a0 	cmpeqi	r2,r2,2
   212cc:	1000051e 	bne	r2,zero,212e4 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   212d0:	e0bfff17 	ldw	r2,-4(fp)
   212d4:	00c00044 	movi	r3,1
   212d8:	10c00005 	stb	r3,0(r2)
        return (0);
   212dc:	0005883a 	mov	r2,zero
   212e0:	00003806 	br	213c4 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   212e4:	0005303a 	rdctl	r2,status
   212e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   212ec:	e0fffc17 	ldw	r3,-16(fp)
   212f0:	00bfff84 	movi	r2,-2
   212f4:	1884703a 	and	r2,r3,r2
   212f8:	1001703a 	wrctl	status,r2
  
  return context;
   212fc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   21300:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   21304:	e0bffd17 	ldw	r2,-12(fp)
   21308:	10800283 	ldbu	r2,10(r2)
   2130c:	10803fcc 	andi	r2,r2,255
   21310:	10002526 	beq	r2,zero,213a8 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   21314:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   21318:	e0bffe03 	ldbu	r2,-8(fp)
   2131c:	10800060 	cmpeqi	r2,r2,1
   21320:	10000e26 	beq	r2,zero,2135c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   21324:	00000806 	br	21348 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   21328:	01c00084 	movi	r7,2
   2132c:	01800104 	movi	r6,4
   21330:	000b883a 	mov	r5,zero
   21334:	e13ffd17 	ldw	r4,-12(fp)
   21338:	001cdcc0 	call	1cdcc <OS_EventTaskRdy>
                     nbr_tasks++;
   2133c:	e0bff803 	ldbu	r2,-32(fp)
   21340:	10800044 	addi	r2,r2,1
   21344:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   21348:	e0bffd17 	ldw	r2,-12(fp)
   2134c:	10800283 	ldbu	r2,10(r2)
   21350:	10803fcc 	andi	r2,r2,255
   21354:	103ff41e 	bne	r2,zero,21328 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   21358:	00000906 	br	21380 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   2135c:	01c00084 	movi	r7,2
   21360:	01800104 	movi	r6,4
   21364:	000b883a 	mov	r5,zero
   21368:	e13ffd17 	ldw	r4,-12(fp)
   2136c:	001cdcc0 	call	1cdcc <OS_EventTaskRdy>
                 nbr_tasks++;
   21370:	e0bff803 	ldbu	r2,-32(fp)
   21374:	10800044 	addi	r2,r2,1
   21378:	e0bff805 	stb	r2,-32(fp)
                 break;
   2137c:	0001883a 	nop
   21380:	e0bff917 	ldw	r2,-28(fp)
   21384:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21388:	e0bffa17 	ldw	r2,-24(fp)
   2138c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   21390:	001d8180 	call	1d818 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   21394:	e0bfff17 	ldw	r2,-4(fp)
   21398:	00c00384 	movi	r3,14
   2139c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   213a0:	e0bff803 	ldbu	r2,-32(fp)
   213a4:	00000706 	br	213c4 <OSQPendAbort+0x158>
   213a8:	e0bff917 	ldw	r2,-28(fp)
   213ac:	e0bffb15 	stw	r2,-20(fp)
   213b0:	e0bffb17 	ldw	r2,-20(fp)
   213b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   213b8:	e0bfff17 	ldw	r2,-4(fp)
   213bc:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   213c0:	0005883a 	mov	r2,zero
}
   213c4:	e037883a 	mov	sp,fp
   213c8:	dfc00117 	ldw	ra,4(sp)
   213cc:	df000017 	ldw	fp,0(sp)
   213d0:	dec00204 	addi	sp,sp,8
   213d4:	f800283a 	ret

000213d8 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   213d8:	defff604 	addi	sp,sp,-40
   213dc:	dfc00915 	stw	ra,36(sp)
   213e0:	df000815 	stw	fp,32(sp)
   213e4:	df000804 	addi	fp,sp,32
   213e8:	e13ffe15 	stw	r4,-8(fp)
   213ec:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   213f0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   213f4:	e0bffe17 	ldw	r2,-8(fp)
   213f8:	1000021e 	bne	r2,zero,21404 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   213fc:	00800104 	movi	r2,4
   21400:	00004a06 	br	2152c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   21404:	e0bffe17 	ldw	r2,-8(fp)
   21408:	10800003 	ldbu	r2,0(r2)
   2140c:	10803fcc 	andi	r2,r2,255
   21410:	108000a0 	cmpeqi	r2,r2,2
   21414:	1000021e 	bne	r2,zero,21420 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   21418:	00800044 	movi	r2,1
   2141c:	00004306 	br	2152c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21420:	0005303a 	rdctl	r2,status
   21424:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21428:	e0fffd17 	ldw	r3,-12(fp)
   2142c:	00bfff84 	movi	r2,-2
   21430:	1884703a 	and	r2,r3,r2
   21434:	1001703a 	wrctl	status,r2
  
  return context;
   21438:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   2143c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   21440:	e0bffe17 	ldw	r2,-8(fp)
   21444:	10800283 	ldbu	r2,10(r2)
   21448:	10803fcc 	andi	r2,r2,255
   2144c:	10000c26 	beq	r2,zero,21480 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   21450:	000f883a 	mov	r7,zero
   21454:	01800104 	movi	r6,4
   21458:	e17fff17 	ldw	r5,-4(fp)
   2145c:	e13ffe17 	ldw	r4,-8(fp)
   21460:	001cdcc0 	call	1cdcc <OS_EventTaskRdy>
   21464:	e0bff817 	ldw	r2,-32(fp)
   21468:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2146c:	e0bff917 	ldw	r2,-28(fp)
   21470:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   21474:	001d8180 	call	1d818 <OS_Sched>
        return (OS_ERR_NONE);
   21478:	0005883a 	mov	r2,zero
   2147c:	00002b06 	br	2152c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   21480:	e0bffe17 	ldw	r2,-8(fp)
   21484:	10800117 	ldw	r2,4(r2)
   21488:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   2148c:	e0bffb17 	ldw	r2,-20(fp)
   21490:	10c0058b 	ldhu	r3,22(r2)
   21494:	e0bffb17 	ldw	r2,-20(fp)
   21498:	1080050b 	ldhu	r2,20(r2)
   2149c:	18ffffcc 	andi	r3,r3,65535
   214a0:	10bfffcc 	andi	r2,r2,65535
   214a4:	18800636 	bltu	r3,r2,214c0 <OSQPost+0xe8>
   214a8:	e0bff817 	ldw	r2,-32(fp)
   214ac:	e0bffa15 	stw	r2,-24(fp)
   214b0:	e0bffa17 	ldw	r2,-24(fp)
   214b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   214b8:	00800784 	movi	r2,30
   214bc:	00001b06 	br	2152c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   214c0:	e0bffb17 	ldw	r2,-20(fp)
   214c4:	10800317 	ldw	r2,12(r2)
   214c8:	11000104 	addi	r4,r2,4
   214cc:	e0fffb17 	ldw	r3,-20(fp)
   214d0:	19000315 	stw	r4,12(r3)
   214d4:	e0ffff17 	ldw	r3,-4(fp)
   214d8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   214dc:	e0bffb17 	ldw	r2,-20(fp)
   214e0:	1080058b 	ldhu	r2,22(r2)
   214e4:	10800044 	addi	r2,r2,1
   214e8:	1007883a 	mov	r3,r2
   214ec:	e0bffb17 	ldw	r2,-20(fp)
   214f0:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   214f4:	e0bffb17 	ldw	r2,-20(fp)
   214f8:	10c00317 	ldw	r3,12(r2)
   214fc:	e0bffb17 	ldw	r2,-20(fp)
   21500:	10800217 	ldw	r2,8(r2)
   21504:	1880041e 	bne	r3,r2,21518 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   21508:	e0bffb17 	ldw	r2,-20(fp)
   2150c:	10c00117 	ldw	r3,4(r2)
   21510:	e0bffb17 	ldw	r2,-20(fp)
   21514:	10c00315 	stw	r3,12(r2)
   21518:	e0bff817 	ldw	r2,-32(fp)
   2151c:	e0bffc15 	stw	r2,-16(fp)
   21520:	e0bffc17 	ldw	r2,-16(fp)
   21524:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   21528:	0005883a 	mov	r2,zero
}
   2152c:	e037883a 	mov	sp,fp
   21530:	dfc00117 	ldw	ra,4(sp)
   21534:	df000017 	ldw	fp,0(sp)
   21538:	dec00204 	addi	sp,sp,8
   2153c:	f800283a 	ret

00021540 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   21540:	defff604 	addi	sp,sp,-40
   21544:	dfc00915 	stw	ra,36(sp)
   21548:	df000815 	stw	fp,32(sp)
   2154c:	df000804 	addi	fp,sp,32
   21550:	e13ffe15 	stw	r4,-8(fp)
   21554:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   21558:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   2155c:	e0bffe17 	ldw	r2,-8(fp)
   21560:	1000021e 	bne	r2,zero,2156c <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   21564:	00800104 	movi	r2,4
   21568:	00004c06 	br	2169c <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   2156c:	e0bffe17 	ldw	r2,-8(fp)
   21570:	10800003 	ldbu	r2,0(r2)
   21574:	10803fcc 	andi	r2,r2,255
   21578:	108000a0 	cmpeqi	r2,r2,2
   2157c:	1000021e 	bne	r2,zero,21588 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   21580:	00800044 	movi	r2,1
   21584:	00004506 	br	2169c <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21588:	0005303a 	rdctl	r2,status
   2158c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21590:	e0fffd17 	ldw	r3,-12(fp)
   21594:	00bfff84 	movi	r2,-2
   21598:	1884703a 	and	r2,r3,r2
   2159c:	1001703a 	wrctl	status,r2
  
  return context;
   215a0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   215a4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   215a8:	e0bffe17 	ldw	r2,-8(fp)
   215ac:	10800283 	ldbu	r2,10(r2)
   215b0:	10803fcc 	andi	r2,r2,255
   215b4:	10000c26 	beq	r2,zero,215e8 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   215b8:	000f883a 	mov	r7,zero
   215bc:	01800104 	movi	r6,4
   215c0:	e17fff17 	ldw	r5,-4(fp)
   215c4:	e13ffe17 	ldw	r4,-8(fp)
   215c8:	001cdcc0 	call	1cdcc <OS_EventTaskRdy>
   215cc:	e0bff817 	ldw	r2,-32(fp)
   215d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   215d4:	e0bff917 	ldw	r2,-28(fp)
   215d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   215dc:	001d8180 	call	1d818 <OS_Sched>
        return (OS_ERR_NONE);
   215e0:	0005883a 	mov	r2,zero
   215e4:	00002d06 	br	2169c <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   215e8:	e0bffe17 	ldw	r2,-8(fp)
   215ec:	10800117 	ldw	r2,4(r2)
   215f0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   215f4:	e0bffb17 	ldw	r2,-20(fp)
   215f8:	10c0058b 	ldhu	r3,22(r2)
   215fc:	e0bffb17 	ldw	r2,-20(fp)
   21600:	1080050b 	ldhu	r2,20(r2)
   21604:	18ffffcc 	andi	r3,r3,65535
   21608:	10bfffcc 	andi	r2,r2,65535
   2160c:	18800636 	bltu	r3,r2,21628 <OSQPostFront+0xe8>
   21610:	e0bff817 	ldw	r2,-32(fp)
   21614:	e0bffa15 	stw	r2,-24(fp)
   21618:	e0bffa17 	ldw	r2,-24(fp)
   2161c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   21620:	00800784 	movi	r2,30
   21624:	00001d06 	br	2169c <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   21628:	e0bffb17 	ldw	r2,-20(fp)
   2162c:	10c00417 	ldw	r3,16(r2)
   21630:	e0bffb17 	ldw	r2,-20(fp)
   21634:	10800117 	ldw	r2,4(r2)
   21638:	1880041e 	bne	r3,r2,2164c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   2163c:	e0bffb17 	ldw	r2,-20(fp)
   21640:	10c00217 	ldw	r3,8(r2)
   21644:	e0bffb17 	ldw	r2,-20(fp)
   21648:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   2164c:	e0bffb17 	ldw	r2,-20(fp)
   21650:	10800417 	ldw	r2,16(r2)
   21654:	10ffff04 	addi	r3,r2,-4
   21658:	e0bffb17 	ldw	r2,-20(fp)
   2165c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   21660:	e0bffb17 	ldw	r2,-20(fp)
   21664:	10800417 	ldw	r2,16(r2)
   21668:	e0ffff17 	ldw	r3,-4(fp)
   2166c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   21670:	e0bffb17 	ldw	r2,-20(fp)
   21674:	1080058b 	ldhu	r2,22(r2)
   21678:	10800044 	addi	r2,r2,1
   2167c:	1007883a 	mov	r3,r2
   21680:	e0bffb17 	ldw	r2,-20(fp)
   21684:	10c0058d 	sth	r3,22(r2)
   21688:	e0bff817 	ldw	r2,-32(fp)
   2168c:	e0bffc15 	stw	r2,-16(fp)
   21690:	e0bffc17 	ldw	r2,-16(fp)
   21694:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   21698:	0005883a 	mov	r2,zero
}
   2169c:	e037883a 	mov	sp,fp
   216a0:	dfc00117 	ldw	ra,4(sp)
   216a4:	df000017 	ldw	fp,0(sp)
   216a8:	dec00204 	addi	sp,sp,8
   216ac:	f800283a 	ret

000216b0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   216b0:	defff504 	addi	sp,sp,-44
   216b4:	dfc00a15 	stw	ra,40(sp)
   216b8:	df000915 	stw	fp,36(sp)
   216bc:	df000904 	addi	fp,sp,36
   216c0:	e13ffd15 	stw	r4,-12(fp)
   216c4:	e17ffe15 	stw	r5,-8(fp)
   216c8:	3005883a 	mov	r2,r6
   216cc:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   216d0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   216d4:	e0bffd17 	ldw	r2,-12(fp)
   216d8:	1000021e 	bne	r2,zero,216e4 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   216dc:	00800104 	movi	r2,4
   216e0:	00007106 	br	218a8 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   216e4:	e0bffd17 	ldw	r2,-12(fp)
   216e8:	10800003 	ldbu	r2,0(r2)
   216ec:	10803fcc 	andi	r2,r2,255
   216f0:	108000a0 	cmpeqi	r2,r2,2
   216f4:	1000021e 	bne	r2,zero,21700 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   216f8:	00800044 	movi	r2,1
   216fc:	00006a06 	br	218a8 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21700:	0005303a 	rdctl	r2,status
   21704:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21708:	e0fffc17 	ldw	r3,-16(fp)
   2170c:	00bfff84 	movi	r2,-2
   21710:	1884703a 	and	r2,r3,r2
   21714:	1001703a 	wrctl	status,r2
  
  return context;
   21718:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   2171c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   21720:	e0bffd17 	ldw	r2,-12(fp)
   21724:	10800283 	ldbu	r2,10(r2)
   21728:	10803fcc 	andi	r2,r2,255
   2172c:	10001d26 	beq	r2,zero,217a4 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   21730:	e0bfff03 	ldbu	r2,-4(fp)
   21734:	1080004c 	andi	r2,r2,1
   21738:	10000b26 	beq	r2,zero,21768 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   2173c:	00000506 	br	21754 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   21740:	000f883a 	mov	r7,zero
   21744:	01800104 	movi	r6,4
   21748:	e17ffe17 	ldw	r5,-8(fp)
   2174c:	e13ffd17 	ldw	r4,-12(fp)
   21750:	001cdcc0 	call	1cdcc <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   21754:	e0bffd17 	ldw	r2,-12(fp)
   21758:	10800283 	ldbu	r2,10(r2)
   2175c:	10803fcc 	andi	r2,r2,255
   21760:	103ff71e 	bne	r2,zero,21740 <OSQPostOpt+0x90>
   21764:	00000506 	br	2177c <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   21768:	000f883a 	mov	r7,zero
   2176c:	01800104 	movi	r6,4
   21770:	e17ffe17 	ldw	r5,-8(fp)
   21774:	e13ffd17 	ldw	r4,-12(fp)
   21778:	001cdcc0 	call	1cdcc <OS_EventTaskRdy>
   2177c:	e0bff717 	ldw	r2,-36(fp)
   21780:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21784:	e0bff817 	ldw	r2,-32(fp)
   21788:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   2178c:	e0bfff03 	ldbu	r2,-4(fp)
   21790:	1080010c 	andi	r2,r2,4
   21794:	1000011e 	bne	r2,zero,2179c <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   21798:	001d8180 	call	1d818 <OS_Sched>
        }
        return (OS_ERR_NONE);
   2179c:	0005883a 	mov	r2,zero
   217a0:	00004106 	br	218a8 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   217a4:	e0bffd17 	ldw	r2,-12(fp)
   217a8:	10800117 	ldw	r2,4(r2)
   217ac:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   217b0:	e0bffa17 	ldw	r2,-24(fp)
   217b4:	10c0058b 	ldhu	r3,22(r2)
   217b8:	e0bffa17 	ldw	r2,-24(fp)
   217bc:	1080050b 	ldhu	r2,20(r2)
   217c0:	18ffffcc 	andi	r3,r3,65535
   217c4:	10bfffcc 	andi	r2,r2,65535
   217c8:	18800636 	bltu	r3,r2,217e4 <OSQPostOpt+0x134>
   217cc:	e0bff717 	ldw	r2,-36(fp)
   217d0:	e0bff915 	stw	r2,-28(fp)
   217d4:	e0bff917 	ldw	r2,-28(fp)
   217d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   217dc:	00800784 	movi	r2,30
   217e0:	00003106 	br	218a8 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   217e4:	e0bfff03 	ldbu	r2,-4(fp)
   217e8:	1080008c 	andi	r2,r2,2
   217ec:	10001326 	beq	r2,zero,2183c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   217f0:	e0bffa17 	ldw	r2,-24(fp)
   217f4:	10c00417 	ldw	r3,16(r2)
   217f8:	e0bffa17 	ldw	r2,-24(fp)
   217fc:	10800117 	ldw	r2,4(r2)
   21800:	1880041e 	bne	r3,r2,21814 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   21804:	e0bffa17 	ldw	r2,-24(fp)
   21808:	10c00217 	ldw	r3,8(r2)
   2180c:	e0bffa17 	ldw	r2,-24(fp)
   21810:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   21814:	e0bffa17 	ldw	r2,-24(fp)
   21818:	10800417 	ldw	r2,16(r2)
   2181c:	10ffff04 	addi	r3,r2,-4
   21820:	e0bffa17 	ldw	r2,-24(fp)
   21824:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   21828:	e0bffa17 	ldw	r2,-24(fp)
   2182c:	10800417 	ldw	r2,16(r2)
   21830:	e0fffe17 	ldw	r3,-8(fp)
   21834:	10c00015 	stw	r3,0(r2)
   21838:	00001006 	br	2187c <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   2183c:	e0bffa17 	ldw	r2,-24(fp)
   21840:	10800317 	ldw	r2,12(r2)
   21844:	11000104 	addi	r4,r2,4
   21848:	e0fffa17 	ldw	r3,-24(fp)
   2184c:	19000315 	stw	r4,12(r3)
   21850:	e0fffe17 	ldw	r3,-8(fp)
   21854:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   21858:	e0bffa17 	ldw	r2,-24(fp)
   2185c:	10c00317 	ldw	r3,12(r2)
   21860:	e0bffa17 	ldw	r2,-24(fp)
   21864:	10800217 	ldw	r2,8(r2)
   21868:	1880041e 	bne	r3,r2,2187c <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   2186c:	e0bffa17 	ldw	r2,-24(fp)
   21870:	10c00117 	ldw	r3,4(r2)
   21874:	e0bffa17 	ldw	r2,-24(fp)
   21878:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   2187c:	e0bffa17 	ldw	r2,-24(fp)
   21880:	1080058b 	ldhu	r2,22(r2)
   21884:	10800044 	addi	r2,r2,1
   21888:	1007883a 	mov	r3,r2
   2188c:	e0bffa17 	ldw	r2,-24(fp)
   21890:	10c0058d 	sth	r3,22(r2)
   21894:	e0bff717 	ldw	r2,-36(fp)
   21898:	e0bffb15 	stw	r2,-20(fp)
   2189c:	e0bffb17 	ldw	r2,-20(fp)
   218a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   218a4:	0005883a 	mov	r2,zero
}
   218a8:	e037883a 	mov	sp,fp
   218ac:	dfc00117 	ldw	ra,4(sp)
   218b0:	df000017 	ldw	fp,0(sp)
   218b4:	dec00204 	addi	sp,sp,8
   218b8:	f800283a 	ret

000218bc <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   218bc:	defff604 	addi	sp,sp,-40
   218c0:	df000915 	stw	fp,36(sp)
   218c4:	df000904 	addi	fp,sp,36
   218c8:	e13ffe15 	stw	r4,-8(fp)
   218cc:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   218d0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   218d4:	e0bffe17 	ldw	r2,-8(fp)
   218d8:	1000021e 	bne	r2,zero,218e4 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   218dc:	00800104 	movi	r2,4
   218e0:	00004906 	br	21a08 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   218e4:	e0bfff17 	ldw	r2,-4(fp)
   218e8:	1000021e 	bne	r2,zero,218f4 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   218ec:	00800244 	movi	r2,9
   218f0:	00004506 	br	21a08 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   218f4:	e0bffe17 	ldw	r2,-8(fp)
   218f8:	10800003 	ldbu	r2,0(r2)
   218fc:	10803fcc 	andi	r2,r2,255
   21900:	108000a0 	cmpeqi	r2,r2,2
   21904:	1000021e 	bne	r2,zero,21910 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   21908:	00800044 	movi	r2,1
   2190c:	00003e06 	br	21a08 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21910:	0005303a 	rdctl	r2,status
   21914:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21918:	e0fffd17 	ldw	r3,-12(fp)
   2191c:	00bfff84 	movi	r2,-2
   21920:	1884703a 	and	r2,r3,r2
   21924:	1001703a 	wrctl	status,r2
  
  return context;
   21928:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   2192c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   21930:	e0bffe17 	ldw	r2,-8(fp)
   21934:	10c00283 	ldbu	r3,10(r2)
   21938:	e0bfff17 	ldw	r2,-4(fp)
   2193c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   21940:	e0bffe17 	ldw	r2,-8(fp)
   21944:	108002c4 	addi	r2,r2,11
   21948:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   2194c:	e0bfff17 	ldw	r2,-4(fp)
   21950:	10800204 	addi	r2,r2,8
   21954:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   21958:	e03ff705 	stb	zero,-36(fp)
   2195c:	00000b06 	br	2198c <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   21960:	e0bff917 	ldw	r2,-28(fp)
   21964:	10c00044 	addi	r3,r2,1
   21968:	e0fff915 	stw	r3,-28(fp)
   2196c:	e0fff817 	ldw	r3,-32(fp)
   21970:	19000044 	addi	r4,r3,1
   21974:	e13ff815 	stw	r4,-32(fp)
   21978:	18c00003 	ldbu	r3,0(r3)
   2197c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   21980:	e0bff703 	ldbu	r2,-36(fp)
   21984:	10800044 	addi	r2,r2,1
   21988:	e0bff705 	stb	r2,-36(fp)
   2198c:	e0bff703 	ldbu	r2,-36(fp)
   21990:	108000f0 	cmpltui	r2,r2,3
   21994:	103ff21e 	bne	r2,zero,21960 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   21998:	e0bffe17 	ldw	r2,-8(fp)
   2199c:	10800117 	ldw	r2,4(r2)
   219a0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   219a4:	e0bffc17 	ldw	r2,-16(fp)
   219a8:	1080058b 	ldhu	r2,22(r2)
   219ac:	10bfffcc 	andi	r2,r2,65535
   219b0:	10000626 	beq	r2,zero,219cc <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   219b4:	e0bffc17 	ldw	r2,-16(fp)
   219b8:	10800417 	ldw	r2,16(r2)
   219bc:	10c00017 	ldw	r3,0(r2)
   219c0:	e0bfff17 	ldw	r2,-4(fp)
   219c4:	10c00015 	stw	r3,0(r2)
   219c8:	00000206 	br	219d4 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   219cc:	e0bfff17 	ldw	r2,-4(fp)
   219d0:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   219d4:	e0bffc17 	ldw	r2,-16(fp)
   219d8:	10c0058b 	ldhu	r3,22(r2)
   219dc:	e0bfff17 	ldw	r2,-4(fp)
   219e0:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   219e4:	e0bffc17 	ldw	r2,-16(fp)
   219e8:	10c0050b 	ldhu	r3,20(r2)
   219ec:	e0bfff17 	ldw	r2,-4(fp)
   219f0:	10c0018d 	sth	r3,6(r2)
   219f4:	e0bffa17 	ldw	r2,-24(fp)
   219f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   219fc:	e0bffb17 	ldw	r2,-20(fp)
   21a00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   21a04:	0005883a 	mov	r2,zero
}
   21a08:	e037883a 	mov	sp,fp
   21a0c:	df000017 	ldw	fp,0(sp)
   21a10:	dec00104 	addi	sp,sp,4
   21a14:	f800283a 	ret

00021a18 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   21a18:	defffb04 	addi	sp,sp,-20
   21a1c:	dfc00415 	stw	ra,16(sp)
   21a20:	df000315 	stw	fp,12(sp)
   21a24:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   21a28:	01407804 	movi	r5,480
   21a2c:	01000174 	movhi	r4,5
   21a30:	210c7704 	addi	r4,r4,12764
   21a34:	001d75c0 	call	1d75c <OS_MemClr>
    pq1 = &OSQTbl[0];
   21a38:	00800174 	movhi	r2,5
   21a3c:	108c7704 	addi	r2,r2,12764
   21a40:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   21a44:	00800174 	movhi	r2,5
   21a48:	108c7d04 	addi	r2,r2,12788
   21a4c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   21a50:	e03ffd0d 	sth	zero,-12(fp)
   21a54:	00000c06 	br	21a88 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   21a58:	e0bffe17 	ldw	r2,-8(fp)
   21a5c:	e0ffff17 	ldw	r3,-4(fp)
   21a60:	10c00015 	stw	r3,0(r2)
        pq1++;
   21a64:	e0bffe17 	ldw	r2,-8(fp)
   21a68:	10800604 	addi	r2,r2,24
   21a6c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   21a70:	e0bfff17 	ldw	r2,-4(fp)
   21a74:	10800604 	addi	r2,r2,24
   21a78:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   21a7c:	e0bffd0b 	ldhu	r2,-12(fp)
   21a80:	10800044 	addi	r2,r2,1
   21a84:	e0bffd0d 	sth	r2,-12(fp)
   21a88:	e0bffd0b 	ldhu	r2,-12(fp)
   21a8c:	108004f0 	cmpltui	r2,r2,19
   21a90:	103ff11e 	bne	r2,zero,21a58 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   21a94:	e0bffe17 	ldw	r2,-8(fp)
   21a98:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   21a9c:	00800174 	movhi	r2,5
   21aa0:	108c7704 	addi	r2,r2,12764
   21aa4:	d0a7e115 	stw	r2,-24700(gp)
#endif
}
   21aa8:	0001883a 	nop
   21aac:	e037883a 	mov	sp,fp
   21ab0:	dfc00117 	ldw	ra,4(sp)
   21ab4:	df000017 	ldw	fp,0(sp)
   21ab8:	dec00204 	addi	sp,sp,8
   21abc:	f800283a 	ret

00021ac0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   21ac0:	defffa04 	addi	sp,sp,-24
   21ac4:	df000515 	stw	fp,20(sp)
   21ac8:	df000504 	addi	fp,sp,20
   21acc:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   21ad0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   21ad4:	e0bfff17 	ldw	r2,-4(fp)
   21ad8:	1000021e 	bne	r2,zero,21ae4 <OSSemAccept+0x24>
        return (0);
   21adc:	0005883a 	mov	r2,zero
   21ae0:	00001f06 	br	21b60 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   21ae4:	e0bfff17 	ldw	r2,-4(fp)
   21ae8:	10800003 	ldbu	r2,0(r2)
   21aec:	10803fcc 	andi	r2,r2,255
   21af0:	108000e0 	cmpeqi	r2,r2,3
   21af4:	1000021e 	bne	r2,zero,21b00 <OSSemAccept+0x40>
        return (0);
   21af8:	0005883a 	mov	r2,zero
   21afc:	00001806 	br	21b60 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21b00:	0005303a 	rdctl	r2,status
   21b04:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21b08:	e0fffe17 	ldw	r3,-8(fp)
   21b0c:	00bfff84 	movi	r2,-2
   21b10:	1884703a 	and	r2,r3,r2
   21b14:	1001703a 	wrctl	status,r2
  
  return context;
   21b18:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   21b1c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   21b20:	e0bfff17 	ldw	r2,-4(fp)
   21b24:	1080020b 	ldhu	r2,8(r2)
   21b28:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   21b2c:	e0bffd0b 	ldhu	r2,-12(fp)
   21b30:	10000626 	beq	r2,zero,21b4c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   21b34:	e0bfff17 	ldw	r2,-4(fp)
   21b38:	1080020b 	ldhu	r2,8(r2)
   21b3c:	10bfffc4 	addi	r2,r2,-1
   21b40:	1007883a 	mov	r3,r2
   21b44:	e0bfff17 	ldw	r2,-4(fp)
   21b48:	10c0020d 	sth	r3,8(r2)
   21b4c:	e0bffb17 	ldw	r2,-20(fp)
   21b50:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21b54:	e0bffc17 	ldw	r2,-16(fp)
   21b58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   21b5c:	e0bffd0b 	ldhu	r2,-12(fp)
}
   21b60:	e037883a 	mov	sp,fp
   21b64:	df000017 	ldw	fp,0(sp)
   21b68:	dec00104 	addi	sp,sp,4
   21b6c:	f800283a 	ret

00021b70 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   21b70:	defff904 	addi	sp,sp,-28
   21b74:	dfc00615 	stw	ra,24(sp)
   21b78:	df000515 	stw	fp,20(sp)
   21b7c:	df000504 	addi	fp,sp,20
   21b80:	2005883a 	mov	r2,r4
   21b84:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   21b88:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   21b8c:	d0a7e403 	ldbu	r2,-24688(gp)
   21b90:	10803fcc 	andi	r2,r2,255
   21b94:	10000226 	beq	r2,zero,21ba0 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   21b98:	0005883a 	mov	r2,zero
   21b9c:	00002506 	br	21c34 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21ba0:	0005303a 	rdctl	r2,status
   21ba4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21ba8:	e0fffe17 	ldw	r3,-8(fp)
   21bac:	00bfff84 	movi	r2,-2
   21bb0:	1884703a 	and	r2,r3,r2
   21bb4:	1001703a 	wrctl	status,r2
  
  return context;
   21bb8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   21bbc:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   21bc0:	d0a7e317 	ldw	r2,-24692(gp)
   21bc4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   21bc8:	d0a7e317 	ldw	r2,-24692(gp)
   21bcc:	10000326 	beq	r2,zero,21bdc <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   21bd0:	d0a7e317 	ldw	r2,-24692(gp)
   21bd4:	10800117 	ldw	r2,4(r2)
   21bd8:	d0a7e315 	stw	r2,-24692(gp)
   21bdc:	e0bffb17 	ldw	r2,-20(fp)
   21be0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21be4:	e0bffc17 	ldw	r2,-16(fp)
   21be8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   21bec:	e0bffd17 	ldw	r2,-12(fp)
   21bf0:	10000f26 	beq	r2,zero,21c30 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   21bf4:	e0bffd17 	ldw	r2,-12(fp)
   21bf8:	00c000c4 	movi	r3,3
   21bfc:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   21c00:	e0bffd17 	ldw	r2,-12(fp)
   21c04:	e0ffff0b 	ldhu	r3,-4(fp)
   21c08:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   21c0c:	e0bffd17 	ldw	r2,-12(fp)
   21c10:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   21c14:	e0bffd17 	ldw	r2,-12(fp)
   21c18:	00c00fc4 	movi	r3,63
   21c1c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   21c20:	e0bffd17 	ldw	r2,-12(fp)
   21c24:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   21c28:	e13ffd17 	ldw	r4,-12(fp)
   21c2c:	001d37c0 	call	1d37c <OS_EventWaitListInit>
    }
    return (pevent);
   21c30:	e0bffd17 	ldw	r2,-12(fp)
}
   21c34:	e037883a 	mov	sp,fp
   21c38:	dfc00117 	ldw	ra,4(sp)
   21c3c:	df000017 	ldw	fp,0(sp)
   21c40:	dec00204 	addi	sp,sp,8
   21c44:	f800283a 	ret

00021c48 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   21c48:	defff304 	addi	sp,sp,-52
   21c4c:	dfc00c15 	stw	ra,48(sp)
   21c50:	df000b15 	stw	fp,44(sp)
   21c54:	df000b04 	addi	fp,sp,44
   21c58:	e13ffd15 	stw	r4,-12(fp)
   21c5c:	2805883a 	mov	r2,r5
   21c60:	e1bfff15 	stw	r6,-4(fp)
   21c64:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   21c68:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   21c6c:	e0bfff17 	ldw	r2,-4(fp)
   21c70:	1000021e 	bne	r2,zero,21c7c <OSSemDel+0x34>
        return (pevent);
   21c74:	e0bffd17 	ldw	r2,-12(fp)
   21c78:	00007e06 	br	21e74 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   21c7c:	e0bffd17 	ldw	r2,-12(fp)
   21c80:	1000051e 	bne	r2,zero,21c98 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   21c84:	e0bfff17 	ldw	r2,-4(fp)
   21c88:	00c00104 	movi	r3,4
   21c8c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   21c90:	e0bffd17 	ldw	r2,-12(fp)
   21c94:	00007706 	br	21e74 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   21c98:	e0bffd17 	ldw	r2,-12(fp)
   21c9c:	10800003 	ldbu	r2,0(r2)
   21ca0:	10803fcc 	andi	r2,r2,255
   21ca4:	108000e0 	cmpeqi	r2,r2,3
   21ca8:	1000051e 	bne	r2,zero,21cc0 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   21cac:	e0bfff17 	ldw	r2,-4(fp)
   21cb0:	00c00044 	movi	r3,1
   21cb4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   21cb8:	e0bffd17 	ldw	r2,-12(fp)
   21cbc:	00006d06 	br	21e74 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   21cc0:	d0a7e403 	ldbu	r2,-24688(gp)
   21cc4:	10803fcc 	andi	r2,r2,255
   21cc8:	10000526 	beq	r2,zero,21ce0 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   21ccc:	e0bfff17 	ldw	r2,-4(fp)
   21cd0:	00c003c4 	movi	r3,15
   21cd4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   21cd8:	e0bffd17 	ldw	r2,-12(fp)
   21cdc:	00006506 	br	21e74 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21ce0:	0005303a 	rdctl	r2,status
   21ce4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21ce8:	e0fffc17 	ldw	r3,-16(fp)
   21cec:	00bfff84 	movi	r2,-2
   21cf0:	1884703a 	and	r2,r3,r2
   21cf4:	1001703a 	wrctl	status,r2
  
  return context;
   21cf8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   21cfc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   21d00:	e0bffd17 	ldw	r2,-12(fp)
   21d04:	10800283 	ldbu	r2,10(r2)
   21d08:	10803fcc 	andi	r2,r2,255
   21d0c:	10000326 	beq	r2,zero,21d1c <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   21d10:	00800044 	movi	r2,1
   21d14:	e0bff505 	stb	r2,-44(fp)
   21d18:	00000106 	br	21d20 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   21d1c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   21d20:	e0bffe03 	ldbu	r2,-8(fp)
   21d24:	10000326 	beq	r2,zero,21d34 <OSSemDel+0xec>
   21d28:	10800060 	cmpeqi	r2,r2,1
   21d2c:	1000281e 	bne	r2,zero,21dd0 <OSSemDel+0x188>
   21d30:	00004506 	br	21e48 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   21d34:	e0bff503 	ldbu	r2,-44(fp)
   21d38:	1000161e 	bne	r2,zero,21d94 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   21d3c:	e0bffd17 	ldw	r2,-12(fp)
   21d40:	00c00fc4 	movi	r3,63
   21d44:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   21d48:	e0bffd17 	ldw	r2,-12(fp)
   21d4c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   21d50:	e0bffd17 	ldw	r2,-12(fp)
   21d54:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   21d58:	d0e7e317 	ldw	r3,-24692(gp)
   21d5c:	e0bffd17 	ldw	r2,-12(fp)
   21d60:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   21d64:	e0bffd17 	ldw	r2,-12(fp)
   21d68:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   21d6c:	e0bffd17 	ldw	r2,-12(fp)
   21d70:	d0a7e315 	stw	r2,-24692(gp)
   21d74:	e0bff717 	ldw	r2,-36(fp)
   21d78:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21d7c:	e0bff817 	ldw	r2,-32(fp)
   21d80:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   21d84:	e0bfff17 	ldw	r2,-4(fp)
   21d88:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   21d8c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   21d90:	00003706 	br	21e70 <OSSemDel+0x228>
   21d94:	e0bff717 	ldw	r2,-36(fp)
   21d98:	e0bff915 	stw	r2,-28(fp)
   21d9c:	e0bff917 	ldw	r2,-28(fp)
   21da0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   21da4:	e0bfff17 	ldw	r2,-4(fp)
   21da8:	00c01244 	movi	r3,73
   21dac:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   21db0:	e0bffd17 	ldw	r2,-12(fp)
   21db4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   21db8:	00002d06 	br	21e70 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   21dbc:	000f883a 	mov	r7,zero
   21dc0:	01800044 	movi	r6,1
   21dc4:	000b883a 	mov	r5,zero
   21dc8:	e13ffd17 	ldw	r4,-12(fp)
   21dcc:	001cdcc0 	call	1cdcc <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   21dd0:	e0bffd17 	ldw	r2,-12(fp)
   21dd4:	10800283 	ldbu	r2,10(r2)
   21dd8:	10803fcc 	andi	r2,r2,255
   21ddc:	103ff71e 	bne	r2,zero,21dbc <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   21de0:	e0bffd17 	ldw	r2,-12(fp)
   21de4:	00c00fc4 	movi	r3,63
   21de8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   21dec:	e0bffd17 	ldw	r2,-12(fp)
   21df0:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   21df4:	e0bffd17 	ldw	r2,-12(fp)
   21df8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   21dfc:	d0e7e317 	ldw	r3,-24692(gp)
   21e00:	e0bffd17 	ldw	r2,-12(fp)
   21e04:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   21e08:	e0bffd17 	ldw	r2,-12(fp)
   21e0c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   21e10:	e0bffd17 	ldw	r2,-12(fp)
   21e14:	d0a7e315 	stw	r2,-24692(gp)
   21e18:	e0bff717 	ldw	r2,-36(fp)
   21e1c:	e0bffa15 	stw	r2,-24(fp)
   21e20:	e0bffa17 	ldw	r2,-24(fp)
   21e24:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   21e28:	e0bff503 	ldbu	r2,-44(fp)
   21e2c:	10800058 	cmpnei	r2,r2,1
   21e30:	1000011e 	bne	r2,zero,21e38 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   21e34:	001d8180 	call	1d818 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   21e38:	e0bfff17 	ldw	r2,-4(fp)
   21e3c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   21e40:	e03ff615 	stw	zero,-40(fp)
             break;
   21e44:	00000a06 	br	21e70 <OSSemDel+0x228>
   21e48:	e0bff717 	ldw	r2,-36(fp)
   21e4c:	e0bffb15 	stw	r2,-20(fp)
   21e50:	e0bffb17 	ldw	r2,-20(fp)
   21e54:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   21e58:	e0bfff17 	ldw	r2,-4(fp)
   21e5c:	00c001c4 	movi	r3,7
   21e60:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   21e64:	e0bffd17 	ldw	r2,-12(fp)
   21e68:	e0bff615 	stw	r2,-40(fp)
             break;
   21e6c:	0001883a 	nop
    }
    return (pevent_return);
   21e70:	e0bff617 	ldw	r2,-40(fp)
}
   21e74:	e037883a 	mov	sp,fp
   21e78:	dfc00117 	ldw	ra,4(sp)
   21e7c:	df000017 	ldw	fp,0(sp)
   21e80:	dec00204 	addi	sp,sp,8
   21e84:	f800283a 	ret

00021e88 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   21e88:	defff504 	addi	sp,sp,-44
   21e8c:	dfc00a15 	stw	ra,40(sp)
   21e90:	df000915 	stw	fp,36(sp)
   21e94:	df000904 	addi	fp,sp,36
   21e98:	e13ffd15 	stw	r4,-12(fp)
   21e9c:	2805883a 	mov	r2,r5
   21ea0:	e1bfff15 	stw	r6,-4(fp)
   21ea4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   21ea8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   21eac:	e0bfff17 	ldw	r2,-4(fp)
   21eb0:	10007226 	beq	r2,zero,2207c <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   21eb4:	e0bffd17 	ldw	r2,-12(fp)
   21eb8:	1000041e 	bne	r2,zero,21ecc <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   21ebc:	e0bfff17 	ldw	r2,-4(fp)
   21ec0:	00c00104 	movi	r3,4
   21ec4:	10c00005 	stb	r3,0(r2)
        return;
   21ec8:	00006d06 	br	22080 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   21ecc:	e0bffd17 	ldw	r2,-12(fp)
   21ed0:	10800003 	ldbu	r2,0(r2)
   21ed4:	10803fcc 	andi	r2,r2,255
   21ed8:	108000e0 	cmpeqi	r2,r2,3
   21edc:	1000041e 	bne	r2,zero,21ef0 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   21ee0:	e0bfff17 	ldw	r2,-4(fp)
   21ee4:	00c00044 	movi	r3,1
   21ee8:	10c00005 	stb	r3,0(r2)
        return;
   21eec:	00006406 	br	22080 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   21ef0:	d0a7e403 	ldbu	r2,-24688(gp)
   21ef4:	10803fcc 	andi	r2,r2,255
   21ef8:	10000426 	beq	r2,zero,21f0c <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   21efc:	e0bfff17 	ldw	r2,-4(fp)
   21f00:	00c00084 	movi	r3,2
   21f04:	10c00005 	stb	r3,0(r2)
        return;
   21f08:	00005d06 	br	22080 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   21f0c:	d0a7d603 	ldbu	r2,-24744(gp)
   21f10:	10803fcc 	andi	r2,r2,255
   21f14:	10000426 	beq	r2,zero,21f28 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   21f18:	e0bfff17 	ldw	r2,-4(fp)
   21f1c:	00c00344 	movi	r3,13
   21f20:	10c00005 	stb	r3,0(r2)
        return;
   21f24:	00005606 	br	22080 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21f28:	0005303a 	rdctl	r2,status
   21f2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21f30:	e0fffc17 	ldw	r3,-16(fp)
   21f34:	00bfff84 	movi	r2,-2
   21f38:	1884703a 	and	r2,r3,r2
   21f3c:	1001703a 	wrctl	status,r2
  
  return context;
   21f40:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   21f44:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   21f48:	e0bffd17 	ldw	r2,-12(fp)
   21f4c:	1080020b 	ldhu	r2,8(r2)
   21f50:	10bfffcc 	andi	r2,r2,65535
   21f54:	10000d26 	beq	r2,zero,21f8c <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   21f58:	e0bffd17 	ldw	r2,-12(fp)
   21f5c:	1080020b 	ldhu	r2,8(r2)
   21f60:	10bfffc4 	addi	r2,r2,-1
   21f64:	1007883a 	mov	r3,r2
   21f68:	e0bffd17 	ldw	r2,-12(fp)
   21f6c:	10c0020d 	sth	r3,8(r2)
   21f70:	e0bff717 	ldw	r2,-36(fp)
   21f74:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21f78:	e0bff817 	ldw	r2,-32(fp)
   21f7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   21f80:	e0bfff17 	ldw	r2,-4(fp)
   21f84:	10000005 	stb	zero,0(r2)
        return;
   21f88:	00003d06 	br	22080 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   21f8c:	d0a7e517 	ldw	r2,-24684(gp)
   21f90:	d0e7e517 	ldw	r3,-24684(gp)
   21f94:	18c00c03 	ldbu	r3,48(r3)
   21f98:	18c00054 	ori	r3,r3,1
   21f9c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   21fa0:	d0a7e517 	ldw	r2,-24684(gp)
   21fa4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   21fa8:	d0a7e517 	ldw	r2,-24684(gp)
   21fac:	e0fffe0b 	ldhu	r3,-8(fp)
   21fb0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   21fb4:	e13ffd17 	ldw	r4,-12(fp)
   21fb8:	001cf640 	call	1cf64 <OS_EventTaskWait>
   21fbc:	e0bff717 	ldw	r2,-36(fp)
   21fc0:	e0bffb15 	stw	r2,-20(fp)
   21fc4:	e0bffb17 	ldw	r2,-20(fp)
   21fc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   21fcc:	001d8180 	call	1d818 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21fd0:	0005303a 	rdctl	r2,status
   21fd4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21fd8:	e0fff917 	ldw	r3,-28(fp)
   21fdc:	00bfff84 	movi	r2,-2
   21fe0:	1884703a 	and	r2,r3,r2
   21fe4:	1001703a 	wrctl	status,r2
  
  return context;
   21fe8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   21fec:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   21ff0:	d0a7e517 	ldw	r2,-24684(gp)
   21ff4:	10800c43 	ldbu	r2,49(r2)
   21ff8:	10803fcc 	andi	r2,r2,255
   21ffc:	10000326 	beq	r2,zero,2200c <OSSemPend+0x184>
   22000:	108000a0 	cmpeqi	r2,r2,2
   22004:	1000041e 	bne	r2,zero,22018 <OSSemPend+0x190>
   22008:	00000706 	br	22028 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   2200c:	e0bfff17 	ldw	r2,-4(fp)
   22010:	10000005 	stb	zero,0(r2)
             break;
   22014:	00000c06 	br	22048 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   22018:	e0bfff17 	ldw	r2,-4(fp)
   2201c:	00c00384 	movi	r3,14
   22020:	10c00005 	stb	r3,0(r2)
             break;
   22024:	00000806 	br	22048 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   22028:	d0a7e517 	ldw	r2,-24684(gp)
   2202c:	e17ffd17 	ldw	r5,-12(fp)
   22030:	1009883a 	mov	r4,r2
   22034:	001d1c40 	call	1d1c4 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   22038:	e0bfff17 	ldw	r2,-4(fp)
   2203c:	00c00284 	movi	r3,10
   22040:	10c00005 	stb	r3,0(r2)
             break;
   22044:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   22048:	d0a7e517 	ldw	r2,-24684(gp)
   2204c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   22050:	d0a7e517 	ldw	r2,-24684(gp)
   22054:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   22058:	d0a7e517 	ldw	r2,-24684(gp)
   2205c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   22060:	d0a7e517 	ldw	r2,-24684(gp)
   22064:	10000815 	stw	zero,32(r2)
   22068:	e0bff717 	ldw	r2,-36(fp)
   2206c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22070:	e0bffa17 	ldw	r2,-24(fp)
   22074:	1001703a 	wrctl	status,r2
   22078:	00000106 	br	22080 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   2207c:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   22080:	e037883a 	mov	sp,fp
   22084:	dfc00117 	ldw	ra,4(sp)
   22088:	df000017 	ldw	fp,0(sp)
   2208c:	dec00204 	addi	sp,sp,8
   22090:	f800283a 	ret

00022094 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   22094:	defff604 	addi	sp,sp,-40
   22098:	dfc00915 	stw	ra,36(sp)
   2209c:	df000815 	stw	fp,32(sp)
   220a0:	df000804 	addi	fp,sp,32
   220a4:	e13ffd15 	stw	r4,-12(fp)
   220a8:	2805883a 	mov	r2,r5
   220ac:	e1bfff15 	stw	r6,-4(fp)
   220b0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   220b4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   220b8:	e0bfff17 	ldw	r2,-4(fp)
   220bc:	1000021e 	bne	r2,zero,220c8 <OSSemPendAbort+0x34>
        return (0);
   220c0:	0005883a 	mov	r2,zero
   220c4:	00004906 	br	221ec <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   220c8:	e0bffd17 	ldw	r2,-12(fp)
   220cc:	1000051e 	bne	r2,zero,220e4 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   220d0:	e0bfff17 	ldw	r2,-4(fp)
   220d4:	00c00104 	movi	r3,4
   220d8:	10c00005 	stb	r3,0(r2)
        return (0);
   220dc:	0005883a 	mov	r2,zero
   220e0:	00004206 	br	221ec <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   220e4:	e0bffd17 	ldw	r2,-12(fp)
   220e8:	10800003 	ldbu	r2,0(r2)
   220ec:	10803fcc 	andi	r2,r2,255
   220f0:	108000e0 	cmpeqi	r2,r2,3
   220f4:	1000051e 	bne	r2,zero,2210c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   220f8:	e0bfff17 	ldw	r2,-4(fp)
   220fc:	00c00044 	movi	r3,1
   22100:	10c00005 	stb	r3,0(r2)
        return (0);
   22104:	0005883a 	mov	r2,zero
   22108:	00003806 	br	221ec <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2210c:	0005303a 	rdctl	r2,status
   22110:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22114:	e0fffc17 	ldw	r3,-16(fp)
   22118:	00bfff84 	movi	r2,-2
   2211c:	1884703a 	and	r2,r3,r2
   22120:	1001703a 	wrctl	status,r2
  
  return context;
   22124:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   22128:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   2212c:	e0bffd17 	ldw	r2,-12(fp)
   22130:	10800283 	ldbu	r2,10(r2)
   22134:	10803fcc 	andi	r2,r2,255
   22138:	10002526 	beq	r2,zero,221d0 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   2213c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   22140:	e0bffe03 	ldbu	r2,-8(fp)
   22144:	10800060 	cmpeqi	r2,r2,1
   22148:	10000e26 	beq	r2,zero,22184 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   2214c:	00000806 	br	22170 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   22150:	01c00084 	movi	r7,2
   22154:	01800044 	movi	r6,1
   22158:	000b883a 	mov	r5,zero
   2215c:	e13ffd17 	ldw	r4,-12(fp)
   22160:	001cdcc0 	call	1cdcc <OS_EventTaskRdy>
                     nbr_tasks++;
   22164:	e0bff803 	ldbu	r2,-32(fp)
   22168:	10800044 	addi	r2,r2,1
   2216c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   22170:	e0bffd17 	ldw	r2,-12(fp)
   22174:	10800283 	ldbu	r2,10(r2)
   22178:	10803fcc 	andi	r2,r2,255
   2217c:	103ff41e 	bne	r2,zero,22150 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   22180:	00000906 	br	221a8 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   22184:	01c00084 	movi	r7,2
   22188:	01800044 	movi	r6,1
   2218c:	000b883a 	mov	r5,zero
   22190:	e13ffd17 	ldw	r4,-12(fp)
   22194:	001cdcc0 	call	1cdcc <OS_EventTaskRdy>
                 nbr_tasks++;
   22198:	e0bff803 	ldbu	r2,-32(fp)
   2219c:	10800044 	addi	r2,r2,1
   221a0:	e0bff805 	stb	r2,-32(fp)
                 break;
   221a4:	0001883a 	nop
   221a8:	e0bff917 	ldw	r2,-28(fp)
   221ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   221b0:	e0bffa17 	ldw	r2,-24(fp)
   221b4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   221b8:	001d8180 	call	1d818 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   221bc:	e0bfff17 	ldw	r2,-4(fp)
   221c0:	00c00384 	movi	r3,14
   221c4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   221c8:	e0bff803 	ldbu	r2,-32(fp)
   221cc:	00000706 	br	221ec <OSSemPendAbort+0x158>
   221d0:	e0bff917 	ldw	r2,-28(fp)
   221d4:	e0bffb15 	stw	r2,-20(fp)
   221d8:	e0bffb17 	ldw	r2,-20(fp)
   221dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   221e0:	e0bfff17 	ldw	r2,-4(fp)
   221e4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   221e8:	0005883a 	mov	r2,zero
}
   221ec:	e037883a 	mov	sp,fp
   221f0:	dfc00117 	ldw	ra,4(sp)
   221f4:	df000017 	ldw	fp,0(sp)
   221f8:	dec00204 	addi	sp,sp,8
   221fc:	f800283a 	ret

00022200 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   22200:	defff804 	addi	sp,sp,-32
   22204:	dfc00715 	stw	ra,28(sp)
   22208:	df000615 	stw	fp,24(sp)
   2220c:	df000604 	addi	fp,sp,24
   22210:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   22214:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   22218:	e0bfff17 	ldw	r2,-4(fp)
   2221c:	1000021e 	bne	r2,zero,22228 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   22220:	00800104 	movi	r2,4
   22224:	00003506 	br	222fc <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   22228:	e0bfff17 	ldw	r2,-4(fp)
   2222c:	10800003 	ldbu	r2,0(r2)
   22230:	10803fcc 	andi	r2,r2,255
   22234:	108000e0 	cmpeqi	r2,r2,3
   22238:	1000021e 	bne	r2,zero,22244 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   2223c:	00800044 	movi	r2,1
   22240:	00002e06 	br	222fc <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22244:	0005303a 	rdctl	r2,status
   22248:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2224c:	e0fffe17 	ldw	r3,-8(fp)
   22250:	00bfff84 	movi	r2,-2
   22254:	1884703a 	and	r2,r3,r2
   22258:	1001703a 	wrctl	status,r2
  
  return context;
   2225c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   22260:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   22264:	e0bfff17 	ldw	r2,-4(fp)
   22268:	10800283 	ldbu	r2,10(r2)
   2226c:	10803fcc 	andi	r2,r2,255
   22270:	10000c26 	beq	r2,zero,222a4 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   22274:	000f883a 	mov	r7,zero
   22278:	01800044 	movi	r6,1
   2227c:	000b883a 	mov	r5,zero
   22280:	e13fff17 	ldw	r4,-4(fp)
   22284:	001cdcc0 	call	1cdcc <OS_EventTaskRdy>
   22288:	e0bffa17 	ldw	r2,-24(fp)
   2228c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22290:	e0bffb17 	ldw	r2,-20(fp)
   22294:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   22298:	001d8180 	call	1d818 <OS_Sched>
        return (OS_ERR_NONE);
   2229c:	0005883a 	mov	r2,zero
   222a0:	00001606 	br	222fc <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   222a4:	e0bfff17 	ldw	r2,-4(fp)
   222a8:	1080020b 	ldhu	r2,8(r2)
   222ac:	10ffffcc 	andi	r3,r2,65535
   222b0:	00bfffd4 	movui	r2,65535
   222b4:	18800c26 	beq	r3,r2,222e8 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   222b8:	e0bfff17 	ldw	r2,-4(fp)
   222bc:	1080020b 	ldhu	r2,8(r2)
   222c0:	10800044 	addi	r2,r2,1
   222c4:	1007883a 	mov	r3,r2
   222c8:	e0bfff17 	ldw	r2,-4(fp)
   222cc:	10c0020d 	sth	r3,8(r2)
   222d0:	e0bffa17 	ldw	r2,-24(fp)
   222d4:	e0bffc15 	stw	r2,-16(fp)
   222d8:	e0bffc17 	ldw	r2,-16(fp)
   222dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   222e0:	0005883a 	mov	r2,zero
   222e4:	00000506 	br	222fc <OSSemPost+0xfc>
   222e8:	e0bffa17 	ldw	r2,-24(fp)
   222ec:	e0bffd15 	stw	r2,-12(fp)
   222f0:	e0bffd17 	ldw	r2,-12(fp)
   222f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   222f8:	00800c84 	movi	r2,50
}
   222fc:	e037883a 	mov	sp,fp
   22300:	dfc00117 	ldw	ra,4(sp)
   22304:	df000017 	ldw	fp,0(sp)
   22308:	dec00204 	addi	sp,sp,8
   2230c:	f800283a 	ret

00022310 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   22310:	defff704 	addi	sp,sp,-36
   22314:	df000815 	stw	fp,32(sp)
   22318:	df000804 	addi	fp,sp,32
   2231c:	e13ffe15 	stw	r4,-8(fp)
   22320:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   22324:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   22328:	e0bffe17 	ldw	r2,-8(fp)
   2232c:	1000021e 	bne	r2,zero,22338 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   22330:	00800104 	movi	r2,4
   22334:	00003606 	br	22410 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   22338:	e0bfff17 	ldw	r2,-4(fp)
   2233c:	1000021e 	bne	r2,zero,22348 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   22340:	00800244 	movi	r2,9
   22344:	00003206 	br	22410 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   22348:	e0bffe17 	ldw	r2,-8(fp)
   2234c:	10800003 	ldbu	r2,0(r2)
   22350:	10803fcc 	andi	r2,r2,255
   22354:	108000e0 	cmpeqi	r2,r2,3
   22358:	1000021e 	bne	r2,zero,22364 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   2235c:	00800044 	movi	r2,1
   22360:	00002b06 	br	22410 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22364:	0005303a 	rdctl	r2,status
   22368:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2236c:	e0fffd17 	ldw	r3,-12(fp)
   22370:	00bfff84 	movi	r2,-2
   22374:	1884703a 	and	r2,r3,r2
   22378:	1001703a 	wrctl	status,r2
  
  return context;
   2237c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   22380:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   22384:	e0bffe17 	ldw	r2,-8(fp)
   22388:	10c00283 	ldbu	r3,10(r2)
   2238c:	e0bfff17 	ldw	r2,-4(fp)
   22390:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   22394:	e0bffe17 	ldw	r2,-8(fp)
   22398:	108002c4 	addi	r2,r2,11
   2239c:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   223a0:	e0bfff17 	ldw	r2,-4(fp)
   223a4:	10800084 	addi	r2,r2,2
   223a8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   223ac:	e03ffa05 	stb	zero,-24(fp)
   223b0:	00000b06 	br	223e0 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   223b4:	e0bff917 	ldw	r2,-28(fp)
   223b8:	10c00044 	addi	r3,r2,1
   223bc:	e0fff915 	stw	r3,-28(fp)
   223c0:	e0fff817 	ldw	r3,-32(fp)
   223c4:	19000044 	addi	r4,r3,1
   223c8:	e13ff815 	stw	r4,-32(fp)
   223cc:	18c00003 	ldbu	r3,0(r3)
   223d0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   223d4:	e0bffa03 	ldbu	r2,-24(fp)
   223d8:	10800044 	addi	r2,r2,1
   223dc:	e0bffa05 	stb	r2,-24(fp)
   223e0:	e0bffa03 	ldbu	r2,-24(fp)
   223e4:	108000f0 	cmpltui	r2,r2,3
   223e8:	103ff21e 	bne	r2,zero,223b4 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   223ec:	e0bffe17 	ldw	r2,-8(fp)
   223f0:	10c0020b 	ldhu	r3,8(r2)
   223f4:	e0bfff17 	ldw	r2,-4(fp)
   223f8:	10c0000d 	sth	r3,0(r2)
   223fc:	e0bffb17 	ldw	r2,-20(fp)
   22400:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22404:	e0bffc17 	ldw	r2,-16(fp)
   22408:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   2240c:	0005883a 	mov	r2,zero
}
   22410:	e037883a 	mov	sp,fp
   22414:	df000017 	ldw	fp,0(sp)
   22418:	dec00104 	addi	sp,sp,4
   2241c:	f800283a 	ret

00022420 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   22420:	defff904 	addi	sp,sp,-28
   22424:	df000615 	stw	fp,24(sp)
   22428:	df000604 	addi	fp,sp,24
   2242c:	e13ffd15 	stw	r4,-12(fp)
   22430:	2805883a 	mov	r2,r5
   22434:	e1bfff15 	stw	r6,-4(fp)
   22438:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   2243c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   22440:	e0bfff17 	ldw	r2,-4(fp)
   22444:	10003126 	beq	r2,zero,2250c <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   22448:	e0bffd17 	ldw	r2,-12(fp)
   2244c:	1000041e 	bne	r2,zero,22460 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   22450:	e0bfff17 	ldw	r2,-4(fp)
   22454:	00c00104 	movi	r3,4
   22458:	10c00005 	stb	r3,0(r2)
        return;
   2245c:	00002c06 	br	22510 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   22460:	e0bffd17 	ldw	r2,-12(fp)
   22464:	10800003 	ldbu	r2,0(r2)
   22468:	10803fcc 	andi	r2,r2,255
   2246c:	108000e0 	cmpeqi	r2,r2,3
   22470:	1000041e 	bne	r2,zero,22484 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   22474:	e0bfff17 	ldw	r2,-4(fp)
   22478:	00c00044 	movi	r3,1
   2247c:	10c00005 	stb	r3,0(r2)
        return;
   22480:	00002306 	br	22510 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22484:	0005303a 	rdctl	r2,status
   22488:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2248c:	e0fffc17 	ldw	r3,-16(fp)
   22490:	00bfff84 	movi	r2,-2
   22494:	1884703a 	and	r2,r3,r2
   22498:	1001703a 	wrctl	status,r2
  
  return context;
   2249c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   224a0:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   224a4:	e0bfff17 	ldw	r2,-4(fp)
   224a8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   224ac:	e0bffd17 	ldw	r2,-12(fp)
   224b0:	1080020b 	ldhu	r2,8(r2)
   224b4:	10bfffcc 	andi	r2,r2,65535
   224b8:	10000426 	beq	r2,zero,224cc <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   224bc:	e0bffd17 	ldw	r2,-12(fp)
   224c0:	e0fffe0b 	ldhu	r3,-8(fp)
   224c4:	10c0020d 	sth	r3,8(r2)
   224c8:	00000b06 	br	224f8 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   224cc:	e0bffd17 	ldw	r2,-12(fp)
   224d0:	10800283 	ldbu	r2,10(r2)
   224d4:	10803fcc 	andi	r2,r2,255
   224d8:	1000041e 	bne	r2,zero,224ec <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   224dc:	e0bffd17 	ldw	r2,-12(fp)
   224e0:	e0fffe0b 	ldhu	r3,-8(fp)
   224e4:	10c0020d 	sth	r3,8(r2)
   224e8:	00000306 	br	224f8 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   224ec:	e0bfff17 	ldw	r2,-4(fp)
   224f0:	00c01244 	movi	r3,73
   224f4:	10c00005 	stb	r3,0(r2)
   224f8:	e0bffa17 	ldw	r2,-24(fp)
   224fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22500:	e0bffb17 	ldw	r2,-20(fp)
   22504:	1001703a 	wrctl	status,r2
   22508:	00000106 	br	22510 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   2250c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   22510:	e037883a 	mov	sp,fp
   22514:	df000017 	ldw	fp,0(sp)
   22518:	dec00104 	addi	sp,sp,4
   2251c:	f800283a 	ret

00022520 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   22520:	defff104 	addi	sp,sp,-60
   22524:	dfc00e15 	stw	ra,56(sp)
   22528:	df000d15 	stw	fp,52(sp)
   2252c:	df000d04 	addi	fp,sp,52
   22530:	2007883a 	mov	r3,r4
   22534:	2805883a 	mov	r2,r5
   22538:	e0fffe05 	stb	r3,-8(fp)
   2253c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   22540:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   22544:	e0bffe03 	ldbu	r2,-8(fp)
   22548:	10800530 	cmpltui	r2,r2,20
   2254c:	1000051e 	bne	r2,zero,22564 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   22550:	e0bffe03 	ldbu	r2,-8(fp)
   22554:	10803fe0 	cmpeqi	r2,r2,255
   22558:	1000021e 	bne	r2,zero,22564 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   2255c:	00800a84 	movi	r2,42
   22560:	00012606 	br	229fc <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   22564:	e0bfff03 	ldbu	r2,-4(fp)
   22568:	10800530 	cmpltui	r2,r2,20
   2256c:	1000021e 	bne	r2,zero,22578 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   22570:	00800a84 	movi	r2,42
   22574:	00012106 	br	229fc <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22578:	0005303a 	rdctl	r2,status
   2257c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22580:	e0fffd17 	ldw	r3,-12(fp)
   22584:	00bfff84 	movi	r2,-2
   22588:	1884703a 	and	r2,r3,r2
   2258c:	1001703a 	wrctl	status,r2
  
  return context;
   22590:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   22594:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   22598:	e0ffff03 	ldbu	r3,-4(fp)
   2259c:	00800174 	movhi	r2,5
   225a0:	1093db04 	addi	r2,r2,20332
   225a4:	18c7883a 	add	r3,r3,r3
   225a8:	18c7883a 	add	r3,r3,r3
   225ac:	10c5883a 	add	r2,r2,r3
   225b0:	10800017 	ldw	r2,0(r2)
   225b4:	10000626 	beq	r2,zero,225d0 <OSTaskChangePrio+0xb0>
   225b8:	e0bff517 	ldw	r2,-44(fp)
   225bc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   225c0:	e0bff617 	ldw	r2,-40(fp)
   225c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   225c8:	00800a04 	movi	r2,40
   225cc:	00010b06 	br	229fc <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   225d0:	e0bffe03 	ldbu	r2,-8(fp)
   225d4:	10803fd8 	cmpnei	r2,r2,255
   225d8:	1000031e 	bne	r2,zero,225e8 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   225dc:	d0a7e517 	ldw	r2,-24684(gp)
   225e0:	10800c83 	ldbu	r2,50(r2)
   225e4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   225e8:	e0fffe03 	ldbu	r3,-8(fp)
   225ec:	00800174 	movhi	r2,5
   225f0:	1093db04 	addi	r2,r2,20332
   225f4:	18c7883a 	add	r3,r3,r3
   225f8:	18c7883a 	add	r3,r3,r3
   225fc:	10c5883a 	add	r2,r2,r3
   22600:	10800017 	ldw	r2,0(r2)
   22604:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   22608:	e0bff817 	ldw	r2,-32(fp)
   2260c:	1000061e 	bne	r2,zero,22628 <OSTaskChangePrio+0x108>
   22610:	e0bff517 	ldw	r2,-44(fp)
   22614:	e0bff715 	stw	r2,-36(fp)
   22618:	e0bff717 	ldw	r2,-36(fp)
   2261c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   22620:	00800a44 	movi	r2,41
   22624:	0000f506 	br	229fc <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   22628:	e0bff817 	ldw	r2,-32(fp)
   2262c:	10800058 	cmpnei	r2,r2,1
   22630:	1000061e 	bne	r2,zero,2264c <OSTaskChangePrio+0x12c>
   22634:	e0bff517 	ldw	r2,-44(fp)
   22638:	e0bff915 	stw	r2,-28(fp)
   2263c:	e0bff917 	ldw	r2,-28(fp)
   22640:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   22644:	008010c4 	movi	r2,67
   22648:	0000ec06 	br	229fc <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   2264c:	e0bfff03 	ldbu	r2,-4(fp)
   22650:	1004d0fa 	srli	r2,r2,3
   22654:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   22658:	e0bfff03 	ldbu	r2,-4(fp)
   2265c:	108001cc 	andi	r2,r2,7
   22660:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   22664:	e0bffb03 	ldbu	r2,-20(fp)
   22668:	00c00044 	movi	r3,1
   2266c:	1884983a 	sll	r2,r3,r2
   22670:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   22674:	e0bffb43 	ldbu	r2,-19(fp)
   22678:	00c00044 	movi	r3,1
   2267c:	1884983a 	sll	r2,r3,r2
   22680:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   22684:	e0fffe03 	ldbu	r3,-8(fp)
   22688:	00800174 	movhi	r2,5
   2268c:	1093db04 	addi	r2,r2,20332
   22690:	18c7883a 	add	r3,r3,r3
   22694:	18c7883a 	add	r3,r3,r3
   22698:	10c5883a 	add	r2,r2,r3
   2269c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   226a0:	e0ffff03 	ldbu	r3,-4(fp)
   226a4:	00800174 	movhi	r2,5
   226a8:	1093db04 	addi	r2,r2,20332
   226ac:	18c7883a 	add	r3,r3,r3
   226b0:	18c7883a 	add	r3,r3,r3
   226b4:	10c5883a 	add	r2,r2,r3
   226b8:	e0fff817 	ldw	r3,-32(fp)
   226bc:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   226c0:	e0bff817 	ldw	r2,-32(fp)
   226c4:	10800d03 	ldbu	r2,52(r2)
   226c8:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   226cc:	e0bff817 	ldw	r2,-32(fp)
   226d0:	10800d83 	ldbu	r2,54(r2)
   226d4:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   226d8:	e0bff817 	ldw	r2,-32(fp)
   226dc:	10800d43 	ldbu	r2,53(r2)
   226e0:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   226e4:	e0fffc03 	ldbu	r3,-16(fp)
   226e8:	d0a7e244 	addi	r2,gp,-24695
   226ec:	1885883a 	add	r2,r3,r2
   226f0:	10c00003 	ldbu	r3,0(r2)
   226f4:	e0bffc83 	ldbu	r2,-14(fp)
   226f8:	1884703a 	and	r2,r3,r2
   226fc:	10803fcc 	andi	r2,r2,255
   22700:	10002826 	beq	r2,zero,227a4 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   22704:	e0fffc03 	ldbu	r3,-16(fp)
   22708:	e13ffc03 	ldbu	r4,-16(fp)
   2270c:	d0a7e244 	addi	r2,gp,-24695
   22710:	2085883a 	add	r2,r4,r2
   22714:	10800003 	ldbu	r2,0(r2)
   22718:	1009883a 	mov	r4,r2
   2271c:	e0bffc83 	ldbu	r2,-14(fp)
   22720:	0084303a 	nor	r2,zero,r2
   22724:	2084703a 	and	r2,r4,r2
   22728:	1009883a 	mov	r4,r2
   2272c:	d0a7e244 	addi	r2,gp,-24695
   22730:	1885883a 	add	r2,r3,r2
   22734:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   22738:	e0fffc03 	ldbu	r3,-16(fp)
   2273c:	d0a7e244 	addi	r2,gp,-24695
   22740:	1885883a 	add	r2,r3,r2
   22744:	10800003 	ldbu	r2,0(r2)
   22748:	10803fcc 	andi	r2,r2,255
   2274c:	1000061e 	bne	r2,zero,22768 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   22750:	e0bffc43 	ldbu	r2,-15(fp)
   22754:	0084303a 	nor	r2,zero,r2
   22758:	1007883a 	mov	r3,r2
   2275c:	d0a7e203 	ldbu	r2,-24696(gp)
   22760:	1884703a 	and	r2,r3,r2
   22764:	d0a7e205 	stb	r2,-24696(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   22768:	d0e7e203 	ldbu	r3,-24696(gp)
   2276c:	e0bffb83 	ldbu	r2,-18(fp)
   22770:	1884b03a 	or	r2,r3,r2
   22774:	d0a7e205 	stb	r2,-24696(gp)
         OSRdyTbl[y_new] |= bitx_new;
   22778:	e0fffb03 	ldbu	r3,-20(fp)
   2277c:	e13ffb03 	ldbu	r4,-20(fp)
   22780:	d0a7e244 	addi	r2,gp,-24695
   22784:	2085883a 	add	r2,r4,r2
   22788:	11000003 	ldbu	r4,0(r2)
   2278c:	e0bffbc3 	ldbu	r2,-17(fp)
   22790:	2084b03a 	or	r2,r4,r2
   22794:	1009883a 	mov	r4,r2
   22798:	d0a7e244 	addi	r2,gp,-24695
   2279c:	1885883a 	add	r2,r3,r2
   227a0:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   227a4:	e0bff817 	ldw	r2,-32(fp)
   227a8:	10800717 	ldw	r2,28(r2)
   227ac:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   227b0:	e0bff317 	ldw	r2,-52(fp)
   227b4:	10003326 	beq	r2,zero,22884 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   227b8:	e0bffc03 	ldbu	r2,-16(fp)
   227bc:	e0fffc03 	ldbu	r3,-16(fp)
   227c0:	e13ff317 	ldw	r4,-52(fp)
   227c4:	20c7883a 	add	r3,r4,r3
   227c8:	18c002c4 	addi	r3,r3,11
   227cc:	18c00003 	ldbu	r3,0(r3)
   227d0:	1809883a 	mov	r4,r3
   227d4:	e0fffc83 	ldbu	r3,-14(fp)
   227d8:	00c6303a 	nor	r3,zero,r3
   227dc:	20c6703a 	and	r3,r4,r3
   227e0:	1809883a 	mov	r4,r3
   227e4:	e0fff317 	ldw	r3,-52(fp)
   227e8:	1885883a 	add	r2,r3,r2
   227ec:	108002c4 	addi	r2,r2,11
   227f0:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   227f4:	e0bffc03 	ldbu	r2,-16(fp)
   227f8:	e0fff317 	ldw	r3,-52(fp)
   227fc:	1885883a 	add	r2,r3,r2
   22800:	108002c4 	addi	r2,r2,11
   22804:	10800003 	ldbu	r2,0(r2)
   22808:	10803fcc 	andi	r2,r2,255
   2280c:	1000091e 	bne	r2,zero,22834 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   22810:	e0bff317 	ldw	r2,-52(fp)
   22814:	10800283 	ldbu	r2,10(r2)
   22818:	1007883a 	mov	r3,r2
   2281c:	e0bffc43 	ldbu	r2,-15(fp)
   22820:	0084303a 	nor	r2,zero,r2
   22824:	1884703a 	and	r2,r3,r2
   22828:	1007883a 	mov	r3,r2
   2282c:	e0bff317 	ldw	r2,-52(fp)
   22830:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   22834:	e0bff317 	ldw	r2,-52(fp)
   22838:	10c00283 	ldbu	r3,10(r2)
   2283c:	e0bffb83 	ldbu	r2,-18(fp)
   22840:	1884b03a 	or	r2,r3,r2
   22844:	1007883a 	mov	r3,r2
   22848:	e0bff317 	ldw	r2,-52(fp)
   2284c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   22850:	e0bffb03 	ldbu	r2,-20(fp)
   22854:	e0fffb03 	ldbu	r3,-20(fp)
   22858:	e13ff317 	ldw	r4,-52(fp)
   2285c:	20c7883a 	add	r3,r4,r3
   22860:	18c002c4 	addi	r3,r3,11
   22864:	19000003 	ldbu	r4,0(r3)
   22868:	e0fffbc3 	ldbu	r3,-17(fp)
   2286c:	20c6b03a 	or	r3,r4,r3
   22870:	1809883a 	mov	r4,r3
   22874:	e0fff317 	ldw	r3,-52(fp)
   22878:	1885883a 	add	r2,r3,r2
   2287c:	108002c4 	addi	r2,r2,11
   22880:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   22884:	e0bff817 	ldw	r2,-32(fp)
   22888:	10800817 	ldw	r2,32(r2)
   2288c:	10004226 	beq	r2,zero,22998 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   22890:	e0bff817 	ldw	r2,-32(fp)
   22894:	10800817 	ldw	r2,32(r2)
   22898:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   2289c:	e0bff417 	ldw	r2,-48(fp)
   228a0:	10800017 	ldw	r2,0(r2)
   228a4:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   228a8:	00003906 	br	22990 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   228ac:	e0bffc03 	ldbu	r2,-16(fp)
   228b0:	e0fffc03 	ldbu	r3,-16(fp)
   228b4:	e13ff317 	ldw	r4,-52(fp)
   228b8:	20c7883a 	add	r3,r4,r3
   228bc:	18c002c4 	addi	r3,r3,11
   228c0:	18c00003 	ldbu	r3,0(r3)
   228c4:	1809883a 	mov	r4,r3
   228c8:	e0fffc83 	ldbu	r3,-14(fp)
   228cc:	00c6303a 	nor	r3,zero,r3
   228d0:	20c6703a 	and	r3,r4,r3
   228d4:	1809883a 	mov	r4,r3
   228d8:	e0fff317 	ldw	r3,-52(fp)
   228dc:	1885883a 	add	r2,r3,r2
   228e0:	108002c4 	addi	r2,r2,11
   228e4:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   228e8:	e0bffc03 	ldbu	r2,-16(fp)
   228ec:	e0fff317 	ldw	r3,-52(fp)
   228f0:	1885883a 	add	r2,r3,r2
   228f4:	108002c4 	addi	r2,r2,11
   228f8:	10800003 	ldbu	r2,0(r2)
   228fc:	10803fcc 	andi	r2,r2,255
   22900:	1000091e 	bne	r2,zero,22928 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   22904:	e0bff317 	ldw	r2,-52(fp)
   22908:	10800283 	ldbu	r2,10(r2)
   2290c:	1007883a 	mov	r3,r2
   22910:	e0bffc43 	ldbu	r2,-15(fp)
   22914:	0084303a 	nor	r2,zero,r2
   22918:	1884703a 	and	r2,r3,r2
   2291c:	1007883a 	mov	r3,r2
   22920:	e0bff317 	ldw	r2,-52(fp)
   22924:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   22928:	e0bff317 	ldw	r2,-52(fp)
   2292c:	10c00283 	ldbu	r3,10(r2)
   22930:	e0bffb83 	ldbu	r2,-18(fp)
   22934:	1884b03a 	or	r2,r3,r2
   22938:	1007883a 	mov	r3,r2
   2293c:	e0bff317 	ldw	r2,-52(fp)
   22940:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   22944:	e0bffb03 	ldbu	r2,-20(fp)
   22948:	e0fffb03 	ldbu	r3,-20(fp)
   2294c:	e13ff317 	ldw	r4,-52(fp)
   22950:	20c7883a 	add	r3,r4,r3
   22954:	18c002c4 	addi	r3,r3,11
   22958:	19000003 	ldbu	r4,0(r3)
   2295c:	e0fffbc3 	ldbu	r3,-17(fp)
   22960:	20c6b03a 	or	r3,r4,r3
   22964:	1809883a 	mov	r4,r3
   22968:	e0fff317 	ldw	r3,-52(fp)
   2296c:	1885883a 	add	r2,r3,r2
   22970:	108002c4 	addi	r2,r2,11
   22974:	11000005 	stb	r4,0(r2)
            pevents++;
   22978:	e0bff417 	ldw	r2,-48(fp)
   2297c:	10800104 	addi	r2,r2,4
   22980:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   22984:	e0bff417 	ldw	r2,-48(fp)
   22988:	10800017 	ldw	r2,0(r2)
   2298c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   22990:	e0bff317 	ldw	r2,-52(fp)
   22994:	103fc51e 	bne	r2,zero,228ac <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   22998:	e0bff817 	ldw	r2,-32(fp)
   2299c:	e0ffff03 	ldbu	r3,-4(fp)
   229a0:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   229a4:	e0bff817 	ldw	r2,-32(fp)
   229a8:	e0fffb03 	ldbu	r3,-20(fp)
   229ac:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   229b0:	e0bff817 	ldw	r2,-32(fp)
   229b4:	e0fffb43 	ldbu	r3,-19(fp)
   229b8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   229bc:	e0bff817 	ldw	r2,-32(fp)
   229c0:	e0fffb83 	ldbu	r3,-18(fp)
   229c4:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   229c8:	e0bff817 	ldw	r2,-32(fp)
   229cc:	e0fffbc3 	ldbu	r3,-17(fp)
   229d0:	10c00d45 	stb	r3,53(r2)
   229d4:	e0bff517 	ldw	r2,-44(fp)
   229d8:	e0bffa15 	stw	r2,-24(fp)
   229dc:	e0bffa17 	ldw	r2,-24(fp)
   229e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   229e4:	d0a7d643 	ldbu	r2,-24743(gp)
   229e8:	10803fcc 	andi	r2,r2,255
   229ec:	10800058 	cmpnei	r2,r2,1
   229f0:	1000011e 	bne	r2,zero,229f8 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   229f4:	001d8180 	call	1d818 <OS_Sched>
    }
    return (OS_ERR_NONE);
   229f8:	0005883a 	mov	r2,zero
}
   229fc:	e037883a 	mov	sp,fp
   22a00:	dfc00117 	ldw	ra,4(sp)
   22a04:	df000017 	ldw	fp,0(sp)
   22a08:	dec00204 	addi	sp,sp,8
   22a0c:	f800283a 	ret

00022a10 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   22a10:	deffee04 	addi	sp,sp,-72
   22a14:	dfc01115 	stw	ra,68(sp)
   22a18:	df001015 	stw	fp,64(sp)
   22a1c:	df001004 	addi	fp,sp,64
   22a20:	e13ffc15 	stw	r4,-16(fp)
   22a24:	e17ffd15 	stw	r5,-12(fp)
   22a28:	e1bffe15 	stw	r6,-8(fp)
   22a2c:	3805883a 	mov	r2,r7
   22a30:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   22a34:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   22a38:	e0bfff03 	ldbu	r2,-4(fp)
   22a3c:	10800570 	cmpltui	r2,r2,21
   22a40:	1000021e 	bne	r2,zero,22a4c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   22a44:	00800a84 	movi	r2,42
   22a48:	00005706 	br	22ba8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22a4c:	0005303a 	rdctl	r2,status
   22a50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22a54:	e0fffb17 	ldw	r3,-20(fp)
   22a58:	00bfff84 	movi	r2,-2
   22a5c:	1884703a 	and	r2,r3,r2
   22a60:	1001703a 	wrctl	status,r2
  
  return context;
   22a64:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   22a68:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   22a6c:	d0a7e403 	ldbu	r2,-24688(gp)
   22a70:	10803fcc 	andi	r2,r2,255
   22a74:	10000626 	beq	r2,zero,22a90 <OSTaskCreate+0x80>
   22a78:	e0bff317 	ldw	r2,-52(fp)
   22a7c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22a80:	e0bff417 	ldw	r2,-48(fp)
   22a84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   22a88:	00800f04 	movi	r2,60
   22a8c:	00004606 	br	22ba8 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   22a90:	e0ffff03 	ldbu	r3,-4(fp)
   22a94:	00800174 	movhi	r2,5
   22a98:	1093db04 	addi	r2,r2,20332
   22a9c:	18c7883a 	add	r3,r3,r3
   22aa0:	18c7883a 	add	r3,r3,r3
   22aa4:	10c5883a 	add	r2,r2,r3
   22aa8:	10800017 	ldw	r2,0(r2)
   22aac:	1000391e 	bne	r2,zero,22b94 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   22ab0:	e0ffff03 	ldbu	r3,-4(fp)
   22ab4:	00800174 	movhi	r2,5
   22ab8:	1093db04 	addi	r2,r2,20332
   22abc:	18c7883a 	add	r3,r3,r3
   22ac0:	18c7883a 	add	r3,r3,r3
   22ac4:	10c5883a 	add	r2,r2,r3
   22ac8:	00c00044 	movi	r3,1
   22acc:	10c00015 	stw	r3,0(r2)
   22ad0:	e0bff317 	ldw	r2,-52(fp)
   22ad4:	e0bff515 	stw	r2,-44(fp)
   22ad8:	e0bff517 	ldw	r2,-44(fp)
   22adc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   22ae0:	000f883a 	mov	r7,zero
   22ae4:	e1bffe17 	ldw	r6,-8(fp)
   22ae8:	e17ffd17 	ldw	r5,-12(fp)
   22aec:	e13ffc17 	ldw	r4,-16(fp)
   22af0:	0026bc00 	call	26bc0 <OSTaskStkInit>
   22af4:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   22af8:	e0bfff03 	ldbu	r2,-4(fp)
   22afc:	d8000215 	stw	zero,8(sp)
   22b00:	d8000115 	stw	zero,4(sp)
   22b04:	d8000015 	stw	zero,0(sp)
   22b08:	000f883a 	mov	r7,zero
   22b0c:	000d883a 	mov	r6,zero
   22b10:	e17ff717 	ldw	r5,-36(fp)
   22b14:	1009883a 	mov	r4,r2
   22b18:	001dc280 	call	1dc28 <OS_TCBInit>
   22b1c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   22b20:	e0bff803 	ldbu	r2,-32(fp)
   22b24:	1000061e 	bne	r2,zero,22b40 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   22b28:	d0a7d643 	ldbu	r2,-24743(gp)
   22b2c:	10803fcc 	andi	r2,r2,255
   22b30:	10800058 	cmpnei	r2,r2,1
   22b34:	1000151e 	bne	r2,zero,22b8c <OSTaskCreate+0x17c>
                OS_Sched();
   22b38:	001d8180 	call	1d818 <OS_Sched>
   22b3c:	00001306 	br	22b8c <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22b40:	0005303a 	rdctl	r2,status
   22b44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22b48:	e0fffa17 	ldw	r3,-24(fp)
   22b4c:	00bfff84 	movi	r2,-2
   22b50:	1884703a 	and	r2,r3,r2
   22b54:	1001703a 	wrctl	status,r2
  
  return context;
   22b58:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   22b5c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   22b60:	e0ffff03 	ldbu	r3,-4(fp)
   22b64:	00800174 	movhi	r2,5
   22b68:	1093db04 	addi	r2,r2,20332
   22b6c:	18c7883a 	add	r3,r3,r3
   22b70:	18c7883a 	add	r3,r3,r3
   22b74:	10c5883a 	add	r2,r2,r3
   22b78:	10000015 	stw	zero,0(r2)
   22b7c:	e0bff317 	ldw	r2,-52(fp)
   22b80:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22b84:	e0bff617 	ldw	r2,-40(fp)
   22b88:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   22b8c:	e0bff803 	ldbu	r2,-32(fp)
   22b90:	00000506 	br	22ba8 <OSTaskCreate+0x198>
   22b94:	e0bff317 	ldw	r2,-52(fp)
   22b98:	e0bff915 	stw	r2,-28(fp)
   22b9c:	e0bff917 	ldw	r2,-28(fp)
   22ba0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   22ba4:	00800a04 	movi	r2,40
}
   22ba8:	e037883a 	mov	sp,fp
   22bac:	dfc00117 	ldw	ra,4(sp)
   22bb0:	df000017 	ldw	fp,0(sp)
   22bb4:	dec00204 	addi	sp,sp,8
   22bb8:	f800283a 	ret

00022bbc <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   22bbc:	deffec04 	addi	sp,sp,-80
   22bc0:	dfc01315 	stw	ra,76(sp)
   22bc4:	df001215 	stw	fp,72(sp)
   22bc8:	df001204 	addi	fp,sp,72
   22bcc:	e13ffa15 	stw	r4,-24(fp)
   22bd0:	e17ffb15 	stw	r5,-20(fp)
   22bd4:	e1bffc15 	stw	r6,-16(fp)
   22bd8:	3809883a 	mov	r4,r7
   22bdc:	e0c00217 	ldw	r3,8(fp)
   22be0:	e0800617 	ldw	r2,24(fp)
   22be4:	e13ffd05 	stb	r4,-12(fp)
   22be8:	e0fffe0d 	sth	r3,-8(fp)
   22bec:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   22bf0:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   22bf4:	e0bffd03 	ldbu	r2,-12(fp)
   22bf8:	10800570 	cmpltui	r2,r2,21
   22bfc:	1000021e 	bne	r2,zero,22c08 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   22c00:	00800a84 	movi	r2,42
   22c04:	00006106 	br	22d8c <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22c08:	0005303a 	rdctl	r2,status
   22c0c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22c10:	e0fff917 	ldw	r3,-28(fp)
   22c14:	00bfff84 	movi	r2,-2
   22c18:	1884703a 	and	r2,r3,r2
   22c1c:	1001703a 	wrctl	status,r2
  
  return context;
   22c20:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   22c24:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   22c28:	d0a7e403 	ldbu	r2,-24688(gp)
   22c2c:	10803fcc 	andi	r2,r2,255
   22c30:	10000626 	beq	r2,zero,22c4c <OSTaskCreateExt+0x90>
   22c34:	e0bff117 	ldw	r2,-60(fp)
   22c38:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22c3c:	e0bff217 	ldw	r2,-56(fp)
   22c40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   22c44:	00800f04 	movi	r2,60
   22c48:	00005006 	br	22d8c <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   22c4c:	e0fffd03 	ldbu	r3,-12(fp)
   22c50:	00800174 	movhi	r2,5
   22c54:	1093db04 	addi	r2,r2,20332
   22c58:	18c7883a 	add	r3,r3,r3
   22c5c:	18c7883a 	add	r3,r3,r3
   22c60:	10c5883a 	add	r2,r2,r3
   22c64:	10800017 	ldw	r2,0(r2)
   22c68:	1000431e 	bne	r2,zero,22d78 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   22c6c:	e0fffd03 	ldbu	r3,-12(fp)
   22c70:	00800174 	movhi	r2,5
   22c74:	1093db04 	addi	r2,r2,20332
   22c78:	18c7883a 	add	r3,r3,r3
   22c7c:	18c7883a 	add	r3,r3,r3
   22c80:	10c5883a 	add	r2,r2,r3
   22c84:	00c00044 	movi	r3,1
   22c88:	10c00015 	stw	r3,0(r2)
   22c8c:	e0bff117 	ldw	r2,-60(fp)
   22c90:	e0bff315 	stw	r2,-52(fp)
   22c94:	e0bff317 	ldw	r2,-52(fp)
   22c98:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   22c9c:	e0bfff0b 	ldhu	r2,-4(fp)
   22ca0:	100d883a 	mov	r6,r2
   22ca4:	e1400417 	ldw	r5,16(fp)
   22ca8:	e1000317 	ldw	r4,12(fp)
   22cac:	0023c1c0 	call	23c1c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   22cb0:	e0bfff0b 	ldhu	r2,-4(fp)
   22cb4:	100f883a 	mov	r7,r2
   22cb8:	e1bffc17 	ldw	r6,-16(fp)
   22cbc:	e17ffb17 	ldw	r5,-20(fp)
   22cc0:	e13ffa17 	ldw	r4,-24(fp)
   22cc4:	0026bc00 	call	26bc0 <OSTaskStkInit>
   22cc8:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   22ccc:	e0fffd03 	ldbu	r3,-12(fp)
   22cd0:	e13ffe0b 	ldhu	r4,-8(fp)
   22cd4:	e0bfff0b 	ldhu	r2,-4(fp)
   22cd8:	d8800215 	stw	r2,8(sp)
   22cdc:	e0800517 	ldw	r2,20(fp)
   22ce0:	d8800115 	stw	r2,4(sp)
   22ce4:	e0800417 	ldw	r2,16(fp)
   22ce8:	d8800015 	stw	r2,0(sp)
   22cec:	200f883a 	mov	r7,r4
   22cf0:	e1800317 	ldw	r6,12(fp)
   22cf4:	e17ff517 	ldw	r5,-44(fp)
   22cf8:	1809883a 	mov	r4,r3
   22cfc:	001dc280 	call	1dc28 <OS_TCBInit>
   22d00:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   22d04:	e0bff603 	ldbu	r2,-40(fp)
   22d08:	1000061e 	bne	r2,zero,22d24 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   22d0c:	d0a7d643 	ldbu	r2,-24743(gp)
   22d10:	10803fcc 	andi	r2,r2,255
   22d14:	10800058 	cmpnei	r2,r2,1
   22d18:	1000151e 	bne	r2,zero,22d70 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   22d1c:	001d8180 	call	1d818 <OS_Sched>
   22d20:	00001306 	br	22d70 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22d24:	0005303a 	rdctl	r2,status
   22d28:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22d2c:	e0fff817 	ldw	r3,-32(fp)
   22d30:	00bfff84 	movi	r2,-2
   22d34:	1884703a 	and	r2,r3,r2
   22d38:	1001703a 	wrctl	status,r2
  
  return context;
   22d3c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   22d40:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   22d44:	e0fffd03 	ldbu	r3,-12(fp)
   22d48:	00800174 	movhi	r2,5
   22d4c:	1093db04 	addi	r2,r2,20332
   22d50:	18c7883a 	add	r3,r3,r3
   22d54:	18c7883a 	add	r3,r3,r3
   22d58:	10c5883a 	add	r2,r2,r3
   22d5c:	10000015 	stw	zero,0(r2)
   22d60:	e0bff117 	ldw	r2,-60(fp)
   22d64:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22d68:	e0bff417 	ldw	r2,-48(fp)
   22d6c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   22d70:	e0bff603 	ldbu	r2,-40(fp)
   22d74:	00000506 	br	22d8c <OSTaskCreateExt+0x1d0>
   22d78:	e0bff117 	ldw	r2,-60(fp)
   22d7c:	e0bff715 	stw	r2,-36(fp)
   22d80:	e0bff717 	ldw	r2,-36(fp)
   22d84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   22d88:	00800a04 	movi	r2,40
}
   22d8c:	e037883a 	mov	sp,fp
   22d90:	dfc00117 	ldw	ra,4(sp)
   22d94:	df000017 	ldw	fp,0(sp)
   22d98:	dec00204 	addi	sp,sp,8
   22d9c:	f800283a 	ret

00022da0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   22da0:	defff404 	addi	sp,sp,-48
   22da4:	dfc00b15 	stw	ra,44(sp)
   22da8:	df000a15 	stw	fp,40(sp)
   22dac:	df000a04 	addi	fp,sp,40
   22db0:	2005883a 	mov	r2,r4
   22db4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   22db8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   22dbc:	d0a7e403 	ldbu	r2,-24688(gp)
   22dc0:	10803fcc 	andi	r2,r2,255
   22dc4:	10000226 	beq	r2,zero,22dd0 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   22dc8:	00801004 	movi	r2,64
   22dcc:	0000c006 	br	230d0 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   22dd0:	e0bfff03 	ldbu	r2,-4(fp)
   22dd4:	10800518 	cmpnei	r2,r2,20
   22dd8:	1000021e 	bne	r2,zero,22de4 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   22ddc:	00800f84 	movi	r2,62
   22de0:	0000bb06 	br	230d0 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   22de4:	e0bfff03 	ldbu	r2,-4(fp)
   22de8:	10800530 	cmpltui	r2,r2,20
   22dec:	1000051e 	bne	r2,zero,22e04 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   22df0:	e0bfff03 	ldbu	r2,-4(fp)
   22df4:	10803fe0 	cmpeqi	r2,r2,255
   22df8:	1000021e 	bne	r2,zero,22e04 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   22dfc:	00800a84 	movi	r2,42
   22e00:	0000b306 	br	230d0 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22e04:	0005303a 	rdctl	r2,status
   22e08:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22e0c:	e0fffe17 	ldw	r3,-8(fp)
   22e10:	00bfff84 	movi	r2,-2
   22e14:	1884703a 	and	r2,r3,r2
   22e18:	1001703a 	wrctl	status,r2
  
  return context;
   22e1c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   22e20:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   22e24:	e0bfff03 	ldbu	r2,-4(fp)
   22e28:	10803fd8 	cmpnei	r2,r2,255
   22e2c:	1000031e 	bne	r2,zero,22e3c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   22e30:	d0a7e517 	ldw	r2,-24684(gp)
   22e34:	10800c83 	ldbu	r2,50(r2)
   22e38:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   22e3c:	e0ffff03 	ldbu	r3,-4(fp)
   22e40:	00800174 	movhi	r2,5
   22e44:	1093db04 	addi	r2,r2,20332
   22e48:	18c7883a 	add	r3,r3,r3
   22e4c:	18c7883a 	add	r3,r3,r3
   22e50:	10c5883a 	add	r2,r2,r3
   22e54:	10800017 	ldw	r2,0(r2)
   22e58:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   22e5c:	e0bff817 	ldw	r2,-32(fp)
   22e60:	1000061e 	bne	r2,zero,22e7c <OSTaskDel+0xdc>
   22e64:	e0bff617 	ldw	r2,-40(fp)
   22e68:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22e6c:	e0bff717 	ldw	r2,-36(fp)
   22e70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   22e74:	008010c4 	movi	r2,67
   22e78:	00009506 	br	230d0 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   22e7c:	e0bff817 	ldw	r2,-32(fp)
   22e80:	10800058 	cmpnei	r2,r2,1
   22e84:	1000061e 	bne	r2,zero,22ea0 <OSTaskDel+0x100>
   22e88:	e0bff617 	ldw	r2,-40(fp)
   22e8c:	e0bff915 	stw	r2,-28(fp)
   22e90:	e0bff917 	ldw	r2,-28(fp)
   22e94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   22e98:	00800f44 	movi	r2,61
   22e9c:	00008c06 	br	230d0 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   22ea0:	e0bff817 	ldw	r2,-32(fp)
   22ea4:	10800d03 	ldbu	r2,52(r2)
   22ea8:	10c03fcc 	andi	r3,r2,255
   22eac:	e0bff817 	ldw	r2,-32(fp)
   22eb0:	10800d03 	ldbu	r2,52(r2)
   22eb4:	11003fcc 	andi	r4,r2,255
   22eb8:	d0a7e244 	addi	r2,gp,-24695
   22ebc:	2085883a 	add	r2,r4,r2
   22ec0:	10800003 	ldbu	r2,0(r2)
   22ec4:	1009883a 	mov	r4,r2
   22ec8:	e0bff817 	ldw	r2,-32(fp)
   22ecc:	10800d43 	ldbu	r2,53(r2)
   22ed0:	0084303a 	nor	r2,zero,r2
   22ed4:	2084703a 	and	r2,r4,r2
   22ed8:	1009883a 	mov	r4,r2
   22edc:	d0a7e244 	addi	r2,gp,-24695
   22ee0:	1885883a 	add	r2,r3,r2
   22ee4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   22ee8:	e0bff817 	ldw	r2,-32(fp)
   22eec:	10800d03 	ldbu	r2,52(r2)
   22ef0:	10c03fcc 	andi	r3,r2,255
   22ef4:	d0a7e244 	addi	r2,gp,-24695
   22ef8:	1885883a 	add	r2,r3,r2
   22efc:	10800003 	ldbu	r2,0(r2)
   22f00:	10803fcc 	andi	r2,r2,255
   22f04:	1000071e 	bne	r2,zero,22f24 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   22f08:	e0bff817 	ldw	r2,-32(fp)
   22f0c:	10800d83 	ldbu	r2,54(r2)
   22f10:	0084303a 	nor	r2,zero,r2
   22f14:	1007883a 	mov	r3,r2
   22f18:	d0a7e203 	ldbu	r2,-24696(gp)
   22f1c:	1884703a 	and	r2,r3,r2
   22f20:	d0a7e205 	stb	r2,-24696(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   22f24:	e0bff817 	ldw	r2,-32(fp)
   22f28:	10800717 	ldw	r2,28(r2)
   22f2c:	10000526 	beq	r2,zero,22f44 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   22f30:	e0bff817 	ldw	r2,-32(fp)
   22f34:	10800717 	ldw	r2,28(r2)
   22f38:	100b883a 	mov	r5,r2
   22f3c:	e13ff817 	ldw	r4,-32(fp)
   22f40:	001d1c40 	call	1d1c4 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   22f44:	e0bff817 	ldw	r2,-32(fp)
   22f48:	10800817 	ldw	r2,32(r2)
   22f4c:	10000526 	beq	r2,zero,22f64 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   22f50:	e0bff817 	ldw	r2,-32(fp)
   22f54:	10800817 	ldw	r2,32(r2)
   22f58:	100b883a 	mov	r5,r2
   22f5c:	e13ff817 	ldw	r4,-32(fp)
   22f60:	001d27c0 	call	1d27c <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   22f64:	e0bff817 	ldw	r2,-32(fp)
   22f68:	10800a17 	ldw	r2,40(r2)
   22f6c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   22f70:	e0bffb17 	ldw	r2,-20(fp)
   22f74:	10000226 	beq	r2,zero,22f80 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   22f78:	e13ffb17 	ldw	r4,-20(fp)
   22f7c:	001f6fc0 	call	1f6fc <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   22f80:	e0bff817 	ldw	r2,-32(fp)
   22f84:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   22f88:	e0bff817 	ldw	r2,-32(fp)
   22f8c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   22f90:	e0bff817 	ldw	r2,-32(fp)
   22f94:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   22f98:	d0a7d603 	ldbu	r2,-24744(gp)
   22f9c:	10803fcc 	andi	r2,r2,255
   22fa0:	10803fe0 	cmpeqi	r2,r2,255
   22fa4:	1000031e 	bne	r2,zero,22fb4 <OSTaskDel+0x214>
        OSLockNesting++;
   22fa8:	d0a7d603 	ldbu	r2,-24744(gp)
   22fac:	10800044 	addi	r2,r2,1
   22fb0:	d0a7d605 	stb	r2,-24744(gp)
   22fb4:	e0bff617 	ldw	r2,-40(fp)
   22fb8:	e0bffd15 	stw	r2,-12(fp)
   22fbc:	e0bffd17 	ldw	r2,-12(fp)
   22fc0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   22fc4:	001cdac0 	call	1cdac <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22fc8:	0005303a 	rdctl	r2,status
   22fcc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22fd0:	e0fffa17 	ldw	r3,-24(fp)
   22fd4:	00bfff84 	movi	r2,-2
   22fd8:	1884703a 	and	r2,r3,r2
   22fdc:	1001703a 	wrctl	status,r2
  
  return context;
   22fe0:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   22fe4:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   22fe8:	d0a7d603 	ldbu	r2,-24744(gp)
   22fec:	10803fcc 	andi	r2,r2,255
   22ff0:	10000326 	beq	r2,zero,23000 <OSTaskDel+0x260>
        OSLockNesting--;
   22ff4:	d0a7d603 	ldbu	r2,-24744(gp)
   22ff8:	10bfffc4 	addi	r2,r2,-1
   22ffc:	d0a7d605 	stb	r2,-24744(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   23000:	e13ff817 	ldw	r4,-32(fp)
   23004:	0026d400 	call	26d40 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   23008:	d0a7de43 	ldbu	r2,-24711(gp)
   2300c:	10bfffc4 	addi	r2,r2,-1
   23010:	d0a7de45 	stb	r2,-24711(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   23014:	e0ffff03 	ldbu	r3,-4(fp)
   23018:	00800174 	movhi	r2,5
   2301c:	1093db04 	addi	r2,r2,20332
   23020:	18c7883a 	add	r3,r3,r3
   23024:	18c7883a 	add	r3,r3,r3
   23028:	10c5883a 	add	r2,r2,r3
   2302c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   23030:	e0bff817 	ldw	r2,-32(fp)
   23034:	10800617 	ldw	r2,24(r2)
   23038:	1000071e 	bne	r2,zero,23058 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   2303c:	e0bff817 	ldw	r2,-32(fp)
   23040:	10800517 	ldw	r2,20(r2)
   23044:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   23048:	e0bff817 	ldw	r2,-32(fp)
   2304c:	10800517 	ldw	r2,20(r2)
   23050:	d0a7d915 	stw	r2,-24732(gp)
   23054:	00000a06 	br	23080 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   23058:	e0bff817 	ldw	r2,-32(fp)
   2305c:	10800617 	ldw	r2,24(r2)
   23060:	e0fff817 	ldw	r3,-32(fp)
   23064:	18c00517 	ldw	r3,20(r3)
   23068:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   2306c:	e0bff817 	ldw	r2,-32(fp)
   23070:	10800517 	ldw	r2,20(r2)
   23074:	e0fff817 	ldw	r3,-32(fp)
   23078:	18c00617 	ldw	r3,24(r3)
   2307c:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   23080:	d0e7dd17 	ldw	r3,-24716(gp)
   23084:	e0bff817 	ldw	r2,-32(fp)
   23088:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   2308c:	e0bff817 	ldw	r2,-32(fp)
   23090:	d0a7dd15 	stw	r2,-24716(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   23094:	e0bff817 	ldw	r2,-32(fp)
   23098:	00c00fc4 	movi	r3,63
   2309c:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   230a0:	e0bff817 	ldw	r2,-32(fp)
   230a4:	10001345 	stb	zero,77(r2)
   230a8:	e0bff617 	ldw	r2,-40(fp)
   230ac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   230b0:	e0bffc17 	ldw	r2,-16(fp)
   230b4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   230b8:	d0a7d643 	ldbu	r2,-24743(gp)
   230bc:	10803fcc 	andi	r2,r2,255
   230c0:	10800058 	cmpnei	r2,r2,1
   230c4:	1000011e 	bne	r2,zero,230cc <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   230c8:	001d8180 	call	1d818 <OS_Sched>
    }
    return (OS_ERR_NONE);
   230cc:	0005883a 	mov	r2,zero
}
   230d0:	e037883a 	mov	sp,fp
   230d4:	dfc00117 	ldw	ra,4(sp)
   230d8:	df000017 	ldw	fp,0(sp)
   230dc:	dec00204 	addi	sp,sp,8
   230e0:	f800283a 	ret

000230e4 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   230e4:	defff504 	addi	sp,sp,-44
   230e8:	df000a15 	stw	fp,40(sp)
   230ec:	df000a04 	addi	fp,sp,40
   230f0:	2005883a 	mov	r2,r4
   230f4:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   230f8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   230fc:	e0bfff03 	ldbu	r2,-4(fp)
   23100:	10800518 	cmpnei	r2,r2,20
   23104:	1000021e 	bne	r2,zero,23110 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   23108:	00800f84 	movi	r2,62
   2310c:	00004506 	br	23224 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   23110:	e0bfff03 	ldbu	r2,-4(fp)
   23114:	10800530 	cmpltui	r2,r2,20
   23118:	1000051e 	bne	r2,zero,23130 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   2311c:	e0bfff03 	ldbu	r2,-4(fp)
   23120:	10803fe0 	cmpeqi	r2,r2,255
   23124:	1000021e 	bne	r2,zero,23130 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   23128:	00800a84 	movi	r2,42
   2312c:	00003d06 	br	23224 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   23130:	e0bfff03 	ldbu	r2,-4(fp)
   23134:	10803fd8 	cmpnei	r2,r2,255
   23138:	1000111e 	bne	r2,zero,23180 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2313c:	0005303a 	rdctl	r2,status
   23140:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23144:	e0fff917 	ldw	r3,-28(fp)
   23148:	00bfff84 	movi	r2,-2
   2314c:	1884703a 	and	r2,r3,r2
   23150:	1001703a 	wrctl	status,r2
  
  return context;
   23154:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   23158:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   2315c:	d0a7e517 	ldw	r2,-24684(gp)
   23160:	10800dc3 	ldbu	r2,55(r2)
   23164:	e0bff805 	stb	r2,-32(fp)
   23168:	e0bff617 	ldw	r2,-40(fp)
   2316c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23170:	e0bffe17 	ldw	r2,-8(fp)
   23174:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   23178:	e0bff803 	ldbu	r2,-32(fp)
   2317c:	00002906 	br	23224 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23180:	0005303a 	rdctl	r2,status
   23184:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23188:	e0fff717 	ldw	r3,-36(fp)
   2318c:	00bfff84 	movi	r2,-2
   23190:	1884703a 	and	r2,r3,r2
   23194:	1001703a 	wrctl	status,r2
  
  return context;
   23198:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   2319c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   231a0:	e0ffff03 	ldbu	r3,-4(fp)
   231a4:	00800174 	movhi	r2,5
   231a8:	1093db04 	addi	r2,r2,20332
   231ac:	18c7883a 	add	r3,r3,r3
   231b0:	18c7883a 	add	r3,r3,r3
   231b4:	10c5883a 	add	r2,r2,r3
   231b8:	10800017 	ldw	r2,0(r2)
   231bc:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   231c0:	e0bffb17 	ldw	r2,-20(fp)
   231c4:	1000061e 	bne	r2,zero,231e0 <OSTaskDelReq+0xfc>
   231c8:	e0bff617 	ldw	r2,-40(fp)
   231cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   231d0:	e0bffa17 	ldw	r2,-24(fp)
   231d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   231d8:	008010c4 	movi	r2,67
   231dc:	00001106 	br	23224 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   231e0:	e0bffb17 	ldw	r2,-20(fp)
   231e4:	10800058 	cmpnei	r2,r2,1
   231e8:	1000061e 	bne	r2,zero,23204 <OSTaskDelReq+0x120>
   231ec:	e0bff617 	ldw	r2,-40(fp)
   231f0:	e0bffc15 	stw	r2,-16(fp)
   231f4:	e0bffc17 	ldw	r2,-16(fp)
   231f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   231fc:	00800f44 	movi	r2,61
   23200:	00000806 	br	23224 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   23204:	e0bffb17 	ldw	r2,-20(fp)
   23208:	00c00fc4 	movi	r3,63
   2320c:	10c00dc5 	stb	r3,55(r2)
   23210:	e0bff617 	ldw	r2,-40(fp)
   23214:	e0bffd15 	stw	r2,-12(fp)
   23218:	e0bffd17 	ldw	r2,-12(fp)
   2321c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   23220:	0005883a 	mov	r2,zero
}
   23224:	e037883a 	mov	sp,fp
   23228:	df000017 	ldw	fp,0(sp)
   2322c:	dec00104 	addi	sp,sp,4
   23230:	f800283a 	ret

00023234 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   23234:	defff404 	addi	sp,sp,-48
   23238:	dfc00b15 	stw	ra,44(sp)
   2323c:	df000a15 	stw	fp,40(sp)
   23240:	df000a04 	addi	fp,sp,40
   23244:	2005883a 	mov	r2,r4
   23248:	e17ffe15 	stw	r5,-8(fp)
   2324c:	e1bfff15 	stw	r6,-4(fp)
   23250:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   23254:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   23258:	e0bfff17 	ldw	r2,-4(fp)
   2325c:	1000021e 	bne	r2,zero,23268 <OSTaskNameGet+0x34>
        return (0);
   23260:	0005883a 	mov	r2,zero
   23264:	00005406 	br	233b8 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   23268:	e0bffd03 	ldbu	r2,-12(fp)
   2326c:	10800570 	cmpltui	r2,r2,21
   23270:	1000081e 	bne	r2,zero,23294 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   23274:	e0bffd03 	ldbu	r2,-12(fp)
   23278:	10803fe0 	cmpeqi	r2,r2,255
   2327c:	1000051e 	bne	r2,zero,23294 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   23280:	e0bfff17 	ldw	r2,-4(fp)
   23284:	00c00a84 	movi	r3,42
   23288:	10c00005 	stb	r3,0(r2)
            return (0);
   2328c:	0005883a 	mov	r2,zero
   23290:	00004906 	br	233b8 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   23294:	e0bffe17 	ldw	r2,-8(fp)
   23298:	1000051e 	bne	r2,zero,232b0 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   2329c:	e0bfff17 	ldw	r2,-4(fp)
   232a0:	00c00304 	movi	r3,12
   232a4:	10c00005 	stb	r3,0(r2)
        return (0);
   232a8:	0005883a 	mov	r2,zero
   232ac:	00004206 	br	233b8 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   232b0:	d0a7e403 	ldbu	r2,-24688(gp)
   232b4:	10803fcc 	andi	r2,r2,255
   232b8:	10000526 	beq	r2,zero,232d0 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   232bc:	e0bfff17 	ldw	r2,-4(fp)
   232c0:	00c00444 	movi	r3,17
   232c4:	10c00005 	stb	r3,0(r2)
        return (0);
   232c8:	0005883a 	mov	r2,zero
   232cc:	00003a06 	br	233b8 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   232d0:	0005303a 	rdctl	r2,status
   232d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   232d8:	e0fffc17 	ldw	r3,-16(fp)
   232dc:	00bfff84 	movi	r2,-2
   232e0:	1884703a 	and	r2,r3,r2
   232e4:	1001703a 	wrctl	status,r2
  
  return context;
   232e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   232ec:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   232f0:	e0bffd03 	ldbu	r2,-12(fp)
   232f4:	10803fd8 	cmpnei	r2,r2,255
   232f8:	1000031e 	bne	r2,zero,23308 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   232fc:	d0a7e517 	ldw	r2,-24684(gp)
   23300:	10800c83 	ldbu	r2,50(r2)
   23304:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   23308:	e0fffd03 	ldbu	r3,-12(fp)
   2330c:	00800174 	movhi	r2,5
   23310:	1093db04 	addi	r2,r2,20332
   23314:	18c7883a 	add	r3,r3,r3
   23318:	18c7883a 	add	r3,r3,r3
   2331c:	10c5883a 	add	r2,r2,r3
   23320:	10800017 	ldw	r2,0(r2)
   23324:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   23328:	e0bff817 	ldw	r2,-32(fp)
   2332c:	1000091e 	bne	r2,zero,23354 <OSTaskNameGet+0x120>
   23330:	e0bff617 	ldw	r2,-40(fp)
   23334:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23338:	e0bff717 	ldw	r2,-36(fp)
   2333c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   23340:	e0bfff17 	ldw	r2,-4(fp)
   23344:	00c010c4 	movi	r3,67
   23348:	10c00005 	stb	r3,0(r2)
        return (0);
   2334c:	0005883a 	mov	r2,zero
   23350:	00001906 	br	233b8 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   23354:	e0bff817 	ldw	r2,-32(fp)
   23358:	10800058 	cmpnei	r2,r2,1
   2335c:	1000091e 	bne	r2,zero,23384 <OSTaskNameGet+0x150>
   23360:	e0bff617 	ldw	r2,-40(fp)
   23364:	e0bff915 	stw	r2,-28(fp)
   23368:	e0bff917 	ldw	r2,-28(fp)
   2336c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   23370:	e0bfff17 	ldw	r2,-4(fp)
   23374:	00c010c4 	movi	r3,67
   23378:	10c00005 	stb	r3,0(r2)
        return (0);
   2337c:	0005883a 	mov	r2,zero
   23380:	00000d06 	br	233b8 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   23384:	e0bff817 	ldw	r2,-32(fp)
   23388:	10801304 	addi	r2,r2,76
   2338c:	100b883a 	mov	r5,r2
   23390:	e13ffe17 	ldw	r4,-8(fp)
   23394:	001d95c0 	call	1d95c <OS_StrCopy>
   23398:	e0bffb05 	stb	r2,-20(fp)
   2339c:	e0bff617 	ldw	r2,-40(fp)
   233a0:	e0bffa15 	stw	r2,-24(fp)
   233a4:	e0bffa17 	ldw	r2,-24(fp)
   233a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   233ac:	e0bfff17 	ldw	r2,-4(fp)
   233b0:	10000005 	stb	zero,0(r2)
    return (len);
   233b4:	e0bffb03 	ldbu	r2,-20(fp)
}
   233b8:	e037883a 	mov	sp,fp
   233bc:	dfc00117 	ldw	ra,4(sp)
   233c0:	df000017 	ldw	fp,0(sp)
   233c4:	dec00204 	addi	sp,sp,8
   233c8:	f800283a 	ret

000233cc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   233cc:	defff304 	addi	sp,sp,-52
   233d0:	dfc00c15 	stw	ra,48(sp)
   233d4:	df000b15 	stw	fp,44(sp)
   233d8:	df000b04 	addi	fp,sp,44
   233dc:	2005883a 	mov	r2,r4
   233e0:	e17ffe15 	stw	r5,-8(fp)
   233e4:	e1bfff15 	stw	r6,-4(fp)
   233e8:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   233ec:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   233f0:	e0bfff17 	ldw	r2,-4(fp)
   233f4:	10005c26 	beq	r2,zero,23568 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   233f8:	e0bffd03 	ldbu	r2,-12(fp)
   233fc:	10800570 	cmpltui	r2,r2,21
   23400:	1000071e 	bne	r2,zero,23420 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   23404:	e0bffd03 	ldbu	r2,-12(fp)
   23408:	10803fe0 	cmpeqi	r2,r2,255
   2340c:	1000041e 	bne	r2,zero,23420 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   23410:	e0bfff17 	ldw	r2,-4(fp)
   23414:	00c00a84 	movi	r3,42
   23418:	10c00005 	stb	r3,0(r2)
            return;
   2341c:	00005306 	br	2356c <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   23420:	e0bffe17 	ldw	r2,-8(fp)
   23424:	1000041e 	bne	r2,zero,23438 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   23428:	e0bfff17 	ldw	r2,-4(fp)
   2342c:	00c00304 	movi	r3,12
   23430:	10c00005 	stb	r3,0(r2)
        return;
   23434:	00004d06 	br	2356c <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   23438:	d0a7e403 	ldbu	r2,-24688(gp)
   2343c:	10803fcc 	andi	r2,r2,255
   23440:	10000426 	beq	r2,zero,23454 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   23444:	e0bfff17 	ldw	r2,-4(fp)
   23448:	00c00484 	movi	r3,18
   2344c:	10c00005 	stb	r3,0(r2)
        return;
   23450:	00004606 	br	2356c <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23454:	0005303a 	rdctl	r2,status
   23458:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2345c:	e0fffc17 	ldw	r3,-16(fp)
   23460:	00bfff84 	movi	r2,-2
   23464:	1884703a 	and	r2,r3,r2
   23468:	1001703a 	wrctl	status,r2
  
  return context;
   2346c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   23470:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   23474:	e0bffd03 	ldbu	r2,-12(fp)
   23478:	10803fd8 	cmpnei	r2,r2,255
   2347c:	1000031e 	bne	r2,zero,2348c <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   23480:	d0a7e517 	ldw	r2,-24684(gp)
   23484:	10800c83 	ldbu	r2,50(r2)
   23488:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   2348c:	e0fffd03 	ldbu	r3,-12(fp)
   23490:	00800174 	movhi	r2,5
   23494:	1093db04 	addi	r2,r2,20332
   23498:	18c7883a 	add	r3,r3,r3
   2349c:	18c7883a 	add	r3,r3,r3
   234a0:	10c5883a 	add	r2,r2,r3
   234a4:	10800017 	ldw	r2,0(r2)
   234a8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   234ac:	e0bff717 	ldw	r2,-36(fp)
   234b0:	1000081e 	bne	r2,zero,234d4 <OSTaskNameSet+0x108>
   234b4:	e0bff517 	ldw	r2,-44(fp)
   234b8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   234bc:	e0bff617 	ldw	r2,-40(fp)
   234c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   234c4:	e0bfff17 	ldw	r2,-4(fp)
   234c8:	00c010c4 	movi	r3,67
   234cc:	10c00005 	stb	r3,0(r2)
        return;
   234d0:	00002606 	br	2356c <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   234d4:	e0bff717 	ldw	r2,-36(fp)
   234d8:	10800058 	cmpnei	r2,r2,1
   234dc:	1000081e 	bne	r2,zero,23500 <OSTaskNameSet+0x134>
   234e0:	e0bff517 	ldw	r2,-44(fp)
   234e4:	e0bff815 	stw	r2,-32(fp)
   234e8:	e0bff817 	ldw	r2,-32(fp)
   234ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   234f0:	e0bfff17 	ldw	r2,-4(fp)
   234f4:	00c010c4 	movi	r3,67
   234f8:	10c00005 	stb	r3,0(r2)
        return;
   234fc:	00001b06 	br	2356c <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   23500:	e13ffe17 	ldw	r4,-8(fp)
   23504:	001d9d00 	call	1d9d0 <OS_StrLen>
   23508:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   2350c:	e0bffa03 	ldbu	r2,-24(fp)
   23510:	10800830 	cmpltui	r2,r2,32
   23514:	1000081e 	bne	r2,zero,23538 <OSTaskNameSet+0x16c>
   23518:	e0bff517 	ldw	r2,-44(fp)
   2351c:	e0bff915 	stw	r2,-28(fp)
   23520:	e0bff917 	ldw	r2,-28(fp)
   23524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   23528:	e0bfff17 	ldw	r2,-4(fp)
   2352c:	00c01044 	movi	r3,65
   23530:	10c00005 	stb	r3,0(r2)
        return;
   23534:	00000d06 	br	2356c <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   23538:	e0bff717 	ldw	r2,-36(fp)
   2353c:	10801304 	addi	r2,r2,76
   23540:	e17ffe17 	ldw	r5,-8(fp)
   23544:	1009883a 	mov	r4,r2
   23548:	001d95c0 	call	1d95c <OS_StrCopy>
   2354c:	e0bff517 	ldw	r2,-44(fp)
   23550:	e0bffb15 	stw	r2,-20(fp)
   23554:	e0bffb17 	ldw	r2,-20(fp)
   23558:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   2355c:	e0bfff17 	ldw	r2,-4(fp)
   23560:	10000005 	stb	zero,0(r2)
   23564:	00000106 	br	2356c <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   23568:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   2356c:	e037883a 	mov	sp,fp
   23570:	dfc00117 	ldw	ra,4(sp)
   23574:	df000017 	ldw	fp,0(sp)
   23578:	dec00204 	addi	sp,sp,8
   2357c:	f800283a 	ret

00023580 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   23580:	defff404 	addi	sp,sp,-48
   23584:	dfc00b15 	stw	ra,44(sp)
   23588:	df000a15 	stw	fp,40(sp)
   2358c:	df000a04 	addi	fp,sp,40
   23590:	2005883a 	mov	r2,r4
   23594:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   23598:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   2359c:	e0bfff03 	ldbu	r2,-4(fp)
   235a0:	10800530 	cmpltui	r2,r2,20
   235a4:	1000021e 	bne	r2,zero,235b0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   235a8:	00800a84 	movi	r2,42
   235ac:	00006406 	br	23740 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   235b0:	0005303a 	rdctl	r2,status
   235b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   235b8:	e0fffe17 	ldw	r3,-8(fp)
   235bc:	00bfff84 	movi	r2,-2
   235c0:	1884703a 	and	r2,r3,r2
   235c4:	1001703a 	wrctl	status,r2
  
  return context;
   235c8:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   235cc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   235d0:	e0ffff03 	ldbu	r3,-4(fp)
   235d4:	00800174 	movhi	r2,5
   235d8:	1093db04 	addi	r2,r2,20332
   235dc:	18c7883a 	add	r3,r3,r3
   235e0:	18c7883a 	add	r3,r3,r3
   235e4:	10c5883a 	add	r2,r2,r3
   235e8:	10800017 	ldw	r2,0(r2)
   235ec:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   235f0:	e0bff817 	ldw	r2,-32(fp)
   235f4:	1000061e 	bne	r2,zero,23610 <OSTaskResume+0x90>
   235f8:	e0bff617 	ldw	r2,-40(fp)
   235fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23600:	e0bff717 	ldw	r2,-36(fp)
   23604:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   23608:	00801184 	movi	r2,70
   2360c:	00004c06 	br	23740 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   23610:	e0bff817 	ldw	r2,-32(fp)
   23614:	10800058 	cmpnei	r2,r2,1
   23618:	1000061e 	bne	r2,zero,23634 <OSTaskResume+0xb4>
   2361c:	e0bff617 	ldw	r2,-40(fp)
   23620:	e0bff915 	stw	r2,-28(fp)
   23624:	e0bff917 	ldw	r2,-28(fp)
   23628:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   2362c:	008010c4 	movi	r2,67
   23630:	00004306 	br	23740 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   23634:	e0bff817 	ldw	r2,-32(fp)
   23638:	10800c03 	ldbu	r2,48(r2)
   2363c:	10803fcc 	andi	r2,r2,255
   23640:	1080020c 	andi	r2,r2,8
   23644:	10003926 	beq	r2,zero,2372c <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   23648:	e0bff817 	ldw	r2,-32(fp)
   2364c:	10c00c03 	ldbu	r3,48(r2)
   23650:	00bffdc4 	movi	r2,-9
   23654:	1884703a 	and	r2,r3,r2
   23658:	1007883a 	mov	r3,r2
   2365c:	e0bff817 	ldw	r2,-32(fp)
   23660:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   23664:	e0bff817 	ldw	r2,-32(fp)
   23668:	10800c03 	ldbu	r2,48(r2)
   2366c:	10803fcc 	andi	r2,r2,255
   23670:	1000281e 	bne	r2,zero,23714 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   23674:	e0bff817 	ldw	r2,-32(fp)
   23678:	10800b8b 	ldhu	r2,46(r2)
   2367c:	10bfffcc 	andi	r2,r2,65535
   23680:	10001f1e 	bne	r2,zero,23700 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   23684:	e0bff817 	ldw	r2,-32(fp)
   23688:	10c00d83 	ldbu	r3,54(r2)
   2368c:	d0a7e203 	ldbu	r2,-24696(gp)
   23690:	1884b03a 	or	r2,r3,r2
   23694:	d0a7e205 	stb	r2,-24696(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   23698:	e0bff817 	ldw	r2,-32(fp)
   2369c:	10800d03 	ldbu	r2,52(r2)
   236a0:	10c03fcc 	andi	r3,r2,255
   236a4:	e0bff817 	ldw	r2,-32(fp)
   236a8:	10800d03 	ldbu	r2,52(r2)
   236ac:	11003fcc 	andi	r4,r2,255
   236b0:	d0a7e244 	addi	r2,gp,-24695
   236b4:	2085883a 	add	r2,r4,r2
   236b8:	11000003 	ldbu	r4,0(r2)
   236bc:	e0bff817 	ldw	r2,-32(fp)
   236c0:	10800d43 	ldbu	r2,53(r2)
   236c4:	2084b03a 	or	r2,r4,r2
   236c8:	1009883a 	mov	r4,r2
   236cc:	d0a7e244 	addi	r2,gp,-24695
   236d0:	1885883a 	add	r2,r3,r2
   236d4:	11000005 	stb	r4,0(r2)
   236d8:	e0bff617 	ldw	r2,-40(fp)
   236dc:	e0bffa15 	stw	r2,-24(fp)
   236e0:	e0bffa17 	ldw	r2,-24(fp)
   236e4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   236e8:	d0a7d643 	ldbu	r2,-24743(gp)
   236ec:	10803fcc 	andi	r2,r2,255
   236f0:	10800058 	cmpnei	r2,r2,1
   236f4:	10000b1e 	bne	r2,zero,23724 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   236f8:	001d8180 	call	1d818 <OS_Sched>
   236fc:	00000906 	br	23724 <OSTaskResume+0x1a4>
   23700:	e0bff617 	ldw	r2,-40(fp)
   23704:	e0bffb15 	stw	r2,-20(fp)
   23708:	e0bffb17 	ldw	r2,-20(fp)
   2370c:	1001703a 	wrctl	status,r2
   23710:	00000406 	br	23724 <OSTaskResume+0x1a4>
   23714:	e0bff617 	ldw	r2,-40(fp)
   23718:	e0bffc15 	stw	r2,-16(fp)
   2371c:	e0bffc17 	ldw	r2,-16(fp)
   23720:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   23724:	0005883a 	mov	r2,zero
   23728:	00000506 	br	23740 <OSTaskResume+0x1c0>
   2372c:	e0bff617 	ldw	r2,-40(fp)
   23730:	e0bffd15 	stw	r2,-12(fp)
   23734:	e0bffd17 	ldw	r2,-12(fp)
   23738:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   2373c:	00801104 	movi	r2,68
}
   23740:	e037883a 	mov	sp,fp
   23744:	dfc00117 	ldw	ra,4(sp)
   23748:	df000017 	ldw	fp,0(sp)
   2374c:	dec00204 	addi	sp,sp,8
   23750:	f800283a 	ret

00023754 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   23754:	defff304 	addi	sp,sp,-52
   23758:	df000c15 	stw	fp,48(sp)
   2375c:	df000c04 	addi	fp,sp,48
   23760:	2005883a 	mov	r2,r4
   23764:	e17fff15 	stw	r5,-4(fp)
   23768:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   2376c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   23770:	e0bffe03 	ldbu	r2,-8(fp)
   23774:	10800570 	cmpltui	r2,r2,21
   23778:	1000051e 	bne	r2,zero,23790 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   2377c:	e0bffe03 	ldbu	r2,-8(fp)
   23780:	10803fe0 	cmpeqi	r2,r2,255
   23784:	1000021e 	bne	r2,zero,23790 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   23788:	00800a84 	movi	r2,42
   2378c:	00005d06 	br	23904 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   23790:	e0bfff17 	ldw	r2,-4(fp)
   23794:	1000021e 	bne	r2,zero,237a0 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   23798:	00800244 	movi	r2,9
   2379c:	00005906 	br	23904 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   237a0:	e0bfff17 	ldw	r2,-4(fp)
   237a4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   237a8:	e0bfff17 	ldw	r2,-4(fp)
   237ac:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   237b0:	0005303a 	rdctl	r2,status
   237b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   237b8:	e0fffd17 	ldw	r3,-12(fp)
   237bc:	00bfff84 	movi	r2,-2
   237c0:	1884703a 	and	r2,r3,r2
   237c4:	1001703a 	wrctl	status,r2
  
  return context;
   237c8:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   237cc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   237d0:	e0bffe03 	ldbu	r2,-8(fp)
   237d4:	10803fd8 	cmpnei	r2,r2,255
   237d8:	1000031e 	bne	r2,zero,237e8 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   237dc:	d0a7e517 	ldw	r2,-24684(gp)
   237e0:	10800c83 	ldbu	r2,50(r2)
   237e4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   237e8:	e0fffe03 	ldbu	r3,-8(fp)
   237ec:	00800174 	movhi	r2,5
   237f0:	1093db04 	addi	r2,r2,20332
   237f4:	18c7883a 	add	r3,r3,r3
   237f8:	18c7883a 	add	r3,r3,r3
   237fc:	10c5883a 	add	r2,r2,r3
   23800:	10800017 	ldw	r2,0(r2)
   23804:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   23808:	e0bff817 	ldw	r2,-32(fp)
   2380c:	1000061e 	bne	r2,zero,23828 <OSTaskStkChk+0xd4>
   23810:	e0bff617 	ldw	r2,-40(fp)
   23814:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23818:	e0bff717 	ldw	r2,-36(fp)
   2381c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   23820:	008010c4 	movi	r2,67
   23824:	00003706 	br	23904 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   23828:	e0bff817 	ldw	r2,-32(fp)
   2382c:	10800058 	cmpnei	r2,r2,1
   23830:	1000061e 	bne	r2,zero,2384c <OSTaskStkChk+0xf8>
   23834:	e0bff617 	ldw	r2,-40(fp)
   23838:	e0bff915 	stw	r2,-28(fp)
   2383c:	e0bff917 	ldw	r2,-28(fp)
   23840:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   23844:	008010c4 	movi	r2,67
   23848:	00002e06 	br	23904 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   2384c:	e0bff817 	ldw	r2,-32(fp)
   23850:	1080040b 	ldhu	r2,16(r2)
   23854:	10bfffcc 	andi	r2,r2,65535
   23858:	1080004c 	andi	r2,r2,1
   2385c:	1000061e 	bne	r2,zero,23878 <OSTaskStkChk+0x124>
   23860:	e0bff617 	ldw	r2,-40(fp)
   23864:	e0bffa15 	stw	r2,-24(fp)
   23868:	e0bffa17 	ldw	r2,-24(fp)
   2386c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   23870:	00801144 	movi	r2,69
   23874:	00002306 	br	23904 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   23878:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   2387c:	e0bff817 	ldw	r2,-32(fp)
   23880:	10800317 	ldw	r2,12(r2)
   23884:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   23888:	e0bff817 	ldw	r2,-32(fp)
   2388c:	10800217 	ldw	r2,8(r2)
   23890:	e0bff415 	stw	r2,-48(fp)
   23894:	e0bff617 	ldw	r2,-40(fp)
   23898:	e0bffb15 	stw	r2,-20(fp)
   2389c:	e0bffb17 	ldw	r2,-20(fp)
   238a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   238a4:	00000306 	br	238b4 <OSTaskStkChk+0x160>
        nfree++;
   238a8:	e0bff517 	ldw	r2,-44(fp)
   238ac:	10800044 	addi	r2,r2,1
   238b0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   238b4:	e0bff417 	ldw	r2,-48(fp)
   238b8:	10c00104 	addi	r3,r2,4
   238bc:	e0fff415 	stw	r3,-48(fp)
   238c0:	10800017 	ldw	r2,0(r2)
   238c4:	103ff826 	beq	r2,zero,238a8 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   238c8:	e0bff517 	ldw	r2,-44(fp)
   238cc:	1085883a 	add	r2,r2,r2
   238d0:	1085883a 	add	r2,r2,r2
   238d4:	1007883a 	mov	r3,r2
   238d8:	e0bfff17 	ldw	r2,-4(fp)
   238dc:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   238e0:	e0fffc17 	ldw	r3,-16(fp)
   238e4:	e0bff517 	ldw	r2,-44(fp)
   238e8:	1885c83a 	sub	r2,r3,r2
   238ec:	1085883a 	add	r2,r2,r2
   238f0:	1085883a 	add	r2,r2,r2
   238f4:	1007883a 	mov	r3,r2
   238f8:	e0bfff17 	ldw	r2,-4(fp)
   238fc:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   23900:	0005883a 	mov	r2,zero
}
   23904:	e037883a 	mov	sp,fp
   23908:	df000017 	ldw	fp,0(sp)
   2390c:	dec00104 	addi	sp,sp,4
   23910:	f800283a 	ret

00023914 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   23914:	defff504 	addi	sp,sp,-44
   23918:	dfc00a15 	stw	ra,40(sp)
   2391c:	df000915 	stw	fp,36(sp)
   23920:	df000904 	addi	fp,sp,36
   23924:	2005883a 	mov	r2,r4
   23928:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   2392c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   23930:	e0bfff03 	ldbu	r2,-4(fp)
   23934:	10800518 	cmpnei	r2,r2,20
   23938:	1000021e 	bne	r2,zero,23944 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   2393c:	008011c4 	movi	r2,71
   23940:	00006806 	br	23ae4 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   23944:	e0bfff03 	ldbu	r2,-4(fp)
   23948:	10800530 	cmpltui	r2,r2,20
   2394c:	1000051e 	bne	r2,zero,23964 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   23950:	e0bfff03 	ldbu	r2,-4(fp)
   23954:	10803fe0 	cmpeqi	r2,r2,255
   23958:	1000021e 	bne	r2,zero,23964 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   2395c:	00800a84 	movi	r2,42
   23960:	00006006 	br	23ae4 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23964:	0005303a 	rdctl	r2,status
   23968:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2396c:	e0fffe17 	ldw	r3,-8(fp)
   23970:	00bfff84 	movi	r2,-2
   23974:	1884703a 	and	r2,r3,r2
   23978:	1001703a 	wrctl	status,r2
  
  return context;
   2397c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   23980:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   23984:	e0bfff03 	ldbu	r2,-4(fp)
   23988:	10803fd8 	cmpnei	r2,r2,255
   2398c:	1000061e 	bne	r2,zero,239a8 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   23990:	d0a7e517 	ldw	r2,-24684(gp)
   23994:	10800c83 	ldbu	r2,50(r2)
   23998:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   2399c:	00800044 	movi	r2,1
   239a0:	e0bff705 	stb	r2,-36(fp)
   239a4:	00000906 	br	239cc <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   239a8:	d0a7e517 	ldw	r2,-24684(gp)
   239ac:	10800c83 	ldbu	r2,50(r2)
   239b0:	10c03fcc 	andi	r3,r2,255
   239b4:	e0bfff03 	ldbu	r2,-4(fp)
   239b8:	1880031e 	bne	r3,r2,239c8 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   239bc:	00800044 	movi	r2,1
   239c0:	e0bff705 	stb	r2,-36(fp)
   239c4:	00000106 	br	239cc <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   239c8:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   239cc:	e0ffff03 	ldbu	r3,-4(fp)
   239d0:	00800174 	movhi	r2,5
   239d4:	1093db04 	addi	r2,r2,20332
   239d8:	18c7883a 	add	r3,r3,r3
   239dc:	18c7883a 	add	r3,r3,r3
   239e0:	10c5883a 	add	r2,r2,r3
   239e4:	10800017 	ldw	r2,0(r2)
   239e8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   239ec:	e0bffa17 	ldw	r2,-24(fp)
   239f0:	1000061e 	bne	r2,zero,23a0c <OSTaskSuspend+0xf8>
   239f4:	e0bff817 	ldw	r2,-32(fp)
   239f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   239fc:	e0bff917 	ldw	r2,-28(fp)
   23a00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   23a04:	00801204 	movi	r2,72
   23a08:	00003606 	br	23ae4 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   23a0c:	e0bffa17 	ldw	r2,-24(fp)
   23a10:	10800058 	cmpnei	r2,r2,1
   23a14:	1000061e 	bne	r2,zero,23a30 <OSTaskSuspend+0x11c>
   23a18:	e0bff817 	ldw	r2,-32(fp)
   23a1c:	e0bffb15 	stw	r2,-20(fp)
   23a20:	e0bffb17 	ldw	r2,-20(fp)
   23a24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   23a28:	008010c4 	movi	r2,67
   23a2c:	00002d06 	br	23ae4 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   23a30:	e0bffa17 	ldw	r2,-24(fp)
   23a34:	10800d03 	ldbu	r2,52(r2)
   23a38:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   23a3c:	e0fffd03 	ldbu	r3,-12(fp)
   23a40:	e13ffd03 	ldbu	r4,-12(fp)
   23a44:	d0a7e244 	addi	r2,gp,-24695
   23a48:	2085883a 	add	r2,r4,r2
   23a4c:	10800003 	ldbu	r2,0(r2)
   23a50:	1009883a 	mov	r4,r2
   23a54:	e0bffa17 	ldw	r2,-24(fp)
   23a58:	10800d43 	ldbu	r2,53(r2)
   23a5c:	0084303a 	nor	r2,zero,r2
   23a60:	2084703a 	and	r2,r4,r2
   23a64:	1009883a 	mov	r4,r2
   23a68:	d0a7e244 	addi	r2,gp,-24695
   23a6c:	1885883a 	add	r2,r3,r2
   23a70:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   23a74:	e0fffd03 	ldbu	r3,-12(fp)
   23a78:	d0a7e244 	addi	r2,gp,-24695
   23a7c:	1885883a 	add	r2,r3,r2
   23a80:	10800003 	ldbu	r2,0(r2)
   23a84:	10803fcc 	andi	r2,r2,255
   23a88:	1000071e 	bne	r2,zero,23aa8 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   23a8c:	e0bffa17 	ldw	r2,-24(fp)
   23a90:	10800d83 	ldbu	r2,54(r2)
   23a94:	0084303a 	nor	r2,zero,r2
   23a98:	1007883a 	mov	r3,r2
   23a9c:	d0a7e203 	ldbu	r2,-24696(gp)
   23aa0:	1884703a 	and	r2,r3,r2
   23aa4:	d0a7e205 	stb	r2,-24696(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   23aa8:	e0bffa17 	ldw	r2,-24(fp)
   23aac:	10800c03 	ldbu	r2,48(r2)
   23ab0:	10800214 	ori	r2,r2,8
   23ab4:	1007883a 	mov	r3,r2
   23ab8:	e0bffa17 	ldw	r2,-24(fp)
   23abc:	10c00c05 	stb	r3,48(r2)
   23ac0:	e0bff817 	ldw	r2,-32(fp)
   23ac4:	e0bffc15 	stw	r2,-16(fp)
   23ac8:	e0bffc17 	ldw	r2,-16(fp)
   23acc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   23ad0:	e0bff703 	ldbu	r2,-36(fp)
   23ad4:	10800058 	cmpnei	r2,r2,1
   23ad8:	1000011e 	bne	r2,zero,23ae0 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   23adc:	001d8180 	call	1d818 <OS_Sched>
    }
    return (OS_ERR_NONE);
   23ae0:	0005883a 	mov	r2,zero
}
   23ae4:	e037883a 	mov	sp,fp
   23ae8:	dfc00117 	ldw	ra,4(sp)
   23aec:	df000017 	ldw	fp,0(sp)
   23af0:	dec00204 	addi	sp,sp,8
   23af4:	f800283a 	ret

00023af8 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   23af8:	defff604 	addi	sp,sp,-40
   23afc:	dfc00915 	stw	ra,36(sp)
   23b00:	df000815 	stw	fp,32(sp)
   23b04:	df000804 	addi	fp,sp,32
   23b08:	2005883a 	mov	r2,r4
   23b0c:	e17fff15 	stw	r5,-4(fp)
   23b10:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   23b14:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   23b18:	e0bffe03 	ldbu	r2,-8(fp)
   23b1c:	10800570 	cmpltui	r2,r2,21
   23b20:	1000051e 	bne	r2,zero,23b38 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   23b24:	e0bffe03 	ldbu	r2,-8(fp)
   23b28:	10803fe0 	cmpeqi	r2,r2,255
   23b2c:	1000021e 	bne	r2,zero,23b38 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   23b30:	00800a84 	movi	r2,42
   23b34:	00003406 	br	23c08 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   23b38:	e0bfff17 	ldw	r2,-4(fp)
   23b3c:	1000021e 	bne	r2,zero,23b48 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   23b40:	00800244 	movi	r2,9
   23b44:	00003006 	br	23c08 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23b48:	0005303a 	rdctl	r2,status
   23b4c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23b50:	e0fffd17 	ldw	r3,-12(fp)
   23b54:	00bfff84 	movi	r2,-2
   23b58:	1884703a 	and	r2,r3,r2
   23b5c:	1001703a 	wrctl	status,r2
  
  return context;
   23b60:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   23b64:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   23b68:	e0bffe03 	ldbu	r2,-8(fp)
   23b6c:	10803fd8 	cmpnei	r2,r2,255
   23b70:	1000031e 	bne	r2,zero,23b80 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   23b74:	d0a7e517 	ldw	r2,-24684(gp)
   23b78:	10800c83 	ldbu	r2,50(r2)
   23b7c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   23b80:	e0fffe03 	ldbu	r3,-8(fp)
   23b84:	00800174 	movhi	r2,5
   23b88:	1093db04 	addi	r2,r2,20332
   23b8c:	18c7883a 	add	r3,r3,r3
   23b90:	18c7883a 	add	r3,r3,r3
   23b94:	10c5883a 	add	r2,r2,r3
   23b98:	10800017 	ldw	r2,0(r2)
   23b9c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   23ba0:	e0bffa17 	ldw	r2,-24(fp)
   23ba4:	1000061e 	bne	r2,zero,23bc0 <OSTaskQuery+0xc8>
   23ba8:	e0bff817 	ldw	r2,-32(fp)
   23bac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23bb0:	e0bff917 	ldw	r2,-28(fp)
   23bb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   23bb8:	00800a44 	movi	r2,41
   23bbc:	00001206 	br	23c08 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   23bc0:	e0bffa17 	ldw	r2,-24(fp)
   23bc4:	10800058 	cmpnei	r2,r2,1
   23bc8:	1000061e 	bne	r2,zero,23be4 <OSTaskQuery+0xec>
   23bcc:	e0bff817 	ldw	r2,-32(fp)
   23bd0:	e0bffb15 	stw	r2,-20(fp)
   23bd4:	e0bffb17 	ldw	r2,-20(fp)
   23bd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   23bdc:	008010c4 	movi	r2,67
   23be0:	00000906 	br	23c08 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   23be4:	01801b04 	movi	r6,108
   23be8:	e17ffa17 	ldw	r5,-24(fp)
   23bec:	e13fff17 	ldw	r4,-4(fp)
   23bf0:	001d7b00 	call	1d7b0 <OS_MemCopy>
   23bf4:	e0bff817 	ldw	r2,-32(fp)
   23bf8:	e0bffc15 	stw	r2,-16(fp)
   23bfc:	e0bffc17 	ldw	r2,-16(fp)
   23c00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   23c04:	0005883a 	mov	r2,zero
}
   23c08:	e037883a 	mov	sp,fp
   23c0c:	dfc00117 	ldw	ra,4(sp)
   23c10:	df000017 	ldw	fp,0(sp)
   23c14:	dec00204 	addi	sp,sp,8
   23c18:	f800283a 	ret

00023c1c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   23c1c:	defffc04 	addi	sp,sp,-16
   23c20:	df000315 	stw	fp,12(sp)
   23c24:	df000304 	addi	fp,sp,12
   23c28:	e13ffd15 	stw	r4,-12(fp)
   23c2c:	e17ffe15 	stw	r5,-8(fp)
   23c30:	3005883a 	mov	r2,r6
   23c34:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   23c38:	e0bfff0b 	ldhu	r2,-4(fp)
   23c3c:	1080004c 	andi	r2,r2,1
   23c40:	10000d26 	beq	r2,zero,23c78 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   23c44:	e0bfff0b 	ldhu	r2,-4(fp)
   23c48:	1080008c 	andi	r2,r2,2
   23c4c:	10000a26 	beq	r2,zero,23c78 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   23c50:	00000706 	br	23c70 <OS_TaskStkClr+0x54>
                size--;
   23c54:	e0bffe17 	ldw	r2,-8(fp)
   23c58:	10bfffc4 	addi	r2,r2,-1
   23c5c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   23c60:	e0bffd17 	ldw	r2,-12(fp)
   23c64:	10c00104 	addi	r3,r2,4
   23c68:	e0fffd15 	stw	r3,-12(fp)
   23c6c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   23c70:	e0bffe17 	ldw	r2,-8(fp)
   23c74:	103ff71e 	bne	r2,zero,23c54 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   23c78:	0001883a 	nop
   23c7c:	e037883a 	mov	sp,fp
   23c80:	df000017 	ldw	fp,0(sp)
   23c84:	dec00104 	addi	sp,sp,4
   23c88:	f800283a 	ret

00023c8c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   23c8c:	defff904 	addi	sp,sp,-28
   23c90:	dfc00615 	stw	ra,24(sp)
   23c94:	df000515 	stw	fp,20(sp)
   23c98:	df000504 	addi	fp,sp,20
   23c9c:	2005883a 	mov	r2,r4
   23ca0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   23ca4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   23ca8:	d0a7e403 	ldbu	r2,-24688(gp)
   23cac:	10803fcc 	andi	r2,r2,255
   23cb0:	1000311e 	bne	r2,zero,23d78 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   23cb4:	e0bfff0b 	ldhu	r2,-4(fp)
   23cb8:	10003026 	beq	r2,zero,23d7c <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23cbc:	0005303a 	rdctl	r2,status
   23cc0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23cc4:	e0fffe17 	ldw	r3,-8(fp)
   23cc8:	00bfff84 	movi	r2,-2
   23ccc:	1884703a 	and	r2,r3,r2
   23cd0:	1001703a 	wrctl	status,r2
  
  return context;
   23cd4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   23cd8:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   23cdc:	d0a7e517 	ldw	r2,-24684(gp)
   23ce0:	10800d03 	ldbu	r2,52(r2)
   23ce4:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   23ce8:	e0fffd03 	ldbu	r3,-12(fp)
   23cec:	e13ffd03 	ldbu	r4,-12(fp)
   23cf0:	d0a7e244 	addi	r2,gp,-24695
   23cf4:	2085883a 	add	r2,r4,r2
   23cf8:	10800003 	ldbu	r2,0(r2)
   23cfc:	1009883a 	mov	r4,r2
   23d00:	d0a7e517 	ldw	r2,-24684(gp)
   23d04:	10800d43 	ldbu	r2,53(r2)
   23d08:	0084303a 	nor	r2,zero,r2
   23d0c:	2084703a 	and	r2,r4,r2
   23d10:	1009883a 	mov	r4,r2
   23d14:	d0a7e244 	addi	r2,gp,-24695
   23d18:	1885883a 	add	r2,r3,r2
   23d1c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   23d20:	e0fffd03 	ldbu	r3,-12(fp)
   23d24:	d0a7e244 	addi	r2,gp,-24695
   23d28:	1885883a 	add	r2,r3,r2
   23d2c:	10800003 	ldbu	r2,0(r2)
   23d30:	10803fcc 	andi	r2,r2,255
   23d34:	1000071e 	bne	r2,zero,23d54 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   23d38:	d0a7e517 	ldw	r2,-24684(gp)
   23d3c:	10800d83 	ldbu	r2,54(r2)
   23d40:	0084303a 	nor	r2,zero,r2
   23d44:	1007883a 	mov	r3,r2
   23d48:	d0a7e203 	ldbu	r2,-24696(gp)
   23d4c:	1884703a 	and	r2,r3,r2
   23d50:	d0a7e205 	stb	r2,-24696(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   23d54:	d0a7e517 	ldw	r2,-24684(gp)
   23d58:	e0ffff0b 	ldhu	r3,-4(fp)
   23d5c:	10c00b8d 	sth	r3,46(r2)
   23d60:	e0bffb17 	ldw	r2,-20(fp)
   23d64:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23d68:	e0bffc17 	ldw	r2,-16(fp)
   23d6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   23d70:	001d8180 	call	1d818 <OS_Sched>
   23d74:	00000106 	br	23d7c <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   23d78:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   23d7c:	e037883a 	mov	sp,fp
   23d80:	dfc00117 	ldw	ra,4(sp)
   23d84:	df000017 	ldw	fp,0(sp)
   23d88:	dec00204 	addi	sp,sp,8
   23d8c:	f800283a 	ret

00023d90 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   23d90:	defff804 	addi	sp,sp,-32
   23d94:	dfc00715 	stw	ra,28(sp)
   23d98:	df000615 	stw	fp,24(sp)
   23d9c:	df000604 	addi	fp,sp,24
   23da0:	2015883a 	mov	r10,r4
   23da4:	2809883a 	mov	r4,r5
   23da8:	3007883a 	mov	r3,r6
   23dac:	3805883a 	mov	r2,r7
   23db0:	e2bffc05 	stb	r10,-16(fp)
   23db4:	e13ffd05 	stb	r4,-12(fp)
   23db8:	e0fffe05 	stb	r3,-8(fp)
   23dbc:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   23dc0:	d0a7e403 	ldbu	r2,-24688(gp)
   23dc4:	10803fcc 	andi	r2,r2,255
   23dc8:	10000226 	beq	r2,zero,23dd4 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
   23dcc:	00801544 	movi	r2,85
   23dd0:	00004206 	br	23edc <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   23dd4:	e0bffc03 	ldbu	r2,-16(fp)
   23dd8:	1000081e 	bne	r2,zero,23dfc <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
   23ddc:	e0bffd03 	ldbu	r2,-12(fp)
   23de0:	1000061e 	bne	r2,zero,23dfc <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
   23de4:	e0bffe03 	ldbu	r2,-8(fp)
   23de8:	1000041e 	bne	r2,zero,23dfc <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
   23dec:	e0bfff0b 	ldhu	r2,-4(fp)
   23df0:	1000021e 	bne	r2,zero,23dfc <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
   23df4:	00801504 	movi	r2,84
   23df8:	00003806 	br	23edc <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
   23dfc:	e0bffd03 	ldbu	r2,-12(fp)
   23e00:	10800f30 	cmpltui	r2,r2,60
   23e04:	1000021e 	bne	r2,zero,23e10 <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   23e08:	00801444 	movi	r2,81
   23e0c:	00003306 	br	23edc <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
   23e10:	e0bffe03 	ldbu	r2,-8(fp)
   23e14:	10800f30 	cmpltui	r2,r2,60
   23e18:	1000021e 	bne	r2,zero,23e24 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
   23e1c:	00801484 	movi	r2,82
   23e20:	00002e06 	br	23edc <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
   23e24:	e0bfff0b 	ldhu	r2,-4(fp)
   23e28:	1080fa30 	cmpltui	r2,r2,1000
   23e2c:	1000021e 	bne	r2,zero,23e38 <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
   23e30:	008014c4 	movi	r2,83
   23e34:	00002906 	br	23edc <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   23e38:	e0bffc03 	ldbu	r2,-16(fp)
   23e3c:	10c38424 	muli	r3,r2,3600
   23e40:	e0bffd03 	ldbu	r2,-12(fp)
   23e44:	10800f24 	muli	r2,r2,60
   23e48:	1887883a 	add	r3,r3,r2
   23e4c:	e0bffe03 	ldbu	r2,-8(fp)
   23e50:	1885883a 	add	r2,r3,r2
   23e54:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   23e58:	e0bfff0b 	ldhu	r2,-4(fp)
   23e5c:	10800f84 	addi	r2,r2,62
   23e60:	100690fa 	slli	r3,r2,3
   23e64:	008418b4 	movhi	r2,4194
   23e68:	109374c4 	addi	r2,r2,19923
   23e6c:	188a383a 	mulxuu	r5,r3,r2
   23e70:	1885383a 	mul	r2,r3,r2
   23e74:	1011883a 	mov	r8,r2
   23e78:	2813883a 	mov	r9,r5
   23e7c:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   23e80:	2085883a 	add	r2,r4,r2
   23e84:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   23e88:	e0bffb17 	ldw	r2,-20(fp)
   23e8c:	1004d43a 	srli	r2,r2,16
   23e90:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   23e94:	e0bffb17 	ldw	r2,-20(fp)
   23e98:	10bfffcc 	andi	r2,r2,65535
   23e9c:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   23ea0:	e0bffb17 	ldw	r2,-20(fp)
   23ea4:	10bfffcc 	andi	r2,r2,65535
   23ea8:	1009883a 	mov	r4,r2
   23eac:	0023c8c0 	call	23c8c <OSTimeDly>
    while (loops > 0) {
   23eb0:	00000706 	br	23ed0 <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
   23eb4:	01200014 	movui	r4,32768
   23eb8:	0023c8c0 	call	23c8c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   23ebc:	01200014 	movui	r4,32768
   23ec0:	0023c8c0 	call	23c8c <OSTimeDly>
        loops--;
   23ec4:	e0bffa0b 	ldhu	r2,-24(fp)
   23ec8:	10bfffc4 	addi	r2,r2,-1
   23ecc:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   23ed0:	e0bffa0b 	ldhu	r2,-24(fp)
   23ed4:	103ff71e 	bne	r2,zero,23eb4 <OSTimeDlyHMSM+0x124>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   23ed8:	0005883a 	mov	r2,zero
}
   23edc:	e037883a 	mov	sp,fp
   23ee0:	dfc00117 	ldw	ra,4(sp)
   23ee4:	df000017 	ldw	fp,0(sp)
   23ee8:	dec00204 	addi	sp,sp,8
   23eec:	f800283a 	ret

00023ef0 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   23ef0:	defff504 	addi	sp,sp,-44
   23ef4:	dfc00a15 	stw	ra,40(sp)
   23ef8:	df000915 	stw	fp,36(sp)
   23efc:	df000904 	addi	fp,sp,36
   23f00:	2005883a 	mov	r2,r4
   23f04:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   23f08:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   23f0c:	e0bfff03 	ldbu	r2,-4(fp)
   23f10:	10800530 	cmpltui	r2,r2,20
   23f14:	1000021e 	bne	r2,zero,23f20 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   23f18:	00800a84 	movi	r2,42
   23f1c:	00006406 	br	240b0 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23f20:	0005303a 	rdctl	r2,status
   23f24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23f28:	e0fffe17 	ldw	r3,-8(fp)
   23f2c:	00bfff84 	movi	r2,-2
   23f30:	1884703a 	and	r2,r3,r2
   23f34:	1001703a 	wrctl	status,r2
  
  return context;
   23f38:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   23f3c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   23f40:	e0ffff03 	ldbu	r3,-4(fp)
   23f44:	00800174 	movhi	r2,5
   23f48:	1093db04 	addi	r2,r2,20332
   23f4c:	18c7883a 	add	r3,r3,r3
   23f50:	18c7883a 	add	r3,r3,r3
   23f54:	10c5883a 	add	r2,r2,r3
   23f58:	10800017 	ldw	r2,0(r2)
   23f5c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   23f60:	e0bff917 	ldw	r2,-28(fp)
   23f64:	1000061e 	bne	r2,zero,23f80 <OSTimeDlyResume+0x90>
   23f68:	e0bff717 	ldw	r2,-36(fp)
   23f6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23f70:	e0bff817 	ldw	r2,-32(fp)
   23f74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   23f78:	008010c4 	movi	r2,67
   23f7c:	00004c06 	br	240b0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   23f80:	e0bff917 	ldw	r2,-28(fp)
   23f84:	10800058 	cmpnei	r2,r2,1
   23f88:	1000061e 	bne	r2,zero,23fa4 <OSTimeDlyResume+0xb4>
   23f8c:	e0bff717 	ldw	r2,-36(fp)
   23f90:	e0bffa15 	stw	r2,-24(fp)
   23f94:	e0bffa17 	ldw	r2,-24(fp)
   23f98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   23f9c:	008010c4 	movi	r2,67
   23fa0:	00004306 	br	240b0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   23fa4:	e0bff917 	ldw	r2,-28(fp)
   23fa8:	10800b8b 	ldhu	r2,46(r2)
   23fac:	10bfffcc 	andi	r2,r2,65535
   23fb0:	1000061e 	bne	r2,zero,23fcc <OSTimeDlyResume+0xdc>
   23fb4:	e0bff717 	ldw	r2,-36(fp)
   23fb8:	e0bffb15 	stw	r2,-20(fp)
   23fbc:	e0bffb17 	ldw	r2,-20(fp)
   23fc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   23fc4:	00801404 	movi	r2,80
   23fc8:	00003906 	br	240b0 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   23fcc:	e0bff917 	ldw	r2,-28(fp)
   23fd0:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   23fd4:	e0bff917 	ldw	r2,-28(fp)
   23fd8:	10800c03 	ldbu	r2,48(r2)
   23fdc:	10803fcc 	andi	r2,r2,255
   23fe0:	10800dcc 	andi	r2,r2,55
   23fe4:	10000b26 	beq	r2,zero,24014 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   23fe8:	e0bff917 	ldw	r2,-28(fp)
   23fec:	10c00c03 	ldbu	r3,48(r2)
   23ff0:	00bff204 	movi	r2,-56
   23ff4:	1884703a 	and	r2,r3,r2
   23ff8:	1007883a 	mov	r3,r2
   23ffc:	e0bff917 	ldw	r2,-28(fp)
   24000:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   24004:	e0bff917 	ldw	r2,-28(fp)
   24008:	00c00044 	movi	r3,1
   2400c:	10c00c45 	stb	r3,49(r2)
   24010:	00000206 	br	2401c <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   24014:	e0bff917 	ldw	r2,-28(fp)
   24018:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   2401c:	e0bff917 	ldw	r2,-28(fp)
   24020:	10800c03 	ldbu	r2,48(r2)
   24024:	10803fcc 	andi	r2,r2,255
   24028:	1080020c 	andi	r2,r2,8
   2402c:	10001b1e 	bne	r2,zero,2409c <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   24030:	e0bff917 	ldw	r2,-28(fp)
   24034:	10c00d83 	ldbu	r3,54(r2)
   24038:	d0a7e203 	ldbu	r2,-24696(gp)
   2403c:	1884b03a 	or	r2,r3,r2
   24040:	d0a7e205 	stb	r2,-24696(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   24044:	e0bff917 	ldw	r2,-28(fp)
   24048:	10800d03 	ldbu	r2,52(r2)
   2404c:	10c03fcc 	andi	r3,r2,255
   24050:	e0bff917 	ldw	r2,-28(fp)
   24054:	10800d03 	ldbu	r2,52(r2)
   24058:	11003fcc 	andi	r4,r2,255
   2405c:	d0a7e244 	addi	r2,gp,-24695
   24060:	2085883a 	add	r2,r4,r2
   24064:	11000003 	ldbu	r4,0(r2)
   24068:	e0bff917 	ldw	r2,-28(fp)
   2406c:	10800d43 	ldbu	r2,53(r2)
   24070:	2084b03a 	or	r2,r4,r2
   24074:	1009883a 	mov	r4,r2
   24078:	d0a7e244 	addi	r2,gp,-24695
   2407c:	1885883a 	add	r2,r3,r2
   24080:	11000005 	stb	r4,0(r2)
   24084:	e0bff717 	ldw	r2,-36(fp)
   24088:	e0bffc15 	stw	r2,-16(fp)
   2408c:	e0bffc17 	ldw	r2,-16(fp)
   24090:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   24094:	001d8180 	call	1d818 <OS_Sched>
   24098:	00000406 	br	240ac <OSTimeDlyResume+0x1bc>
   2409c:	e0bff717 	ldw	r2,-36(fp)
   240a0:	e0bffd15 	stw	r2,-12(fp)
   240a4:	e0bffd17 	ldw	r2,-12(fp)
   240a8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   240ac:	0005883a 	mov	r2,zero
}
   240b0:	e037883a 	mov	sp,fp
   240b4:	dfc00117 	ldw	ra,4(sp)
   240b8:	df000017 	ldw	fp,0(sp)
   240bc:	dec00204 	addi	sp,sp,8
   240c0:	f800283a 	ret

000240c4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   240c4:	defffb04 	addi	sp,sp,-20
   240c8:	df000415 	stw	fp,16(sp)
   240cc:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   240d0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   240d4:	0005303a 	rdctl	r2,status
   240d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   240dc:	e0fffe17 	ldw	r3,-8(fp)
   240e0:	00bfff84 	movi	r2,-2
   240e4:	1884703a 	and	r2,r3,r2
   240e8:	1001703a 	wrctl	status,r2
  
  return context;
   240ec:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   240f0:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   240f4:	d0a7e617 	ldw	r2,-24680(gp)
   240f8:	e0bffd15 	stw	r2,-12(fp)
   240fc:	e0bffc17 	ldw	r2,-16(fp)
   24100:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24104:	e0bfff17 	ldw	r2,-4(fp)
   24108:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   2410c:	e0bffd17 	ldw	r2,-12(fp)
}
   24110:	e037883a 	mov	sp,fp
   24114:	df000017 	ldw	fp,0(sp)
   24118:	dec00104 	addi	sp,sp,4
   2411c:	f800283a 	ret

00024120 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   24120:	defffb04 	addi	sp,sp,-20
   24124:	df000415 	stw	fp,16(sp)
   24128:	df000404 	addi	fp,sp,16
   2412c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   24130:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24134:	0005303a 	rdctl	r2,status
   24138:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2413c:	e0fffd17 	ldw	r3,-12(fp)
   24140:	00bfff84 	movi	r2,-2
   24144:	1884703a 	and	r2,r3,r2
   24148:	1001703a 	wrctl	status,r2
  
  return context;
   2414c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   24150:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   24154:	e0bfff17 	ldw	r2,-4(fp)
   24158:	d0a7e615 	stw	r2,-24680(gp)
   2415c:	e0bffc17 	ldw	r2,-16(fp)
   24160:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24164:	e0bffe17 	ldw	r2,-8(fp)
   24168:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   2416c:	0001883a 	nop
   24170:	e037883a 	mov	sp,fp
   24174:	df000017 	ldw	fp,0(sp)
   24178:	dec00104 	addi	sp,sp,4
   2417c:	f800283a 	ret

00024180 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   24180:	defffd04 	addi	sp,sp,-12
   24184:	dfc00215 	stw	ra,8(sp)
   24188:	df000115 	stw	fp,4(sp)
   2418c:	df000104 	addi	fp,sp,4
   24190:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   24194:	d1600904 	addi	r5,gp,-32732
   24198:	e13fff17 	ldw	r4,-4(fp)
   2419c:	00261ec0 	call	261ec <alt_dev_llist_insert>
}
   241a0:	e037883a 	mov	sp,fp
   241a4:	dfc00117 	ldw	ra,4(sp)
   241a8:	df000017 	ldw	fp,0(sp)
   241ac:	dec00204 	addi	sp,sp,8
   241b0:	f800283a 	ret

000241b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   241b4:	defffd04 	addi	sp,sp,-12
   241b8:	dfc00215 	stw	ra,8(sp)
   241bc:	df000115 	stw	fp,4(sp)
   241c0:	df000104 	addi	fp,sp,4
   241c4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   241c8:	0026acc0 	call	26acc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   241cc:	00800044 	movi	r2,1
   241d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   241d4:	0001883a 	nop
   241d8:	e037883a 	mov	sp,fp
   241dc:	dfc00117 	ldw	ra,4(sp)
   241e0:	df000017 	ldw	fp,0(sp)
   241e4:	dec00204 	addi	sp,sp,8
   241e8:	f800283a 	ret

000241ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   241ec:	defffe04 	addi	sp,sp,-8
   241f0:	dfc00115 	stw	ra,4(sp)
   241f4:	df000015 	stw	fp,0(sp)
   241f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   241fc:	01c00204 	movi	r7,8
   24200:	000d883a 	mov	r6,zero
   24204:	000b883a 	mov	r5,zero
   24208:	01040034 	movhi	r4,4096
   2420c:	21080004 	addi	r4,r4,8192
   24210:	00250bc0 	call	250bc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   24214:	01800204 	movi	r6,8
   24218:	000b883a 	mov	r5,zero
   2421c:	010000f4 	movhi	r4,3
   24220:	2121b904 	addi	r4,r4,-31004
   24224:	00244800 	call	24480 <altera_avalon_jtag_uart_init>
   24228:	010000f4 	movhi	r4,3
   2422c:	2121af04 	addi	r4,r4,-31044
   24230:	00241800 	call	24180 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   24234:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   24238:	010000f4 	movhi	r4,3
   2423c:	2125ca04 	addi	r4,r4,-26840
   24240:	00241800 	call	24180 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   24244:	010000f4 	movhi	r4,3
   24248:	2125d604 	addi	r4,r4,-26792
   2424c:	00251e40 	call	251e4 <alt_up_character_lcd_init>
   24250:	010000f4 	movhi	r4,3
   24254:	2125d604 	addi	r4,r4,-26792
   24258:	00241800 	call	24180 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   2425c:	010000f4 	movhi	r4,3
   24260:	2125e104 	addi	r4,r4,-26748
   24264:	00241800 	call	24180 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   24268:	010000f4 	movhi	r4,3
   2426c:	2125ec04 	addi	r4,r4,-26704
   24270:	00241800 	call	24180 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   24274:	010000f4 	movhi	r4,3
   24278:	2125f704 	addi	r4,r4,-26660
   2427c:	00241800 	call	24180 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   24280:	010000f4 	movhi	r4,3
   24284:	21260204 	addi	r4,r4,-26616
   24288:	00241800 	call	24180 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   2428c:	010000f4 	movhi	r4,3
   24290:	21260d04 	addi	r4,r4,-26572
   24294:	00241800 	call	24180 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   24298:	010000f4 	movhi	r4,3
   2429c:	21261804 	addi	r4,r4,-26528
   242a0:	00241800 	call	24180 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   242a4:	010000f4 	movhi	r4,3
   242a8:	21262304 	addi	r4,r4,-26484
   242ac:	00241800 	call	24180 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   242b0:	010000f4 	movhi	r4,3
   242b4:	21262e04 	addi	r4,r4,-26440
   242b8:	002574c0 	call	2574c <alt_up_ps2_init>
   242bc:	010000f4 	movhi	r4,3
   242c0:	21262e04 	addi	r4,r4,-26440
   242c4:	00241800 	call	24180 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   242c8:	010000f4 	movhi	r4,3
   242cc:	21263c04 	addi	r4,r4,-26384
   242d0:	002574c0 	call	2574c <alt_up_ps2_init>
   242d4:	010000f4 	movhi	r4,3
   242d8:	21263c04 	addi	r4,r4,-26384
   242dc:	00241800 	call	24180 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   242e0:	010000f4 	movhi	r4,3
   242e4:	21264a04 	addi	r4,r4,-26328
   242e8:	00241800 	call	24180 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   242ec:	010000f4 	movhi	r4,3
   242f0:	21265504 	addi	r4,r4,-26284
   242f4:	00241800 	call	24180 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   242f8:	010000f4 	movhi	r4,3
   242fc:	21266204 	addi	r4,r4,-26232
   24300:	00241800 	call	24180 <alt_dev_reg>
}
   24304:	0001883a 	nop
   24308:	e037883a 	mov	sp,fp
   2430c:	dfc00117 	ldw	ra,4(sp)
   24310:	df000017 	ldw	fp,0(sp)
   24314:	dec00204 	addi	sp,sp,8
   24318:	f800283a 	ret

0002431c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2431c:	defffa04 	addi	sp,sp,-24
   24320:	dfc00515 	stw	ra,20(sp)
   24324:	df000415 	stw	fp,16(sp)
   24328:	df000404 	addi	fp,sp,16
   2432c:	e13ffd15 	stw	r4,-12(fp)
   24330:	e17ffe15 	stw	r5,-8(fp)
   24334:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   24338:	e0bffd17 	ldw	r2,-12(fp)
   2433c:	10800017 	ldw	r2,0(r2)
   24340:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   24344:	e0bffc17 	ldw	r2,-16(fp)
   24348:	10c00a04 	addi	r3,r2,40
   2434c:	e0bffd17 	ldw	r2,-12(fp)
   24350:	10800217 	ldw	r2,8(r2)
   24354:	100f883a 	mov	r7,r2
   24358:	e1bfff17 	ldw	r6,-4(fp)
   2435c:	e17ffe17 	ldw	r5,-8(fp)
   24360:	1809883a 	mov	r4,r3
   24364:	0024ac00 	call	24ac0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   24368:	e037883a 	mov	sp,fp
   2436c:	dfc00117 	ldw	ra,4(sp)
   24370:	df000017 	ldw	fp,0(sp)
   24374:	dec00204 	addi	sp,sp,8
   24378:	f800283a 	ret

0002437c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2437c:	defffa04 	addi	sp,sp,-24
   24380:	dfc00515 	stw	ra,20(sp)
   24384:	df000415 	stw	fp,16(sp)
   24388:	df000404 	addi	fp,sp,16
   2438c:	e13ffd15 	stw	r4,-12(fp)
   24390:	e17ffe15 	stw	r5,-8(fp)
   24394:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   24398:	e0bffd17 	ldw	r2,-12(fp)
   2439c:	10800017 	ldw	r2,0(r2)
   243a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   243a4:	e0bffc17 	ldw	r2,-16(fp)
   243a8:	10c00a04 	addi	r3,r2,40
   243ac:	e0bffd17 	ldw	r2,-12(fp)
   243b0:	10800217 	ldw	r2,8(r2)
   243b4:	100f883a 	mov	r7,r2
   243b8:	e1bfff17 	ldw	r6,-4(fp)
   243bc:	e17ffe17 	ldw	r5,-8(fp)
   243c0:	1809883a 	mov	r4,r3
   243c4:	0024d7c0 	call	24d7c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   243c8:	e037883a 	mov	sp,fp
   243cc:	dfc00117 	ldw	ra,4(sp)
   243d0:	df000017 	ldw	fp,0(sp)
   243d4:	dec00204 	addi	sp,sp,8
   243d8:	f800283a 	ret

000243dc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   243dc:	defffc04 	addi	sp,sp,-16
   243e0:	dfc00315 	stw	ra,12(sp)
   243e4:	df000215 	stw	fp,8(sp)
   243e8:	df000204 	addi	fp,sp,8
   243ec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   243f0:	e0bfff17 	ldw	r2,-4(fp)
   243f4:	10800017 	ldw	r2,0(r2)
   243f8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   243fc:	e0bffe17 	ldw	r2,-8(fp)
   24400:	10c00a04 	addi	r3,r2,40
   24404:	e0bfff17 	ldw	r2,-4(fp)
   24408:	10800217 	ldw	r2,8(r2)
   2440c:	100b883a 	mov	r5,r2
   24410:	1809883a 	mov	r4,r3
   24414:	00249680 	call	24968 <altera_avalon_jtag_uart_close>
}
   24418:	e037883a 	mov	sp,fp
   2441c:	dfc00117 	ldw	ra,4(sp)
   24420:	df000017 	ldw	fp,0(sp)
   24424:	dec00204 	addi	sp,sp,8
   24428:	f800283a 	ret

0002442c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2442c:	defffa04 	addi	sp,sp,-24
   24430:	dfc00515 	stw	ra,20(sp)
   24434:	df000415 	stw	fp,16(sp)
   24438:	df000404 	addi	fp,sp,16
   2443c:	e13ffd15 	stw	r4,-12(fp)
   24440:	e17ffe15 	stw	r5,-8(fp)
   24444:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   24448:	e0bffd17 	ldw	r2,-12(fp)
   2444c:	10800017 	ldw	r2,0(r2)
   24450:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   24454:	e0bffc17 	ldw	r2,-16(fp)
   24458:	10800a04 	addi	r2,r2,40
   2445c:	e1bfff17 	ldw	r6,-4(fp)
   24460:	e17ffe17 	ldw	r5,-8(fp)
   24464:	1009883a 	mov	r4,r2
   24468:	00249d00 	call	249d0 <altera_avalon_jtag_uart_ioctl>
}
   2446c:	e037883a 	mov	sp,fp
   24470:	dfc00117 	ldw	ra,4(sp)
   24474:	df000017 	ldw	fp,0(sp)
   24478:	dec00204 	addi	sp,sp,8
   2447c:	f800283a 	ret

00024480 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   24480:	defff204 	addi	sp,sp,-56
   24484:	dfc00d15 	stw	ra,52(sp)
   24488:	df000c15 	stw	fp,48(sp)
   2448c:	df000c04 	addi	fp,sp,48
   24490:	e13ff915 	stw	r4,-28(fp)
   24494:	e17ffa15 	stw	r5,-24(fp)
   24498:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   2449c:	e0bff917 	ldw	r2,-28(fp)
   244a0:	10800c04 	addi	r2,r2,48
   244a4:	e0bff415 	stw	r2,-48(fp)
   244a8:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   244ac:	e0bff80b 	ldhu	r2,-32(fp)
   244b0:	e0fff884 	addi	r3,fp,-30
   244b4:	180b883a 	mov	r5,r3
   244b8:	1009883a 	mov	r4,r2
   244bc:	001e3940 	call	1e394 <OSFlagCreate>
   244c0:	1007883a 	mov	r3,r2
   244c4:	e0bff417 	ldw	r2,-48(fp)
   244c8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   244cc:	e0bff917 	ldw	r2,-28(fp)
   244d0:	10800a04 	addi	r2,r2,40
   244d4:	e0bff515 	stw	r2,-44(fp)
   244d8:	00800044 	movi	r2,1
   244dc:	e0bff78d 	sth	r2,-34(fp)
   244e0:	e0bff78b 	ldhu	r2,-34(fp)
   244e4:	1009883a 	mov	r4,r2
   244e8:	0021b700 	call	21b70 <OSSemCreate>
   244ec:	1007883a 	mov	r3,r2
   244f0:	e0bff517 	ldw	r2,-44(fp)
   244f4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   244f8:	e0bff917 	ldw	r2,-28(fp)
   244fc:	10800b04 	addi	r2,r2,44
   24500:	e0bff615 	stw	r2,-40(fp)
   24504:	00800044 	movi	r2,1
   24508:	e0bff70d 	sth	r2,-36(fp)
   2450c:	e0bff70b 	ldhu	r2,-36(fp)
   24510:	1009883a 	mov	r4,r2
   24514:	0021b700 	call	21b70 <OSSemCreate>
   24518:	1007883a 	mov	r3,r2
   2451c:	e0bff617 	ldw	r2,-40(fp)
   24520:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24524:	e0bff917 	ldw	r2,-28(fp)
   24528:	00c00044 	movi	r3,1
   2452c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   24530:	e0bff917 	ldw	r2,-28(fp)
   24534:	10800017 	ldw	r2,0(r2)
   24538:	10800104 	addi	r2,r2,4
   2453c:	1007883a 	mov	r3,r2
   24540:	e0bff917 	ldw	r2,-28(fp)
   24544:	10800817 	ldw	r2,32(r2)
   24548:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   2454c:	e0bffb17 	ldw	r2,-20(fp)
   24550:	018000b4 	movhi	r6,2
   24554:	31916f04 	addi	r6,r6,17852
   24558:	e17ff917 	ldw	r5,-28(fp)
   2455c:	1009883a 	mov	r4,r2
   24560:	00265540 	call	26554 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   24564:	e0bff917 	ldw	r2,-28(fp)
   24568:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2456c:	e0bff917 	ldw	r2,-28(fp)
   24570:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   24574:	d0e7eb17 	ldw	r3,-24660(gp)
   24578:	e1fff917 	ldw	r7,-28(fp)
   2457c:	018000b4 	movhi	r6,2
   24580:	31921904 	addi	r6,r6,18532
   24584:	180b883a 	mov	r5,r3
   24588:	1009883a 	mov	r4,r2
   2458c:	00260640 	call	26064 <alt_alarm_start>
   24590:	1000040e 	bge	r2,zero,245a4 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   24594:	e0fff917 	ldw	r3,-28(fp)
   24598:	00a00034 	movhi	r2,32768
   2459c:	10bfffc4 	addi	r2,r2,-1
   245a0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   245a4:	0001883a 	nop
   245a8:	e037883a 	mov	sp,fp
   245ac:	dfc00117 	ldw	ra,4(sp)
   245b0:	df000017 	ldw	fp,0(sp)
   245b4:	dec00204 	addi	sp,sp,8
   245b8:	f800283a 	ret

000245bc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   245bc:	defff104 	addi	sp,sp,-60
   245c0:	dfc00e15 	stw	ra,56(sp)
   245c4:	df000d15 	stw	fp,52(sp)
   245c8:	df000d04 	addi	fp,sp,52
   245cc:	e13ffe15 	stw	r4,-8(fp)
   245d0:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   245d4:	e0bffe17 	ldw	r2,-8(fp)
   245d8:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   245dc:	e0bff517 	ldw	r2,-44(fp)
   245e0:	10800017 	ldw	r2,0(r2)
   245e4:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   245e8:	e0bff617 	ldw	r2,-40(fp)
   245ec:	10800104 	addi	r2,r2,4
   245f0:	10800037 	ldwio	r2,0(r2)
   245f4:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   245f8:	e0bff717 	ldw	r2,-36(fp)
   245fc:	1080c00c 	andi	r2,r2,768
   24600:	10009126 	beq	r2,zero,24848 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   24604:	e0bff717 	ldw	r2,-36(fp)
   24608:	1080400c 	andi	r2,r2,256
   2460c:	10004726 	beq	r2,zero,2472c <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   24610:	00800074 	movhi	r2,1
   24614:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24618:	e0bff517 	ldw	r2,-44(fp)
   2461c:	10800d17 	ldw	r2,52(r2)
   24620:	10800044 	addi	r2,r2,1
   24624:	1081ffcc 	andi	r2,r2,2047
   24628:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   2462c:	e0bff517 	ldw	r2,-44(fp)
   24630:	10c00e17 	ldw	r3,56(r2)
   24634:	e0bff817 	ldw	r2,-32(fp)
   24638:	18802726 	beq	r3,r2,246d8 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2463c:	e0bff617 	ldw	r2,-40(fp)
   24640:	10800037 	ldwio	r2,0(r2)
   24644:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   24648:	e0bff317 	ldw	r2,-52(fp)
   2464c:	10a0000c 	andi	r2,r2,32768
   24650:	10002326 	beq	r2,zero,246e0 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   24654:	e0bff517 	ldw	r2,-44(fp)
   24658:	10800d17 	ldw	r2,52(r2)
   2465c:	e0fff317 	ldw	r3,-52(fp)
   24660:	1809883a 	mov	r4,r3
   24664:	e0fff517 	ldw	r3,-44(fp)
   24668:	1885883a 	add	r2,r3,r2
   2466c:	10801104 	addi	r2,r2,68
   24670:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24674:	e0bff517 	ldw	r2,-44(fp)
   24678:	10800d17 	ldw	r2,52(r2)
   2467c:	10800044 	addi	r2,r2,1
   24680:	10c1ffcc 	andi	r3,r2,2047
   24684:	e0bff517 	ldw	r2,-44(fp)
   24688:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   2468c:	e0bff517 	ldw	r2,-44(fp)
   24690:	10800c17 	ldw	r2,48(r2)
   24694:	e0bffa15 	stw	r2,-24(fp)
   24698:	00800044 	movi	r2,1
   2469c:	e0bffb0d 	sth	r2,-20(fp)
   246a0:	00800044 	movi	r2,1
   246a4:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   246a8:	d0a7d643 	ldbu	r2,-24743(gp)
   246ac:	10803fcc 	andi	r2,r2,255
   246b0:	103fd926 	beq	r2,zero,24618 <altera_avalon_jtag_uart_irq+0x5c>
  {
    OSFlagPost (group, flags, opt, &err);
   246b4:	e0bffb0b 	ldhu	r2,-20(fp)
   246b8:	e0fffb83 	ldbu	r3,-18(fp)
   246bc:	e13ffcc4 	addi	r4,fp,-13
   246c0:	200f883a 	mov	r7,r4
   246c4:	180d883a 	mov	r6,r3
   246c8:	100b883a 	mov	r5,r2
   246cc:	e13ffa17 	ldw	r4,-24(fp)
   246d0:	001ef700 	call	1ef70 <OSFlagPost>
      }
   246d4:	003fd006 	br	24618 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   246d8:	0001883a 	nop
   246dc:	00000106 	br	246e4 <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   246e0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   246e4:	e0bff317 	ldw	r2,-52(fp)
   246e8:	10bfffec 	andhi	r2,r2,65535
   246ec:	10000f26 	beq	r2,zero,2472c <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   246f0:	e0bff517 	ldw	r2,-44(fp)
   246f4:	10c00817 	ldw	r3,32(r2)
   246f8:	00bfff84 	movi	r2,-2
   246fc:	1886703a 	and	r3,r3,r2
   24700:	e0bff517 	ldw	r2,-44(fp)
   24704:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   24708:	e0bff617 	ldw	r2,-40(fp)
   2470c:	10800104 	addi	r2,r2,4
   24710:	1007883a 	mov	r3,r2
   24714:	e0bff517 	ldw	r2,-44(fp)
   24718:	10800817 	ldw	r2,32(r2)
   2471c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24720:	e0bff617 	ldw	r2,-40(fp)
   24724:	10800104 	addi	r2,r2,4
   24728:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2472c:	e0bff717 	ldw	r2,-36(fp)
   24730:	1080800c 	andi	r2,r2,512
   24734:	103fac26 	beq	r2,zero,245e8 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   24738:	e0bff717 	ldw	r2,-36(fp)
   2473c:	1004d43a 	srli	r2,r2,16
   24740:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   24744:	00002606 	br	247e0 <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   24748:	e0bff617 	ldw	r2,-40(fp)
   2474c:	e0fff517 	ldw	r3,-44(fp)
   24750:	18c01017 	ldw	r3,64(r3)
   24754:	e13ff517 	ldw	r4,-44(fp)
   24758:	20c7883a 	add	r3,r4,r3
   2475c:	18c21104 	addi	r3,r3,2116
   24760:	18c00003 	ldbu	r3,0(r3)
   24764:	18c03fcc 	andi	r3,r3,255
   24768:	18c0201c 	xori	r3,r3,128
   2476c:	18ffe004 	addi	r3,r3,-128
   24770:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24774:	e0bff517 	ldw	r2,-44(fp)
   24778:	10801017 	ldw	r2,64(r2)
   2477c:	10800044 	addi	r2,r2,1
   24780:	10c1ffcc 	andi	r3,r2,2047
   24784:	e0bff517 	ldw	r2,-44(fp)
   24788:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   2478c:	e0bff517 	ldw	r2,-44(fp)
   24790:	10800c17 	ldw	r2,48(r2)
   24794:	e0bff915 	stw	r2,-28(fp)
   24798:	00800084 	movi	r2,2
   2479c:	e0bffc0d 	sth	r2,-16(fp)
   247a0:	00800044 	movi	r2,1
   247a4:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   247a8:	d0a7d643 	ldbu	r2,-24743(gp)
   247ac:	10803fcc 	andi	r2,r2,255
   247b0:	10000826 	beq	r2,zero,247d4 <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
   247b4:	e0bffc0b 	ldhu	r2,-16(fp)
   247b8:	e0fffc83 	ldbu	r3,-14(fp)
   247bc:	e13ffd04 	addi	r4,fp,-12
   247c0:	200f883a 	mov	r7,r4
   247c4:	180d883a 	mov	r6,r3
   247c8:	100b883a 	mov	r5,r2
   247cc:	e13ff917 	ldw	r4,-28(fp)
   247d0:	001ef700 	call	1ef70 <OSFlagPost>

        space--;
   247d4:	e0bff417 	ldw	r2,-48(fp)
   247d8:	10bfffc4 	addi	r2,r2,-1
   247dc:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   247e0:	e0bff417 	ldw	r2,-48(fp)
   247e4:	10000526 	beq	r2,zero,247fc <altera_avalon_jtag_uart_irq+0x240>
   247e8:	e0bff517 	ldw	r2,-44(fp)
   247ec:	10c01017 	ldw	r3,64(r2)
   247f0:	e0bff517 	ldw	r2,-44(fp)
   247f4:	10800f17 	ldw	r2,60(r2)
   247f8:	18bfd31e 	bne	r3,r2,24748 <altera_avalon_jtag_uart_irq+0x18c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   247fc:	e0bff417 	ldw	r2,-48(fp)
   24800:	103f7926 	beq	r2,zero,245e8 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24804:	e0bff517 	ldw	r2,-44(fp)
   24808:	10c00817 	ldw	r3,32(r2)
   2480c:	00bfff44 	movi	r2,-3
   24810:	1886703a 	and	r3,r3,r2
   24814:	e0bff517 	ldw	r2,-44(fp)
   24818:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2481c:	e0bff517 	ldw	r2,-44(fp)
   24820:	10800017 	ldw	r2,0(r2)
   24824:	10800104 	addi	r2,r2,4
   24828:	1007883a 	mov	r3,r2
   2482c:	e0bff517 	ldw	r2,-44(fp)
   24830:	10800817 	ldw	r2,32(r2)
   24834:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24838:	e0bff617 	ldw	r2,-40(fp)
   2483c:	10800104 	addi	r2,r2,4
   24840:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   24844:	003f6806 	br	245e8 <altera_avalon_jtag_uart_irq+0x2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   24848:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   2484c:	0001883a 	nop
   24850:	e037883a 	mov	sp,fp
   24854:	dfc00117 	ldw	ra,4(sp)
   24858:	df000017 	ldw	fp,0(sp)
   2485c:	dec00204 	addi	sp,sp,8
   24860:	f800283a 	ret

00024864 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   24864:	defff904 	addi	sp,sp,-28
   24868:	dfc00615 	stw	ra,24(sp)
   2486c:	df000515 	stw	fp,20(sp)
   24870:	df000504 	addi	fp,sp,20
   24874:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   24878:	e0bfff17 	ldw	r2,-4(fp)
   2487c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   24880:	e0bffb17 	ldw	r2,-20(fp)
   24884:	10800017 	ldw	r2,0(r2)
   24888:	10800104 	addi	r2,r2,4
   2488c:	10800037 	ldwio	r2,0(r2)
   24890:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   24894:	e0bffc17 	ldw	r2,-16(fp)
   24898:	1081000c 	andi	r2,r2,1024
   2489c:	10000b26 	beq	r2,zero,248cc <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   248a0:	e0bffb17 	ldw	r2,-20(fp)
   248a4:	10800017 	ldw	r2,0(r2)
   248a8:	10800104 	addi	r2,r2,4
   248ac:	1007883a 	mov	r3,r2
   248b0:	e0bffb17 	ldw	r2,-20(fp)
   248b4:	10800817 	ldw	r2,32(r2)
   248b8:	10810014 	ori	r2,r2,1024
   248bc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   248c0:	e0bffb17 	ldw	r2,-20(fp)
   248c4:	10000915 	stw	zero,36(r2)
   248c8:	00002106 	br	24950 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   248cc:	e0bffb17 	ldw	r2,-20(fp)
   248d0:	10c00917 	ldw	r3,36(r2)
   248d4:	00a00034 	movhi	r2,32768
   248d8:	10bfff04 	addi	r2,r2,-4
   248dc:	10c01c36 	bltu	r2,r3,24950 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   248e0:	e0bffb17 	ldw	r2,-20(fp)
   248e4:	10800917 	ldw	r2,36(r2)
   248e8:	10c00044 	addi	r3,r2,1
   248ec:	e0bffb17 	ldw	r2,-20(fp)
   248f0:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   248f4:	e0bffb17 	ldw	r2,-20(fp)
   248f8:	10c00917 	ldw	r3,36(r2)
   248fc:	e0bffb17 	ldw	r2,-20(fp)
   24900:	10800117 	ldw	r2,4(r2)
   24904:	18801236 	bltu	r3,r2,24950 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   24908:	e0bffb17 	ldw	r2,-20(fp)
   2490c:	10800c17 	ldw	r2,48(r2)
   24910:	e0bffd15 	stw	r2,-12(fp)
   24914:	00800104 	movi	r2,4
   24918:	e0bffe0d 	sth	r2,-8(fp)
   2491c:	00800044 	movi	r2,1
   24920:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   24924:	d0a7d643 	ldbu	r2,-24743(gp)
   24928:	10803fcc 	andi	r2,r2,255
   2492c:	10000826 	beq	r2,zero,24950 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   24930:	e0bffe0b 	ldhu	r2,-8(fp)
   24934:	e0fffe83 	ldbu	r3,-6(fp)
   24938:	e13ffec4 	addi	r4,fp,-5
   2493c:	200f883a 	mov	r7,r4
   24940:	180d883a 	mov	r6,r3
   24944:	100b883a 	mov	r5,r2
   24948:	e13ffd17 	ldw	r4,-12(fp)
   2494c:	001ef700 	call	1ef70 <OSFlagPost>
   24950:	d0a7eb17 	ldw	r2,-24660(gp)
    }
  }

  return alt_ticks_per_second();
}
   24954:	e037883a 	mov	sp,fp
   24958:	dfc00117 	ldw	ra,4(sp)
   2495c:	df000017 	ldw	fp,0(sp)
   24960:	dec00204 	addi	sp,sp,8
   24964:	f800283a 	ret

00024968 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   24968:	defffd04 	addi	sp,sp,-12
   2496c:	df000215 	stw	fp,8(sp)
   24970:	df000204 	addi	fp,sp,8
   24974:	e13ffe15 	stw	r4,-8(fp)
   24978:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2497c:	00000506 	br	24994 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   24980:	e0bfff17 	ldw	r2,-4(fp)
   24984:	1090000c 	andi	r2,r2,16384
   24988:	10000226 	beq	r2,zero,24994 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2498c:	00bffd44 	movi	r2,-11
   24990:	00000b06 	br	249c0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   24994:	e0bffe17 	ldw	r2,-8(fp)
   24998:	10c01017 	ldw	r3,64(r2)
   2499c:	e0bffe17 	ldw	r2,-8(fp)
   249a0:	10800f17 	ldw	r2,60(r2)
   249a4:	18800526 	beq	r3,r2,249bc <altera_avalon_jtag_uart_close+0x54>
   249a8:	e0bffe17 	ldw	r2,-8(fp)
   249ac:	10c00917 	ldw	r3,36(r2)
   249b0:	e0bffe17 	ldw	r2,-8(fp)
   249b4:	10800117 	ldw	r2,4(r2)
   249b8:	18bff136 	bltu	r3,r2,24980 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   249bc:	0005883a 	mov	r2,zero
}
   249c0:	e037883a 	mov	sp,fp
   249c4:	df000017 	ldw	fp,0(sp)
   249c8:	dec00104 	addi	sp,sp,4
   249cc:	f800283a 	ret

000249d0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   249d0:	defffa04 	addi	sp,sp,-24
   249d4:	df000515 	stw	fp,20(sp)
   249d8:	df000504 	addi	fp,sp,20
   249dc:	e13ffd15 	stw	r4,-12(fp)
   249e0:	e17ffe15 	stw	r5,-8(fp)
   249e4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   249e8:	00bff9c4 	movi	r2,-25
   249ec:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   249f0:	e0bffe17 	ldw	r2,-8(fp)
   249f4:	10da8060 	cmpeqi	r3,r2,27137
   249f8:	1800031e 	bne	r3,zero,24a08 <altera_avalon_jtag_uart_ioctl+0x38>
   249fc:	109a80a0 	cmpeqi	r2,r2,27138
   24a00:	1000181e 	bne	r2,zero,24a64 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   24a04:	00002906 	br	24aac <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   24a08:	e0bffd17 	ldw	r2,-12(fp)
   24a0c:	10c00117 	ldw	r3,4(r2)
   24a10:	00a00034 	movhi	r2,32768
   24a14:	10bfffc4 	addi	r2,r2,-1
   24a18:	18802126 	beq	r3,r2,24aa0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   24a1c:	e0bfff17 	ldw	r2,-4(fp)
   24a20:	10800017 	ldw	r2,0(r2)
   24a24:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   24a28:	e0bffc17 	ldw	r2,-16(fp)
   24a2c:	10800090 	cmplti	r2,r2,2
   24a30:	1000061e 	bne	r2,zero,24a4c <altera_avalon_jtag_uart_ioctl+0x7c>
   24a34:	e0fffc17 	ldw	r3,-16(fp)
   24a38:	00a00034 	movhi	r2,32768
   24a3c:	10bfffc4 	addi	r2,r2,-1
   24a40:	18800226 	beq	r3,r2,24a4c <altera_avalon_jtag_uart_ioctl+0x7c>
   24a44:	e0bffc17 	ldw	r2,-16(fp)
   24a48:	00000206 	br	24a54 <altera_avalon_jtag_uart_ioctl+0x84>
   24a4c:	00a00034 	movhi	r2,32768
   24a50:	10bfff84 	addi	r2,r2,-2
   24a54:	e0fffd17 	ldw	r3,-12(fp)
   24a58:	18800115 	stw	r2,4(r3)
      rc = 0;
   24a5c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   24a60:	00000f06 	br	24aa0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   24a64:	e0bffd17 	ldw	r2,-12(fp)
   24a68:	10c00117 	ldw	r3,4(r2)
   24a6c:	00a00034 	movhi	r2,32768
   24a70:	10bfffc4 	addi	r2,r2,-1
   24a74:	18800c26 	beq	r3,r2,24aa8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   24a78:	e0bffd17 	ldw	r2,-12(fp)
   24a7c:	10c00917 	ldw	r3,36(r2)
   24a80:	e0bffd17 	ldw	r2,-12(fp)
   24a84:	10800117 	ldw	r2,4(r2)
   24a88:	1885803a 	cmpltu	r2,r3,r2
   24a8c:	10c03fcc 	andi	r3,r2,255
   24a90:	e0bfff17 	ldw	r2,-4(fp)
   24a94:	10c00015 	stw	r3,0(r2)
      rc = 0;
   24a98:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   24a9c:	00000206 	br	24aa8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   24aa0:	0001883a 	nop
   24aa4:	00000106 	br	24aac <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   24aa8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   24aac:	e0bffb17 	ldw	r2,-20(fp)
}
   24ab0:	e037883a 	mov	sp,fp
   24ab4:	df000017 	ldw	fp,0(sp)
   24ab8:	dec00104 	addi	sp,sp,4
   24abc:	f800283a 	ret

00024ac0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   24ac0:	deffed04 	addi	sp,sp,-76
   24ac4:	dfc01215 	stw	ra,72(sp)
   24ac8:	df001115 	stw	fp,68(sp)
   24acc:	df001104 	addi	fp,sp,68
   24ad0:	e13ffc15 	stw	r4,-16(fp)
   24ad4:	e17ffd15 	stw	r5,-12(fp)
   24ad8:	e1bffe15 	stw	r6,-8(fp)
   24adc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   24ae0:	e0bffd17 	ldw	r2,-12(fp)
   24ae4:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   24ae8:	e0bffc17 	ldw	r2,-16(fp)
   24aec:	10800a17 	ldw	r2,40(r2)
   24af0:	e0bff815 	stw	r2,-32(fp)
   24af4:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   24af8:	e0bff90b 	ldhu	r2,-28(fp)
   24afc:	e0fffb04 	addi	r3,fp,-20
   24b00:	180d883a 	mov	r6,r3
   24b04:	100b883a 	mov	r5,r2
   24b08:	e13ff817 	ldw	r4,-32(fp)
   24b0c:	0021e880 	call	21e88 <OSSemPend>

  while (space > 0)
   24b10:	00006106 	br	24c98 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   24b14:	e0bffc17 	ldw	r2,-16(fp)
   24b18:	10800d17 	ldw	r2,52(r2)
   24b1c:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   24b20:	e0bffc17 	ldw	r2,-16(fp)
   24b24:	10800e17 	ldw	r2,56(r2)
   24b28:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   24b2c:	e0fff317 	ldw	r3,-52(fp)
   24b30:	e0bff417 	ldw	r2,-48(fp)
   24b34:	18800536 	bltu	r3,r2,24b4c <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   24b38:	e0fff317 	ldw	r3,-52(fp)
   24b3c:	e0bff417 	ldw	r2,-48(fp)
   24b40:	1885c83a 	sub	r2,r3,r2
   24b44:	e0bff115 	stw	r2,-60(fp)
   24b48:	00000406 	br	24b5c <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   24b4c:	00c20004 	movi	r3,2048
   24b50:	e0bff417 	ldw	r2,-48(fp)
   24b54:	1885c83a 	sub	r2,r3,r2
   24b58:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   24b5c:	e0bff117 	ldw	r2,-60(fp)
   24b60:	10001e26 	beq	r2,zero,24bdc <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   24b64:	e0fffe17 	ldw	r3,-8(fp)
   24b68:	e0bff117 	ldw	r2,-60(fp)
   24b6c:	1880022e 	bgeu	r3,r2,24b78 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   24b70:	e0bffe17 	ldw	r2,-8(fp)
   24b74:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   24b78:	e0bffc17 	ldw	r2,-16(fp)
   24b7c:	10c01104 	addi	r3,r2,68
   24b80:	e0bff417 	ldw	r2,-48(fp)
   24b84:	1885883a 	add	r2,r3,r2
   24b88:	e1bff117 	ldw	r6,-60(fp)
   24b8c:	100b883a 	mov	r5,r2
   24b90:	e13ff017 	ldw	r4,-64(fp)
   24b94:	000b4600 	call	b460 <memcpy>
      ptr   += n;
   24b98:	e0fff017 	ldw	r3,-64(fp)
   24b9c:	e0bff117 	ldw	r2,-60(fp)
   24ba0:	1885883a 	add	r2,r3,r2
   24ba4:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   24ba8:	e0fffe17 	ldw	r3,-8(fp)
   24bac:	e0bff117 	ldw	r2,-60(fp)
   24bb0:	1885c83a 	sub	r2,r3,r2
   24bb4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24bb8:	e0fff417 	ldw	r3,-48(fp)
   24bbc:	e0bff117 	ldw	r2,-60(fp)
   24bc0:	1885883a 	add	r2,r3,r2
   24bc4:	10c1ffcc 	andi	r3,r2,2047
   24bc8:	e0bffc17 	ldw	r2,-16(fp)
   24bcc:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   24bd0:	e0bffe17 	ldw	r2,-8(fp)
   24bd4:	00bfcf16 	blt	zero,r2,24b14 <altera_avalon_jtag_uart_read+0x54>
   24bd8:	00000106 	br	24be0 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   24bdc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   24be0:	e0fff017 	ldw	r3,-64(fp)
   24be4:	e0bffd17 	ldw	r2,-12(fp)
   24be8:	18802e1e 	bne	r3,r2,24ca4 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   24bec:	e0bfff17 	ldw	r2,-4(fp)
   24bf0:	1090000c 	andi	r2,r2,16384
   24bf4:	10002d1e 	bne	r2,zero,24cac <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   24bf8:	d0a7d643 	ldbu	r2,-24743(gp)
   24bfc:	10803fcc 	andi	r2,r2,255
   24c00:	10800058 	cmpnei	r2,r2,1
   24c04:	1000161e 	bne	r2,zero,24c60 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   24c08:	e0bffc17 	ldw	r2,-16(fp)
   24c0c:	10800c17 	ldw	r2,48(r2)
   24c10:	e0bff215 	stw	r2,-56(fp)
   24c14:	00800144 	movi	r2,5
   24c18:	e0bff98d 	sth	r2,-26(fp)
   24c1c:	00bfe0c4 	movi	r2,-125
   24c20:	e0bffa05 	stb	r2,-24(fp)
   24c24:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   24c28:	d0a7d643 	ldbu	r2,-24743(gp)
   24c2c:	10803fcc 	andi	r2,r2,255
   24c30:	10001526 	beq	r2,zero,24c88 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   24c34:	e0fff98b 	ldhu	r3,-26(fp)
   24c38:	e13ffa03 	ldbu	r4,-24(fp)
   24c3c:	e17ffa8b 	ldhu	r5,-22(fp)
   24c40:	e0bffb44 	addi	r2,fp,-19
   24c44:	d8800015 	stw	r2,0(sp)
   24c48:	280f883a 	mov	r7,r5
   24c4c:	200d883a 	mov	r6,r4
   24c50:	180b883a 	mov	r5,r3
   24c54:	e13ff217 	ldw	r4,-56(fp)
   24c58:	001e9580 	call	1e958 <OSFlagPend>
   24c5c:	00000a06 	br	24c88 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   24c60:	0001883a 	nop
   24c64:	e0bffc17 	ldw	r2,-16(fp)
   24c68:	10c00d17 	ldw	r3,52(r2)
   24c6c:	e0bff317 	ldw	r2,-52(fp)
   24c70:	1880051e 	bne	r3,r2,24c88 <altera_avalon_jtag_uart_read+0x1c8>
   24c74:	e0bffc17 	ldw	r2,-16(fp)
   24c78:	10c00917 	ldw	r3,36(r2)
   24c7c:	e0bffc17 	ldw	r2,-16(fp)
   24c80:	10800117 	ldw	r2,4(r2)
   24c84:	18bff736 	bltu	r3,r2,24c64 <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   24c88:	e0bffc17 	ldw	r2,-16(fp)
   24c8c:	10c00d17 	ldw	r3,52(r2)
   24c90:	e0bff317 	ldw	r2,-52(fp)
   24c94:	18800726 	beq	r3,r2,24cb4 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   24c98:	e0bffe17 	ldw	r2,-8(fp)
   24c9c:	00bf9d16 	blt	zero,r2,24b14 <altera_avalon_jtag_uart_read+0x54>
   24ca0:	00000506 	br	24cb8 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   24ca4:	0001883a 	nop
   24ca8:	00000306 	br	24cb8 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   24cac:	0001883a 	nop
   24cb0:	00000106 	br	24cb8 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   24cb4:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   24cb8:	e0bffc17 	ldw	r2,-16(fp)
   24cbc:	10800a17 	ldw	r2,40(r2)
   24cc0:	1009883a 	mov	r4,r2
   24cc4:	00222000 	call	22200 <OSSemPost>

  if (ptr != buffer)
   24cc8:	e0fff017 	ldw	r3,-64(fp)
   24ccc:	e0bffd17 	ldw	r2,-12(fp)
   24cd0:	18801826 	beq	r3,r2,24d34 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24cd4:	0005303a 	rdctl	r2,status
   24cd8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24cdc:	e0fff717 	ldw	r3,-36(fp)
   24ce0:	00bfff84 	movi	r2,-2
   24ce4:	1884703a 	and	r2,r3,r2
   24ce8:	1001703a 	wrctl	status,r2
  
  return context;
   24cec:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   24cf0:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24cf4:	e0bffc17 	ldw	r2,-16(fp)
   24cf8:	10800817 	ldw	r2,32(r2)
   24cfc:	10c00054 	ori	r3,r2,1
   24d00:	e0bffc17 	ldw	r2,-16(fp)
   24d04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24d08:	e0bffc17 	ldw	r2,-16(fp)
   24d0c:	10800017 	ldw	r2,0(r2)
   24d10:	10800104 	addi	r2,r2,4
   24d14:	1007883a 	mov	r3,r2
   24d18:	e0bffc17 	ldw	r2,-16(fp)
   24d1c:	10800817 	ldw	r2,32(r2)
   24d20:	18800035 	stwio	r2,0(r3)
   24d24:	e0bff617 	ldw	r2,-40(fp)
   24d28:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24d2c:	e0bff517 	ldw	r2,-44(fp)
   24d30:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   24d34:	e0fff017 	ldw	r3,-64(fp)
   24d38:	e0bffd17 	ldw	r2,-12(fp)
   24d3c:	18800426 	beq	r3,r2,24d50 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   24d40:	e0fff017 	ldw	r3,-64(fp)
   24d44:	e0bffd17 	ldw	r2,-12(fp)
   24d48:	1885c83a 	sub	r2,r3,r2
   24d4c:	00000606 	br	24d68 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   24d50:	e0bfff17 	ldw	r2,-4(fp)
   24d54:	1090000c 	andi	r2,r2,16384
   24d58:	10000226 	beq	r2,zero,24d64 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   24d5c:	00bffd44 	movi	r2,-11
   24d60:	00000106 	br	24d68 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   24d64:	00bffec4 	movi	r2,-5
}
   24d68:	e037883a 	mov	sp,fp
   24d6c:	dfc00117 	ldw	ra,4(sp)
   24d70:	df000017 	ldw	fp,0(sp)
   24d74:	dec00204 	addi	sp,sp,8
   24d78:	f800283a 	ret

00024d7c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   24d7c:	deffed04 	addi	sp,sp,-76
   24d80:	dfc01215 	stw	ra,72(sp)
   24d84:	df001115 	stw	fp,68(sp)
   24d88:	df001104 	addi	fp,sp,68
   24d8c:	e13ffc15 	stw	r4,-16(fp)
   24d90:	e17ffd15 	stw	r5,-12(fp)
   24d94:	e1bffe15 	stw	r6,-8(fp)
   24d98:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   24d9c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   24da0:	e0bffd17 	ldw	r2,-12(fp)
   24da4:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   24da8:	e0bffc17 	ldw	r2,-16(fp)
   24dac:	10800b17 	ldw	r2,44(r2)
   24db0:	e0bff815 	stw	r2,-32(fp)
   24db4:	e03ff90d 	sth	zero,-28(fp)
   24db8:	e0bff90b 	ldhu	r2,-28(fp)
   24dbc:	e0fffb44 	addi	r3,fp,-19
   24dc0:	180d883a 	mov	r6,r3
   24dc4:	100b883a 	mov	r5,r2
   24dc8:	e13ff817 	ldw	r4,-32(fp)
   24dcc:	0021e880 	call	21e88 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24dd0:	00003706 	br	24eb0 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   24dd4:	e0bffc17 	ldw	r2,-16(fp)
   24dd8:	10800f17 	ldw	r2,60(r2)
   24ddc:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   24de0:	e0bffc17 	ldw	r2,-16(fp)
   24de4:	10801017 	ldw	r2,64(r2)
   24de8:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   24dec:	e0fff417 	ldw	r3,-48(fp)
   24df0:	e0bff017 	ldw	r2,-64(fp)
   24df4:	1880062e 	bgeu	r3,r2,24e10 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   24df8:	e0fff017 	ldw	r3,-64(fp)
   24dfc:	e0bff417 	ldw	r2,-48(fp)
   24e00:	1885c83a 	sub	r2,r3,r2
   24e04:	10bfffc4 	addi	r2,r2,-1
   24e08:	e0bff115 	stw	r2,-60(fp)
   24e0c:	00000b06 	br	24e3c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   24e10:	e0bff017 	ldw	r2,-64(fp)
   24e14:	10000526 	beq	r2,zero,24e2c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   24e18:	00c20004 	movi	r3,2048
   24e1c:	e0bff417 	ldw	r2,-48(fp)
   24e20:	1885c83a 	sub	r2,r3,r2
   24e24:	e0bff115 	stw	r2,-60(fp)
   24e28:	00000406 	br	24e3c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   24e2c:	00c1ffc4 	movi	r3,2047
   24e30:	e0bff417 	ldw	r2,-48(fp)
   24e34:	1885c83a 	sub	r2,r3,r2
   24e38:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   24e3c:	e0bff117 	ldw	r2,-60(fp)
   24e40:	10001e26 	beq	r2,zero,24ebc <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   24e44:	e0fffe17 	ldw	r3,-8(fp)
   24e48:	e0bff117 	ldw	r2,-60(fp)
   24e4c:	1880022e 	bgeu	r3,r2,24e58 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   24e50:	e0bffe17 	ldw	r2,-8(fp)
   24e54:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   24e58:	e0bffc17 	ldw	r2,-16(fp)
   24e5c:	10c21104 	addi	r3,r2,2116
   24e60:	e0bff417 	ldw	r2,-48(fp)
   24e64:	1885883a 	add	r2,r3,r2
   24e68:	e1bff117 	ldw	r6,-60(fp)
   24e6c:	e17ffd17 	ldw	r5,-12(fp)
   24e70:	1009883a 	mov	r4,r2
   24e74:	000b4600 	call	b460 <memcpy>
      ptr   += n;
   24e78:	e0fffd17 	ldw	r3,-12(fp)
   24e7c:	e0bff117 	ldw	r2,-60(fp)
   24e80:	1885883a 	add	r2,r3,r2
   24e84:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   24e88:	e0fffe17 	ldw	r3,-8(fp)
   24e8c:	e0bff117 	ldw	r2,-60(fp)
   24e90:	1885c83a 	sub	r2,r3,r2
   24e94:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24e98:	e0fff417 	ldw	r3,-48(fp)
   24e9c:	e0bff117 	ldw	r2,-60(fp)
   24ea0:	1885883a 	add	r2,r3,r2
   24ea4:	10c1ffcc 	andi	r3,r2,2047
   24ea8:	e0bffc17 	ldw	r2,-16(fp)
   24eac:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24eb0:	e0bffe17 	ldw	r2,-8(fp)
   24eb4:	00bfc716 	blt	zero,r2,24dd4 <altera_avalon_jtag_uart_write+0x58>
   24eb8:	00000106 	br	24ec0 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   24ebc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24ec0:	0005303a 	rdctl	r2,status
   24ec4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24ec8:	e0fff717 	ldw	r3,-36(fp)
   24ecc:	00bfff84 	movi	r2,-2
   24ed0:	1884703a 	and	r2,r3,r2
   24ed4:	1001703a 	wrctl	status,r2
  
  return context;
   24ed8:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   24edc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24ee0:	e0bffc17 	ldw	r2,-16(fp)
   24ee4:	10800817 	ldw	r2,32(r2)
   24ee8:	10c00094 	ori	r3,r2,2
   24eec:	e0bffc17 	ldw	r2,-16(fp)
   24ef0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24ef4:	e0bffc17 	ldw	r2,-16(fp)
   24ef8:	10800017 	ldw	r2,0(r2)
   24efc:	10800104 	addi	r2,r2,4
   24f00:	1007883a 	mov	r3,r2
   24f04:	e0bffc17 	ldw	r2,-16(fp)
   24f08:	10800817 	ldw	r2,32(r2)
   24f0c:	18800035 	stwio	r2,0(r3)
   24f10:	e0bff617 	ldw	r2,-40(fp)
   24f14:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24f18:	e0bff317 	ldw	r2,-52(fp)
   24f1c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   24f20:	e0bffe17 	ldw	r2,-8(fp)
   24f24:	00802a0e 	bge	zero,r2,24fd0 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   24f28:	e0bfff17 	ldw	r2,-4(fp)
   24f2c:	1090000c 	andi	r2,r2,16384
   24f30:	10002a1e 	bne	r2,zero,24fdc <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   24f34:	d0a7d643 	ldbu	r2,-24743(gp)
   24f38:	10803fcc 	andi	r2,r2,255
   24f3c:	10800058 	cmpnei	r2,r2,1
   24f40:	1000161e 	bne	r2,zero,24f9c <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   24f44:	e0bffc17 	ldw	r2,-16(fp)
   24f48:	10800c17 	ldw	r2,48(r2)
   24f4c:	e0bff515 	stw	r2,-44(fp)
   24f50:	00800184 	movi	r2,6
   24f54:	e0bff98d 	sth	r2,-26(fp)
   24f58:	00bfe0c4 	movi	r2,-125
   24f5c:	e0bffa05 	stb	r2,-24(fp)
   24f60:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   24f64:	d0a7d643 	ldbu	r2,-24743(gp)
   24f68:	10803fcc 	andi	r2,r2,255
   24f6c:	10001526 	beq	r2,zero,24fc4 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   24f70:	e0fff98b 	ldhu	r3,-26(fp)
   24f74:	e13ffa03 	ldbu	r4,-24(fp)
   24f78:	e17ffa8b 	ldhu	r5,-22(fp)
   24f7c:	e0bffb04 	addi	r2,fp,-20
   24f80:	d8800015 	stw	r2,0(sp)
   24f84:	280f883a 	mov	r7,r5
   24f88:	200d883a 	mov	r6,r4
   24f8c:	180b883a 	mov	r5,r3
   24f90:	e13ff517 	ldw	r4,-44(fp)
   24f94:	001e9580 	call	1e958 <OSFlagPend>
   24f98:	00000a06 	br	24fc4 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   24f9c:	0001883a 	nop
   24fa0:	e0bffc17 	ldw	r2,-16(fp)
   24fa4:	10c01017 	ldw	r3,64(r2)
   24fa8:	e0bff017 	ldw	r2,-64(fp)
   24fac:	1880051e 	bne	r3,r2,24fc4 <altera_avalon_jtag_uart_write+0x248>
   24fb0:	e0bffc17 	ldw	r2,-16(fp)
   24fb4:	10c00917 	ldw	r3,36(r2)
   24fb8:	e0bffc17 	ldw	r2,-16(fp)
   24fbc:	10800117 	ldw	r2,4(r2)
   24fc0:	18bff736 	bltu	r3,r2,24fa0 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   24fc4:	e0bffc17 	ldw	r2,-16(fp)
   24fc8:	10800917 	ldw	r2,36(r2)
   24fcc:	1000051e 	bne	r2,zero,24fe4 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   24fd0:	e0bffe17 	ldw	r2,-8(fp)
   24fd4:	00bfb616 	blt	zero,r2,24eb0 <altera_avalon_jtag_uart_write+0x134>
   24fd8:	00000306 	br	24fe8 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   24fdc:	0001883a 	nop
   24fe0:	00000106 	br	24fe8 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   24fe4:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   24fe8:	e0bffc17 	ldw	r2,-16(fp)
   24fec:	10800b17 	ldw	r2,44(r2)
   24ff0:	1009883a 	mov	r4,r2
   24ff4:	00222000 	call	22200 <OSSemPost>

  if (ptr != start)
   24ff8:	e0fffd17 	ldw	r3,-12(fp)
   24ffc:	e0bff217 	ldw	r2,-56(fp)
   25000:	18800426 	beq	r3,r2,25014 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   25004:	e0fffd17 	ldw	r3,-12(fp)
   25008:	e0bff217 	ldw	r2,-56(fp)
   2500c:	1885c83a 	sub	r2,r3,r2
   25010:	00000606 	br	2502c <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   25014:	e0bfff17 	ldw	r2,-4(fp)
   25018:	1090000c 	andi	r2,r2,16384
   2501c:	10000226 	beq	r2,zero,25028 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   25020:	00bffd44 	movi	r2,-11
   25024:	00000106 	br	2502c <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   25028:	00bffec4 	movi	r2,-5
}
   2502c:	e037883a 	mov	sp,fp
   25030:	dfc00117 	ldw	ra,4(sp)
   25034:	df000017 	ldw	fp,0(sp)
   25038:	dec00204 	addi	sp,sp,8
   2503c:	f800283a 	ret

00025040 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   25040:	defff904 	addi	sp,sp,-28
   25044:	dfc00615 	stw	ra,24(sp)
   25048:	df000515 	stw	fp,20(sp)
   2504c:	df000504 	addi	fp,sp,20
   25050:	e13ffe15 	stw	r4,-8(fp)
   25054:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   25058:	0007883a 	mov	r3,zero
   2505c:	e0bffe17 	ldw	r2,-8(fp)
   25060:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   25064:	e0bffe17 	ldw	r2,-8(fp)
   25068:	10800104 	addi	r2,r2,4
   2506c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25070:	0005303a 	rdctl	r2,status
   25074:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25078:	e0fffc17 	ldw	r3,-16(fp)
   2507c:	00bfff84 	movi	r2,-2
   25080:	1884703a 	and	r2,r3,r2
   25084:	1001703a 	wrctl	status,r2
  
  return context;
   25088:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2508c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   25090:	00269c40 	call	269c4 <alt_tick>
   25094:	e0bffb17 	ldw	r2,-20(fp)
   25098:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2509c:	e0bffd17 	ldw	r2,-12(fp)
   250a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   250a4:	0001883a 	nop
   250a8:	e037883a 	mov	sp,fp
   250ac:	dfc00117 	ldw	ra,4(sp)
   250b0:	df000017 	ldw	fp,0(sp)
   250b4:	dec00204 	addi	sp,sp,8
   250b8:	f800283a 	ret

000250bc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   250bc:	defff904 	addi	sp,sp,-28
   250c0:	dfc00615 	stw	ra,24(sp)
   250c4:	df000515 	stw	fp,20(sp)
   250c8:	df000504 	addi	fp,sp,20
   250cc:	e13ffc15 	stw	r4,-16(fp)
   250d0:	e17ffd15 	stw	r5,-12(fp)
   250d4:	e1bffe15 	stw	r6,-8(fp)
   250d8:	e1ffff15 	stw	r7,-4(fp)
   250dc:	e0bfff17 	ldw	r2,-4(fp)
   250e0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   250e4:	d0a7eb17 	ldw	r2,-24660(gp)
   250e8:	1000021e 	bne	r2,zero,250f4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   250ec:	e0bffb17 	ldw	r2,-20(fp)
   250f0:	d0a7eb15 	stw	r2,-24660(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   250f4:	e0bffc17 	ldw	r2,-16(fp)
   250f8:	10800104 	addi	r2,r2,4
   250fc:	00c001c4 	movi	r3,7
   25100:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   25104:	018000b4 	movhi	r6,2
   25108:	31941004 	addi	r6,r6,20544
   2510c:	e17ffc17 	ldw	r5,-16(fp)
   25110:	e13ffe17 	ldw	r4,-8(fp)
   25114:	00265540 	call	26554 <alt_irq_register>
#endif  
}
   25118:	0001883a 	nop
   2511c:	e037883a 	mov	sp,fp
   25120:	dfc00117 	ldw	ra,4(sp)
   25124:	df000017 	ldw	fp,0(sp)
   25128:	dec00204 	addi	sp,sp,8
   2512c:	f800283a 	ret

00025130 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   25130:	defffc04 	addi	sp,sp,-16
   25134:	df000315 	stw	fp,12(sp)
   25138:	df000304 	addi	fp,sp,12
   2513c:	e13ffe15 	stw	r4,-8(fp)
   25140:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   25144:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   25148:	e0bfff17 	ldw	r2,-4(fp)
   2514c:	1000061e 	bne	r2,zero,25168 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   25150:	e0bffe17 	ldw	r2,-8(fp)
   25154:	1007883a 	mov	r3,r2
   25158:	e0bffd03 	ldbu	r2,-12(fp)
   2515c:	1884b03a 	or	r2,r3,r2
   25160:	e0bffd05 	stb	r2,-12(fp)
   25164:	00000806 	br	25188 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   25168:	e0bffe17 	ldw	r2,-8(fp)
   2516c:	1007883a 	mov	r3,r2
   25170:	e0bffd03 	ldbu	r2,-12(fp)
   25174:	1884b03a 	or	r2,r3,r2
   25178:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   2517c:	e0bffd03 	ldbu	r2,-12(fp)
   25180:	10801014 	ori	r2,r2,64
   25184:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   25188:	e0fffd03 	ldbu	r3,-12(fp)
   2518c:	00bfe004 	movi	r2,-128
   25190:	1884b03a 	or	r2,r3,r2
}
   25194:	e037883a 	mov	sp,fp
   25198:	df000017 	ldw	fp,0(sp)
   2519c:	dec00104 	addi	sp,sp,4
   251a0:	f800283a 	ret

000251a4 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   251a4:	defffd04 	addi	sp,sp,-12
   251a8:	df000215 	stw	fp,8(sp)
   251ac:	df000204 	addi	fp,sp,8
   251b0:	e13ffe15 	stw	r4,-8(fp)
   251b4:	2805883a 	mov	r2,r5
   251b8:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   251bc:	e0bffe17 	ldw	r2,-8(fp)
   251c0:	10800a17 	ldw	r2,40(r2)
   251c4:	1007883a 	mov	r3,r2
   251c8:	e0bfff03 	ldbu	r2,-4(fp)
   251cc:	18800025 	stbio	r2,0(r3)
}
   251d0:	0001883a 	nop
   251d4:	e037883a 	mov	sp,fp
   251d8:	df000017 	ldw	fp,0(sp)
   251dc:	dec00104 	addi	sp,sp,4
   251e0:	f800283a 	ret

000251e4 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   251e4:	defffe04 	addi	sp,sp,-8
   251e8:	df000115 	stw	fp,4(sp)
   251ec:	df000104 	addi	fp,sp,4
   251f0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   251f4:	e0bfff17 	ldw	r2,-4(fp)
   251f8:	10800a17 	ldw	r2,40(r2)
   251fc:	1007883a 	mov	r3,r2
   25200:	00800044 	movi	r2,1
   25204:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   25208:	0001883a 	nop
   2520c:	e037883a 	mov	sp,fp
   25210:	df000017 	ldw	fp,0(sp)
   25214:	dec00104 	addi	sp,sp,4
   25218:	f800283a 	ret

0002521c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   2521c:	defffc04 	addi	sp,sp,-16
   25220:	dfc00315 	stw	ra,12(sp)
   25224:	df000215 	stw	fp,8(sp)
   25228:	df000204 	addi	fp,sp,8
   2522c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   25230:	d1600904 	addi	r5,gp,-32732
   25234:	e13fff17 	ldw	r4,-4(fp)
   25238:	00263500 	call	26350 <alt_find_dev>
   2523c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   25240:	e0bffe17 	ldw	r2,-8(fp)
}
   25244:	e037883a 	mov	sp,fp
   25248:	dfc00117 	ldw	ra,4(sp)
   2524c:	df000017 	ldw	fp,0(sp)
   25250:	dec00204 	addi	sp,sp,8
   25254:	f800283a 	ret

00025258 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   25258:	defffb04 	addi	sp,sp,-20
   2525c:	df000415 	stw	fp,16(sp)
   25260:	df000404 	addi	fp,sp,16
   25264:	e13ffd15 	stw	r4,-12(fp)
   25268:	e17ffe15 	stw	r5,-8(fp)
   2526c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   25270:	e03ffc15 	stw	zero,-16(fp)
   25274:	00000f06 	br	252b4 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   25278:	e0bffd17 	ldw	r2,-12(fp)
   2527c:	10800a17 	ldw	r2,40(r2)
   25280:	10800044 	addi	r2,r2,1
   25284:	1009883a 	mov	r4,r2
   25288:	e0fffe17 	ldw	r3,-8(fp)
   2528c:	e0bffc17 	ldw	r2,-16(fp)
   25290:	1885883a 	add	r2,r3,r2
   25294:	10800003 	ldbu	r2,0(r2)
   25298:	10803fcc 	andi	r2,r2,255
   2529c:	1080201c 	xori	r2,r2,128
   252a0:	10bfe004 	addi	r2,r2,-128
   252a4:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   252a8:	e0bffc17 	ldw	r2,-16(fp)
   252ac:	10800044 	addi	r2,r2,1
   252b0:	e0bffc15 	stw	r2,-16(fp)
   252b4:	e0fffc17 	ldw	r3,-16(fp)
   252b8:	e0bfff17 	ldw	r2,-4(fp)
   252bc:	18bfee36 	bltu	r3,r2,25278 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   252c0:	0001883a 	nop
   252c4:	e037883a 	mov	sp,fp
   252c8:	df000017 	ldw	fp,0(sp)
   252cc:	dec00104 	addi	sp,sp,4
   252d0:	f800283a 	ret

000252d4 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   252d4:	defffd04 	addi	sp,sp,-12
   252d8:	df000215 	stw	fp,8(sp)
   252dc:	df000204 	addi	fp,sp,8
   252e0:	e13ffe15 	stw	r4,-8(fp)
   252e4:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   252e8:	00000d06 	br	25320 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   252ec:	e0bffe17 	ldw	r2,-8(fp)
   252f0:	10800a17 	ldw	r2,40(r2)
   252f4:	10800044 	addi	r2,r2,1
   252f8:	1007883a 	mov	r3,r2
   252fc:	e0bfff17 	ldw	r2,-4(fp)
   25300:	10800003 	ldbu	r2,0(r2)
   25304:	10803fcc 	andi	r2,r2,255
   25308:	1080201c 	xori	r2,r2,128
   2530c:	10bfe004 	addi	r2,r2,-128
   25310:	18800025 	stbio	r2,0(r3)
		++ptr;
   25314:	e0bfff17 	ldw	r2,-4(fp)
   25318:	10800044 	addi	r2,r2,1
   2531c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   25320:	e0bfff17 	ldw	r2,-4(fp)
   25324:	10800003 	ldbu	r2,0(r2)
   25328:	10803fcc 	andi	r2,r2,255
   2532c:	1080201c 	xori	r2,r2,128
   25330:	10bfe004 	addi	r2,r2,-128
   25334:	103fed1e 	bne	r2,zero,252ec <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   25338:	0001883a 	nop
   2533c:	e037883a 	mov	sp,fp
   25340:	df000017 	ldw	fp,0(sp)
   25344:	dec00104 	addi	sp,sp,4
   25348:	f800283a 	ret

0002534c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   2534c:	defffb04 	addi	sp,sp,-20
   25350:	dfc00415 	stw	ra,16(sp)
   25354:	df000315 	stw	fp,12(sp)
   25358:	df000304 	addi	fp,sp,12
   2535c:	e13ffd15 	stw	r4,-12(fp)
   25360:	e17ffe15 	stw	r5,-8(fp)
   25364:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   25368:	e0bffd17 	ldw	r2,-12(fp)
   2536c:	10800017 	ldw	r2,0(r2)
   25370:	e0ffff17 	ldw	r3,-4(fp)
   25374:	180d883a 	mov	r6,r3
   25378:	e17ffe17 	ldw	r5,-8(fp)
   2537c:	1009883a 	mov	r4,r2
   25380:	00252580 	call	25258 <alt_up_character_lcd_write>
	return 0;
   25384:	0005883a 	mov	r2,zero
}
   25388:	e037883a 	mov	sp,fp
   2538c:	dfc00117 	ldw	ra,4(sp)
   25390:	df000017 	ldw	fp,0(sp)
   25394:	dec00204 	addi	sp,sp,8
   25398:	f800283a 	ret

0002539c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   2539c:	defffa04 	addi	sp,sp,-24
   253a0:	dfc00515 	stw	ra,20(sp)
   253a4:	df000415 	stw	fp,16(sp)
   253a8:	df000404 	addi	fp,sp,16
   253ac:	e13ffd15 	stw	r4,-12(fp)
   253b0:	e17ffe15 	stw	r5,-8(fp)
   253b4:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   253b8:	e0bffe17 	ldw	r2,-8(fp)
   253bc:	10800a28 	cmpgeui	r2,r2,40
   253c0:	1000031e 	bne	r2,zero,253d0 <alt_up_character_lcd_set_cursor_pos+0x34>
   253c4:	e0bfff17 	ldw	r2,-4(fp)
   253c8:	108000b0 	cmpltui	r2,r2,2
   253cc:	1000021e 	bne	r2,zero,253d8 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   253d0:	00bfffc4 	movi	r2,-1
   253d4:	00000906 	br	253fc <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   253d8:	e17fff17 	ldw	r5,-4(fp)
   253dc:	e13ffe17 	ldw	r4,-8(fp)
   253e0:	00251300 	call	25130 <get_DDRAM_addr>
   253e4:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   253e8:	e0bffc03 	ldbu	r2,-16(fp)
   253ec:	100b883a 	mov	r5,r2
   253f0:	e13ffd17 	ldw	r4,-12(fp)
   253f4:	00251a40 	call	251a4 <alt_up_character_lcd_send_cmd>
	return 0;
   253f8:	0005883a 	mov	r2,zero
}
   253fc:	e037883a 	mov	sp,fp
   25400:	dfc00117 	ldw	ra,4(sp)
   25404:	df000017 	ldw	fp,0(sp)
   25408:	dec00204 	addi	sp,sp,8
   2540c:	f800283a 	ret

00025410 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   25410:	defffb04 	addi	sp,sp,-20
   25414:	dfc00415 	stw	ra,16(sp)
   25418:	df000315 	stw	fp,12(sp)
   2541c:	df000304 	addi	fp,sp,12
   25420:	e13ffe15 	stw	r4,-8(fp)
   25424:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   25428:	e0bfff17 	ldw	r2,-4(fp)
   2542c:	10001526 	beq	r2,zero,25484 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   25430:	e0bfff17 	ldw	r2,-4(fp)
   25434:	0080020e 	bge	zero,r2,25440 <alt_up_character_lcd_shift_cursor+0x30>
   25438:	00800504 	movi	r2,20
   2543c:	00000106 	br	25444 <alt_up_character_lcd_shift_cursor+0x34>
   25440:	00800404 	movi	r2,16
   25444:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   25448:	e0bfff17 	ldw	r2,-4(fp)
   2544c:	1000010e 	bge	r2,zero,25454 <alt_up_character_lcd_shift_cursor+0x44>
   25450:	0085c83a 	sub	r2,zero,r2
   25454:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   25458:	00000406 	br	2546c <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   2545c:	e0bffd43 	ldbu	r2,-11(fp)
   25460:	100b883a 	mov	r5,r2
   25464:	e13ffe17 	ldw	r4,-8(fp)
   25468:	00251a40 	call	251a4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   2546c:	e0bffd03 	ldbu	r2,-12(fp)
   25470:	10ffffc4 	addi	r3,r2,-1
   25474:	e0fffd05 	stb	r3,-12(fp)
   25478:	10803fcc 	andi	r2,r2,255
   2547c:	103ff71e 	bne	r2,zero,2545c <alt_up_character_lcd_shift_cursor+0x4c>
   25480:	00000106 	br	25488 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   25484:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   25488:	e037883a 	mov	sp,fp
   2548c:	dfc00117 	ldw	ra,4(sp)
   25490:	df000017 	ldw	fp,0(sp)
   25494:	dec00204 	addi	sp,sp,8
   25498:	f800283a 	ret

0002549c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   2549c:	defffb04 	addi	sp,sp,-20
   254a0:	dfc00415 	stw	ra,16(sp)
   254a4:	df000315 	stw	fp,12(sp)
   254a8:	df000304 	addi	fp,sp,12
   254ac:	e13ffe15 	stw	r4,-8(fp)
   254b0:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   254b4:	e0bfff17 	ldw	r2,-4(fp)
   254b8:	10001526 	beq	r2,zero,25510 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   254bc:	e0bfff17 	ldw	r2,-4(fp)
   254c0:	0080020e 	bge	zero,r2,254cc <alt_up_character_lcd_shift_display+0x30>
   254c4:	00800704 	movi	r2,28
   254c8:	00000106 	br	254d0 <alt_up_character_lcd_shift_display+0x34>
   254cc:	00800604 	movi	r2,24
   254d0:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   254d4:	e0bfff17 	ldw	r2,-4(fp)
   254d8:	1000010e 	bge	r2,zero,254e0 <alt_up_character_lcd_shift_display+0x44>
   254dc:	0085c83a 	sub	r2,zero,r2
   254e0:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   254e4:	00000406 	br	254f8 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   254e8:	e0bffd43 	ldbu	r2,-11(fp)
   254ec:	100b883a 	mov	r5,r2
   254f0:	e13ffe17 	ldw	r4,-8(fp)
   254f4:	00251a40 	call	251a4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   254f8:	e0bffd03 	ldbu	r2,-12(fp)
   254fc:	10ffffc4 	addi	r3,r2,-1
   25500:	e0fffd05 	stb	r3,-12(fp)
   25504:	10803fcc 	andi	r2,r2,255
   25508:	103ff71e 	bne	r2,zero,254e8 <alt_up_character_lcd_shift_display+0x4c>
   2550c:	00000106 	br	25514 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   25510:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   25514:	e037883a 	mov	sp,fp
   25518:	dfc00117 	ldw	ra,4(sp)
   2551c:	df000017 	ldw	fp,0(sp)
   25520:	dec00204 	addi	sp,sp,8
   25524:	f800283a 	ret

00025528 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   25528:	defffa04 	addi	sp,sp,-24
   2552c:	dfc00515 	stw	ra,20(sp)
   25530:	df000415 	stw	fp,16(sp)
   25534:	df000404 	addi	fp,sp,16
   25538:	e13ffd15 	stw	r4,-12(fp)
   2553c:	e17ffe15 	stw	r5,-8(fp)
   25540:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   25544:	e0bffe17 	ldw	r2,-8(fp)
   25548:	10800a28 	cmpgeui	r2,r2,40
   2554c:	1000031e 	bne	r2,zero,2555c <alt_up_character_lcd_erase_pos+0x34>
   25550:	e0bfff17 	ldw	r2,-4(fp)
   25554:	108000b0 	cmpltui	r2,r2,2
   25558:	1000021e 	bne	r2,zero,25564 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   2555c:	00bfffc4 	movi	r2,-1
   25560:	00000f06 	br	255a0 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   25564:	e17fff17 	ldw	r5,-4(fp)
   25568:	e13ffe17 	ldw	r4,-8(fp)
   2556c:	00251300 	call	25130 <get_DDRAM_addr>
   25570:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   25574:	e0bffc03 	ldbu	r2,-16(fp)
   25578:	100b883a 	mov	r5,r2
   2557c:	e13ffd17 	ldw	r4,-12(fp)
   25580:	00251a40 	call	251a4 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   25584:	e0bffd17 	ldw	r2,-12(fp)
   25588:	10800a17 	ldw	r2,40(r2)
   2558c:	10800044 	addi	r2,r2,1
   25590:	1007883a 	mov	r3,r2
   25594:	00800084 	movi	r2,2
   25598:	18800025 	stbio	r2,0(r3)
	return 0;
   2559c:	0005883a 	mov	r2,zero
}
   255a0:	e037883a 	mov	sp,fp
   255a4:	dfc00117 	ldw	ra,4(sp)
   255a8:	df000017 	ldw	fp,0(sp)
   255ac:	dec00204 	addi	sp,sp,8
   255b0:	f800283a 	ret

000255b4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   255b4:	defffd04 	addi	sp,sp,-12
   255b8:	dfc00215 	stw	ra,8(sp)
   255bc:	df000115 	stw	fp,4(sp)
   255c0:	df000104 	addi	fp,sp,4
   255c4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   255c8:	01400304 	movi	r5,12
   255cc:	e13fff17 	ldw	r4,-4(fp)
   255d0:	00251a40 	call	251a4 <alt_up_character_lcd_send_cmd>
}
   255d4:	0001883a 	nop
   255d8:	e037883a 	mov	sp,fp
   255dc:	dfc00117 	ldw	ra,4(sp)
   255e0:	df000017 	ldw	fp,0(sp)
   255e4:	dec00204 	addi	sp,sp,8
   255e8:	f800283a 	ret

000255ec <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   255ec:	defffd04 	addi	sp,sp,-12
   255f0:	dfc00215 	stw	ra,8(sp)
   255f4:	df000115 	stw	fp,4(sp)
   255f8:	df000104 	addi	fp,sp,4
   255fc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   25600:	014003c4 	movi	r5,15
   25604:	e13fff17 	ldw	r4,-4(fp)
   25608:	00251a40 	call	251a4 <alt_up_character_lcd_send_cmd>
}
   2560c:	0001883a 	nop
   25610:	e037883a 	mov	sp,fp
   25614:	dfc00117 	ldw	ra,4(sp)
   25618:	df000017 	ldw	fp,0(sp)
   2561c:	dec00204 	addi	sp,sp,8
   25620:	f800283a 	ret

00025624 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   25624:	defffd04 	addi	sp,sp,-12
   25628:	df000215 	stw	fp,8(sp)
   2562c:	df000204 	addi	fp,sp,8
   25630:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   25634:	e0bfff17 	ldw	r2,-4(fp)
   25638:	1080400c 	andi	r2,r2,256
   2563c:	1004d23a 	srli	r2,r2,8
   25640:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   25644:	e0bffe03 	ldbu	r2,-8(fp)
}
   25648:	e037883a 	mov	sp,fp
   2564c:	df000017 	ldw	fp,0(sp)
   25650:	dec00104 	addi	sp,sp,4
   25654:	f800283a 	ret

00025658 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   25658:	defffd04 	addi	sp,sp,-12
   2565c:	df000215 	stw	fp,8(sp)
   25660:	df000204 	addi	fp,sp,8
   25664:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   25668:	e0bfff17 	ldw	r2,-4(fp)
   2566c:	1080004c 	andi	r2,r2,1
   25670:	e0bffe05 	stb	r2,-8(fp)
	return re;
   25674:	e0bffe03 	ldbu	r2,-8(fp)
}
   25678:	e037883a 	mov	sp,fp
   2567c:	df000017 	ldw	fp,0(sp)
   25680:	dec00104 	addi	sp,sp,4
   25684:	f800283a 	ret

00025688 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   25688:	defffd04 	addi	sp,sp,-12
   2568c:	df000215 	stw	fp,8(sp)
   25690:	df000204 	addi	fp,sp,8
   25694:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   25698:	e0bfff17 	ldw	r2,-4(fp)
   2569c:	1081000c 	andi	r2,r2,1024
   256a0:	1004d2ba 	srli	r2,r2,10
   256a4:	e0bffe05 	stb	r2,-8(fp)
	return re;
   256a8:	e0bffe03 	ldbu	r2,-8(fp)
}
   256ac:	e037883a 	mov	sp,fp
   256b0:	df000017 	ldw	fp,0(sp)
   256b4:	dec00104 	addi	sp,sp,4
   256b8:	f800283a 	ret

000256bc <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   256bc:	defffd04 	addi	sp,sp,-12
   256c0:	df000215 	stw	fp,8(sp)
   256c4:	df000204 	addi	fp,sp,8
   256c8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   256cc:	e0bfff17 	ldw	r2,-4(fp)
   256d0:	1004d43a 	srli	r2,r2,16
   256d4:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   256d8:	e0bffe0b 	ldhu	r2,-8(fp)
}
   256dc:	e037883a 	mov	sp,fp
   256e0:	df000017 	ldw	fp,0(sp)
   256e4:	dec00104 	addi	sp,sp,4
   256e8:	f800283a 	ret

000256ec <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   256ec:	defffd04 	addi	sp,sp,-12
   256f0:	df000215 	stw	fp,8(sp)
   256f4:	df000204 	addi	fp,sp,8
   256f8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   256fc:	e0bfff17 	ldw	r2,-4(fp)
   25700:	10a0000c 	andi	r2,r2,32768
   25704:	1004d3fa 	srli	r2,r2,15
   25708:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   2570c:	e0bffe03 	ldbu	r2,-8(fp)
}
   25710:	e037883a 	mov	sp,fp
   25714:	df000017 	ldw	fp,0(sp)
   25718:	dec00104 	addi	sp,sp,4
   2571c:	f800283a 	ret

00025720 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   25720:	defffd04 	addi	sp,sp,-12
   25724:	df000215 	stw	fp,8(sp)
   25728:	df000204 	addi	fp,sp,8
   2572c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   25730:	e0bfff17 	ldw	r2,-4(fp)
   25734:	e0bffe05 	stb	r2,-8(fp)
	return data;
   25738:	e0bffe03 	ldbu	r2,-8(fp)
}
   2573c:	e037883a 	mov	sp,fp
   25740:	df000017 	ldw	fp,0(sp)
   25744:	dec00104 	addi	sp,sp,4
   25748:	f800283a 	ret

0002574c <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   2574c:	defffb04 	addi	sp,sp,-20
   25750:	dfc00415 	stw	ra,16(sp)
   25754:	df000315 	stw	fp,12(sp)
   25758:	df000304 	addi	fp,sp,12
   2575c:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   25760:	01403fc4 	movi	r5,255
   25764:	e13fff17 	ldw	r4,-4(fp)
   25768:	00259ac0 	call	259ac <alt_up_ps2_write_data_byte_with_ack>
   2576c:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   25770:	e0bffd17 	ldw	r2,-12(fp)
   25774:	1000211e 	bne	r2,zero,257fc <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   25778:	e0bffe04 	addi	r2,fp,-8
   2577c:	100b883a 	mov	r5,r2
   25780:	e13fff17 	ldw	r4,-4(fp)
   25784:	0025a100 	call	25a10 <alt_up_ps2_read_data_byte_timeout>
   25788:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   2578c:	e0bffd17 	ldw	r2,-12(fp)
   25790:	10001a1e 	bne	r2,zero,257fc <alt_up_ps2_init+0xb0>
   25794:	e0bffe03 	ldbu	r2,-8(fp)
   25798:	10803fcc 	andi	r2,r2,255
   2579c:	10802a98 	cmpnei	r2,r2,170
   257a0:	1000161e 	bne	r2,zero,257fc <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   257a4:	e0bffe04 	addi	r2,fp,-8
   257a8:	100b883a 	mov	r5,r2
   257ac:	e13fff17 	ldw	r4,-4(fp)
   257b0:	0025a100 	call	25a10 <alt_up_ps2_read_data_byte_timeout>
   257b4:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   257b8:	e0bffd17 	ldw	r2,-12(fp)
   257bc:	10bfe318 	cmpnei	r2,r2,-116
   257c0:	1000041e 	bne	r2,zero,257d4 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   257c4:	e0bfff17 	ldw	r2,-4(fp)
   257c8:	00c00044 	movi	r3,1
   257cc:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   257d0:	00000a06 	br	257fc <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   257d4:	e0bffd17 	ldw	r2,-12(fp)
   257d8:	1000081e 	bne	r2,zero,257fc <alt_up_ps2_init+0xb0>
   257dc:	e0bffe03 	ldbu	r2,-8(fp)
   257e0:	10803fcc 	andi	r2,r2,255
   257e4:	1000051e 	bne	r2,zero,257fc <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   257e8:	e0bfff17 	ldw	r2,-4(fp)
   257ec:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   257f0:	01403d04 	movi	r5,244
   257f4:	e13fff17 	ldw	r4,-4(fp)
   257f8:	00258d00 	call	258d0 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   257fc:	0001883a 	nop
   25800:	e037883a 	mov	sp,fp
   25804:	dfc00117 	ldw	ra,4(sp)
   25808:	df000017 	ldw	fp,0(sp)
   2580c:	dec00204 	addi	sp,sp,8
   25810:	f800283a 	ret

00025814 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   25814:	defffd04 	addi	sp,sp,-12
   25818:	df000215 	stw	fp,8(sp)
   2581c:	df000204 	addi	fp,sp,8
   25820:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   25824:	e0bfff17 	ldw	r2,-4(fp)
   25828:	10800a17 	ldw	r2,40(r2)
   2582c:	10800104 	addi	r2,r2,4
   25830:	10800037 	ldwio	r2,0(r2)
   25834:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   25838:	e0bffe17 	ldw	r2,-8(fp)
   2583c:	10800054 	ori	r2,r2,1
   25840:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   25844:	e0bfff17 	ldw	r2,-4(fp)
   25848:	10800a17 	ldw	r2,40(r2)
   2584c:	10800104 	addi	r2,r2,4
   25850:	1007883a 	mov	r3,r2
   25854:	e0bffe17 	ldw	r2,-8(fp)
   25858:	18800035 	stwio	r2,0(r3)
}
   2585c:	0001883a 	nop
   25860:	e037883a 	mov	sp,fp
   25864:	df000017 	ldw	fp,0(sp)
   25868:	dec00104 	addi	sp,sp,4
   2586c:	f800283a 	ret

00025870 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   25870:	defffd04 	addi	sp,sp,-12
   25874:	df000215 	stw	fp,8(sp)
   25878:	df000204 	addi	fp,sp,8
   2587c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   25880:	e0bfff17 	ldw	r2,-4(fp)
   25884:	10800a17 	ldw	r2,40(r2)
   25888:	10800104 	addi	r2,r2,4
   2588c:	10800037 	ldwio	r2,0(r2)
   25890:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   25894:	e0fffe17 	ldw	r3,-8(fp)
   25898:	00bfff84 	movi	r2,-2
   2589c:	1884703a 	and	r2,r3,r2
   258a0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   258a4:	e0bfff17 	ldw	r2,-4(fp)
   258a8:	10800a17 	ldw	r2,40(r2)
   258ac:	10800104 	addi	r2,r2,4
   258b0:	1007883a 	mov	r3,r2
   258b4:	e0bffe17 	ldw	r2,-8(fp)
   258b8:	18800035 	stwio	r2,0(r3)
}
   258bc:	0001883a 	nop
   258c0:	e037883a 	mov	sp,fp
   258c4:	df000017 	ldw	fp,0(sp)
   258c8:	dec00104 	addi	sp,sp,4
   258cc:	f800283a 	ret

000258d0 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   258d0:	defffb04 	addi	sp,sp,-20
   258d4:	dfc00415 	stw	ra,16(sp)
   258d8:	df000315 	stw	fp,12(sp)
   258dc:	df000304 	addi	fp,sp,12
   258e0:	e13ffe15 	stw	r4,-8(fp)
   258e4:	2805883a 	mov	r2,r5
   258e8:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   258ec:	e0bffe17 	ldw	r2,-8(fp)
   258f0:	10800a17 	ldw	r2,40(r2)
   258f4:	1007883a 	mov	r3,r2
   258f8:	e0bfff03 	ldbu	r2,-4(fp)
   258fc:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   25900:	e0bffe17 	ldw	r2,-8(fp)
   25904:	10800a17 	ldw	r2,40(r2)
   25908:	10800104 	addi	r2,r2,4
   2590c:	10800037 	ldwio	r2,0(r2)
   25910:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   25914:	e13ffd17 	ldw	r4,-12(fp)
   25918:	00256880 	call	25688 <read_CE_bit>
   2591c:	10803fcc 	andi	r2,r2,255
   25920:	10000226 	beq	r2,zero,2592c <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   25924:	00bffec4 	movi	r2,-5
   25928:	00000106 	br	25930 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   2592c:	0005883a 	mov	r2,zero
}
   25930:	e037883a 	mov	sp,fp
   25934:	dfc00117 	ldw	ra,4(sp)
   25938:	df000017 	ldw	fp,0(sp)
   2593c:	dec00204 	addi	sp,sp,8
   25940:	f800283a 	ret

00025944 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   25944:	defffc04 	addi	sp,sp,-16
   25948:	dfc00315 	stw	ra,12(sp)
   2594c:	df000215 	stw	fp,8(sp)
   25950:	df000204 	addi	fp,sp,8
   25954:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   25958:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   2595c:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   25960:	e0bffe44 	addi	r2,fp,-7
   25964:	100b883a 	mov	r5,r2
   25968:	e13fff17 	ldw	r4,-4(fp)
   2596c:	0025a100 	call	25a10 <alt_up_ps2_read_data_byte_timeout>
   25970:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   25974:	e0bffe03 	ldbu	r2,-8(fp)
   25978:	1000061e 	bne	r2,zero,25994 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   2597c:	e0bffe43 	ldbu	r2,-7(fp)
   25980:	10803fcc 	andi	r2,r2,255
   25984:	10803e98 	cmpnei	r2,r2,250
   25988:	103ff51e 	bne	r2,zero,25960 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
   2598c:	0005883a 	mov	r2,zero
   25990:	00000106 	br	25998 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   25994:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   25998:	e037883a 	mov	sp,fp
   2599c:	dfc00117 	ldw	ra,4(sp)
   259a0:	df000017 	ldw	fp,0(sp)
   259a4:	dec00204 	addi	sp,sp,8
   259a8:	f800283a 	ret

000259ac <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   259ac:	defffa04 	addi	sp,sp,-24
   259b0:	dfc00515 	stw	ra,20(sp)
   259b4:	df000415 	stw	fp,16(sp)
   259b8:	df000404 	addi	fp,sp,16
   259bc:	e13ffe15 	stw	r4,-8(fp)
   259c0:	2805883a 	mov	r2,r5
   259c4:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   259c8:	e0bfff03 	ldbu	r2,-4(fp)
   259cc:	100b883a 	mov	r5,r2
   259d0:	e13ffe17 	ldw	r4,-8(fp)
   259d4:	00258d00 	call	258d0 <alt_up_ps2_write_data_byte>
   259d8:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   259dc:	e0bffc17 	ldw	r2,-16(fp)
   259e0:	10000226 	beq	r2,zero,259ec <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   259e4:	e0bffc17 	ldw	r2,-16(fp)
   259e8:	00000406 	br	259fc <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   259ec:	e13ffe17 	ldw	r4,-8(fp)
   259f0:	00259440 	call	25944 <alt_up_ps2_wait_for_ack>
   259f4:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   259f8:	e0bffd17 	ldw	r2,-12(fp)
}
   259fc:	e037883a 	mov	sp,fp
   25a00:	dfc00117 	ldw	ra,4(sp)
   25a04:	df000017 	ldw	fp,0(sp)
   25a08:	dec00204 	addi	sp,sp,8
   25a0c:	f800283a 	ret

00025a10 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   25a10:	defffa04 	addi	sp,sp,-24
   25a14:	dfc00515 	stw	ra,20(sp)
   25a18:	df000415 	stw	fp,16(sp)
   25a1c:	df000404 	addi	fp,sp,16
   25a20:	e13ffe15 	stw	r4,-8(fp)
   25a24:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   25a28:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   25a2c:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   25a30:	e0bffc17 	ldw	r2,-16(fp)
   25a34:	10800044 	addi	r2,r2,1
   25a38:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   25a3c:	e0bffe17 	ldw	r2,-8(fp)
   25a40:	10800a17 	ldw	r2,40(r2)
   25a44:	10800037 	ldwio	r2,0(r2)
   25a48:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   25a4c:	e13ffd17 	ldw	r4,-12(fp)
   25a50:	00256ec0 	call	256ec <read_data_valid>
   25a54:	10803fcc 	andi	r2,r2,255
   25a58:	10000726 	beq	r2,zero,25a78 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   25a5c:	e13ffd17 	ldw	r4,-12(fp)
   25a60:	00257200 	call	25720 <read_data_byte>
   25a64:	1007883a 	mov	r3,r2
   25a68:	e0bfff17 	ldw	r2,-4(fp)
   25a6c:	10c00005 	stb	r3,0(r2)
			return 0;
   25a70:	0005883a 	mov	r2,zero
   25a74:	00000806 	br	25a98 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   25a78:	e0bffe17 	ldw	r2,-8(fp)
   25a7c:	10800c17 	ldw	r2,48(r2)
   25a80:	103feb26 	beq	r2,zero,25a30 <alt_up_ps2_read_data_byte_timeout+0x20>
   25a84:	e0bffe17 	ldw	r2,-8(fp)
   25a88:	10c00c17 	ldw	r3,48(r2)
   25a8c:	e0bffc17 	ldw	r2,-16(fp)
   25a90:	18bfe72e 	bgeu	r3,r2,25a30 <alt_up_ps2_read_data_byte_timeout+0x20>
		{
			return -ETIMEDOUT;
   25a94:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   25a98:	e037883a 	mov	sp,fp
   25a9c:	dfc00117 	ldw	ra,4(sp)
   25aa0:	df000017 	ldw	fp,0(sp)
   25aa4:	dec00204 	addi	sp,sp,8
   25aa8:	f800283a 	ret

00025aac <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   25aac:	defffb04 	addi	sp,sp,-20
   25ab0:	dfc00415 	stw	ra,16(sp)
   25ab4:	df000315 	stw	fp,12(sp)
   25ab8:	df000304 	addi	fp,sp,12
   25abc:	e13ffe15 	stw	r4,-8(fp)
   25ac0:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   25ac4:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   25ac8:	e0bffe17 	ldw	r2,-8(fp)
   25acc:	10800a17 	ldw	r2,40(r2)
   25ad0:	10800037 	ldwio	r2,0(r2)
   25ad4:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   25ad8:	e13ffd17 	ldw	r4,-12(fp)
   25adc:	00256ec0 	call	256ec <read_data_valid>
   25ae0:	10803fcc 	andi	r2,r2,255
   25ae4:	10000726 	beq	r2,zero,25b04 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   25ae8:	e13ffd17 	ldw	r4,-12(fp)
   25aec:	00257200 	call	25720 <read_data_byte>
   25af0:	1007883a 	mov	r3,r2
   25af4:	e0bfff17 	ldw	r2,-4(fp)
   25af8:	10c00005 	stb	r3,0(r2)
		return 0;
   25afc:	0005883a 	mov	r2,zero
   25b00:	00000106 	br	25b08 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   25b04:	00bfffc4 	movi	r2,-1
}
   25b08:	e037883a 	mov	sp,fp
   25b0c:	dfc00117 	ldw	ra,4(sp)
   25b10:	df000017 	ldw	fp,0(sp)
   25b14:	dec00204 	addi	sp,sp,8
   25b18:	f800283a 	ret

00025b1c <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   25b1c:	defffb04 	addi	sp,sp,-20
   25b20:	dfc00415 	stw	ra,16(sp)
   25b24:	df000315 	stw	fp,12(sp)
   25b28:	df000304 	addi	fp,sp,12
   25b2c:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   25b30:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   25b34:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   25b38:	e0bfff17 	ldw	r2,-4(fp)
   25b3c:	10800a17 	ldw	r2,40(r2)
   25b40:	10800037 	ldwio	r2,0(r2)
   25b44:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   25b48:	e13ffe17 	ldw	r4,-8(fp)
   25b4c:	00256bc0 	call	256bc <read_num_bytes_available>
   25b50:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   25b54:	e0bffd0b 	ldhu	r2,-12(fp)
   25b58:	103ff71e 	bne	r2,zero,25b38 <alt_up_ps2_clear_fifo+0x1c>
}
   25b5c:	0001883a 	nop
   25b60:	e037883a 	mov	sp,fp
   25b64:	dfc00117 	ldw	ra,4(sp)
   25b68:	df000017 	ldw	fp,0(sp)
   25b6c:	dec00204 	addi	sp,sp,8
   25b70:	f800283a 	ret

00025b74 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   25b74:	defff804 	addi	sp,sp,-32
   25b78:	dfc00715 	stw	ra,28(sp)
   25b7c:	df000615 	stw	fp,24(sp)
   25b80:	df000604 	addi	fp,sp,24
   25b84:	e13ffd15 	stw	r4,-12(fp)
   25b88:	e17ffe15 	stw	r5,-8(fp)
   25b8c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   25b90:	e0bffd17 	ldw	r2,-12(fp)
   25b94:	10800017 	ldw	r2,0(r2)
   25b98:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   25b9c:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   25ba0:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   25ba4:	e0fffc17 	ldw	r3,-16(fp)
   25ba8:	e0bfff17 	ldw	r2,-4(fp)
   25bac:	18bffd16 	blt	r3,r2,25ba4 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   25bb0:	e0bffe17 	ldw	r2,-8(fp)
   25bb4:	10c00044 	addi	r3,r2,1
   25bb8:	e0fffe15 	stw	r3,-8(fp)
   25bbc:	100b883a 	mov	r5,r2
   25bc0:	e13ffa17 	ldw	r4,-24(fp)
   25bc4:	0025a100 	call	25a10 <alt_up_ps2_read_data_byte_timeout>
   25bc8:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   25bcc:	e0bffb17 	ldw	r2,-20(fp)
   25bd0:	10000226 	beq	r2,zero,25bdc <alt_up_ps2_read_fd+0x68>
			return count;
   25bd4:	e0bffc17 	ldw	r2,-16(fp)
   25bd8:	00000406 	br	25bec <alt_up_ps2_read_fd+0x78>
		count++;
   25bdc:	e0bffc17 	ldw	r2,-16(fp)
   25be0:	10800044 	addi	r2,r2,1
   25be4:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   25be8:	e0bffc17 	ldw	r2,-16(fp)
}
   25bec:	e037883a 	mov	sp,fp
   25bf0:	dfc00117 	ldw	ra,4(sp)
   25bf4:	df000017 	ldw	fp,0(sp)
   25bf8:	dec00204 	addi	sp,sp,8
   25bfc:	f800283a 	ret

00025c00 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   25c00:	defff804 	addi	sp,sp,-32
   25c04:	dfc00715 	stw	ra,28(sp)
   25c08:	df000615 	stw	fp,24(sp)
   25c0c:	df000604 	addi	fp,sp,24
   25c10:	e13ffd15 	stw	r4,-12(fp)
   25c14:	e17ffe15 	stw	r5,-8(fp)
   25c18:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   25c1c:	e0bffd17 	ldw	r2,-12(fp)
   25c20:	10800017 	ldw	r2,0(r2)
   25c24:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   25c28:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   25c2c:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   25c30:	00001006 	br	25c74 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   25c34:	e0bffe17 	ldw	r2,-8(fp)
   25c38:	10c00044 	addi	r3,r2,1
   25c3c:	e0fffe15 	stw	r3,-8(fp)
   25c40:	10800003 	ldbu	r2,0(r2)
   25c44:	10803fcc 	andi	r2,r2,255
   25c48:	100b883a 	mov	r5,r2
   25c4c:	e13ffb17 	ldw	r4,-20(fp)
   25c50:	00258d00 	call	258d0 <alt_up_ps2_write_data_byte>
   25c54:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   25c58:	e0bffc17 	ldw	r2,-16(fp)
   25c5c:	10000226 	beq	r2,zero,25c68 <alt_up_ps2_write_fd+0x68>
			return count;
   25c60:	e0bffa17 	ldw	r2,-24(fp)
   25c64:	00000706 	br	25c84 <alt_up_ps2_write_fd+0x84>
		count++;
   25c68:	e0bffa17 	ldw	r2,-24(fp)
   25c6c:	10800044 	addi	r2,r2,1
   25c70:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   25c74:	e0fffa17 	ldw	r3,-24(fp)
   25c78:	e0bfff17 	ldw	r2,-4(fp)
   25c7c:	18bfed16 	blt	r3,r2,25c34 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   25c80:	e0bffa17 	ldw	r2,-24(fp)
}
   25c84:	e037883a 	mov	sp,fp
   25c88:	dfc00117 	ldw	ra,4(sp)
   25c8c:	df000017 	ldw	fp,0(sp)
   25c90:	dec00204 	addi	sp,sp,8
   25c94:	f800283a 	ret

00025c98 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   25c98:	defffc04 	addi	sp,sp,-16
   25c9c:	dfc00315 	stw	ra,12(sp)
   25ca0:	df000215 	stw	fp,8(sp)
   25ca4:	df000204 	addi	fp,sp,8
   25ca8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   25cac:	d1600904 	addi	r5,gp,-32732
   25cb0:	e13fff17 	ldw	r4,-4(fp)
   25cb4:	00263500 	call	26350 <alt_find_dev>
   25cb8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   25cbc:	e0bffe17 	ldw	r2,-8(fp)
}
   25cc0:	e037883a 	mov	sp,fp
   25cc4:	dfc00117 	ldw	ra,4(sp)
   25cc8:	df000017 	ldw	fp,0(sp)
   25ccc:	dec00204 	addi	sp,sp,8
   25cd0:	f800283a 	ret

00025cd4 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   25cd4:	defffd04 	addi	sp,sp,-12
   25cd8:	df000215 	stw	fp,8(sp)
   25cdc:	df000204 	addi	fp,sp,8
   25ce0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   25ce4:	e0bfff17 	ldw	r2,-4(fp)
   25ce8:	10800a17 	ldw	r2,40(r2)
   25cec:	10800104 	addi	r2,r2,4
   25cf0:	10800037 	ldwio	r2,0(r2)
   25cf4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   25cf8:	e0bffe17 	ldw	r2,-8(fp)
   25cfc:	10800054 	ori	r2,r2,1
   25d00:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   25d04:	e0bfff17 	ldw	r2,-4(fp)
   25d08:	10800a17 	ldw	r2,40(r2)
   25d0c:	10800104 	addi	r2,r2,4
   25d10:	1007883a 	mov	r3,r2
   25d14:	e0bffe17 	ldw	r2,-8(fp)
   25d18:	18800035 	stwio	r2,0(r3)
}
   25d1c:	0001883a 	nop
   25d20:	e037883a 	mov	sp,fp
   25d24:	df000017 	ldw	fp,0(sp)
   25d28:	dec00104 	addi	sp,sp,4
   25d2c:	f800283a 	ret

00025d30 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   25d30:	defffd04 	addi	sp,sp,-12
   25d34:	df000215 	stw	fp,8(sp)
   25d38:	df000204 	addi	fp,sp,8
   25d3c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   25d40:	e0bfff17 	ldw	r2,-4(fp)
   25d44:	10800a17 	ldw	r2,40(r2)
   25d48:	10800104 	addi	r2,r2,4
   25d4c:	10800037 	ldwio	r2,0(r2)
   25d50:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   25d54:	e0fffe17 	ldw	r3,-8(fp)
   25d58:	00bfff84 	movi	r2,-2
   25d5c:	1884703a 	and	r2,r3,r2
   25d60:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   25d64:	e0bfff17 	ldw	r2,-4(fp)
   25d68:	10800a17 	ldw	r2,40(r2)
   25d6c:	10800104 	addi	r2,r2,4
   25d70:	1007883a 	mov	r3,r2
   25d74:	e0bffe17 	ldw	r2,-8(fp)
   25d78:	18800035 	stwio	r2,0(r3)
}
   25d7c:	0001883a 	nop
   25d80:	e037883a 	mov	sp,fp
   25d84:	df000017 	ldw	fp,0(sp)
   25d88:	dec00104 	addi	sp,sp,4
   25d8c:	f800283a 	ret

00025d90 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   25d90:	defffd04 	addi	sp,sp,-12
   25d94:	df000215 	stw	fp,8(sp)
   25d98:	df000204 	addi	fp,sp,8
   25d9c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   25da0:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   25da4:	e0bfff17 	ldw	r2,-4(fp)
   25da8:	10800a17 	ldw	r2,40(r2)
   25dac:	10800084 	addi	r2,r2,2
   25db0:	1080002b 	ldhuio	r2,0(r2)
   25db4:	10bfffcc 	andi	r2,r2,65535
   25db8:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   25dbc:	e0bffe0b 	ldhu	r2,-8(fp)
}
   25dc0:	e037883a 	mov	sp,fp
   25dc4:	df000017 	ldw	fp,0(sp)
   25dc8:	dec00104 	addi	sp,sp,4
   25dcc:	f800283a 	ret

00025dd0 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   25dd0:	defffd04 	addi	sp,sp,-12
   25dd4:	df000215 	stw	fp,8(sp)
   25dd8:	df000204 	addi	fp,sp,8
   25ddc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   25de0:	e0bfff17 	ldw	r2,-4(fp)
   25de4:	10800a17 	ldw	r2,40(r2)
   25de8:	10800104 	addi	r2,r2,4
   25dec:	10800037 	ldwio	r2,0(r2)
   25df0:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   25df4:	e0bffe17 	ldw	r2,-8(fp)
   25df8:	1004d43a 	srli	r2,r2,16
}
   25dfc:	e037883a 	mov	sp,fp
   25e00:	df000017 	ldw	fp,0(sp)
   25e04:	dec00104 	addi	sp,sp,4
   25e08:	f800283a 	ret

00025e0c <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   25e0c:	defffd04 	addi	sp,sp,-12
   25e10:	df000215 	stw	fp,8(sp)
   25e14:	df000204 	addi	fp,sp,8
   25e18:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   25e1c:	e0bfff17 	ldw	r2,-4(fp)
   25e20:	1080800c 	andi	r2,r2,512
   25e24:	1004d27a 	srli	r2,r2,9
   25e28:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   25e2c:	e0bffe17 	ldw	r2,-8(fp)
   25e30:	10000226 	beq	r2,zero,25e3c <alt_up_rs232_check_parity+0x30>
   25e34:	00bfffc4 	movi	r2,-1
   25e38:	00000106 	br	25e40 <alt_up_rs232_check_parity+0x34>
   25e3c:	0005883a 	mov	r2,zero
}
   25e40:	e037883a 	mov	sp,fp
   25e44:	df000017 	ldw	fp,0(sp)
   25e48:	dec00104 	addi	sp,sp,4
   25e4c:	f800283a 	ret

00025e50 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   25e50:	defffd04 	addi	sp,sp,-12
   25e54:	df000215 	stw	fp,8(sp)
   25e58:	df000204 	addi	fp,sp,8
   25e5c:	e13ffe15 	stw	r4,-8(fp)
   25e60:	2805883a 	mov	r2,r5
   25e64:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   25e68:	e0bffe17 	ldw	r2,-8(fp)
   25e6c:	10800a17 	ldw	r2,40(r2)
   25e70:	1007883a 	mov	r3,r2
   25e74:	e0bfff03 	ldbu	r2,-4(fp)
   25e78:	18800035 	stwio	r2,0(r3)
	return 0;
   25e7c:	0005883a 	mov	r2,zero
}
   25e80:	e037883a 	mov	sp,fp
   25e84:	df000017 	ldw	fp,0(sp)
   25e88:	dec00104 	addi	sp,sp,4
   25e8c:	f800283a 	ret

00025e90 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   25e90:	defffa04 	addi	sp,sp,-24
   25e94:	dfc00515 	stw	ra,20(sp)
   25e98:	df000415 	stw	fp,16(sp)
   25e9c:	df000404 	addi	fp,sp,16
   25ea0:	e13ffd15 	stw	r4,-12(fp)
   25ea4:	e17ffe15 	stw	r5,-8(fp)
   25ea8:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   25eac:	e0bffd17 	ldw	r2,-12(fp)
   25eb0:	10800a17 	ldw	r2,40(r2)
   25eb4:	10800037 	ldwio	r2,0(r2)
   25eb8:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   25ebc:	e0bffc17 	ldw	r2,-16(fp)
   25ec0:	1007883a 	mov	r3,r2
   25ec4:	e0bffe17 	ldw	r2,-8(fp)
   25ec8:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   25ecc:	e13ffc17 	ldw	r4,-16(fp)
   25ed0:	0025e0c0 	call	25e0c <alt_up_rs232_check_parity>
   25ed4:	1007883a 	mov	r3,r2
   25ed8:	e0bfff17 	ldw	r2,-4(fp)
   25edc:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   25ee0:	e0bffc17 	ldw	r2,-16(fp)
   25ee4:	10a0000c 	andi	r2,r2,32768
   25ee8:	1004d3fa 	srli	r2,r2,15
   25eec:	10bfffc4 	addi	r2,r2,-1
}
   25ef0:	e037883a 	mov	sp,fp
   25ef4:	dfc00117 	ldw	ra,4(sp)
   25ef8:	df000017 	ldw	fp,0(sp)
   25efc:	dec00204 	addi	sp,sp,8
   25f00:	f800283a 	ret

00025f04 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   25f04:	defff804 	addi	sp,sp,-32
   25f08:	dfc00715 	stw	ra,28(sp)
   25f0c:	df000615 	stw	fp,24(sp)
   25f10:	df000604 	addi	fp,sp,24
   25f14:	e13ffd15 	stw	r4,-12(fp)
   25f18:	e17ffe15 	stw	r5,-8(fp)
   25f1c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   25f20:	e0bffd17 	ldw	r2,-12(fp)
   25f24:	10800017 	ldw	r2,0(r2)
   25f28:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   25f2c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   25f30:	00000c06 	br	25f64 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   25f34:	e0bffe17 	ldw	r2,-8(fp)
   25f38:	10c00044 	addi	r3,r2,1
   25f3c:	e0fffe15 	stw	r3,-8(fp)
   25f40:	e0fffc04 	addi	r3,fp,-16
   25f44:	180d883a 	mov	r6,r3
   25f48:	100b883a 	mov	r5,r2
   25f4c:	e13ffb17 	ldw	r4,-20(fp)
   25f50:	0025e900 	call	25e90 <alt_up_rs232_read_data>
   25f54:	1000081e 	bne	r2,zero,25f78 <alt_up_rs232_read_fd+0x74>
			count++;
   25f58:	e0bffa17 	ldw	r2,-24(fp)
   25f5c:	10800044 	addi	r2,r2,1
   25f60:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   25f64:	e0bfff17 	ldw	r2,-4(fp)
   25f68:	10ffffc4 	addi	r3,r2,-1
   25f6c:	e0ffff15 	stw	r3,-4(fp)
   25f70:	103ff01e 	bne	r2,zero,25f34 <alt_up_rs232_read_fd+0x30>
   25f74:	00000106 	br	25f7c <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   25f78:	0001883a 	nop
	}
	return count;
   25f7c:	e0bffa17 	ldw	r2,-24(fp)
}
   25f80:	e037883a 	mov	sp,fp
   25f84:	dfc00117 	ldw	ra,4(sp)
   25f88:	df000017 	ldw	fp,0(sp)
   25f8c:	dec00204 	addi	sp,sp,8
   25f90:	f800283a 	ret

00025f94 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   25f94:	defff904 	addi	sp,sp,-28
   25f98:	dfc00615 	stw	ra,24(sp)
   25f9c:	df000515 	stw	fp,20(sp)
   25fa0:	df000504 	addi	fp,sp,20
   25fa4:	e13ffd15 	stw	r4,-12(fp)
   25fa8:	e17ffe15 	stw	r5,-8(fp)
   25fac:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   25fb0:	e0bffd17 	ldw	r2,-12(fp)
   25fb4:	10800017 	ldw	r2,0(r2)
   25fb8:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   25fbc:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   25fc0:	00000d06 	br	25ff8 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   25fc4:	e0bffe17 	ldw	r2,-8(fp)
   25fc8:	10800003 	ldbu	r2,0(r2)
   25fcc:	10803fcc 	andi	r2,r2,255
   25fd0:	100b883a 	mov	r5,r2
   25fd4:	e13ffc17 	ldw	r4,-16(fp)
   25fd8:	0025e500 	call	25e50 <alt_up_rs232_write_data>
   25fdc:	10000b1e 	bne	r2,zero,2600c <alt_up_rs232_write_fd+0x78>
		{
			count++;
   25fe0:	e0bffb17 	ldw	r2,-20(fp)
   25fe4:	10800044 	addi	r2,r2,1
   25fe8:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   25fec:	e0bffe17 	ldw	r2,-8(fp)
   25ff0:	10800044 	addi	r2,r2,1
   25ff4:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   25ff8:	e0bfff17 	ldw	r2,-4(fp)
   25ffc:	10ffffc4 	addi	r3,r2,-1
   26000:	e0ffff15 	stw	r3,-4(fp)
   26004:	103fef1e 	bne	r2,zero,25fc4 <alt_up_rs232_write_fd+0x30>
   26008:	00000106 	br	26010 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   2600c:	0001883a 	nop
	}
	return count;
   26010:	e0bffb17 	ldw	r2,-20(fp)
}
   26014:	e037883a 	mov	sp,fp
   26018:	dfc00117 	ldw	ra,4(sp)
   2601c:	df000017 	ldw	fp,0(sp)
   26020:	dec00204 	addi	sp,sp,8
   26024:	f800283a 	ret

00026028 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   26028:	defffc04 	addi	sp,sp,-16
   2602c:	dfc00315 	stw	ra,12(sp)
   26030:	df000215 	stw	fp,8(sp)
   26034:	df000204 	addi	fp,sp,8
   26038:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   2603c:	d1600904 	addi	r5,gp,-32732
   26040:	e13fff17 	ldw	r4,-4(fp)
   26044:	00263500 	call	26350 <alt_find_dev>
   26048:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   2604c:	e0bffe17 	ldw	r2,-8(fp)
}
   26050:	e037883a 	mov	sp,fp
   26054:	dfc00117 	ldw	ra,4(sp)
   26058:	df000017 	ldw	fp,0(sp)
   2605c:	dec00204 	addi	sp,sp,8
   26060:	f800283a 	ret

00026064 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   26064:	defff504 	addi	sp,sp,-44
   26068:	df000a15 	stw	fp,40(sp)
   2606c:	df000a04 	addi	fp,sp,40
   26070:	e13ffc15 	stw	r4,-16(fp)
   26074:	e17ffd15 	stw	r5,-12(fp)
   26078:	e1bffe15 	stw	r6,-8(fp)
   2607c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   26080:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   26084:	d0a7eb17 	ldw	r2,-24660(gp)
  
  if (alt_ticks_per_second ())
   26088:	10003c26 	beq	r2,zero,2617c <alt_alarm_start+0x118>
  {
    if (alarm)
   2608c:	e0bffc17 	ldw	r2,-16(fp)
   26090:	10003826 	beq	r2,zero,26174 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   26094:	e0bffc17 	ldw	r2,-16(fp)
   26098:	e0fffe17 	ldw	r3,-8(fp)
   2609c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   260a0:	e0bffc17 	ldw	r2,-16(fp)
   260a4:	e0ffff17 	ldw	r3,-4(fp)
   260a8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   260ac:	0005303a 	rdctl	r2,status
   260b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   260b4:	e0fff917 	ldw	r3,-28(fp)
   260b8:	00bfff84 	movi	r2,-2
   260bc:	1884703a 	and	r2,r3,r2
   260c0:	1001703a 	wrctl	status,r2
  
  return context;
   260c4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   260c8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   260cc:	d0a7ec17 	ldw	r2,-24656(gp)
      
      current_nticks = alt_nticks();
   260d0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   260d4:	e0fffd17 	ldw	r3,-12(fp)
   260d8:	e0bff617 	ldw	r2,-40(fp)
   260dc:	1885883a 	add	r2,r3,r2
   260e0:	10c00044 	addi	r3,r2,1
   260e4:	e0bffc17 	ldw	r2,-16(fp)
   260e8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   260ec:	e0bffc17 	ldw	r2,-16(fp)
   260f0:	10c00217 	ldw	r3,8(r2)
   260f4:	e0bff617 	ldw	r2,-40(fp)
   260f8:	1880042e 	bgeu	r3,r2,2610c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   260fc:	e0bffc17 	ldw	r2,-16(fp)
   26100:	00c00044 	movi	r3,1
   26104:	10c00405 	stb	r3,16(r2)
   26108:	00000206 	br	26114 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   2610c:	e0bffc17 	ldw	r2,-16(fp)
   26110:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   26114:	e0bffc17 	ldw	r2,-16(fp)
   26118:	d0e02e04 	addi	r3,gp,-32584
   2611c:	e0fffa15 	stw	r3,-24(fp)
   26120:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   26124:	e0bffb17 	ldw	r2,-20(fp)
   26128:	e0fffa17 	ldw	r3,-24(fp)
   2612c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   26130:	e0bffa17 	ldw	r2,-24(fp)
   26134:	10c00017 	ldw	r3,0(r2)
   26138:	e0bffb17 	ldw	r2,-20(fp)
   2613c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   26140:	e0bffa17 	ldw	r2,-24(fp)
   26144:	10800017 	ldw	r2,0(r2)
   26148:	e0fffb17 	ldw	r3,-20(fp)
   2614c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   26150:	e0bffa17 	ldw	r2,-24(fp)
   26154:	e0fffb17 	ldw	r3,-20(fp)
   26158:	10c00015 	stw	r3,0(r2)
   2615c:	e0bff817 	ldw	r2,-32(fp)
   26160:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26164:	e0bff717 	ldw	r2,-36(fp)
   26168:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2616c:	0005883a 	mov	r2,zero
   26170:	00000306 	br	26180 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   26174:	00bffa84 	movi	r2,-22
   26178:	00000106 	br	26180 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   2617c:	00bfde84 	movi	r2,-134
  }
}
   26180:	e037883a 	mov	sp,fp
   26184:	df000017 	ldw	fp,0(sp)
   26188:	dec00104 	addi	sp,sp,4
   2618c:	f800283a 	ret

00026190 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   26190:	deffff04 	addi	sp,sp,-4
   26194:	df000015 	stw	fp,0(sp)
   26198:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2619c:	0001883a 	nop
   261a0:	e037883a 	mov	sp,fp
   261a4:	df000017 	ldw	fp,0(sp)
   261a8:	dec00104 	addi	sp,sp,4
   261ac:	f800283a 	ret

000261b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   261b0:	defffe04 	addi	sp,sp,-8
   261b4:	dfc00115 	stw	ra,4(sp)
   261b8:	df000015 	stw	fp,0(sp)
   261bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   261c0:	d0a00c17 	ldw	r2,-32720(gp)
   261c4:	10000326 	beq	r2,zero,261d4 <alt_get_errno+0x24>
   261c8:	d0a00c17 	ldw	r2,-32720(gp)
   261cc:	103ee83a 	callr	r2
   261d0:	00000106 	br	261d8 <alt_get_errno+0x28>
   261d4:	d0a7cd04 	addi	r2,gp,-24780
}
   261d8:	e037883a 	mov	sp,fp
   261dc:	dfc00117 	ldw	ra,4(sp)
   261e0:	df000017 	ldw	fp,0(sp)
   261e4:	dec00204 	addi	sp,sp,8
   261e8:	f800283a 	ret

000261ec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   261ec:	defffa04 	addi	sp,sp,-24
   261f0:	dfc00515 	stw	ra,20(sp)
   261f4:	df000415 	stw	fp,16(sp)
   261f8:	df000404 	addi	fp,sp,16
   261fc:	e13ffe15 	stw	r4,-8(fp)
   26200:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   26204:	e0bffe17 	ldw	r2,-8(fp)
   26208:	10000326 	beq	r2,zero,26218 <alt_dev_llist_insert+0x2c>
   2620c:	e0bffe17 	ldw	r2,-8(fp)
   26210:	10800217 	ldw	r2,8(r2)
   26214:	1000061e 	bne	r2,zero,26230 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   26218:	00261b00 	call	261b0 <alt_get_errno>
   2621c:	1007883a 	mov	r3,r2
   26220:	00800584 	movi	r2,22
   26224:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   26228:	00bffa84 	movi	r2,-22
   2622c:	00001306 	br	2627c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   26230:	e0bffe17 	ldw	r2,-8(fp)
   26234:	e0ffff17 	ldw	r3,-4(fp)
   26238:	e0fffc15 	stw	r3,-16(fp)
   2623c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   26240:	e0bffd17 	ldw	r2,-12(fp)
   26244:	e0fffc17 	ldw	r3,-16(fp)
   26248:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2624c:	e0bffc17 	ldw	r2,-16(fp)
   26250:	10c00017 	ldw	r3,0(r2)
   26254:	e0bffd17 	ldw	r2,-12(fp)
   26258:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2625c:	e0bffc17 	ldw	r2,-16(fp)
   26260:	10800017 	ldw	r2,0(r2)
   26264:	e0fffd17 	ldw	r3,-12(fp)
   26268:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2626c:	e0bffc17 	ldw	r2,-16(fp)
   26270:	e0fffd17 	ldw	r3,-12(fp)
   26274:	10c00015 	stw	r3,0(r2)

  return 0;  
   26278:	0005883a 	mov	r2,zero
}
   2627c:	e037883a 	mov	sp,fp
   26280:	dfc00117 	ldw	ra,4(sp)
   26284:	df000017 	ldw	fp,0(sp)
   26288:	dec00204 	addi	sp,sp,8
   2628c:	f800283a 	ret

00026290 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   26290:	defffd04 	addi	sp,sp,-12
   26294:	dfc00215 	stw	ra,8(sp)
   26298:	df000115 	stw	fp,4(sp)
   2629c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   262a0:	008000b4 	movhi	r2,2
   262a4:	109d3a04 	addi	r2,r2,29928
   262a8:	e0bfff15 	stw	r2,-4(fp)
   262ac:	00000606 	br	262c8 <_do_ctors+0x38>
        (*ctor) (); 
   262b0:	e0bfff17 	ldw	r2,-4(fp)
   262b4:	10800017 	ldw	r2,0(r2)
   262b8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   262bc:	e0bfff17 	ldw	r2,-4(fp)
   262c0:	10bfff04 	addi	r2,r2,-4
   262c4:	e0bfff15 	stw	r2,-4(fp)
   262c8:	e0ffff17 	ldw	r3,-4(fp)
   262cc:	008000b4 	movhi	r2,2
   262d0:	109d3b04 	addi	r2,r2,29932
   262d4:	18bff62e 	bgeu	r3,r2,262b0 <_do_ctors+0x20>
        (*ctor) (); 
}
   262d8:	0001883a 	nop
   262dc:	e037883a 	mov	sp,fp
   262e0:	dfc00117 	ldw	ra,4(sp)
   262e4:	df000017 	ldw	fp,0(sp)
   262e8:	dec00204 	addi	sp,sp,8
   262ec:	f800283a 	ret

000262f0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   262f0:	defffd04 	addi	sp,sp,-12
   262f4:	dfc00215 	stw	ra,8(sp)
   262f8:	df000115 	stw	fp,4(sp)
   262fc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   26300:	008000b4 	movhi	r2,2
   26304:	109d3a04 	addi	r2,r2,29928
   26308:	e0bfff15 	stw	r2,-4(fp)
   2630c:	00000606 	br	26328 <_do_dtors+0x38>
        (*dtor) (); 
   26310:	e0bfff17 	ldw	r2,-4(fp)
   26314:	10800017 	ldw	r2,0(r2)
   26318:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2631c:	e0bfff17 	ldw	r2,-4(fp)
   26320:	10bfff04 	addi	r2,r2,-4
   26324:	e0bfff15 	stw	r2,-4(fp)
   26328:	e0ffff17 	ldw	r3,-4(fp)
   2632c:	008000b4 	movhi	r2,2
   26330:	109d3b04 	addi	r2,r2,29932
   26334:	18bff62e 	bgeu	r3,r2,26310 <_do_dtors+0x20>
        (*dtor) (); 
}
   26338:	0001883a 	nop
   2633c:	e037883a 	mov	sp,fp
   26340:	dfc00117 	ldw	ra,4(sp)
   26344:	df000017 	ldw	fp,0(sp)
   26348:	dec00204 	addi	sp,sp,8
   2634c:	f800283a 	ret

00026350 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   26350:	defffa04 	addi	sp,sp,-24
   26354:	dfc00515 	stw	ra,20(sp)
   26358:	df000415 	stw	fp,16(sp)
   2635c:	df000404 	addi	fp,sp,16
   26360:	e13ffe15 	stw	r4,-8(fp)
   26364:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   26368:	e0bfff17 	ldw	r2,-4(fp)
   2636c:	10800017 	ldw	r2,0(r2)
   26370:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   26374:	e13ffe17 	ldw	r4,-8(fp)
   26378:	00141640 	call	14164 <strlen>
   2637c:	10800044 	addi	r2,r2,1
   26380:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   26384:	00000d06 	br	263bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   26388:	e0bffc17 	ldw	r2,-16(fp)
   2638c:	10800217 	ldw	r2,8(r2)
   26390:	e0fffd17 	ldw	r3,-12(fp)
   26394:	180d883a 	mov	r6,r3
   26398:	e17ffe17 	ldw	r5,-8(fp)
   2639c:	1009883a 	mov	r4,r2
   263a0:	00271a40 	call	271a4 <memcmp>
   263a4:	1000021e 	bne	r2,zero,263b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   263a8:	e0bffc17 	ldw	r2,-16(fp)
   263ac:	00000706 	br	263cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   263b0:	e0bffc17 	ldw	r2,-16(fp)
   263b4:	10800017 	ldw	r2,0(r2)
   263b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   263bc:	e0fffc17 	ldw	r3,-16(fp)
   263c0:	e0bfff17 	ldw	r2,-4(fp)
   263c4:	18bff01e 	bne	r3,r2,26388 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   263c8:	0005883a 	mov	r2,zero
}
   263cc:	e037883a 	mov	sp,fp
   263d0:	dfc00117 	ldw	ra,4(sp)
   263d4:	df000017 	ldw	fp,0(sp)
   263d8:	dec00204 	addi	sp,sp,8
   263dc:	f800283a 	ret

000263e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   263e0:	defffe04 	addi	sp,sp,-8
   263e4:	dfc00115 	stw	ra,4(sp)
   263e8:	df000015 	stw	fp,0(sp)
   263ec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   263f0:	01440004 	movi	r5,4096
   263f4:	0009883a 	mov	r4,zero
   263f8:	002702c0 	call	2702c <alt_icache_flush>
#endif
}
   263fc:	0001883a 	nop
   26400:	e037883a 	mov	sp,fp
   26404:	dfc00117 	ldw	ra,4(sp)
   26408:	df000017 	ldw	fp,0(sp)
   2640c:	dec00204 	addi	sp,sp,8
   26410:	f800283a 	ret

00026414 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   26414:	defff904 	addi	sp,sp,-28
   26418:	dfc00615 	stw	ra,24(sp)
   2641c:	df000515 	stw	fp,20(sp)
   26420:	df000504 	addi	fp,sp,20
   26424:	e13ffc15 	stw	r4,-16(fp)
   26428:	e17ffd15 	stw	r5,-12(fp)
   2642c:	e1bffe15 	stw	r6,-8(fp)
   26430:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   26434:	e1bfff17 	ldw	r6,-4(fp)
   26438:	e17ffe17 	ldw	r5,-8(fp)
   2643c:	e13ffd17 	ldw	r4,-12(fp)
   26440:	00267d40 	call	267d4 <open>
   26444:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   26448:	e0bffb17 	ldw	r2,-20(fp)
   2644c:	10001c16 	blt	r2,zero,264c0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   26450:	008000f4 	movhi	r2,3
   26454:	10a14f04 	addi	r2,r2,-31428
   26458:	e0fffb17 	ldw	r3,-20(fp)
   2645c:	18c00324 	muli	r3,r3,12
   26460:	10c5883a 	add	r2,r2,r3
   26464:	10c00017 	ldw	r3,0(r2)
   26468:	e0bffc17 	ldw	r2,-16(fp)
   2646c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   26470:	008000f4 	movhi	r2,3
   26474:	10a14f04 	addi	r2,r2,-31428
   26478:	e0fffb17 	ldw	r3,-20(fp)
   2647c:	18c00324 	muli	r3,r3,12
   26480:	10c5883a 	add	r2,r2,r3
   26484:	10800104 	addi	r2,r2,4
   26488:	10c00017 	ldw	r3,0(r2)
   2648c:	e0bffc17 	ldw	r2,-16(fp)
   26490:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   26494:	008000f4 	movhi	r2,3
   26498:	10a14f04 	addi	r2,r2,-31428
   2649c:	e0fffb17 	ldw	r3,-20(fp)
   264a0:	18c00324 	muli	r3,r3,12
   264a4:	10c5883a 	add	r2,r2,r3
   264a8:	10800204 	addi	r2,r2,8
   264ac:	10c00017 	ldw	r3,0(r2)
   264b0:	e0bffc17 	ldw	r2,-16(fp)
   264b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   264b8:	e13ffb17 	ldw	r4,-20(fp)
   264bc:	001b9800 	call	1b980 <alt_release_fd>
  }
} 
   264c0:	0001883a 	nop
   264c4:	e037883a 	mov	sp,fp
   264c8:	dfc00117 	ldw	ra,4(sp)
   264cc:	df000017 	ldw	fp,0(sp)
   264d0:	dec00204 	addi	sp,sp,8
   264d4:	f800283a 	ret

000264d8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   264d8:	defffb04 	addi	sp,sp,-20
   264dc:	dfc00415 	stw	ra,16(sp)
   264e0:	df000315 	stw	fp,12(sp)
   264e4:	df000304 	addi	fp,sp,12
   264e8:	e13ffd15 	stw	r4,-12(fp)
   264ec:	e17ffe15 	stw	r5,-8(fp)
   264f0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   264f4:	01c07fc4 	movi	r7,511
   264f8:	01800044 	movi	r6,1
   264fc:	e17ffd17 	ldw	r5,-12(fp)
   26500:	010000f4 	movhi	r4,3
   26504:	21215204 	addi	r4,r4,-31416
   26508:	00264140 	call	26414 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2650c:	01c07fc4 	movi	r7,511
   26510:	000d883a 	mov	r6,zero
   26514:	e17ffe17 	ldw	r5,-8(fp)
   26518:	010000f4 	movhi	r4,3
   2651c:	21214f04 	addi	r4,r4,-31428
   26520:	00264140 	call	26414 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   26524:	01c07fc4 	movi	r7,511
   26528:	01800044 	movi	r6,1
   2652c:	e17fff17 	ldw	r5,-4(fp)
   26530:	010000f4 	movhi	r4,3
   26534:	21215504 	addi	r4,r4,-31404
   26538:	00264140 	call	26414 <alt_open_fd>
}  
   2653c:	0001883a 	nop
   26540:	e037883a 	mov	sp,fp
   26544:	dfc00117 	ldw	ra,4(sp)
   26548:	df000017 	ldw	fp,0(sp)
   2654c:	dec00204 	addi	sp,sp,8
   26550:	f800283a 	ret

00026554 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   26554:	defff004 	addi	sp,sp,-64
   26558:	df000f15 	stw	fp,60(sp)
   2655c:	df000f04 	addi	fp,sp,60
   26560:	e13ffd15 	stw	r4,-12(fp)
   26564:	e17ffe15 	stw	r5,-8(fp)
   26568:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   2656c:	00bffa84 	movi	r2,-22
   26570:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   26574:	e0bffd17 	ldw	r2,-12(fp)
   26578:	10800828 	cmpgeui	r2,r2,32
   2657c:	1000501e 	bne	r2,zero,266c0 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26580:	0005303a 	rdctl	r2,status
   26584:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26588:	e0fff617 	ldw	r3,-40(fp)
   2658c:	00bfff84 	movi	r2,-2
   26590:	1884703a 	and	r2,r3,r2
   26594:	1001703a 	wrctl	status,r2
  
  return context;
   26598:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   2659c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   265a0:	00800174 	movhi	r2,5
   265a4:	1093f004 	addi	r2,r2,20416
   265a8:	e0fffd17 	ldw	r3,-12(fp)
   265ac:	180690fa 	slli	r3,r3,3
   265b0:	10c5883a 	add	r2,r2,r3
   265b4:	e0ffff17 	ldw	r3,-4(fp)
   265b8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   265bc:	00800174 	movhi	r2,5
   265c0:	1093f004 	addi	r2,r2,20416
   265c4:	e0fffd17 	ldw	r3,-12(fp)
   265c8:	180690fa 	slli	r3,r3,3
   265cc:	10c5883a 	add	r2,r2,r3
   265d0:	10800104 	addi	r2,r2,4
   265d4:	e0fffe17 	ldw	r3,-8(fp)
   265d8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   265dc:	e0bfff17 	ldw	r2,-4(fp)
   265e0:	10001926 	beq	r2,zero,26648 <alt_irq_register+0xf4>
   265e4:	e0bffd17 	ldw	r2,-12(fp)
   265e8:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   265ec:	0005303a 	rdctl	r2,status
   265f0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   265f4:	e0fff717 	ldw	r3,-36(fp)
   265f8:	00bfff84 	movi	r2,-2
   265fc:	1884703a 	and	r2,r3,r2
   26600:	1001703a 	wrctl	status,r2
  
  return context;
   26604:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   26608:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   2660c:	00c00044 	movi	r3,1
   26610:	e0bff217 	ldw	r2,-56(fp)
   26614:	1884983a 	sll	r2,r3,r2
   26618:	1007883a 	mov	r3,r2
   2661c:	d0a7ea17 	ldw	r2,-24664(gp)
   26620:	1884b03a 	or	r2,r3,r2
   26624:	d0a7ea15 	stw	r2,-24664(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   26628:	d0a7ea17 	ldw	r2,-24664(gp)
   2662c:	100170fa 	wrctl	ienable,r2
   26630:	e0bff817 	ldw	r2,-32(fp)
   26634:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26638:	e0bff917 	ldw	r2,-28(fp)
   2663c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   26640:	0005883a 	mov	r2,zero
   26644:	00001906 	br	266ac <alt_irq_register+0x158>
   26648:	e0bffd17 	ldw	r2,-12(fp)
   2664c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26650:	0005303a 	rdctl	r2,status
   26654:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26658:	e0fffa17 	ldw	r3,-24(fp)
   2665c:	00bfff84 	movi	r2,-2
   26660:	1884703a 	and	r2,r3,r2
   26664:	1001703a 	wrctl	status,r2
  
  return context;
   26668:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2666c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   26670:	00c00044 	movi	r3,1
   26674:	e0bff417 	ldw	r2,-48(fp)
   26678:	1884983a 	sll	r2,r3,r2
   2667c:	0084303a 	nor	r2,zero,r2
   26680:	1007883a 	mov	r3,r2
   26684:	d0a7ea17 	ldw	r2,-24664(gp)
   26688:	1884703a 	and	r2,r3,r2
   2668c:	d0a7ea15 	stw	r2,-24664(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   26690:	d0a7ea17 	ldw	r2,-24664(gp)
   26694:	100170fa 	wrctl	ienable,r2
   26698:	e0bffb17 	ldw	r2,-20(fp)
   2669c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   266a0:	e0bffc17 	ldw	r2,-16(fp)
   266a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   266a8:	0005883a 	mov	r2,zero
   266ac:	e0bff115 	stw	r2,-60(fp)
   266b0:	e0bff317 	ldw	r2,-52(fp)
   266b4:	e0bff515 	stw	r2,-44(fp)
   266b8:	e0bff517 	ldw	r2,-44(fp)
   266bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   266c0:	e0bff117 	ldw	r2,-60(fp)
}
   266c4:	e037883a 	mov	sp,fp
   266c8:	df000017 	ldw	fp,0(sp)
   266cc:	dec00104 	addi	sp,sp,4
   266d0:	f800283a 	ret

000266d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   266d4:	defffe04 	addi	sp,sp,-8
   266d8:	dfc00115 	stw	ra,4(sp)
   266dc:	df000015 	stw	fp,0(sp)
   266e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   266e4:	d0a00c17 	ldw	r2,-32720(gp)
   266e8:	10000326 	beq	r2,zero,266f8 <alt_get_errno+0x24>
   266ec:	d0a00c17 	ldw	r2,-32720(gp)
   266f0:	103ee83a 	callr	r2
   266f4:	00000106 	br	266fc <alt_get_errno+0x28>
   266f8:	d0a7cd04 	addi	r2,gp,-24780
}
   266fc:	e037883a 	mov	sp,fp
   26700:	dfc00117 	ldw	ra,4(sp)
   26704:	df000017 	ldw	fp,0(sp)
   26708:	dec00204 	addi	sp,sp,8
   2670c:	f800283a 	ret

00026710 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   26710:	defffd04 	addi	sp,sp,-12
   26714:	df000215 	stw	fp,8(sp)
   26718:	df000204 	addi	fp,sp,8
   2671c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   26720:	e0bfff17 	ldw	r2,-4(fp)
   26724:	10800217 	ldw	r2,8(r2)
   26728:	10d00034 	orhi	r3,r2,16384
   2672c:	e0bfff17 	ldw	r2,-4(fp)
   26730:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   26734:	e03ffe15 	stw	zero,-8(fp)
   26738:	00001d06 	br	267b0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2673c:	008000f4 	movhi	r2,3
   26740:	10a14f04 	addi	r2,r2,-31428
   26744:	e0fffe17 	ldw	r3,-8(fp)
   26748:	18c00324 	muli	r3,r3,12
   2674c:	10c5883a 	add	r2,r2,r3
   26750:	10c00017 	ldw	r3,0(r2)
   26754:	e0bfff17 	ldw	r2,-4(fp)
   26758:	10800017 	ldw	r2,0(r2)
   2675c:	1880111e 	bne	r3,r2,267a4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   26760:	008000f4 	movhi	r2,3
   26764:	10a14f04 	addi	r2,r2,-31428
   26768:	e0fffe17 	ldw	r3,-8(fp)
   2676c:	18c00324 	muli	r3,r3,12
   26770:	10c5883a 	add	r2,r2,r3
   26774:	10800204 	addi	r2,r2,8
   26778:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2677c:	1000090e 	bge	r2,zero,267a4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   26780:	e0bffe17 	ldw	r2,-8(fp)
   26784:	10c00324 	muli	r3,r2,12
   26788:	008000f4 	movhi	r2,3
   2678c:	10a14f04 	addi	r2,r2,-31428
   26790:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   26794:	e0bfff17 	ldw	r2,-4(fp)
   26798:	18800226 	beq	r3,r2,267a4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2679c:	00bffcc4 	movi	r2,-13
   267a0:	00000806 	br	267c4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   267a4:	e0bffe17 	ldw	r2,-8(fp)
   267a8:	10800044 	addi	r2,r2,1
   267ac:	e0bffe15 	stw	r2,-8(fp)
   267b0:	d0a00b17 	ldw	r2,-32724(gp)
   267b4:	1007883a 	mov	r3,r2
   267b8:	e0bffe17 	ldw	r2,-8(fp)
   267bc:	18bfdf2e 	bgeu	r3,r2,2673c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   267c0:	0005883a 	mov	r2,zero
}
   267c4:	e037883a 	mov	sp,fp
   267c8:	df000017 	ldw	fp,0(sp)
   267cc:	dec00104 	addi	sp,sp,4
   267d0:	f800283a 	ret

000267d4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   267d4:	defff604 	addi	sp,sp,-40
   267d8:	dfc00915 	stw	ra,36(sp)
   267dc:	df000815 	stw	fp,32(sp)
   267e0:	df000804 	addi	fp,sp,32
   267e4:	e13ffd15 	stw	r4,-12(fp)
   267e8:	e17ffe15 	stw	r5,-8(fp)
   267ec:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   267f0:	00bfffc4 	movi	r2,-1
   267f4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   267f8:	00bffb44 	movi	r2,-19
   267fc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   26800:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   26804:	d1600904 	addi	r5,gp,-32732
   26808:	e13ffd17 	ldw	r4,-12(fp)
   2680c:	00263500 	call	26350 <alt_find_dev>
   26810:	e0bff815 	stw	r2,-32(fp)
   26814:	e0bff817 	ldw	r2,-32(fp)
   26818:	1000051e 	bne	r2,zero,26830 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2681c:	e13ffd17 	ldw	r4,-12(fp)
   26820:	0026e480 	call	26e48 <alt_find_file>
   26824:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   26828:	00800044 	movi	r2,1
   2682c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   26830:	e0bff817 	ldw	r2,-32(fp)
   26834:	10002926 	beq	r2,zero,268dc <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   26838:	e13ff817 	ldw	r4,-32(fp)
   2683c:	0026f500 	call	26f50 <alt_get_fd>
   26840:	e0bff915 	stw	r2,-28(fp)
   26844:	e0bff917 	ldw	r2,-28(fp)
   26848:	1000030e 	bge	r2,zero,26858 <open+0x84>
    {
      status = index;
   2684c:	e0bff917 	ldw	r2,-28(fp)
   26850:	e0bffa15 	stw	r2,-24(fp)
   26854:	00002306 	br	268e4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   26858:	e0bff917 	ldw	r2,-28(fp)
   2685c:	10c00324 	muli	r3,r2,12
   26860:	008000f4 	movhi	r2,3
   26864:	10a14f04 	addi	r2,r2,-31428
   26868:	1885883a 	add	r2,r3,r2
   2686c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   26870:	e0fffe17 	ldw	r3,-8(fp)
   26874:	00900034 	movhi	r2,16384
   26878:	10bfffc4 	addi	r2,r2,-1
   2687c:	1886703a 	and	r3,r3,r2
   26880:	e0bffc17 	ldw	r2,-16(fp)
   26884:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   26888:	e0bffb17 	ldw	r2,-20(fp)
   2688c:	1000051e 	bne	r2,zero,268a4 <open+0xd0>
   26890:	e13ffc17 	ldw	r4,-16(fp)
   26894:	00267100 	call	26710 <alt_file_locked>
   26898:	e0bffa15 	stw	r2,-24(fp)
   2689c:	e0bffa17 	ldw	r2,-24(fp)
   268a0:	10001016 	blt	r2,zero,268e4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   268a4:	e0bff817 	ldw	r2,-32(fp)
   268a8:	10800317 	ldw	r2,12(r2)
   268ac:	10000826 	beq	r2,zero,268d0 <open+0xfc>
   268b0:	e0bff817 	ldw	r2,-32(fp)
   268b4:	10800317 	ldw	r2,12(r2)
   268b8:	e1ffff17 	ldw	r7,-4(fp)
   268bc:	e1bffe17 	ldw	r6,-8(fp)
   268c0:	e17ffd17 	ldw	r5,-12(fp)
   268c4:	e13ffc17 	ldw	r4,-16(fp)
   268c8:	103ee83a 	callr	r2
   268cc:	00000106 	br	268d4 <open+0x100>
   268d0:	0005883a 	mov	r2,zero
   268d4:	e0bffa15 	stw	r2,-24(fp)
   268d8:	00000206 	br	268e4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   268dc:	00bffb44 	movi	r2,-19
   268e0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   268e4:	e0bffa17 	ldw	r2,-24(fp)
   268e8:	1000090e 	bge	r2,zero,26910 <open+0x13c>
  {
    alt_release_fd (index);  
   268ec:	e13ff917 	ldw	r4,-28(fp)
   268f0:	001b9800 	call	1b980 <alt_release_fd>
    ALT_ERRNO = -status;
   268f4:	00266d40 	call	266d4 <alt_get_errno>
   268f8:	1007883a 	mov	r3,r2
   268fc:	e0bffa17 	ldw	r2,-24(fp)
   26900:	0085c83a 	sub	r2,zero,r2
   26904:	18800015 	stw	r2,0(r3)
    return -1;
   26908:	00bfffc4 	movi	r2,-1
   2690c:	00000106 	br	26914 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   26910:	e0bff917 	ldw	r2,-28(fp)
}
   26914:	e037883a 	mov	sp,fp
   26918:	dfc00117 	ldw	ra,4(sp)
   2691c:	df000017 	ldw	fp,0(sp)
   26920:	dec00204 	addi	sp,sp,8
   26924:	f800283a 	ret

00026928 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   26928:	defffa04 	addi	sp,sp,-24
   2692c:	df000515 	stw	fp,20(sp)
   26930:	df000504 	addi	fp,sp,20
   26934:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26938:	0005303a 	rdctl	r2,status
   2693c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26940:	e0fffc17 	ldw	r3,-16(fp)
   26944:	00bfff84 	movi	r2,-2
   26948:	1884703a 	and	r2,r3,r2
   2694c:	1001703a 	wrctl	status,r2
  
  return context;
   26950:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   26954:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   26958:	e0bfff17 	ldw	r2,-4(fp)
   2695c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   26960:	e0bffd17 	ldw	r2,-12(fp)
   26964:	10800017 	ldw	r2,0(r2)
   26968:	e0fffd17 	ldw	r3,-12(fp)
   2696c:	18c00117 	ldw	r3,4(r3)
   26970:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   26974:	e0bffd17 	ldw	r2,-12(fp)
   26978:	10800117 	ldw	r2,4(r2)
   2697c:	e0fffd17 	ldw	r3,-12(fp)
   26980:	18c00017 	ldw	r3,0(r3)
   26984:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   26988:	e0bffd17 	ldw	r2,-12(fp)
   2698c:	e0fffd17 	ldw	r3,-12(fp)
   26990:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   26994:	e0bffd17 	ldw	r2,-12(fp)
   26998:	e0fffd17 	ldw	r3,-12(fp)
   2699c:	10c00015 	stw	r3,0(r2)
   269a0:	e0bffb17 	ldw	r2,-20(fp)
   269a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   269a8:	e0bffe17 	ldw	r2,-8(fp)
   269ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   269b0:	0001883a 	nop
   269b4:	e037883a 	mov	sp,fp
   269b8:	df000017 	ldw	fp,0(sp)
   269bc:	dec00104 	addi	sp,sp,4
   269c0:	f800283a 	ret

000269c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   269c4:	defffb04 	addi	sp,sp,-20
   269c8:	dfc00415 	stw	ra,16(sp)
   269cc:	df000315 	stw	fp,12(sp)
   269d0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   269d4:	d0a02e17 	ldw	r2,-32584(gp)
   269d8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   269dc:	d0a7ec17 	ldw	r2,-24656(gp)
   269e0:	10800044 	addi	r2,r2,1
   269e4:	d0a7ec15 	stw	r2,-24656(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   269e8:	00002e06 	br	26aa4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   269ec:	e0bffd17 	ldw	r2,-12(fp)
   269f0:	10800017 	ldw	r2,0(r2)
   269f4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   269f8:	e0bffd17 	ldw	r2,-12(fp)
   269fc:	10800403 	ldbu	r2,16(r2)
   26a00:	10803fcc 	andi	r2,r2,255
   26a04:	10000426 	beq	r2,zero,26a18 <alt_tick+0x54>
   26a08:	d0a7ec17 	ldw	r2,-24656(gp)
   26a0c:	1000021e 	bne	r2,zero,26a18 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   26a10:	e0bffd17 	ldw	r2,-12(fp)
   26a14:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   26a18:	e0bffd17 	ldw	r2,-12(fp)
   26a1c:	10800217 	ldw	r2,8(r2)
   26a20:	d0e7ec17 	ldw	r3,-24656(gp)
   26a24:	18801d36 	bltu	r3,r2,26a9c <alt_tick+0xd8>
   26a28:	e0bffd17 	ldw	r2,-12(fp)
   26a2c:	10800403 	ldbu	r2,16(r2)
   26a30:	10803fcc 	andi	r2,r2,255
   26a34:	1000191e 	bne	r2,zero,26a9c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   26a38:	e0bffd17 	ldw	r2,-12(fp)
   26a3c:	10800317 	ldw	r2,12(r2)
   26a40:	e0fffd17 	ldw	r3,-12(fp)
   26a44:	18c00517 	ldw	r3,20(r3)
   26a48:	1809883a 	mov	r4,r3
   26a4c:	103ee83a 	callr	r2
   26a50:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   26a54:	e0bfff17 	ldw	r2,-4(fp)
   26a58:	1000031e 	bne	r2,zero,26a68 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   26a5c:	e13ffd17 	ldw	r4,-12(fp)
   26a60:	00269280 	call	26928 <alt_alarm_stop>
   26a64:	00000d06 	br	26a9c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   26a68:	e0bffd17 	ldw	r2,-12(fp)
   26a6c:	10c00217 	ldw	r3,8(r2)
   26a70:	e0bfff17 	ldw	r2,-4(fp)
   26a74:	1887883a 	add	r3,r3,r2
   26a78:	e0bffd17 	ldw	r2,-12(fp)
   26a7c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   26a80:	e0bffd17 	ldw	r2,-12(fp)
   26a84:	10c00217 	ldw	r3,8(r2)
   26a88:	d0a7ec17 	ldw	r2,-24656(gp)
   26a8c:	1880032e 	bgeu	r3,r2,26a9c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   26a90:	e0bffd17 	ldw	r2,-12(fp)
   26a94:	00c00044 	movi	r3,1
   26a98:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   26a9c:	e0bffe17 	ldw	r2,-8(fp)
   26aa0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   26aa4:	e0fffd17 	ldw	r3,-12(fp)
   26aa8:	d0a02e04 	addi	r2,gp,-32584
   26aac:	18bfcf1e 	bne	r3,r2,269ec <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   26ab0:	001cb6c0 	call	1cb6c <OSTimeTick>
}
   26ab4:	0001883a 	nop
   26ab8:	e037883a 	mov	sp,fp
   26abc:	dfc00117 	ldw	ra,4(sp)
   26ac0:	df000017 	ldw	fp,0(sp)
   26ac4:	dec00204 	addi	sp,sp,8
   26ac8:	f800283a 	ret

00026acc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   26acc:	deffff04 	addi	sp,sp,-4
   26ad0:	df000015 	stw	fp,0(sp)
   26ad4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   26ad8:	000170fa 	wrctl	ienable,zero
}
   26adc:	0001883a 	nop
   26ae0:	e037883a 	mov	sp,fp
   26ae4:	df000017 	ldw	fp,0(sp)
   26ae8:	dec00104 	addi	sp,sp,4
   26aec:	f800283a 	ret

00026af0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   26af0:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   26af4:	d0e00217 	ldw	r3,-32760(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   26af8:	d127e517 	ldw	r4,-24684(gp)

      stw ra,  0(sp)
   26afc:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   26b00:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   26b04:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   26b08:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   26b0c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   26b10:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   26b14:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   26b18:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   26b1c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   26b20:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   26b24:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   26b28:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   26b2c:	0026d640 	call	26d64 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   26b30:	d127e017 	ldw	r4,-24704(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   26b34:	d167d807 	ldb	r5,-24736(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   26b38:	d127e515 	stw	r4,-24684(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   26b3c:	d167d845 	stb	r5,-24735(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   26b40:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   26b44:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   26b48:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   26b4c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   26b50:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   26b54:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   26b58:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   26b5c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   26b60:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   26b64:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   26b68:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   26b6c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   26b70:	d0e00215 	stw	r3,-32760(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   26b74:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   26b78:	f800283a 	ret

00026b7c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   26b7c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   26b80:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   26b84:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   26b88:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   26b8c:	0026d640 	call	26d64 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   26b90:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   26b94:	d4a7d645 	stb	r18,-24743(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   26b98:	003fe506 	br	26b30 <OSCtxSw+0x40>

00026b9c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   26b9c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   26ba0:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   26ba4:	10800054 	ori	r2,r2,1
      wrctl status, r2
   26ba8:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   26bac:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   26bb0:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   26bb4:	dec00204 	addi	sp,sp,8

      callr r2
   26bb8:	103ee83a 	callr	r2

      nop
   26bbc:	0001883a 	nop

00026bc0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   26bc0:	defff704 	addi	sp,sp,-36
   26bc4:	dfc00815 	stw	ra,32(sp)
   26bc8:	df000715 	stw	fp,28(sp)
   26bcc:	df000704 	addi	fp,sp,28
   26bd0:	e13ffc15 	stw	r4,-16(fp)
   26bd4:	e17ffd15 	stw	r5,-12(fp)
   26bd8:	e1bffe15 	stw	r6,-8(fp)
   26bdc:	3805883a 	mov	r2,r7
   26be0:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   26be4:	e0fffe17 	ldw	r3,-8(fp)
   26be8:	00bfff04 	movi	r2,-4
   26bec:	1884703a 	and	r2,r3,r2
   26bf0:	10bef704 	addi	r2,r2,-1060
   26bf4:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   26bf8:	01810904 	movi	r6,1060
   26bfc:	000b883a 	mov	r5,zero
   26c00:	e13ff917 	ldw	r4,-28(fp)
   26c04:	0012d600 	call	12d60 <memset>
   26c08:	e0bff917 	ldw	r2,-28(fp)
   26c0c:	10c0bb04 	addi	r3,r2,748
   26c10:	e0bff917 	ldw	r2,-28(fp)
   26c14:	10c00115 	stw	r3,4(r2)
   26c18:	e0bff917 	ldw	r2,-28(fp)
   26c1c:	10c0d504 	addi	r3,r2,852
   26c20:	e0bff917 	ldw	r2,-28(fp)
   26c24:	10c00215 	stw	r3,8(r2)
   26c28:	e0bff917 	ldw	r2,-28(fp)
   26c2c:	10c0ef04 	addi	r3,r2,956
   26c30:	e0bff917 	ldw	r2,-28(fp)
   26c34:	10c00315 	stw	r3,12(r2)
   26c38:	e0fff917 	ldw	r3,-28(fp)
   26c3c:	008000b4 	movhi	r2,2
   26c40:	109f1b04 	addi	r2,r2,31852
   26c44:	18800d15 	stw	r2,52(r3)
   26c48:	e0bff917 	ldw	r2,-28(fp)
   26c4c:	00c00044 	movi	r3,1
   26c50:	10c02915 	stw	r3,164(r2)
   26c54:	10002a15 	stw	zero,168(r2)
   26c58:	e0bff917 	ldw	r2,-28(fp)
   26c5c:	00ccc384 	movi	r3,13070
   26c60:	10c02b0d 	sth	r3,172(r2)
   26c64:	e0bff917 	ldw	r2,-28(fp)
   26c68:	00eaf344 	movi	r3,-21555
   26c6c:	10c02b8d 	sth	r3,174(r2)
   26c70:	e0bff917 	ldw	r2,-28(fp)
   26c74:	00c48d04 	movi	r3,4660
   26c78:	10c02c0d 	sth	r3,176(r2)
   26c7c:	e0bff917 	ldw	r2,-28(fp)
   26c80:	00f99b44 	movi	r3,-6547
   26c84:	10c02c8d 	sth	r3,178(r2)
   26c88:	e0bff917 	ldw	r2,-28(fp)
   26c8c:	00f7bb04 	movi	r3,-8468
   26c90:	10c02d0d 	sth	r3,180(r2)
   26c94:	e0bff917 	ldw	r2,-28(fp)
   26c98:	00c00144 	movi	r3,5
   26c9c:	10c02d8d 	sth	r3,182(r2)
   26ca0:	e0bff917 	ldw	r2,-28(fp)
   26ca4:	00c002c4 	movi	r3,11
   26ca8:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   26cac:	e0bff917 	ldw	r2,-28(fp)
   26cb0:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   26cb4:	e0bffa17 	ldw	r2,-24(fp)
   26cb8:	10bff304 	addi	r2,r2,-52
   26cbc:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   26cc0:	e0bffb17 	ldw	r2,-20(fp)
   26cc4:	10800c04 	addi	r2,r2,48
   26cc8:	e0fffc17 	ldw	r3,-16(fp)
   26ccc:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   26cd0:	e0bffb17 	ldw	r2,-20(fp)
   26cd4:	10800b04 	addi	r2,r2,44
   26cd8:	e0fffd17 	ldw	r3,-12(fp)
   26cdc:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   26ce0:	e0bffb17 	ldw	r2,-20(fp)
   26ce4:	10800a04 	addi	r2,r2,40
   26ce8:	e0fff917 	ldw	r3,-28(fp)
   26cec:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   26cf0:	008000b4 	movhi	r2,2
   26cf4:	109ae704 	addi	r2,r2,27548
   26cf8:	10c00104 	addi	r3,r2,4
   26cfc:	e0bffb17 	ldw	r2,-20(fp)
   26d00:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   26d04:	e0bffb17 	ldw	r2,-20(fp)
}
   26d08:	e037883a 	mov	sp,fp
   26d0c:	dfc00117 	ldw	ra,4(sp)
   26d10:	df000017 	ldw	fp,0(sp)
   26d14:	dec00204 	addi	sp,sp,8
   26d18:	f800283a 	ret

00026d1c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   26d1c:	defffe04 	addi	sp,sp,-8
   26d20:	df000115 	stw	fp,4(sp)
   26d24:	df000104 	addi	fp,sp,4
   26d28:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   26d2c:	0001883a 	nop
   26d30:	e037883a 	mov	sp,fp
   26d34:	df000017 	ldw	fp,0(sp)
   26d38:	dec00104 	addi	sp,sp,4
   26d3c:	f800283a 	ret

00026d40 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   26d40:	defffe04 	addi	sp,sp,-8
   26d44:	df000115 	stw	fp,4(sp)
   26d48:	df000104 	addi	fp,sp,4
   26d4c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   26d50:	0001883a 	nop
   26d54:	e037883a 	mov	sp,fp
   26d58:	df000017 	ldw	fp,0(sp)
   26d5c:	dec00104 	addi	sp,sp,4
   26d60:	f800283a 	ret

00026d64 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   26d64:	deffff04 	addi	sp,sp,-4
   26d68:	df000015 	stw	fp,0(sp)
   26d6c:	d839883a 	mov	fp,sp
}
   26d70:	0001883a 	nop
   26d74:	e037883a 	mov	sp,fp
   26d78:	df000017 	ldw	fp,0(sp)
   26d7c:	dec00104 	addi	sp,sp,4
   26d80:	f800283a 	ret

00026d84 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   26d84:	deffff04 	addi	sp,sp,-4
   26d88:	df000015 	stw	fp,0(sp)
   26d8c:	d839883a 	mov	fp,sp
}
   26d90:	0001883a 	nop
   26d94:	e037883a 	mov	sp,fp
   26d98:	df000017 	ldw	fp,0(sp)
   26d9c:	dec00104 	addi	sp,sp,4
   26da0:	f800283a 	ret

00026da4 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   26da4:	deffff04 	addi	sp,sp,-4
   26da8:	df000015 	stw	fp,0(sp)
   26dac:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   26db0:	0001883a 	nop
   26db4:	e037883a 	mov	sp,fp
   26db8:	df000017 	ldw	fp,0(sp)
   26dbc:	dec00104 	addi	sp,sp,4
   26dc0:	f800283a 	ret

00026dc4 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   26dc4:	deffff04 	addi	sp,sp,-4
   26dc8:	df000015 	stw	fp,0(sp)
   26dcc:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   26dd0:	0001883a 	nop
   26dd4:	e037883a 	mov	sp,fp
   26dd8:	df000017 	ldw	fp,0(sp)
   26ddc:	dec00104 	addi	sp,sp,4
   26de0:	f800283a 	ret

00026de4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   26de4:	deffff04 	addi	sp,sp,-4
   26de8:	df000015 	stw	fp,0(sp)
   26dec:	d839883a 	mov	fp,sp
}
   26df0:	0001883a 	nop
   26df4:	e037883a 	mov	sp,fp
   26df8:	df000017 	ldw	fp,0(sp)
   26dfc:	dec00104 	addi	sp,sp,4
   26e00:	f800283a 	ret

00026e04 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   26e04:	deffff04 	addi	sp,sp,-4
   26e08:	df000015 	stw	fp,0(sp)
   26e0c:	d839883a 	mov	fp,sp
}
   26e10:	0001883a 	nop
   26e14:	e037883a 	mov	sp,fp
   26e18:	df000017 	ldw	fp,0(sp)
   26e1c:	dec00104 	addi	sp,sp,4
   26e20:	f800283a 	ret

00026e24 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   26e24:	defffe04 	addi	sp,sp,-8
   26e28:	df000115 	stw	fp,4(sp)
   26e2c:	df000104 	addi	fp,sp,4
   26e30:	e13fff15 	stw	r4,-4(fp)
}
   26e34:	0001883a 	nop
   26e38:	e037883a 	mov	sp,fp
   26e3c:	df000017 	ldw	fp,0(sp)
   26e40:	dec00104 	addi	sp,sp,4
   26e44:	f800283a 	ret

00026e48 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   26e48:	defffb04 	addi	sp,sp,-20
   26e4c:	dfc00415 	stw	ra,16(sp)
   26e50:	df000315 	stw	fp,12(sp)
   26e54:	df000304 	addi	fp,sp,12
   26e58:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   26e5c:	d0a00717 	ldw	r2,-32740(gp)
   26e60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   26e64:	00003106 	br	26f2c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   26e68:	e0bffd17 	ldw	r2,-12(fp)
   26e6c:	10800217 	ldw	r2,8(r2)
   26e70:	1009883a 	mov	r4,r2
   26e74:	00141640 	call	14164 <strlen>
   26e78:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   26e7c:	e0bffd17 	ldw	r2,-12(fp)
   26e80:	10c00217 	ldw	r3,8(r2)
   26e84:	e0bffe17 	ldw	r2,-8(fp)
   26e88:	10bfffc4 	addi	r2,r2,-1
   26e8c:	1885883a 	add	r2,r3,r2
   26e90:	10800003 	ldbu	r2,0(r2)
   26e94:	10803fcc 	andi	r2,r2,255
   26e98:	1080201c 	xori	r2,r2,128
   26e9c:	10bfe004 	addi	r2,r2,-128
   26ea0:	10800bd8 	cmpnei	r2,r2,47
   26ea4:	1000031e 	bne	r2,zero,26eb4 <alt_find_file+0x6c>
    {
      len -= 1;
   26ea8:	e0bffe17 	ldw	r2,-8(fp)
   26eac:	10bfffc4 	addi	r2,r2,-1
   26eb0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   26eb4:	e0bffe17 	ldw	r2,-8(fp)
   26eb8:	e0ffff17 	ldw	r3,-4(fp)
   26ebc:	1885883a 	add	r2,r3,r2
   26ec0:	10800003 	ldbu	r2,0(r2)
   26ec4:	10803fcc 	andi	r2,r2,255
   26ec8:	1080201c 	xori	r2,r2,128
   26ecc:	10bfe004 	addi	r2,r2,-128
   26ed0:	10800be0 	cmpeqi	r2,r2,47
   26ed4:	1000081e 	bne	r2,zero,26ef8 <alt_find_file+0xb0>
   26ed8:	e0bffe17 	ldw	r2,-8(fp)
   26edc:	e0ffff17 	ldw	r3,-4(fp)
   26ee0:	1885883a 	add	r2,r3,r2
   26ee4:	10800003 	ldbu	r2,0(r2)
   26ee8:	10803fcc 	andi	r2,r2,255
   26eec:	1080201c 	xori	r2,r2,128
   26ef0:	10bfe004 	addi	r2,r2,-128
   26ef4:	10000a1e 	bne	r2,zero,26f20 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   26ef8:	e0bffd17 	ldw	r2,-12(fp)
   26efc:	10800217 	ldw	r2,8(r2)
   26f00:	e0fffe17 	ldw	r3,-8(fp)
   26f04:	180d883a 	mov	r6,r3
   26f08:	e17fff17 	ldw	r5,-4(fp)
   26f0c:	1009883a 	mov	r4,r2
   26f10:	00271a40 	call	271a4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   26f14:	1000021e 	bne	r2,zero,26f20 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   26f18:	e0bffd17 	ldw	r2,-12(fp)
   26f1c:	00000706 	br	26f3c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   26f20:	e0bffd17 	ldw	r2,-12(fp)
   26f24:	10800017 	ldw	r2,0(r2)
   26f28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   26f2c:	e0fffd17 	ldw	r3,-12(fp)
   26f30:	d0a00704 	addi	r2,gp,-32740
   26f34:	18bfcc1e 	bne	r3,r2,26e68 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   26f38:	0005883a 	mov	r2,zero
}
   26f3c:	e037883a 	mov	sp,fp
   26f40:	dfc00117 	ldw	ra,4(sp)
   26f44:	df000017 	ldw	fp,0(sp)
   26f48:	dec00204 	addi	sp,sp,8
   26f4c:	f800283a 	ret

00026f50 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   26f50:	defff904 	addi	sp,sp,-28
   26f54:	dfc00615 	stw	ra,24(sp)
   26f58:	df000515 	stw	fp,20(sp)
   26f5c:	df000504 	addi	fp,sp,20
   26f60:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   26f64:	00bffa04 	movi	r2,-24
   26f68:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   26f6c:	d0a7ce17 	ldw	r2,-24776(gp)
   26f70:	e0bffd15 	stw	r2,-12(fp)
   26f74:	e03ffe0d 	sth	zero,-8(fp)
   26f78:	e0bffe0b 	ldhu	r2,-8(fp)
   26f7c:	e0fffe84 	addi	r3,fp,-6
   26f80:	180d883a 	mov	r6,r3
   26f84:	100b883a 	mov	r5,r2
   26f88:	e13ffd17 	ldw	r4,-12(fp)
   26f8c:	0021e880 	call	21e88 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   26f90:	e03ffb15 	stw	zero,-20(fp)
   26f94:	00001906 	br	26ffc <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   26f98:	008000f4 	movhi	r2,3
   26f9c:	10a14f04 	addi	r2,r2,-31428
   26fa0:	e0fffb17 	ldw	r3,-20(fp)
   26fa4:	18c00324 	muli	r3,r3,12
   26fa8:	10c5883a 	add	r2,r2,r3
   26fac:	10800017 	ldw	r2,0(r2)
   26fb0:	10000f1e 	bne	r2,zero,26ff0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   26fb4:	008000f4 	movhi	r2,3
   26fb8:	10a14f04 	addi	r2,r2,-31428
   26fbc:	e0fffb17 	ldw	r3,-20(fp)
   26fc0:	18c00324 	muli	r3,r3,12
   26fc4:	10c5883a 	add	r2,r2,r3
   26fc8:	e0ffff17 	ldw	r3,-4(fp)
   26fcc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   26fd0:	d0e00b17 	ldw	r3,-32724(gp)
   26fd4:	e0bffb17 	ldw	r2,-20(fp)
   26fd8:	1880020e 	bge	r3,r2,26fe4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   26fdc:	e0bffb17 	ldw	r2,-20(fp)
   26fe0:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   26fe4:	e0bffb17 	ldw	r2,-20(fp)
   26fe8:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   26fec:	00000606 	br	27008 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   26ff0:	e0bffb17 	ldw	r2,-20(fp)
   26ff4:	10800044 	addi	r2,r2,1
   26ff8:	e0bffb15 	stw	r2,-20(fp)
   26ffc:	e0bffb17 	ldw	r2,-20(fp)
   27000:	10800810 	cmplti	r2,r2,32
   27004:	103fe41e 	bne	r2,zero,26f98 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   27008:	d0a7ce17 	ldw	r2,-24776(gp)
   2700c:	1009883a 	mov	r4,r2
   27010:	00222000 	call	22200 <OSSemPost>

  return rc;
   27014:	e0bffc17 	ldw	r2,-16(fp)
}
   27018:	e037883a 	mov	sp,fp
   2701c:	dfc00117 	ldw	ra,4(sp)
   27020:	df000017 	ldw	fp,0(sp)
   27024:	dec00204 	addi	sp,sp,8
   27028:	f800283a 	ret

0002702c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   2702c:	defffb04 	addi	sp,sp,-20
   27030:	df000415 	stw	fp,16(sp)
   27034:	df000404 	addi	fp,sp,16
   27038:	e13ffe15 	stw	r4,-8(fp)
   2703c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   27040:	e0bfff17 	ldw	r2,-4(fp)
   27044:	10840070 	cmpltui	r2,r2,4097
   27048:	1000021e 	bne	r2,zero,27054 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   2704c:	00840004 	movi	r2,4096
   27050:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   27054:	e0fffe17 	ldw	r3,-8(fp)
   27058:	e0bfff17 	ldw	r2,-4(fp)
   2705c:	1885883a 	add	r2,r3,r2
   27060:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   27064:	e0bffe17 	ldw	r2,-8(fp)
   27068:	e0bffc15 	stw	r2,-16(fp)
   2706c:	00000506 	br	27084 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   27070:	e0bffc17 	ldw	r2,-16(fp)
   27074:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   27078:	e0bffc17 	ldw	r2,-16(fp)
   2707c:	10800804 	addi	r2,r2,32
   27080:	e0bffc15 	stw	r2,-16(fp)
   27084:	e0fffc17 	ldw	r3,-16(fp)
   27088:	e0bffd17 	ldw	r2,-12(fp)
   2708c:	18bff836 	bltu	r3,r2,27070 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   27090:	e0bffe17 	ldw	r2,-8(fp)
   27094:	108007cc 	andi	r2,r2,31
   27098:	10000226 	beq	r2,zero,270a4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   2709c:	e0bffc17 	ldw	r2,-16(fp)
   270a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   270a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   270a8:	0001883a 	nop
   270ac:	e037883a 	mov	sp,fp
   270b0:	df000017 	ldw	fp,0(sp)
   270b4:	dec00104 	addi	sp,sp,4
   270b8:	f800283a 	ret

000270bc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   270bc:	defffe04 	addi	sp,sp,-8
   270c0:	df000115 	stw	fp,4(sp)
   270c4:	df000104 	addi	fp,sp,4
   270c8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   270cc:	e0bfff17 	ldw	r2,-4(fp)
   270d0:	10bffe84 	addi	r2,r2,-6
   270d4:	10c00428 	cmpgeui	r3,r2,16
   270d8:	18001a1e 	bne	r3,zero,27144 <alt_exception_cause_generated_bad_addr+0x88>
   270dc:	100690ba 	slli	r3,r2,2
   270e0:	008000b4 	movhi	r2,2
   270e4:	109c3d04 	addi	r2,r2,28916
   270e8:	1885883a 	add	r2,r3,r2
   270ec:	10800017 	ldw	r2,0(r2)
   270f0:	1000683a 	jmp	r2
   270f4:	00027134 	movhi	zero,2500
   270f8:	00027134 	movhi	zero,2500
   270fc:	00027144 	movi	zero,2501
   27100:	00027144 	movi	zero,2501
   27104:	00027144 	movi	zero,2501
   27108:	00027134 	movhi	zero,2500
   2710c:	0002713c 	xorhi	zero,zero,2500
   27110:	00027144 	movi	zero,2501
   27114:	00027134 	movhi	zero,2500
   27118:	00027134 	movhi	zero,2500
   2711c:	00027144 	movi	zero,2501
   27120:	00027134 	movhi	zero,2500
   27124:	0002713c 	xorhi	zero,zero,2500
   27128:	00027144 	movi	zero,2501
   2712c:	00027144 	movi	zero,2501
   27130:	00027134 	movhi	zero,2500
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   27134:	00800044 	movi	r2,1
   27138:	00000306 	br	27148 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   2713c:	0005883a 	mov	r2,zero
   27140:	00000106 	br	27148 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   27144:	0005883a 	mov	r2,zero
  }
}
   27148:	e037883a 	mov	sp,fp
   2714c:	df000017 	ldw	fp,0(sp)
   27150:	dec00104 	addi	sp,sp,4
   27154:	f800283a 	ret

00027158 <atexit>:
   27158:	200b883a 	mov	r5,r4
   2715c:	000f883a 	mov	r7,zero
   27160:	000d883a 	mov	r6,zero
   27164:	0009883a 	mov	r4,zero
   27168:	00272201 	jmpi	27220 <__register_exitproc>

0002716c <exit>:
   2716c:	defffe04 	addi	sp,sp,-8
   27170:	000b883a 	mov	r5,zero
   27174:	dc000015 	stw	r16,0(sp)
   27178:	dfc00115 	stw	ra,4(sp)
   2717c:	2021883a 	mov	r16,r4
   27180:	00273380 	call	27338 <__call_exitprocs>
   27184:	008000f4 	movhi	r2,3
   27188:	10a66e04 	addi	r2,r2,-26184
   2718c:	11000017 	ldw	r4,0(r2)
   27190:	20800f17 	ldw	r2,60(r4)
   27194:	10000126 	beq	r2,zero,2719c <exit+0x30>
   27198:	103ee83a 	callr	r2
   2719c:	8009883a 	mov	r4,r16
   271a0:	00274b80 	call	274b8 <_exit>

000271a4 <memcmp>:
   271a4:	01c000c4 	movi	r7,3
   271a8:	3980192e 	bgeu	r7,r6,27210 <memcmp+0x6c>
   271ac:	2144b03a 	or	r2,r4,r5
   271b0:	11c4703a 	and	r2,r2,r7
   271b4:	10000f26 	beq	r2,zero,271f4 <memcmp+0x50>
   271b8:	20800003 	ldbu	r2,0(r4)
   271bc:	28c00003 	ldbu	r3,0(r5)
   271c0:	10c0151e 	bne	r2,r3,27218 <memcmp+0x74>
   271c4:	31bfff84 	addi	r6,r6,-2
   271c8:	01ffffc4 	movi	r7,-1
   271cc:	00000406 	br	271e0 <memcmp+0x3c>
   271d0:	20800003 	ldbu	r2,0(r4)
   271d4:	28c00003 	ldbu	r3,0(r5)
   271d8:	31bfffc4 	addi	r6,r6,-1
   271dc:	10c00e1e 	bne	r2,r3,27218 <memcmp+0x74>
   271e0:	21000044 	addi	r4,r4,1
   271e4:	29400044 	addi	r5,r5,1
   271e8:	31fff91e 	bne	r6,r7,271d0 <memcmp+0x2c>
   271ec:	0005883a 	mov	r2,zero
   271f0:	f800283a 	ret
   271f4:	20c00017 	ldw	r3,0(r4)
   271f8:	28800017 	ldw	r2,0(r5)
   271fc:	18bfee1e 	bne	r3,r2,271b8 <memcmp+0x14>
   27200:	31bfff04 	addi	r6,r6,-4
   27204:	21000104 	addi	r4,r4,4
   27208:	29400104 	addi	r5,r5,4
   2720c:	39bff936 	bltu	r7,r6,271f4 <memcmp+0x50>
   27210:	303fe91e 	bne	r6,zero,271b8 <memcmp+0x14>
   27214:	003ff506 	br	271ec <memcmp+0x48>
   27218:	10c5c83a 	sub	r2,r2,r3
   2721c:	f800283a 	ret

00027220 <__register_exitproc>:
   27220:	defffa04 	addi	sp,sp,-24
   27224:	dc000315 	stw	r16,12(sp)
   27228:	040000f4 	movhi	r16,3
   2722c:	84266e04 	addi	r16,r16,-26184
   27230:	80c00017 	ldw	r3,0(r16)
   27234:	dc400415 	stw	r17,16(sp)
   27238:	dfc00515 	stw	ra,20(sp)
   2723c:	18805217 	ldw	r2,328(r3)
   27240:	2023883a 	mov	r17,r4
   27244:	10003726 	beq	r2,zero,27324 <__register_exitproc+0x104>
   27248:	10c00117 	ldw	r3,4(r2)
   2724c:	010007c4 	movi	r4,31
   27250:	20c00e16 	blt	r4,r3,2728c <__register_exitproc+0x6c>
   27254:	1a000044 	addi	r8,r3,1
   27258:	8800221e 	bne	r17,zero,272e4 <__register_exitproc+0xc4>
   2725c:	18c00084 	addi	r3,r3,2
   27260:	18c7883a 	add	r3,r3,r3
   27264:	18c7883a 	add	r3,r3,r3
   27268:	12000115 	stw	r8,4(r2)
   2726c:	10c7883a 	add	r3,r2,r3
   27270:	19400015 	stw	r5,0(r3)
   27274:	0005883a 	mov	r2,zero
   27278:	dfc00517 	ldw	ra,20(sp)
   2727c:	dc400417 	ldw	r17,16(sp)
   27280:	dc000317 	ldw	r16,12(sp)
   27284:	dec00604 	addi	sp,sp,24
   27288:	f800283a 	ret
   2728c:	00800034 	movhi	r2,0
   27290:	10800004 	addi	r2,r2,0
   27294:	10002626 	beq	r2,zero,27330 <__register_exitproc+0x110>
   27298:	01006404 	movi	r4,400
   2729c:	d9400015 	stw	r5,0(sp)
   272a0:	d9800115 	stw	r6,4(sp)
   272a4:	d9c00215 	stw	r7,8(sp)
   272a8:	00000000 	call	0 <__alt_mem_SDRAM>
   272ac:	d9400017 	ldw	r5,0(sp)
   272b0:	d9800117 	ldw	r6,4(sp)
   272b4:	d9c00217 	ldw	r7,8(sp)
   272b8:	10001d26 	beq	r2,zero,27330 <__register_exitproc+0x110>
   272bc:	81000017 	ldw	r4,0(r16)
   272c0:	10000115 	stw	zero,4(r2)
   272c4:	02000044 	movi	r8,1
   272c8:	22405217 	ldw	r9,328(r4)
   272cc:	0007883a 	mov	r3,zero
   272d0:	12400015 	stw	r9,0(r2)
   272d4:	20805215 	stw	r2,328(r4)
   272d8:	10006215 	stw	zero,392(r2)
   272dc:	10006315 	stw	zero,396(r2)
   272e0:	883fde26 	beq	r17,zero,2725c <__register_exitproc+0x3c>
   272e4:	18c9883a 	add	r4,r3,r3
   272e8:	2109883a 	add	r4,r4,r4
   272ec:	1109883a 	add	r4,r2,r4
   272f0:	21802215 	stw	r6,136(r4)
   272f4:	01800044 	movi	r6,1
   272f8:	12406217 	ldw	r9,392(r2)
   272fc:	30cc983a 	sll	r6,r6,r3
   27300:	4992b03a 	or	r9,r9,r6
   27304:	12406215 	stw	r9,392(r2)
   27308:	21c04215 	stw	r7,264(r4)
   2730c:	01000084 	movi	r4,2
   27310:	893fd21e 	bne	r17,r4,2725c <__register_exitproc+0x3c>
   27314:	11006317 	ldw	r4,396(r2)
   27318:	218cb03a 	or	r6,r4,r6
   2731c:	11806315 	stw	r6,396(r2)
   27320:	003fce06 	br	2725c <__register_exitproc+0x3c>
   27324:	18805304 	addi	r2,r3,332
   27328:	18805215 	stw	r2,328(r3)
   2732c:	003fc606 	br	27248 <__register_exitproc+0x28>
   27330:	00bfffc4 	movi	r2,-1
   27334:	003fd006 	br	27278 <__register_exitproc+0x58>

00027338 <__call_exitprocs>:
   27338:	defff504 	addi	sp,sp,-44
   2733c:	df000915 	stw	fp,36(sp)
   27340:	dd400615 	stw	r21,24(sp)
   27344:	dc800315 	stw	r18,12(sp)
   27348:	dfc00a15 	stw	ra,40(sp)
   2734c:	ddc00815 	stw	r23,32(sp)
   27350:	dd800715 	stw	r22,28(sp)
   27354:	dd000515 	stw	r20,20(sp)
   27358:	dcc00415 	stw	r19,16(sp)
   2735c:	dc400215 	stw	r17,8(sp)
   27360:	dc000115 	stw	r16,4(sp)
   27364:	d9000015 	stw	r4,0(sp)
   27368:	2839883a 	mov	fp,r5
   2736c:	04800044 	movi	r18,1
   27370:	057fffc4 	movi	r21,-1
   27374:	008000f4 	movhi	r2,3
   27378:	10a66e04 	addi	r2,r2,-26184
   2737c:	12000017 	ldw	r8,0(r2)
   27380:	45005217 	ldw	r20,328(r8)
   27384:	44c05204 	addi	r19,r8,328
   27388:	a0001c26 	beq	r20,zero,273fc <__call_exitprocs+0xc4>
   2738c:	a0800117 	ldw	r2,4(r20)
   27390:	15ffffc4 	addi	r23,r2,-1
   27394:	b8000d16 	blt	r23,zero,273cc <__call_exitprocs+0x94>
   27398:	14000044 	addi	r16,r2,1
   2739c:	8421883a 	add	r16,r16,r16
   273a0:	8421883a 	add	r16,r16,r16
   273a4:	84402004 	addi	r17,r16,128
   273a8:	a463883a 	add	r17,r20,r17
   273ac:	a421883a 	add	r16,r20,r16
   273b0:	e0001e26 	beq	fp,zero,2742c <__call_exitprocs+0xf4>
   273b4:	80804017 	ldw	r2,256(r16)
   273b8:	e0801c26 	beq	fp,r2,2742c <__call_exitprocs+0xf4>
   273bc:	bdffffc4 	addi	r23,r23,-1
   273c0:	843fff04 	addi	r16,r16,-4
   273c4:	8c7fff04 	addi	r17,r17,-4
   273c8:	bd7ff91e 	bne	r23,r21,273b0 <__call_exitprocs+0x78>
   273cc:	00800034 	movhi	r2,0
   273d0:	10800004 	addi	r2,r2,0
   273d4:	10000926 	beq	r2,zero,273fc <__call_exitprocs+0xc4>
   273d8:	a0800117 	ldw	r2,4(r20)
   273dc:	1000301e 	bne	r2,zero,274a0 <__call_exitprocs+0x168>
   273e0:	a0800017 	ldw	r2,0(r20)
   273e4:	10003226 	beq	r2,zero,274b0 <__call_exitprocs+0x178>
   273e8:	a009883a 	mov	r4,r20
   273ec:	98800015 	stw	r2,0(r19)
   273f0:	00000000 	call	0 <__alt_mem_SDRAM>
   273f4:	9d000017 	ldw	r20,0(r19)
   273f8:	a03fe41e 	bne	r20,zero,2738c <__call_exitprocs+0x54>
   273fc:	dfc00a17 	ldw	ra,40(sp)
   27400:	df000917 	ldw	fp,36(sp)
   27404:	ddc00817 	ldw	r23,32(sp)
   27408:	dd800717 	ldw	r22,28(sp)
   2740c:	dd400617 	ldw	r21,24(sp)
   27410:	dd000517 	ldw	r20,20(sp)
   27414:	dcc00417 	ldw	r19,16(sp)
   27418:	dc800317 	ldw	r18,12(sp)
   2741c:	dc400217 	ldw	r17,8(sp)
   27420:	dc000117 	ldw	r16,4(sp)
   27424:	dec00b04 	addi	sp,sp,44
   27428:	f800283a 	ret
   2742c:	a0800117 	ldw	r2,4(r20)
   27430:	80c00017 	ldw	r3,0(r16)
   27434:	10bfffc4 	addi	r2,r2,-1
   27438:	15c01426 	beq	r2,r23,2748c <__call_exitprocs+0x154>
   2743c:	80000015 	stw	zero,0(r16)
   27440:	183fde26 	beq	r3,zero,273bc <__call_exitprocs+0x84>
   27444:	95c8983a 	sll	r4,r18,r23
   27448:	a0806217 	ldw	r2,392(r20)
   2744c:	a5800117 	ldw	r22,4(r20)
   27450:	2084703a 	and	r2,r4,r2
   27454:	10000b26 	beq	r2,zero,27484 <__call_exitprocs+0x14c>
   27458:	a0806317 	ldw	r2,396(r20)
   2745c:	2088703a 	and	r4,r4,r2
   27460:	20000c1e 	bne	r4,zero,27494 <__call_exitprocs+0x15c>
   27464:	89400017 	ldw	r5,0(r17)
   27468:	d9000017 	ldw	r4,0(sp)
   2746c:	183ee83a 	callr	r3
   27470:	a0800117 	ldw	r2,4(r20)
   27474:	15bfbf1e 	bne	r2,r22,27374 <__call_exitprocs+0x3c>
   27478:	98800017 	ldw	r2,0(r19)
   2747c:	153fcf26 	beq	r2,r20,273bc <__call_exitprocs+0x84>
   27480:	003fbc06 	br	27374 <__call_exitprocs+0x3c>
   27484:	183ee83a 	callr	r3
   27488:	003ff906 	br	27470 <__call_exitprocs+0x138>
   2748c:	a5c00115 	stw	r23,4(r20)
   27490:	003feb06 	br	27440 <__call_exitprocs+0x108>
   27494:	89000017 	ldw	r4,0(r17)
   27498:	183ee83a 	callr	r3
   2749c:	003ff406 	br	27470 <__call_exitprocs+0x138>
   274a0:	a0800017 	ldw	r2,0(r20)
   274a4:	a027883a 	mov	r19,r20
   274a8:	1029883a 	mov	r20,r2
   274ac:	003fb606 	br	27388 <__call_exitprocs+0x50>
   274b0:	0005883a 	mov	r2,zero
   274b4:	003ffb06 	br	274a4 <__call_exitprocs+0x16c>

000274b8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   274b8:	defffd04 	addi	sp,sp,-12
   274bc:	df000215 	stw	fp,8(sp)
   274c0:	df000204 	addi	fp,sp,8
   274c4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   274c8:	d027d645 	stb	zero,-24743(gp)
   274cc:	e0bfff17 	ldw	r2,-4(fp)
   274d0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   274d4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   274d8:	10000226 	beq	r2,zero,274e4 <_exit+0x2c>
    ALT_SIM_FAIL();
   274dc:	002af070 	cmpltui	zero,zero,43969
   274e0:	00000106 	br	274e8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   274e4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   274e8:	003fff06 	br	274e8 <_exit+0x30>
